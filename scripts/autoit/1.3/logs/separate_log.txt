2025-05-02 14:23:20,479 - DEBUG - Logging initialized
2025-05-02 14:23:20,495 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song12.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR-MDX-NET-Inst_Main.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 14:23:20,495 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 14:23:20,495 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song12.flac
2025-05-02 14:23:20,495 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 14:23:20,495 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song12.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR-MDX-NET-Inst_Main.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 14:23:20,495 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\UVR-MDX-NET-Inst_Main.onnx
2025-05-02 14:23:20,612 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song12.flac
2025-05-02 14:23:20,747 - DEBUG - Audio loaded: shape=(2, 7261212), sample_rate=44100
2025-05-02 14:23:20,747 - DEBUG - Demixing audio: samples=7261212, margin=44100, chunk_size=661500
2025-05-02 14:23:20,774 - DEBUG - Created 11 chunks for demixing
2025-05-02 14:23:20,788 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:23:33,036 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:23:56,377 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:24:16,050 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:24:36,607 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:24:58,242 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:25:19,384 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:25:39,191 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:25:57,852 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:26:16,249 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:26:34,921 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:26:53,455 - DEBUG - Demixing complete
2025-05-02 14:26:53,926 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song12_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song12_no_vocals.wav
2025-05-02 14:29:10,205 - DEBUG - Logging initialized
2025-05-02 14:40:45,832 - DEBUG - Logging initialized
2025-05-02 14:40:53,205 - DEBUG - Logging initialized
2025-05-02 14:43:31,426 - DEBUG - Logging initialized
2025-05-02 14:43:31,426 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song12.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 2048, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 14:43:31,426 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 14:43:31,426 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song12.flac
2025-05-02 14:43:31,426 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 14:43:31,426 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song12.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 2048, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 14:43:31,426 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_bass.onnx
2025-05-02 14:43:31,531 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song12.flac
2025-05-02 14:43:31,664 - DEBUG - Audio loaded: shape=(2, 7261212), sample_rate=44100
2025-05-02 14:43:31,664 - DEBUG - Demixing audio: samples=7261212, margin=44100, chunk_size=90316800
2025-05-02 14:43:31,678 - DEBUG - Created 1 chunks for demixing
2025-05-02 14:43:31,765 - DEBUG - Processing chunk: 29 waves
2025-05-02 14:48:36,063 - DEBUG - Logging initialized
2025-05-02 14:48:36,063 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song12.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 128, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 14:48:36,063 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 14:48:36,063 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song12.flac
2025-05-02 14:48:36,109 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 14:48:36,109 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song12.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 128, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 14:48:36,109 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_bass.onnx
2025-05-02 14:48:36,225 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song12.flac
2025-05-02 14:48:36,408 - DEBUG - Audio loaded: shape=(2, 7261212), sample_rate=44100
2025-05-02 14:48:36,408 - DEBUG - Demixing audio: samples=7261212, margin=44100, chunk_size=5644800
2025-05-02 14:48:36,422 - DEBUG - Created 2 chunks for demixing
2025-05-02 14:48:36,507 - DEBUG - Processing chunk: 23 waves
2025-05-02 14:57:00,380 - DEBUG - Logging initialized
2025-05-02 14:57:00,380 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song11.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR_MDXNET_KARA.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 14:57:00,380 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 14:57:00,380 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song11.flac
2025-05-02 14:57:00,412 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 14:57:00,412 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song11.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR_MDXNET_KARA.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 14:57:00,412 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\UVR_MDXNET_KARA.onnx
2025-05-02 14:57:00,512 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song11.flac
2025-05-02 14:57:00,786 - ERROR - Failed to load audio C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song11.flac: [Errno 2] No such file or directory: 'C:\\Git\\3DAudioStudio\\scripts\\autoit\\1.3\\songs\\song11.flac'
2025-05-02 14:57:00,786 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song11.flac: [Errno 2] No such file or directory: 'C:\\Git\\3DAudioStudio\\scripts\\autoit\\1.3\\songs\\song11.flac'
2025-05-02 14:57:17,862 - DEBUG - Logging initialized
2025-05-02 14:57:17,866 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR_MDXNET_KARA.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 14:57:17,866 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 14:57:17,866 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 14:57:17,866 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 14:57:17,866 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR_MDXNET_KARA.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 14:57:17,866 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\UVR_MDXNET_KARA.onnx
2025-05-02 14:57:17,942 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 14:57:18,209 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 14:57:18,209 - DEBUG - Demixing audio: samples=13371120, margin=44100, chunk_size=661500
2025-05-02 14:57:18,244 - DEBUG - Created 21 chunks for demixing
2025-05-02 14:57:18,260 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:57:24,380 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:57:30,260 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:57:35,763 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:57:41,221 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:57:46,644 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:57:52,125 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:57:57,631 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:58:03,135 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:58:08,635 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:58:14,105 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:58:19,578 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:58:25,078 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:58:30,738 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:58:36,652 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:58:42,799 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:58:48,666 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:58:54,722 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:59:00,844 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:59:06,996 - DEBUG - Processing chunk: 3 waves
2025-05-02 14:59:13,235 - DEBUG - Processing chunk: 1 waves
2025-05-02 14:59:15,364 - DEBUG - Demixing complete
2025-05-02 14:59:15,852 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_no_vocals.wav
2025-05-02 15:01:13,321 - DEBUG - Logging initialized
2025-05-02 15:16:08,455 - DEBUG - Logging initialized
2025-05-02 15:16:22,185 - DEBUG - Logging initialized
2025-05-02 15:16:22,186 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song12.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('44100'), 'denoise': False, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 15:16:22,186 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 15:16:22,186 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song12.flac
2025-05-02 15:16:22,189 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 15:16:22,189 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song12.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('44100'), 'denoise': False, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 15:16:22,190 - INFO - CUDA not available, using CPUExecutionProvider for model: 44100
2025-05-02 15:16:22,216 - ERROR - Failed to load model 44100: [ONNXRuntimeError] : 3 : NO_SUCHFILE : Load model from 44100 failed:Load model 44100 failed. File doesn't exist
2025-05-02 15:16:22,217 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song12.flac: [ONNXRuntimeError] : 3 : NO_SUCHFILE : Load model from 44100 failed:Load model 44100 failed. File doesn't exist
2025-05-02 15:16:39,999 - DEBUG - Logging initialized
2025-05-02 15:16:59,832 - DEBUG - Logging initialized
2025-05-02 15:16:59,834 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song12.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('44100'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 15:16:59,834 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 15:16:59,835 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song12.flac
2025-05-02 15:16:59,838 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 15:16:59,838 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song12.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('44100'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 15:16:59,838 - INFO - CUDA not available, using CPUExecutionProvider for model: 44100
2025-05-02 15:16:59,845 - ERROR - Failed to load model 44100: [ONNXRuntimeError] : 3 : NO_SUCHFILE : Load model from 44100 failed:Load model 44100 failed. File doesn't exist
2025-05-02 15:16:59,845 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song12.flac: [ONNXRuntimeError] : 3 : NO_SUCHFILE : Load model from 44100 failed:Load model 44100 failed. File doesn't exist
2025-05-02 15:17:36,855 - DEBUG - Logging initialized
2025-05-02 15:17:56,995 - DEBUG - Logging initialized
2025-05-02 15:17:56,997 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song12.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR-MDX-NET-Inst_Main.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 15:17:56,997 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 15:17:56,997 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song12.flac
2025-05-02 15:17:57,000 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 15:17:57,001 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song12.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR-MDX-NET-Inst_Main.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 15:17:57,001 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\UVR-MDX-NET-Inst_Main.onnx
2025-05-02 15:17:57,139 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song12.flac
2025-05-02 15:17:57,285 - DEBUG - Audio loaded: shape=(2, 7261212), sample_rate=44100
2025-05-02 15:17:57,286 - DEBUG - Demixing audio: samples=7261212, margin=44100, chunk_size=661500
2025-05-02 15:17:57,300 - DEBUG - Created 11 chunks for demixing
2025-05-02 15:17:57,312 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:18:08,713 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:18:19,198 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:18:29,679 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:18:40,247 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:18:50,919 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:19:02,432 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:19:14,823 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:19:27,041 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:19:38,321 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:19:49,983 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:20:02,639 - DEBUG - Demixing complete
2025-05-02 15:20:03,014 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song12_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song12_no_vocals.wav
2025-05-02 15:31:43,127 - DEBUG - Logging initialized
2025-05-02 15:31:43,127 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song1.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_a_drums.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 15:31:43,127 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 15:31:43,127 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song1.flac
2025-05-02 15:31:43,143 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 15:31:43,143 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song1.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_a_drums.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 15:31:43,143 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_a_drums.onnx
2025-05-02 15:31:43,223 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song1.flac
2025-05-02 15:31:43,444 - DEBUG - Audio loaded: shape=(2, 12075756), sample_rate=44100
2025-05-02 15:31:43,444 - DEBUG - Demixing audio: samples=12075756, margin=44100, chunk_size=661500
2025-05-02 15:31:43,476 - DEBUG - Created 19 chunks for demixing
2025-05-02 15:31:43,476 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:31:43,508 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song1.flac: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 256 Expected: 512
 Please fix either the inputs/outputs or the model.
2025-05-02 15:32:17,039 - DEBUG - Logging initialized
2025-05-02 15:32:17,039 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song1.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR-MDX-NET-Inst_Main.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 15:32:17,039 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 15:32:17,039 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song1.flac
2025-05-02 15:32:17,039 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 15:32:17,039 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song1.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR-MDX-NET-Inst_Main.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 15:32:17,039 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\UVR-MDX-NET-Inst_Main.onnx
2025-05-02 15:32:17,150 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song1.flac
2025-05-02 15:32:17,372 - DEBUG - Audio loaded: shape=(2, 12075756), sample_rate=44100
2025-05-02 15:32:17,372 - DEBUG - Demixing audio: samples=12075756, margin=44100, chunk_size=661500
2025-05-02 15:32:17,388 - DEBUG - Created 19 chunks for demixing
2025-05-02 15:32:17,404 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:32:28,678 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:32:39,305 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:32:50,134 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:33:00,807 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:33:12,084 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:33:22,886 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:33:33,675 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:33:44,355 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:33:55,866 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:34:06,490 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:34:17,909 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:34:29,278 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:34:39,871 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:34:50,719 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:35:02,559 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:35:15,203 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:35:27,080 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:35:38,467 - DEBUG - Processing chunk: 1 waves
2025-05-02 15:35:42,369 - DEBUG - Demixing complete
2025-05-02 15:35:42,823 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song1_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song1_no_vocals.wav
2025-05-02 15:40:16,604 - DEBUG - Logging initialized
2025-05-02 15:40:16,604 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR_MDXNET_KARA_2.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 15:40:16,604 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 15:40:16,604 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 15:40:16,609 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 15:40:16,609 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR_MDXNET_KARA_2.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 15:40:16,609 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\UVR_MDXNET_KARA_2.onnx
2025-05-02 15:40:16,749 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 15:40:17,001 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 15:40:17,006 - DEBUG - Demixing audio: samples=13371120, margin=44100, chunk_size=661500
2025-05-02 15:40:17,032 - DEBUG - Created 21 chunks for demixing
2025-05-02 15:40:17,042 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:40:31,308 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:40:50,526 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:41:09,288 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:41:26,089 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:41:38,353 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:41:50,334 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:42:02,622 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:42:15,458 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:42:28,715 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:42:42,917 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:42:59,770 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:43:17,430 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:43:35,832 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:43:57,174 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:44:17,853 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:44:37,601 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:44:57,802 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:45:17,582 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:45:39,748 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:46:00,190 - DEBUG - Processing chunk: 1 waves
2025-05-02 15:46:07,012 - DEBUG - Demixing complete
2025-05-02 15:46:07,913 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_no_vocals.wav
2025-05-02 15:47:07,505 - DEBUG - Logging initialized
2025-05-02 15:47:07,507 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_a_vocals.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 15:47:07,507 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 15:47:07,507 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 15:47:07,512 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 15:47:07,512 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_a_vocals.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 15:47:07,512 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_a_vocals.onnx
2025-05-02 15:47:07,629 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 15:47:08,118 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 15:47:08,119 - DEBUG - Demixing audio: samples=13371120, margin=44100, chunk_size=661500
2025-05-02 15:47:08,166 - DEBUG - Created 21 chunks for demixing
2025-05-02 15:47:08,181 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:47:08,204 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 256 Expected: 512
 Please fix either the inputs/outputs or the model.
2025-05-02 15:47:19,848 - DEBUG - Logging initialized
2025-05-02 15:47:19,850 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_a_drums.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 15:47:19,850 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 15:47:19,850 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 15:47:19,855 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 15:47:19,855 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_a_drums.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 15:47:19,855 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_a_drums.onnx
2025-05-02 15:47:19,964 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 15:47:20,491 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 15:47:20,491 - DEBUG - Demixing audio: samples=13371120, margin=44100, chunk_size=661500
2025-05-02 15:47:20,540 - DEBUG - Created 21 chunks for demixing
2025-05-02 15:47:20,555 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:47:20,578 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 256 Expected: 512
 Please fix either the inputs/outputs or the model.
2025-05-02 15:48:02,039 - DEBUG - Logging initialized
2025-05-02 15:48:02,040 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_a_other.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 15:48:02,040 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 15:48:02,040 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 15:48:02,045 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 15:48:02,045 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_a_other.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 15:48:02,045 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_a_other.onnx
2025-05-02 15:48:02,162 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 15:48:02,647 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 15:48:02,647 - DEBUG - Demixing audio: samples=13371120, margin=44100, chunk_size=661500
2025-05-02 15:48:02,692 - DEBUG - Created 21 chunks for demixing
2025-05-02 15:48:02,708 - DEBUG - Processing chunk: 3 waves
2025-05-02 15:48:02,732 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 256 Expected: 512
 Please fix either the inputs/outputs or the model.
2025-05-02 16:11:17,882 - DEBUG - Logging initialized
2025-05-02 16:11:17,886 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song12.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 128, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 512}
2025-05-02 16:11:17,886 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 16:11:17,886 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song12.flac
2025-05-02 16:11:17,886 - DEBUG - ConvTDFNet initialized: dim_f=512, dim_t=256, n_fft=6144, hop=1024
2025-05-02 16:11:17,886 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song12.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 128, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 512}
2025-05-02 16:11:17,886 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_bass.onnx
2025-05-02 16:11:17,977 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song12.flac
2025-05-02 16:11:18,107 - DEBUG - Audio loaded: shape=(2, 7261212), sample_rate=44100
2025-05-02 16:11:18,107 - DEBUG - Demixing audio: samples=7261212, margin=44100, chunk_size=5644800
2025-05-02 16:11:18,127 - DEBUG - Created 2 chunks for demixing
2025-05-02 16:11:18,185 - DEBUG - Processing chunk: 23 waves
2025-05-02 16:11:18,283 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song12.flac: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 2 Got: 512 Expected: 2048
 Please fix either the inputs/outputs or the model.
2025-05-02 16:13:46,914 - DEBUG - Logging initialized
2025-05-02 16:13:46,914 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song12.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 128, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 16:13:46,914 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 16:13:46,914 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song12.flac
2025-05-02 16:13:46,914 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 16:13:46,914 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song12.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 128, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 16:13:46,922 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_bass.onnx
2025-05-02 16:13:46,989 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song12.flac
2025-05-02 16:13:47,116 - DEBUG - Audio loaded: shape=(2, 7261212), sample_rate=44100
2025-05-02 16:13:47,116 - DEBUG - Demixing audio: samples=7261212, margin=44100, chunk_size=5644800
2025-05-02 16:13:47,134 - DEBUG - Created 2 chunks for demixing
2025-05-02 16:13:47,200 - DEBUG - Processing chunk: 23 waves
2025-05-02 16:20:46,064 - DEBUG - Logging initialized
2025-05-02 16:20:46,065 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_a_drums.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 16:20:46,065 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 16:20:46,065 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 16:20:46,090 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=512, n_fft=6144, hop=1024
2025-05-02 16:20:46,090 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_a_drums.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 16:20:46,090 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_a_drums.onnx
2025-05-02 16:20:46,193 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 16:20:46,456 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 16:20:46,456 - DEBUG - Demixing audio: samples=13371120, margin=44100, chunk_size=661500
2025-05-02 16:20:46,487 - DEBUG - Created 21 chunks for demixing
2025-05-02 16:20:46,506 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:20:55,119 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:21:03,024 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:21:10,621 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:21:18,220 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:21:25,773 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:21:33,520 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:21:42,453 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:21:51,395 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:22:00,412 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:22:09,478 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:22:19,327 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:22:28,871 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:22:38,519 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:22:48,304 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:22:58,449 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:23:08,586 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:23:19,048 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:23:29,492 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:23:40,684 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:23:52,040 - DEBUG - Processing chunk: 1 waves
2025-05-02 16:23:57,941 - DEBUG - Demixing complete
2025-05-02 16:23:58,602 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_no_vocals.wav
2025-05-02 16:51:15,037 - DEBUG - Logging initialized
2025-05-02 16:51:15,039 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_a_other.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 16:51:15,039 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 16:51:15,039 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 16:51:15,043 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=512, n_fft=6144, hop=1024
2025-05-02 16:51:15,043 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_a_other.onnx'), 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 16:51:15,043 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_a_other.onnx
2025-05-02 16:51:15,133 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 16:51:15,415 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 16:51:15,416 - DEBUG - Demixing audio: samples=13371120, margin=44100, chunk_size=661500
2025-05-02 16:51:15,449 - DEBUG - Created 21 chunks for demixing
2025-05-02 16:51:15,463 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:51:25,221 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:51:34,541 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:51:43,660 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:51:52,772 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:52:01,951 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:52:11,449 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:52:20,831 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:52:30,656 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:52:40,914 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:52:51,572 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:53:03,072 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:53:14,771 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:53:28,966 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:53:44,188 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:53:58,659 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:54:13,024 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:54:28,020 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:54:42,749 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:54:57,229 - DEBUG - Processing chunk: 2 waves
2025-05-02 16:55:10,979 - DEBUG - Processing chunk: 1 waves
2025-05-02 16:55:18,357 - DEBUG - Demixing complete
2025-05-02 16:55:19,181 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_no_vocals.wav
2025-05-02 18:14:38,946 - DEBUG - Logging initialized
2025-05-02 18:14:38,946 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song10.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 18:14:38,946 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:14:38,946 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac
2025-05-02 18:14:38,946 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=512, n_fft=4096, hop=1024
2025-05-02 18:14:38,946 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song10.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 18:14:38,946 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_drums.onnx
2025-05-02 18:14:39,010 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac
2025-05-02 18:14:39,499 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=86)
           2	LOAD_GLOBAL(arg=0, lineno=86)
           4	LOAD_FAST(arg=0, lineno=86)
           6	LOAD_FAST(arg=1, lineno=86)
           8	LOAD_FAST(arg=2, lineno=86)
          10	LOAD_FAST(arg=3, lineno=86)
          12	LOAD_FAST(arg=4, lineno=86)
          14	LOAD_FAST(arg=5, lineno=86)
          16	LOAD_FAST(arg=6, lineno=86)
          18	CALL_FUNCTION(arg=7, lineno=86)
          20	POP_TOP(arg=None, lineno=86)
          22	LOAD_CONST(arg=0, lineno=86)
          24	RETURN_VALUE(arg=None, lineno=86)
2025-05-02 18:14:39,499 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-02 18:14:39,499 - DEBUG - stack: []
2025-05-02 18:14:39,499 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=86)
2025-05-02 18:14:39,501 - DEBUG - stack []
2025-05-02 18:14:39,501 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=86)
2025-05-02 18:14:39,501 - DEBUG - stack []
2025-05-02 18:14:39,501 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=86)
2025-05-02 18:14:39,501 - DEBUG - stack ['$2load_global.0']
2025-05-02 18:14:39,501 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=86)
2025-05-02 18:14:39,501 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-05-02 18:14:39,501 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=86)
2025-05-02 18:14:39,501 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2']
2025-05-02 18:14:39,501 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=86)
2025-05-02 18:14:39,501 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3']
2025-05-02 18:14:39,501 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=4, lineno=86)
2025-05-02 18:14:39,501 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4']
2025-05-02 18:14:39,501 - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=5, lineno=86)
2025-05-02 18:14:39,501 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5']
2025-05-02 18:14:39,501 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=6, lineno=86)
2025-05-02 18:14:39,501 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6']
2025-05-02 18:14:39,501 - DEBUG - dispatch pc=18, inst=CALL_FUNCTION(arg=7, lineno=86)
2025-05-02 18:14:39,501 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6', '$y16.7']
2025-05-02 18:14:39,501 - DEBUG - dispatch pc=20, inst=POP_TOP(arg=None, lineno=86)
2025-05-02 18:14:39,501 - DEBUG - stack ['$18call_function.8']
2025-05-02 18:14:39,501 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=0, lineno=86)
2025-05-02 18:14:39,501 - DEBUG - stack []
2025-05-02 18:14:39,501 - DEBUG - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=86)
2025-05-02 18:14:39,501 - DEBUG - stack ['$const22.9']
2025-05-02 18:14:39,501 - DEBUG - end state. edges=[]
2025-05-02 18:14:39,501 - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-02 18:14:39,501 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-02 18:14:39,501 - DEBUG - defmap: {}
2025-05-02 18:14:39,501 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-02 18:14:39,501 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-02 18:14:39,501 - DEBUG - keep phismap: {}
2025-05-02 18:14:39,501 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-02 18:14:39,501 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-02 18:14:39,501 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'res': '$t_out6.2'}), (8, {'res': '$interp_win8.3'}), (10, {'res': '$interp_delta10.4'}), (12, {'res': '$num_table12.5'}), (14, {'res': '$scale14.6'}), (16, {'res': '$y16.7'}), (18, {'func': '$2load_global.0', 'args': ['$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6', '$y16.7'], 'res': '$18call_function.8'}), (22, {'res': '$const22.9'}), (24, {'retval': '$const22.9', 'castval': '$24return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-02 18:14:39,561 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    t_out = arg(1, name=t_out)               ['t_out']
    interp_win = arg(2, name=interp_win)     ['interp_win']
    interp_delta = arg(3, name=interp_delta) ['interp_delta']
    num_table = arg(4, name=num_table)       ['num_table']
    scale = arg(5, name=scale)               ['scale']
    y = arg(6, name=y)                       ['y']
    $2load_global.0 = global(_resample_loop_s: CPUDispatcher(<function _resample_loop at 0x0000029332D18F70>)) ['$2load_global.0']
    $18call_function.8 = call $2load_global.0(x, t_out, interp_win, interp_delta, num_table, scale, y, func=$2load_global.0, args=[Var(x, interpn.py:86), Var(t_out, interpn.py:86), Var(interp_win, interpn.py:86), Var(interp_delta, interpn.py:86), Var(num_table, interpn.py:86), Var(scale, interpn.py:86), Var(y, interpn.py:86)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call_function.8', '$2load_global.0', 'interp_delta', 'interp_win', 'num_table', 'scale', 't_out', 'x', 'y']
    $const22.9 = const(NoneType, None)       ['$const22.9']
    $24return_value.10 = cast(value=$const22.9) ['$24return_value.10', '$const22.9']
    return $24return_value.10                ['$24return_value.10']

2025-05-02 18:14:39,567 - DEBUG - ==== SSA block analysis pass on 0
2025-05-02 18:14:39,567 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000293447B8A00>
2025-05-02 18:14:39,567 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 18:14:39,567 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 18:14:39,567 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 18:14:39,567 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 18:14:39,567 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 18:14:39,567 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 18:14:39,567 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 18:14:39,567 - DEBUG - on stmt: $2load_global.0 = global(_resample_loop_s: CPUDispatcher(<function _resample_loop at 0x0000029332D18F70>))
2025-05-02 18:14:39,567 - DEBUG - on stmt: $18call_function.8 = call $2load_global.0(x, t_out, interp_win, interp_delta, num_table, scale, y, func=$2load_global.0, args=[Var(x, interpn.py:86), Var(t_out, interpn.py:86), Var(interp_win, interpn.py:86), Var(interp_delta, interpn.py:86), Var(num_table, interpn.py:86), Var(scale, interpn.py:86), Var(y, interpn.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,567 - DEBUG - on stmt: $const22.9 = const(NoneType, None)
2025-05-02 18:14:39,567 - DEBUG - on stmt: $24return_value.10 = cast(value=$const22.9)
2025-05-02 18:14:39,567 - DEBUG - on stmt: return $24return_value.10
2025-05-02 18:14:39,567 - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call_function.8': [<numba.core.ir.Assign object at 0x00000293447D1D90>],
             '$24return_value.10': [<numba.core.ir.Assign object at 0x00000293447B88B0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x00000293447D13D0>],
             '$const22.9': [<numba.core.ir.Assign object at 0x00000293447B8130>],
             'interp_delta': [<numba.core.ir.Assign object at 0x00000293447B8EB0>],
             'interp_win': [<numba.core.ir.Assign object at 0x00000293447B8D90>],
             'num_table': [<numba.core.ir.Assign object at 0x00000293447B8FD0>],
             'scale': [<numba.core.ir.Assign object at 0x00000293447D1130>],
             't_out': [<numba.core.ir.Assign object at 0x00000293447B8C70>],
             'x': [<numba.core.ir.Assign object at 0x00000293447B81F0>],
             'y': [<numba.core.ir.Assign object at 0x00000293447D1250>]})
2025-05-02 18:14:39,567 - DEBUG - SSA violators set()
2025-05-02 18:14:39,571 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=9)
           2	LOAD_GLOBAL(arg=0, lineno=9)
           4	LOAD_FAST(arg=5, lineno=9)
           6	LOAD_FAST(arg=4, lineno=9)
           8	BINARY_MULTIPLY(arg=None, lineno=9)
          10	CALL_FUNCTION(arg=1, lineno=9)
          12	STORE_FAST(arg=7, lineno=9)
          14	LOAD_CONST(arg=1, lineno=10)
          16	STORE_FAST(arg=8, lineno=10)
          18	LOAD_CONST(arg=2, lineno=12)
          20	STORE_FAST(arg=9, lineno=12)
          22	LOAD_CONST(arg=1, lineno=13)
          24	STORE_FAST(arg=10, lineno=13)
          26	LOAD_CONST(arg=1, lineno=14)
          28	STORE_FAST(arg=11, lineno=14)
          30	LOAD_CONST(arg=2, lineno=15)
          32	STORE_FAST(arg=12, lineno=15)
          34	LOAD_CONST(arg=1, lineno=16)
          36	STORE_FAST(arg=13, lineno=16)
          38	LOAD_CONST(arg=1, lineno=17)
          40	STORE_FAST(arg=14, lineno=17)
          42	LOAD_FAST(arg=2, lineno=19)
          44	LOAD_ATTR(arg=1, lineno=19)
          46	LOAD_CONST(arg=2, lineno=19)
          48	BINARY_SUBSCR(arg=None, lineno=19)
          50	STORE_FAST(arg=15, lineno=19)
          52	LOAD_FAST(arg=0, lineno=20)
          54	LOAD_ATTR(arg=1, lineno=20)
          56	LOAD_CONST(arg=2, lineno=20)
          58	BINARY_SUBSCR(arg=None, lineno=20)
          60	STORE_FAST(arg=16, lineno=20)
          62	LOAD_FAST(arg=1, lineno=21)
          64	LOAD_ATTR(arg=1, lineno=21)
          66	LOAD_CONST(arg=2, lineno=21)
          68	BINARY_SUBSCR(arg=None, lineno=21)
          70	STORE_FAST(arg=17, lineno=21)
          72	LOAD_GLOBAL(arg=2, lineno=23)
          74	LOAD_FAST(arg=17, lineno=23)
          76	CALL_FUNCTION(arg=1, lineno=23)
          78	GET_ITER(arg=None, lineno=23)
>         80	FOR_ITER(arg=298, lineno=23)
          84	STORE_FAST(arg=18, lineno=23)
          86	LOAD_FAST(arg=1, lineno=24)
          88	LOAD_FAST(arg=18, lineno=24)
          90	BINARY_SUBSCR(arg=None, lineno=24)
          92	STORE_FAST(arg=8, lineno=24)
          94	LOAD_GLOBAL(arg=0, lineno=27)
          96	LOAD_FAST(arg=8, lineno=27)
          98	CALL_FUNCTION(arg=1, lineno=27)
         100	STORE_FAST(arg=9, lineno=27)
         102	LOAD_FAST(arg=5, lineno=30)
         104	LOAD_FAST(arg=8, lineno=30)
         106	LOAD_FAST(arg=9, lineno=30)
         108	BINARY_SUBTRACT(arg=None, lineno=30)
         110	BINARY_MULTIPLY(arg=None, lineno=30)
         112	STORE_FAST(arg=10, lineno=30)
         114	LOAD_FAST(arg=10, lineno=33)
         116	LOAD_FAST(arg=4, lineno=33)
         118	BINARY_MULTIPLY(arg=None, lineno=33)
         120	STORE_FAST(arg=11, lineno=33)
         122	LOAD_GLOBAL(arg=0, lineno=34)
         124	LOAD_FAST(arg=11, lineno=34)
         126	CALL_FUNCTION(arg=1, lineno=34)
         128	STORE_FAST(arg=12, lineno=34)
         130	LOAD_FAST(arg=11, lineno=37)
         132	LOAD_FAST(arg=12, lineno=37)
         134	BINARY_SUBTRACT(arg=None, lineno=37)
         136	STORE_FAST(arg=13, lineno=37)
         138	LOAD_GLOBAL(arg=3, lineno=40)
         140	LOAD_FAST(arg=9, lineno=40)
         142	LOAD_CONST(arg=3, lineno=40)
         144	BINARY_ADD(arg=None, lineno=40)
         146	LOAD_FAST(arg=15, lineno=40)
         148	LOAD_FAST(arg=12, lineno=40)
         150	BINARY_SUBTRACT(arg=None, lineno=40)
         152	LOAD_FAST(arg=7, lineno=40)
         154	BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
         156	CALL_FUNCTION(arg=2, lineno=40)
         158	STORE_FAST(arg=19, lineno=40)
         160	LOAD_GLOBAL(arg=4, lineno=41)
         162	LOAD_FAST(arg=19, lineno=41)
         164	CALL_FUNCTION(arg=1, lineno=41)
         166	GET_ITER(arg=None, lineno=41)
>        168	FOR_ITER(arg=68, lineno=41)
         170	STORE_FAST(arg=20, lineno=41)
         172	LOAD_FAST(arg=2, lineno=44)
         174	LOAD_FAST(arg=12, lineno=44)
         176	LOAD_FAST(arg=20, lineno=44)
         178	LOAD_FAST(arg=7, lineno=44)
         180	BINARY_MULTIPLY(arg=None, lineno=44)
         182	BINARY_ADD(arg=None, lineno=44)
         184	BINARY_SUBSCR(arg=None, lineno=44)
         186	LOAD_FAST(arg=13, lineno=45)
         188	LOAD_FAST(arg=3, lineno=45)
         190	LOAD_FAST(arg=12, lineno=45)
         192	LOAD_FAST(arg=20, lineno=45)
         194	LOAD_FAST(arg=7, lineno=45)
         196	BINARY_MULTIPLY(arg=None, lineno=45)
         198	BINARY_ADD(arg=None, lineno=45)
         200	BINARY_SUBSCR(arg=None, lineno=45)
         202	BINARY_MULTIPLY(arg=None, lineno=45)
         204	BINARY_ADD(arg=None, lineno=44)
         206	STORE_FAST(arg=14, lineno=43)
         208	LOAD_FAST(arg=6, lineno=47)
         210	LOAD_FAST(arg=18, lineno=47)
         212	DUP_TOP_TWO(arg=None, lineno=47)
         214	BINARY_SUBSCR(arg=None, lineno=47)
         216	LOAD_FAST(arg=14, lineno=47)
         218	LOAD_FAST(arg=0, lineno=47)
         220	LOAD_FAST(arg=9, lineno=47)
         222	LOAD_FAST(arg=20, lineno=47)
         224	BINARY_SUBTRACT(arg=None, lineno=47)
         226	BINARY_SUBSCR(arg=None, lineno=47)
         228	BINARY_MULTIPLY(arg=None, lineno=47)
         230	INPLACE_ADD(arg=None, lineno=47)
         232	ROT_THREE(arg=None, lineno=47)
         234	STORE_SUBSCR(arg=None, lineno=47)
         236	JUMP_ABSOLUTE(arg=168, lineno=47)
>        238	LOAD_FAST(arg=5, lineno=50)
         240	LOAD_FAST(arg=10, lineno=50)
         242	BINARY_SUBTRACT(arg=None, lineno=50)
         244	STORE_FAST(arg=10, lineno=50)
         246	LOAD_FAST(arg=10, lineno=53)
         248	LOAD_FAST(arg=4, lineno=53)
         250	BINARY_MULTIPLY(arg=None, lineno=53)
         252	STORE_FAST(arg=11, lineno=53)
         254	LOAD_GLOBAL(arg=0, lineno=54)
         256	LOAD_FAST(arg=11, lineno=54)
         258	CALL_FUNCTION(arg=1, lineno=54)
         260	STORE_FAST(arg=12, lineno=54)
         262	LOAD_FAST(arg=11, lineno=57)
         264	LOAD_FAST(arg=12, lineno=57)
         266	BINARY_SUBTRACT(arg=None, lineno=57)
         268	STORE_FAST(arg=13, lineno=57)
         270	LOAD_GLOBAL(arg=3, lineno=60)
         272	LOAD_FAST(arg=16, lineno=60)
         274	LOAD_FAST(arg=9, lineno=60)
         276	BINARY_SUBTRACT(arg=None, lineno=60)
         278	LOAD_CONST(arg=3, lineno=60)
         280	BINARY_SUBTRACT(arg=None, lineno=60)
         282	LOAD_FAST(arg=15, lineno=60)
         284	LOAD_FAST(arg=12, lineno=60)
         286	BINARY_SUBTRACT(arg=None, lineno=60)
         288	LOAD_FAST(arg=7, lineno=60)
         290	BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
         292	CALL_FUNCTION(arg=2, lineno=60)
         294	STORE_FAST(arg=21, lineno=60)
         296	LOAD_GLOBAL(arg=4, lineno=61)
         298	LOAD_FAST(arg=21, lineno=61)
         300	CALL_FUNCTION(arg=1, lineno=61)
         302	GET_ITER(arg=None, lineno=61)
>        304	FOR_ITER(arg=74, lineno=61)
         306	STORE_FAST(arg=22, lineno=61)
         308	LOAD_FAST(arg=2, lineno=63)
         310	LOAD_FAST(arg=12, lineno=63)
         312	LOAD_FAST(arg=22, lineno=63)
         314	LOAD_FAST(arg=7, lineno=63)
         316	BINARY_MULTIPLY(arg=None, lineno=63)
         318	BINARY_ADD(arg=None, lineno=63)
         320	BINARY_SUBSCR(arg=None, lineno=63)
         322	LOAD_FAST(arg=13, lineno=64)
         324	LOAD_FAST(arg=3, lineno=64)
         326	LOAD_FAST(arg=12, lineno=64)
         328	LOAD_FAST(arg=22, lineno=64)
         330	LOAD_FAST(arg=7, lineno=64)
         332	BINARY_MULTIPLY(arg=None, lineno=64)
         334	BINARY_ADD(arg=None, lineno=64)
         336	BINARY_SUBSCR(arg=None, lineno=64)
         338	BINARY_MULTIPLY(arg=None, lineno=64)
         340	BINARY_ADD(arg=None, lineno=63)
         342	STORE_FAST(arg=14, lineno=62)
         344	LOAD_FAST(arg=6, lineno=66)
         346	LOAD_FAST(arg=18, lineno=66)
         348	DUP_TOP_TWO(arg=None, lineno=66)
         350	BINARY_SUBSCR(arg=None, lineno=66)
         352	LOAD_FAST(arg=14, lineno=66)
         354	LOAD_FAST(arg=0, lineno=66)
         356	LOAD_FAST(arg=9, lineno=66)
         358	LOAD_FAST(arg=22, lineno=66)
         360	BINARY_ADD(arg=None, lineno=66)
         362	LOAD_CONST(arg=3, lineno=66)
         364	BINARY_ADD(arg=None, lineno=66)
         366	BINARY_SUBSCR(arg=None, lineno=66)
         368	BINARY_MULTIPLY(arg=None, lineno=66)
         370	INPLACE_ADD(arg=None, lineno=66)
         372	ROT_THREE(arg=None, lineno=66)
         374	STORE_SUBSCR(arg=None, lineno=66)
         376	JUMP_ABSOLUTE(arg=304, lineno=66)
>        380	JUMP_ABSOLUTE(arg=80, lineno=66)
>        382	LOAD_CONST(arg=0, lineno=66)
         384	RETURN_VALUE(arg=None, lineno=66)
2025-05-02 18:14:39,571 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-02 18:14:39,571 - DEBUG - stack: []
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=9)
2025-05-02 18:14:39,571 - DEBUG - stack []
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=9)
2025-05-02 18:14:39,571 - DEBUG - stack []
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=5, lineno=9)
2025-05-02 18:14:39,571 - DEBUG - stack ['$2load_global.0']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=4, lineno=9)
2025-05-02 18:14:39,571 - DEBUG - stack ['$2load_global.0', '$scale4.1']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=9)
2025-05-02 18:14:39,571 - DEBUG - stack ['$2load_global.0', '$scale4.1', '$num_table6.2']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=9)
2025-05-02 18:14:39,571 - DEBUG - stack ['$2load_global.0', '$8binary_multiply.3']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=12, inst=STORE_FAST(arg=7, lineno=9)
2025-05-02 18:14:39,571 - DEBUG - stack ['$10call_function.4']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=10)
2025-05-02 18:14:39,571 - DEBUG - stack []
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=8, lineno=10)
2025-05-02 18:14:39,571 - DEBUG - stack ['$const14.5']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=12)
2025-05-02 18:14:39,571 - DEBUG - stack []
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=20, inst=STORE_FAST(arg=9, lineno=12)
2025-05-02 18:14:39,571 - DEBUG - stack ['$const18.6']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=13)
2025-05-02 18:14:39,571 - DEBUG - stack []
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=24, inst=STORE_FAST(arg=10, lineno=13)
2025-05-02 18:14:39,571 - DEBUG - stack ['$const22.7']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=26, inst=LOAD_CONST(arg=1, lineno=14)
2025-05-02 18:14:39,571 - DEBUG - stack []
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=28, inst=STORE_FAST(arg=11, lineno=14)
2025-05-02 18:14:39,571 - DEBUG - stack ['$const26.8']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=15)
2025-05-02 18:14:39,571 - DEBUG - stack []
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=32, inst=STORE_FAST(arg=12, lineno=15)
2025-05-02 18:14:39,571 - DEBUG - stack ['$const30.9']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=16)
2025-05-02 18:14:39,571 - DEBUG - stack []
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=36, inst=STORE_FAST(arg=13, lineno=16)
2025-05-02 18:14:39,571 - DEBUG - stack ['$const34.10']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=17)
2025-05-02 18:14:39,571 - DEBUG - stack []
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=40, inst=STORE_FAST(arg=14, lineno=17)
2025-05-02 18:14:39,571 - DEBUG - stack ['$const38.11']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=42, inst=LOAD_FAST(arg=2, lineno=19)
2025-05-02 18:14:39,571 - DEBUG - stack []
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=44, inst=LOAD_ATTR(arg=1, lineno=19)
2025-05-02 18:14:39,571 - DEBUG - stack ['$interp_win42.12']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=46, inst=LOAD_CONST(arg=2, lineno=19)
2025-05-02 18:14:39,571 - DEBUG - stack ['$44load_attr.13']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=19)
2025-05-02 18:14:39,571 - DEBUG - stack ['$44load_attr.13', '$const46.14']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=50, inst=STORE_FAST(arg=15, lineno=19)
2025-05-02 18:14:39,571 - DEBUG - stack ['$48binary_subscr.15']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=20)
2025-05-02 18:14:39,571 - DEBUG - stack []
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=54, inst=LOAD_ATTR(arg=1, lineno=20)
2025-05-02 18:14:39,571 - DEBUG - stack ['$x52.16']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=56, inst=LOAD_CONST(arg=2, lineno=20)
2025-05-02 18:14:39,571 - DEBUG - stack ['$54load_attr.17']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=20)
2025-05-02 18:14:39,571 - DEBUG - stack ['$54load_attr.17', '$const56.18']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=60, inst=STORE_FAST(arg=16, lineno=20)
2025-05-02 18:14:39,571 - DEBUG - stack ['$58binary_subscr.19']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=21)
2025-05-02 18:14:39,571 - DEBUG - stack []
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=64, inst=LOAD_ATTR(arg=1, lineno=21)
2025-05-02 18:14:39,571 - DEBUG - stack ['$t_out62.20']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=21)
2025-05-02 18:14:39,571 - DEBUG - stack ['$64load_attr.21']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=21)
2025-05-02 18:14:39,571 - DEBUG - stack ['$64load_attr.21', '$const66.22']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=70, inst=STORE_FAST(arg=17, lineno=21)
2025-05-02 18:14:39,571 - DEBUG - stack ['$68binary_subscr.23']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=72, inst=LOAD_GLOBAL(arg=2, lineno=23)
2025-05-02 18:14:39,571 - DEBUG - stack []
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=17, lineno=23)
2025-05-02 18:14:39,571 - DEBUG - stack ['$72load_global.24']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=23)
2025-05-02 18:14:39,571 - DEBUG - stack ['$72load_global.24', '$n_out74.25']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=23)
2025-05-02 18:14:39,571 - DEBUG - stack ['$76call_function.26']
2025-05-02 18:14:39,571 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.27',), blockstack=(), npush=0)]
2025-05-02 18:14:39,571 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-05-02 18:14:39,571 - DEBUG - stack: ['$phi80.0']
2025-05-02 18:14:39,571 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=298, lineno=23)
2025-05-02 18:14:39,571 - DEBUG - stack ['$phi80.0']
2025-05-02 18:14:39,575 - DEBUG - end state. edges=[Edge(pc=382, stack=(), blockstack=(), npush=0), Edge(pc=84, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-05-02 18:14:39,575 - DEBUG - pending: deque([State(pc_initial=382 nstack_initial=0), State(pc_initial=84 nstack_initial=2)])
2025-05-02 18:14:39,575 - DEBUG - stack: []
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=382, inst=LOAD_CONST(arg=0, lineno=66)
2025-05-02 18:14:39,575 - DEBUG - stack []
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=384, inst=RETURN_VALUE(arg=None, lineno=66)
2025-05-02 18:14:39,575 - DEBUG - stack ['$const382.0']
2025-05-02 18:14:39,575 - DEBUG - end state. edges=[]
2025-05-02 18:14:39,575 - DEBUG - pending: deque([State(pc_initial=84 nstack_initial=2)])
2025-05-02 18:14:39,575 - DEBUG - stack: ['$phi84.0', '$phi84.1']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=84, inst=STORE_FAST(arg=18, lineno=23)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0', '$phi84.1']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=24)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=88, inst=LOAD_FAST(arg=18, lineno=24)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0', '$t_out86.2']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=24)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0', '$t_out86.2', '$t88.3']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=92, inst=STORE_FAST(arg=8, lineno=24)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0', '$90binary_subscr.4']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=94, inst=LOAD_GLOBAL(arg=0, lineno=27)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=96, inst=LOAD_FAST(arg=8, lineno=27)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0', '$94load_global.5']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=98, inst=CALL_FUNCTION(arg=1, lineno=27)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0', '$94load_global.5', '$time_register96.6']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=100, inst=STORE_FAST(arg=9, lineno=27)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0', '$98call_function.7']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=102, inst=LOAD_FAST(arg=5, lineno=30)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=104, inst=LOAD_FAST(arg=8, lineno=30)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0', '$scale102.8']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=9, lineno=30)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0', '$scale102.8', '$time_register104.9']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=30)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0', '$scale102.8', '$time_register104.9', '$n106.10']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=110, inst=BINARY_MULTIPLY(arg=None, lineno=30)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0', '$scale102.8', '$108binary_subtract.11']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=112, inst=STORE_FAST(arg=10, lineno=30)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0', '$110binary_multiply.12']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=10, lineno=33)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=4, lineno=33)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0', '$frac114.13']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=118, inst=BINARY_MULTIPLY(arg=None, lineno=33)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0', '$frac114.13', '$num_table116.14']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=120, inst=STORE_FAST(arg=11, lineno=33)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0', '$118binary_multiply.15']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=122, inst=LOAD_GLOBAL(arg=0, lineno=34)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=124, inst=LOAD_FAST(arg=11, lineno=34)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0', '$122load_global.16']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=126, inst=CALL_FUNCTION(arg=1, lineno=34)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0', '$122load_global.16', '$index_frac124.17']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=128, inst=STORE_FAST(arg=12, lineno=34)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0', '$126call_function.18']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=130, inst=LOAD_FAST(arg=11, lineno=37)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=12, lineno=37)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0', '$index_frac130.19']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=134, inst=BINARY_SUBTRACT(arg=None, lineno=37)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0', '$index_frac130.19', '$offset132.20']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=136, inst=STORE_FAST(arg=13, lineno=37)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0', '$134binary_subtract.21']
2025-05-02 18:14:39,575 - DEBUG - dispatch pc=138, inst=LOAD_GLOBAL(arg=3, lineno=40)
2025-05-02 18:14:39,575 - DEBUG - stack ['$phi84.0']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=140, inst=LOAD_FAST(arg=9, lineno=40)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi84.0', '$138load_global.22']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=142, inst=LOAD_CONST(arg=3, lineno=40)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$n140.23']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=144, inst=BINARY_ADD(arg=None, lineno=40)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$n140.23', '$const142.24']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=146, inst=LOAD_FAST(arg=15, lineno=40)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=148, inst=LOAD_FAST(arg=12, lineno=40)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$nwin146.26']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=150, inst=BINARY_SUBTRACT(arg=None, lineno=40)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$nwin146.26', '$offset148.27']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=7, lineno=40)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$150binary_subtract.28']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=154, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$150binary_subtract.28', '$index_step152.29']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=156, inst=CALL_FUNCTION(arg=2, lineno=40)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$154binary_floor_divide.30']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=158, inst=STORE_FAST(arg=19, lineno=40)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi84.0', '$156call_function.31']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=160, inst=LOAD_GLOBAL(arg=4, lineno=41)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi84.0']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=162, inst=LOAD_FAST(arg=19, lineno=41)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi84.0', '$160load_global.32']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=41)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi84.0', '$160load_global.32', '$i_max162.33']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=166, inst=GET_ITER(arg=None, lineno=41)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi84.0', '$164call_function.34']
2025-05-02 18:14:39,577 - DEBUG - end state. edges=[Edge(pc=168, stack=('$phi84.0', '$166get_iter.35'), blockstack=(), npush=0)]
2025-05-02 18:14:39,577 - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=2)])
2025-05-02 18:14:39,577 - DEBUG - stack: ['$phi168.0', '$phi168.1']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=168, inst=FOR_ITER(arg=68, lineno=41)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi168.0', '$phi168.1']
2025-05-02 18:14:39,577 - DEBUG - end state. edges=[Edge(pc=238, stack=('$phi168.0',), blockstack=(), npush=0), Edge(pc=170, stack=('$phi168.0', '$phi168.1', '$168for_iter.3'), blockstack=(), npush=0)]
2025-05-02 18:14:39,577 - DEBUG - pending: deque([State(pc_initial=238 nstack_initial=1), State(pc_initial=170 nstack_initial=3)])
2025-05-02 18:14:39,577 - DEBUG - stack: ['$phi238.0']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=238, inst=LOAD_FAST(arg=5, lineno=50)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi238.0']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=10, lineno=50)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi238.0', '$scale238.1']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=242, inst=BINARY_SUBTRACT(arg=None, lineno=50)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi238.0', '$scale238.1', '$frac240.2']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=244, inst=STORE_FAST(arg=10, lineno=50)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi238.0', '$242binary_subtract.3']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=10, lineno=53)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi238.0']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=248, inst=LOAD_FAST(arg=4, lineno=53)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi238.0', '$frac246.4']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=250, inst=BINARY_MULTIPLY(arg=None, lineno=53)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi238.0', '$frac246.4', '$num_table248.5']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=252, inst=STORE_FAST(arg=11, lineno=53)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi238.0', '$250binary_multiply.6']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=254, inst=LOAD_GLOBAL(arg=0, lineno=54)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi238.0']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=11, lineno=54)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi238.0', '$254load_global.7']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=258, inst=CALL_FUNCTION(arg=1, lineno=54)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi238.0', '$254load_global.7', '$index_frac256.8']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=260, inst=STORE_FAST(arg=12, lineno=54)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi238.0', '$258call_function.9']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=262, inst=LOAD_FAST(arg=11, lineno=57)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi238.0']
2025-05-02 18:14:39,577 - DEBUG - dispatch pc=264, inst=LOAD_FAST(arg=12, lineno=57)
2025-05-02 18:14:39,577 - DEBUG - stack ['$phi238.0', '$index_frac262.10']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=266, inst=BINARY_SUBTRACT(arg=None, lineno=57)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi238.0', '$index_frac262.10', '$offset264.11']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=268, inst=STORE_FAST(arg=13, lineno=57)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi238.0', '$266binary_subtract.12']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=270, inst=LOAD_GLOBAL(arg=3, lineno=60)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi238.0']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=272, inst=LOAD_FAST(arg=16, lineno=60)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi238.0', '$270load_global.13']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=274, inst=LOAD_FAST(arg=9, lineno=60)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$n_orig272.14']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=276, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$n_orig272.14', '$n274.15']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=278, inst=LOAD_CONST(arg=3, lineno=60)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$276binary_subtract.16']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=280, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$276binary_subtract.16', '$const278.17']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=282, inst=LOAD_FAST(arg=15, lineno=60)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=284, inst=LOAD_FAST(arg=12, lineno=60)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$nwin282.19']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=286, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$nwin282.19', '$offset284.20']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=288, inst=LOAD_FAST(arg=7, lineno=60)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$286binary_subtract.21']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=290, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$286binary_subtract.21', '$index_step288.22']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=292, inst=CALL_FUNCTION(arg=2, lineno=60)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$290binary_floor_divide.23']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=294, inst=STORE_FAST(arg=21, lineno=60)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi238.0', '$292call_function.24']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=296, inst=LOAD_GLOBAL(arg=4, lineno=61)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi238.0']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=298, inst=LOAD_FAST(arg=21, lineno=61)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi238.0', '$296load_global.25']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=300, inst=CALL_FUNCTION(arg=1, lineno=61)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi238.0', '$296load_global.25', '$k_max298.26']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=302, inst=GET_ITER(arg=None, lineno=61)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi238.0', '$300call_function.27']
2025-05-02 18:14:39,579 - DEBUG - end state. edges=[Edge(pc=304, stack=('$phi238.0', '$302get_iter.28'), blockstack=(), npush=0)]
2025-05-02 18:14:39,579 - DEBUG - pending: deque([State(pc_initial=170 nstack_initial=3), State(pc_initial=304 nstack_initial=2)])
2025-05-02 18:14:39,579 - DEBUG - stack: ['$phi170.0', '$phi170.1', '$phi170.2']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=170, inst=STORE_FAST(arg=20, lineno=41)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi170.0', '$phi170.1', '$phi170.2']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=172, inst=LOAD_FAST(arg=2, lineno=44)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=12, lineno=44)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=176, inst=LOAD_FAST(arg=20, lineno=44)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=178, inst=LOAD_FAST(arg=7, lineno=44)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$i176.5']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=44)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$i176.5', '$index_step178.6']
2025-05-02 18:14:39,579 - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=44)
2025-05-02 18:14:39,579 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$180binary_multiply.7']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=44)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$182binary_add.8']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=186, inst=LOAD_FAST(arg=13, lineno=45)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=188, inst=LOAD_FAST(arg=3, lineno=45)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=12, lineno=45)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=192, inst=LOAD_FAST(arg=20, lineno=45)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=45)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$i192.13']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=196, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$i192.13', '$index_step194.14']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=198, inst=BINARY_ADD(arg=None, lineno=45)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$196binary_multiply.15']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=200, inst=BINARY_SUBSCR(arg=None, lineno=45)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$198binary_add.16']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=202, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$200binary_subscr.17']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=204, inst=BINARY_ADD(arg=None, lineno=44)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$202binary_multiply.18']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=206, inst=STORE_FAST(arg=14, lineno=43)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$204binary_add.19']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=208, inst=LOAD_FAST(arg=6, lineno=47)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=210, inst=LOAD_FAST(arg=18, lineno=47)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=212, inst=DUP_TOP_TWO(arg=None, lineno=47)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=214, inst=BINARY_SUBSCR(arg=None, lineno=47)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$212dup_top_two.22', '$212dup_top_two.23']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=216, inst=LOAD_FAST(arg=14, lineno=47)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=47)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=220, inst=LOAD_FAST(arg=9, lineno=47)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=222, inst=LOAD_FAST(arg=20, lineno=47)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$n220.27']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=224, inst=BINARY_SUBTRACT(arg=None, lineno=47)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$n220.27', '$i222.28']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=226, inst=BINARY_SUBSCR(arg=None, lineno=47)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$224binary_subtract.29']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=228, inst=BINARY_MULTIPLY(arg=None, lineno=47)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$226binary_subscr.30']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=230, inst=INPLACE_ADD(arg=None, lineno=47)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$228binary_multiply.31']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=232, inst=ROT_THREE(arg=None, lineno=47)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$230inplace_add.32']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=234, inst=STORE_SUBSCR(arg=None, lineno=47)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1', '$230inplace_add.32', '$y208.20', '$t210.21']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=236, inst=JUMP_ABSOLUTE(arg=168, lineno=47)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 18:14:39,581 - DEBUG - end state. edges=[Edge(pc=168, stack=('$phi170.0', '$phi170.1'), blockstack=(), npush=0)]
2025-05-02 18:14:39,581 - DEBUG - pending: deque([State(pc_initial=304 nstack_initial=2), State(pc_initial=168 nstack_initial=2)])
2025-05-02 18:14:39,581 - DEBUG - stack: ['$phi304.0', '$phi304.1']
2025-05-02 18:14:39,581 - DEBUG - dispatch pc=304, inst=FOR_ITER(arg=74, lineno=61)
2025-05-02 18:14:39,581 - DEBUG - stack ['$phi304.0', '$phi304.1']
2025-05-02 18:14:39,581 - DEBUG - end state. edges=[Edge(pc=380, stack=('$phi304.0',), blockstack=(), npush=0), Edge(pc=306, stack=('$phi304.0', '$phi304.1', '$304for_iter.3'), blockstack=(), npush=0)]
2025-05-02 18:14:39,581 - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=2), State(pc_initial=380 nstack_initial=1), State(pc_initial=306 nstack_initial=3)])
2025-05-02 18:14:39,583 - DEBUG - pending: deque([State(pc_initial=380 nstack_initial=1), State(pc_initial=306 nstack_initial=3)])
2025-05-02 18:14:39,583 - DEBUG - stack: ['$phi380.0']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=380, inst=JUMP_ABSOLUTE(arg=80, lineno=66)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi380.0']
2025-05-02 18:14:39,583 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi380.0',), blockstack=(), npush=0)]
2025-05-02 18:14:39,583 - DEBUG - pending: deque([State(pc_initial=306 nstack_initial=3), State(pc_initial=80 nstack_initial=1)])
2025-05-02 18:14:39,583 - DEBUG - stack: ['$phi306.0', '$phi306.1', '$phi306.2']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=306, inst=STORE_FAST(arg=22, lineno=61)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$phi306.2']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=308, inst=LOAD_FAST(arg=2, lineno=63)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=310, inst=LOAD_FAST(arg=12, lineno=63)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=312, inst=LOAD_FAST(arg=22, lineno=63)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=314, inst=LOAD_FAST(arg=7, lineno=63)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$k312.5']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=316, inst=BINARY_MULTIPLY(arg=None, lineno=63)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$k312.5', '$index_step314.6']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=318, inst=BINARY_ADD(arg=None, lineno=63)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$316binary_multiply.7']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=320, inst=BINARY_SUBSCR(arg=None, lineno=63)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$318binary_add.8']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=322, inst=LOAD_FAST(arg=13, lineno=64)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=324, inst=LOAD_FAST(arg=3, lineno=64)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=326, inst=LOAD_FAST(arg=12, lineno=64)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=328, inst=LOAD_FAST(arg=22, lineno=64)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=330, inst=LOAD_FAST(arg=7, lineno=64)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$k328.13']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=332, inst=BINARY_MULTIPLY(arg=None, lineno=64)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$k328.13', '$index_step330.14']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=334, inst=BINARY_ADD(arg=None, lineno=64)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$332binary_multiply.15']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=336, inst=BINARY_SUBSCR(arg=None, lineno=64)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$334binary_add.16']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=338, inst=BINARY_MULTIPLY(arg=None, lineno=64)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$336binary_subscr.17']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=340, inst=BINARY_ADD(arg=None, lineno=63)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$338binary_multiply.18']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=342, inst=STORE_FAST(arg=14, lineno=62)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$340binary_add.19']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=344, inst=LOAD_FAST(arg=6, lineno=66)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=346, inst=LOAD_FAST(arg=18, lineno=66)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=348, inst=DUP_TOP_TWO(arg=None, lineno=66)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=350, inst=BINARY_SUBSCR(arg=None, lineno=66)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$348dup_top_two.22', '$348dup_top_two.23']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=352, inst=LOAD_FAST(arg=14, lineno=66)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=354, inst=LOAD_FAST(arg=0, lineno=66)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=356, inst=LOAD_FAST(arg=9, lineno=66)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=358, inst=LOAD_FAST(arg=22, lineno=66)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$n356.27']
2025-05-02 18:14:39,583 - DEBUG - dispatch pc=360, inst=BINARY_ADD(arg=None, lineno=66)
2025-05-02 18:14:39,583 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$n356.27', '$k358.28']
2025-05-02 18:14:39,585 - DEBUG - dispatch pc=362, inst=LOAD_CONST(arg=3, lineno=66)
2025-05-02 18:14:39,585 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$360binary_add.29']
2025-05-02 18:14:39,585 - DEBUG - dispatch pc=364, inst=BINARY_ADD(arg=None, lineno=66)
2025-05-02 18:14:39,585 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$360binary_add.29', '$const362.30']
2025-05-02 18:14:39,585 - DEBUG - dispatch pc=366, inst=BINARY_SUBSCR(arg=None, lineno=66)
2025-05-02 18:14:39,585 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$364binary_add.31']
2025-05-02 18:14:39,585 - DEBUG - dispatch pc=368, inst=BINARY_MULTIPLY(arg=None, lineno=66)
2025-05-02 18:14:39,585 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$366binary_subscr.32']
2025-05-02 18:14:39,585 - DEBUG - dispatch pc=370, inst=INPLACE_ADD(arg=None, lineno=66)
2025-05-02 18:14:39,585 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$368binary_multiply.33']
2025-05-02 18:14:39,585 - DEBUG - dispatch pc=372, inst=ROT_THREE(arg=None, lineno=66)
2025-05-02 18:14:39,585 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$370inplace_add.34']
2025-05-02 18:14:39,585 - DEBUG - dispatch pc=374, inst=STORE_SUBSCR(arg=None, lineno=66)
2025-05-02 18:14:39,585 - DEBUG - stack ['$phi306.0', '$phi306.1', '$370inplace_add.34', '$y344.20', '$t346.21']
2025-05-02 18:14:39,585 - DEBUG - dispatch pc=376, inst=JUMP_ABSOLUTE(arg=304, lineno=66)
2025-05-02 18:14:39,585 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 18:14:39,585 - DEBUG - end state. edges=[Edge(pc=304, stack=('$phi306.0', '$phi306.1'), blockstack=(), npush=0)]
2025-05-02 18:14:39,585 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=304 nstack_initial=2)])
2025-05-02 18:14:39,585 - DEBUG - pending: deque([State(pc_initial=304 nstack_initial=2)])
2025-05-02 18:14:39,585 - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-02 18:14:39,585 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=84 nstack_initial=2): {'$phi84.1'},
             State(pc_initial=168 nstack_initial=2): {'$phi168.1'},
             State(pc_initial=170 nstack_initial=3): {'$phi170.2'},
             State(pc_initial=238 nstack_initial=1): set(),
             State(pc_initial=304 nstack_initial=2): {'$phi304.1'},
             State(pc_initial=306 nstack_initial=3): {'$phi306.2'},
             State(pc_initial=380 nstack_initial=1): set(),
             State(pc_initial=382 nstack_initial=0): set()})
2025-05-02 18:14:39,585 - DEBUG - defmap: {'$phi168.1': State(pc_initial=84 nstack_initial=2),
 '$phi170.2': State(pc_initial=168 nstack_initial=2),
 '$phi304.1': State(pc_initial=238 nstack_initial=1),
 '$phi306.2': State(pc_initial=304 nstack_initial=2),
 '$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi84.1': State(pc_initial=80 nstack_initial=1)}
2025-05-02 18:14:39,585 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi170.0',
                            State(pc_initial=170 nstack_initial=3)),
                           ('$phi84.0', State(pc_initial=84 nstack_initial=2))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2)),
                           ('$phi170.1',
                            State(pc_initial=170 nstack_initial=3))},
             '$phi170.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.1': {('$phi168.1',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi304.0': {('$phi238.0',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi306.0',
                            State(pc_initial=306 nstack_initial=3))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi306.1',
                            State(pc_initial=306 nstack_initial=3))},
             '$phi306.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.1': {('$phi304.1',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi380.0',
                           State(pc_initial=380 nstack_initial=1))},
             '$phi84.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 18:14:39,585 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2)),
                           ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2)),
                           ('$phi168.1',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi304.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2)),
                           ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi304.1',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 18:14:39,585 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 18:14:39,587 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 18:14:39,587 - DEBUG - keep phismap: {'$phi168.1': {('$166get_iter.35', State(pc_initial=84 nstack_initial=2))},
 '$phi170.2': {('$168for_iter.3', State(pc_initial=168 nstack_initial=2))},
 '$phi304.1': {('$302get_iter.28', State(pc_initial=238 nstack_initial=1))},
 '$phi306.2': {('$304for_iter.3', State(pc_initial=304 nstack_initial=2))},
 '$phi80.0': {('$78get_iter.27', State(pc_initial=0 nstack_initial=0))},
 '$phi84.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-05-02 18:14:39,587 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.27'},
             State(pc_initial=80 nstack_initial=1): {'$phi84.1': '$80for_iter.2'},
             State(pc_initial=84 nstack_initial=2): {'$phi168.1': '$166get_iter.35'},
             State(pc_initial=168 nstack_initial=2): {'$phi170.2': '$168for_iter.3'},
             State(pc_initial=238 nstack_initial=1): {'$phi304.1': '$302get_iter.28'},
             State(pc_initial=304 nstack_initial=2): {'$phi306.2': '$304for_iter.3'}})
2025-05-02 18:14:39,587 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-02 18:14:39,587 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$scale4.1'}), (6, {'res': '$num_table6.2'}), (8, {'lhs': '$scale4.1', 'rhs': '$num_table6.2', 'res': '$8binary_multiply.3'}), (10, {'func': '$2load_global.0', 'args': ['$8binary_multiply.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4'}), (14, {'res': '$const14.5'}), (16, {'value': '$const14.5'}), (18, {'res': '$const18.6'}), (20, {'value': '$const18.6'}), (22, {'res': '$const22.7'}), (24, {'value': '$const22.7'}), (26, {'res': '$const26.8'}), (28, {'value': '$const26.8'}), (30, {'res': '$const30.9'}), (32, {'value': '$const30.9'}), (34, {'res': '$const34.10'}), (36, {'value': '$const34.10'}), (38, {'res': '$const38.11'}), (40, {'value': '$const38.11'}), (42, {'res': '$interp_win42.12'}), (44, {'item': '$interp_win42.12', 'res': '$44load_attr.13'}), (46, {'res': '$const46.14'}), (48, {'index': '$const46.14', 'target': '$44load_attr.13', 'res': '$48binary_subscr.15'}), (50, {'value': '$48binary_subscr.15'}), (52, {'res': '$x52.16'}), (54, {'item': '$x52.16', 'res': '$54load_attr.17'}), (56, {'res': '$const56.18'}), (58, {'index': '$const56.18', 'target': '$54load_attr.17', 'res': '$58binary_subscr.19'}), (60, {'value': '$58binary_subscr.19'}), (62, {'res': '$t_out62.20'}), (64, {'item': '$t_out62.20', 'res': '$64load_attr.21'}), (66, {'res': '$const66.22'}), (68, {'index': '$const66.22', 'target': '$64load_attr.21', 'res': '$68binary_subscr.23'}), (70, {'value': '$68binary_subscr.23'}), (72, {'res': '$72load_global.24'}), (74, {'res': '$n_out74.25'}), (76, {'func': '$72load_global.24', 'args': ['$n_out74.25'], 'res': '$76call_function.26'}), (78, {'value': '$76call_function.26', 'res': '$78get_iter.27'})), outgoing_phis={'$phi80.0': '$78get_iter.27'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.27',)})
2025-05-02 18:14:39,587 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi84.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={382: (), 84: ('$phi80.0', '$80for_iter.2')})
2025-05-02 18:14:39,587 - DEBUG - block_infos State(pc_initial=84 nstack_initial=2):
AdaptBlockInfo(insts=((84, {'value': '$phi84.1'}), (86, {'res': '$t_out86.2'}), (88, {'res': '$t88.3'}), (90, {'index': '$t88.3', 'target': '$t_out86.2', 'res': '$90binary_subscr.4'}), (92, {'value': '$90binary_subscr.4'}), (94, {'res': '$94load_global.5'}), (96, {'res': '$time_register96.6'}), (98, {'func': '$94load_global.5', 'args': ['$time_register96.6'], 'res': '$98call_function.7'}), (100, {'value': '$98call_function.7'}), (102, {'res': '$scale102.8'}), (104, {'res': '$time_register104.9'}), (106, {'res': '$n106.10'}), (108, {'lhs': '$time_register104.9', 'rhs': '$n106.10', 'res': '$108binary_subtract.11'}), (110, {'lhs': '$scale102.8', 'rhs': '$108binary_subtract.11', 'res': '$110binary_multiply.12'}), (112, {'value': '$110binary_multiply.12'}), (114, {'res': '$frac114.13'}), (116, {'res': '$num_table116.14'}), (118, {'lhs': '$frac114.13', 'rhs': '$num_table116.14', 'res': '$118binary_multiply.15'}), (120, {'value': '$118binary_multiply.15'}), (122, {'res': '$122load_global.16'}), (124, {'res': '$index_frac124.17'}), (126, {'func': '$122load_global.16', 'args': ['$index_frac124.17'], 'res': '$126call_function.18'}), (128, {'value': '$126call_function.18'}), (130, {'res': '$index_frac130.19'}), (132, {'res': '$offset132.20'}), (134, {'lhs': '$index_frac130.19', 'rhs': '$offset132.20', 'res': '$134binary_subtract.21'}), (136, {'value': '$134binary_subtract.21'}), (138, {'res': '$138load_global.22'}), (140, {'res': '$n140.23'}), (142, {'res': '$const142.24'}), (144, {'lhs': '$n140.23', 'rhs': '$const142.24', 'res': '$144binary_add.25'}), (146, {'res': '$nwin146.26'}), (148, {'res': '$offset148.27'}), (150, {'lhs': '$nwin146.26', 'rhs': '$offset148.27', 'res': '$150binary_subtract.28'}), (152, {'res': '$index_step152.29'}), (154, {'lhs': '$150binary_subtract.28', 'rhs': '$index_step152.29', 'res': '$154binary_floor_divide.30'}), (156, {'func': '$138load_global.22', 'args': ['$144binary_add.25', '$154binary_floor_divide.30'], 'res': '$156call_function.31'}), (158, {'value': '$156call_function.31'}), (160, {'res': '$160load_global.32'}), (162, {'res': '$i_max162.33'}), (164, {'func': '$160load_global.32', 'args': ['$i_max162.33'], 'res': '$164call_function.34'}), (166, {'value': '$164call_function.34', 'res': '$166get_iter.35'})), outgoing_phis={'$phi168.1': '$166get_iter.35'}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi84.0', '$166get_iter.35')})
2025-05-02 18:14:39,587 - DEBUG - block_infos State(pc_initial=168 nstack_initial=2):
AdaptBlockInfo(insts=((168, {'iterator': '$phi168.1', 'pair': '$168for_iter.2', 'indval': '$168for_iter.3', 'pred': '$168for_iter.4'}),), outgoing_phis={'$phi170.2': '$168for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={238: ('$phi168.0',), 170: ('$phi168.0', '$phi168.1', '$168for_iter.3')})
2025-05-02 18:14:39,587 - DEBUG - block_infos State(pc_initial=170 nstack_initial=3):
AdaptBlockInfo(insts=((170, {'value': '$phi170.2'}), (172, {'res': '$interp_win172.3'}), (174, {'res': '$offset174.4'}), (176, {'res': '$i176.5'}), (178, {'res': '$index_step178.6'}), (180, {'lhs': '$i176.5', 'rhs': '$index_step178.6', 'res': '$180binary_multiply.7'}), (182, {'lhs': '$offset174.4', 'rhs': '$180binary_multiply.7', 'res': '$182binary_add.8'}), (184, {'index': '$182binary_add.8', 'target': '$interp_win172.3', 'res': '$184binary_subscr.9'}), (186, {'res': '$eta186.10'}), (188, {'res': '$interp_delta188.11'}), (190, {'res': '$offset190.12'}), (192, {'res': '$i192.13'}), (194, {'res': '$index_step194.14'}), (196, {'lhs': '$i192.13', 'rhs': '$index_step194.14', 'res': '$196binary_multiply.15'}), (198, {'lhs': '$offset190.12', 'rhs': '$196binary_multiply.15', 'res': '$198binary_add.16'}), (200, {'index': '$198binary_add.16', 'target': '$interp_delta188.11', 'res': '$200binary_subscr.17'}), (202, {'lhs': '$eta186.10', 'rhs': '$200binary_subscr.17', 'res': '$202binary_multiply.18'}), (204, {'lhs': '$184binary_subscr.9', 'rhs': '$202binary_multiply.18', 'res': '$204binary_add.19'}), (206, {'value': '$204binary_add.19'}), (208, {'res': '$y208.20'}), (210, {'res': '$t210.21'}), (212, {'orig': ['$y208.20', '$t210.21'], 'duped': ['$212dup_top_two.22', '$212dup_top_two.23']}), (214, {'index': '$212dup_top_two.23', 'target': '$212dup_top_two.22', 'res': '$214binary_subscr.24'}), (216, {'res': '$weight216.25'}), (218, {'res': '$x218.26'}), (220, {'res': '$n220.27'}), (222, {'res': '$i222.28'}), (224, {'lhs': '$n220.27', 'rhs': '$i222.28', 'res': '$224binary_subtract.29'}), (226, {'index': '$224binary_subtract.29', 'target': '$x218.26', 'res': '$226binary_subscr.30'}), (228, {'lhs': '$weight216.25', 'rhs': '$226binary_subscr.30', 'res': '$228binary_multiply.31'}), (230, {'lhs': '$214binary_subscr.24', 'rhs': '$228binary_multiply.31', 'res': '$230inplace_add.32'}), (234, {'target': '$y208.20', 'index': '$t210.21', 'value': '$230inplace_add.32'}), (236, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi170.0', '$phi170.1')})
2025-05-02 18:14:39,587 - DEBUG - block_infos State(pc_initial=238 nstack_initial=1):
AdaptBlockInfo(insts=((238, {'res': '$scale238.1'}), (240, {'res': '$frac240.2'}), (242, {'lhs': '$scale238.1', 'rhs': '$frac240.2', 'res': '$242binary_subtract.3'}), (244, {'value': '$242binary_subtract.3'}), (246, {'res': '$frac246.4'}), (248, {'res': '$num_table248.5'}), (250, {'lhs': '$frac246.4', 'rhs': '$num_table248.5', 'res': '$250binary_multiply.6'}), (252, {'value': '$250binary_multiply.6'}), (254, {'res': '$254load_global.7'}), (256, {'res': '$index_frac256.8'}), (258, {'func': '$254load_global.7', 'args': ['$index_frac256.8'], 'res': '$258call_function.9'}), (260, {'value': '$258call_function.9'}), (262, {'res': '$index_frac262.10'}), (264, {'res': '$offset264.11'}), (266, {'lhs': '$index_frac262.10', 'rhs': '$offset264.11', 'res': '$266binary_subtract.12'}), (268, {'value': '$266binary_subtract.12'}), (270, {'res': '$270load_global.13'}), (272, {'res': '$n_orig272.14'}), (274, {'res': '$n274.15'}), (276, {'lhs': '$n_orig272.14', 'rhs': '$n274.15', 'res': '$276binary_subtract.16'}), (278, {'res': '$const278.17'}), (280, {'lhs': '$276binary_subtract.16', 'rhs': '$const278.17', 'res': '$280binary_subtract.18'}), (282, {'res': '$nwin282.19'}), (284, {'res': '$offset284.20'}), (286, {'lhs': '$nwin282.19', 'rhs': '$offset284.20', 'res': '$286binary_subtract.21'}), (288, {'res': '$index_step288.22'}), (290, {'lhs': '$286binary_subtract.21', 'rhs': '$index_step288.22', 'res': '$290binary_floor_divide.23'}), (292, {'func': '$270load_global.13', 'args': ['$280binary_subtract.18', '$290binary_floor_divide.23'], 'res': '$292call_function.24'}), (294, {'value': '$292call_function.24'}), (296, {'res': '$296load_global.25'}), (298, {'res': '$k_max298.26'}), (300, {'func': '$296load_global.25', 'args': ['$k_max298.26'], 'res': '$300call_function.27'}), (302, {'value': '$300call_function.27', 'res': '$302get_iter.28'})), outgoing_phis={'$phi304.1': '$302get_iter.28'}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: ('$phi238.0', '$302get_iter.28')})
2025-05-02 18:14:39,587 - DEBUG - block_infos State(pc_initial=304 nstack_initial=2):
AdaptBlockInfo(insts=((304, {'iterator': '$phi304.1', 'pair': '$304for_iter.2', 'indval': '$304for_iter.3', 'pred': '$304for_iter.4'}),), outgoing_phis={'$phi306.2': '$304for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={380: ('$phi304.0',), 306: ('$phi304.0', '$phi304.1', '$304for_iter.3')})
2025-05-02 18:14:39,587 - DEBUG - block_infos State(pc_initial=306 nstack_initial=3):
AdaptBlockInfo(insts=((306, {'value': '$phi306.2'}), (308, {'res': '$interp_win308.3'}), (310, {'res': '$offset310.4'}), (312, {'res': '$k312.5'}), (314, {'res': '$index_step314.6'}), (316, {'lhs': '$k312.5', 'rhs': '$index_step314.6', 'res': '$316binary_multiply.7'}), (318, {'lhs': '$offset310.4', 'rhs': '$316binary_multiply.7', 'res': '$318binary_add.8'}), (320, {'index': '$318binary_add.8', 'target': '$interp_win308.3', 'res': '$320binary_subscr.9'}), (322, {'res': '$eta322.10'}), (324, {'res': '$interp_delta324.11'}), (326, {'res': '$offset326.12'}), (328, {'res': '$k328.13'}), (330, {'res': '$index_step330.14'}), (332, {'lhs': '$k328.13', 'rhs': '$index_step330.14', 'res': '$332binary_multiply.15'}), (334, {'lhs': '$offset326.12', 'rhs': '$332binary_multiply.15', 'res': '$334binary_add.16'}), (336, {'index': '$334binary_add.16', 'target': '$interp_delta324.11', 'res': '$336binary_subscr.17'}), (338, {'lhs': '$eta322.10', 'rhs': '$336binary_subscr.17', 'res': '$338binary_multiply.18'}), (340, {'lhs': '$320binary_subscr.9', 'rhs': '$338binary_multiply.18', 'res': '$340binary_add.19'}), (342, {'value': '$340binary_add.19'}), (344, {'res': '$y344.20'}), (346, {'res': '$t346.21'}), (348, {'orig': ['$y344.20', '$t346.21'], 'duped': ['$348dup_top_two.22', '$348dup_top_two.23']}), (350, {'index': '$348dup_top_two.23', 'target': '$348dup_top_two.22', 'res': '$350binary_subscr.24'}), (352, {'res': '$weight352.25'}), (354, {'res': '$x354.26'}), (356, {'res': '$n356.27'}), (358, {'res': '$k358.28'}), (360, {'lhs': '$n356.27', 'rhs': '$k358.28', 'res': '$360binary_add.29'}), (362, {'res': '$const362.30'}), (364, {'lhs': '$360binary_add.29', 'rhs': '$const362.30', 'res': '$364binary_add.31'}), (366, {'index': '$364binary_add.31', 'target': '$x354.26', 'res': '$366binary_subscr.32'}), (368, {'lhs': '$weight352.25', 'rhs': '$366binary_subscr.32', 'res': '$368binary_multiply.33'}), (370, {'lhs': '$350binary_subscr.24', 'rhs': '$368binary_multiply.33', 'res': '$370inplace_add.34'}), (374, {'target': '$y344.20', 'index': '$t346.21', 'value': '$370inplace_add.34'}), (376, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: ('$phi306.0', '$phi306.1')})
2025-05-02 18:14:39,587 - DEBUG - block_infos State(pc_initial=380 nstack_initial=1):
AdaptBlockInfo(insts=((380, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi380.0',)})
2025-05-02 18:14:39,587 - DEBUG - block_infos State(pc_initial=382 nstack_initial=0):
AdaptBlockInfo(insts=((382, {'res': '$const382.0'}), (384, {'retval': '$const382.0', 'castval': '$384return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-02 18:14:39,589 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    t_out = arg(1, name=t_out)               ['t_out']
    interp_win = arg(2, name=interp_win)     ['interp_win']
    interp_delta = arg(3, name=interp_delta) ['interp_delta']
    num_table = arg(4, name=num_table)       ['num_table']
    scale = arg(5, name=scale)               ['scale']
    y = arg(6, name=y)                       ['y']
    $2load_global.0 = global(int: <class 'int'>) ['$2load_global.0']
    $8binary_multiply.3 = scale * num_table  ['$8binary_multiply.3', 'num_table', 'scale']
    index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8binary_multiply.3', 'index_step']
    time_register = const(float, 0.0)        ['time_register']
    n = const(int, 0)                        ['n']
    frac = const(float, 0.0)                 ['frac']
    index_frac = const(float, 0.0)           ['index_frac']
    offset = const(int, 0)                   ['offset']
    eta = const(float, 0.0)                  ['eta']
    weight = const(float, 0.0)               ['weight']
    $44load_attr.13 = getattr(value=interp_win, attr=shape) ['$44load_attr.13', 'interp_win']
    $const46.14 = const(int, 0)              ['$const46.14']
    nwin = getitem(value=$44load_attr.13, index=$const46.14, fn=<built-in function getitem>) ['$44load_attr.13', '$const46.14', 'nwin']
    $54load_attr.17 = getattr(value=x, attr=shape) ['$54load_attr.17', 'x']
    $const56.18 = const(int, 0)              ['$const56.18']
    n_orig = getitem(value=$54load_attr.17, index=$const56.18, fn=<built-in function getitem>) ['$54load_attr.17', '$const56.18', 'n_orig']
    $64load_attr.21 = getattr(value=t_out, attr=shape) ['$64load_attr.21', 't_out']
    $const66.22 = const(int, 0)              ['$const66.22']
    n_out = getitem(value=$64load_attr.21, index=$const66.22, fn=<built-in function getitem>) ['$64load_attr.21', '$const66.22', 'n_out']
    $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>) ['$72load_global.24']
    $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.24', '$76call_function.26', 'n_out']
    $78get_iter.27 = getiter(value=$76call_function.26) ['$76call_function.26', '$78get_iter.27']
    $phi80.0 = $78get_iter.27                ['$78get_iter.27', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi84.1 = $80for_iter.2                 ['$80for_iter.2', '$phi84.1']
    branch $80for_iter.3, 84, 382            ['$80for_iter.3']
label 84:
    t = $phi84.1                             ['$phi84.1', 't']
    time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>) ['t', 't_out', 'time_register']
    $94load_global.5 = global(int: <class 'int'>) ['$94load_global.5']
    n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None) ['$94load_global.5', 'n', 'time_register']
    $108binary_subtract.11 = time_register - n ['$108binary_subtract.11', 'n', 'time_register']
    frac = scale * $108binary_subtract.11    ['$108binary_subtract.11', 'frac', 'scale']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $122load_global.16 = global(int: <class 'int'>) ['$122load_global.16']
    offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.16', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $138load_global.22 = global(min: <built-in function min>) ['$138load_global.22']
    $const142.24 = const(int, 1)             ['$const142.24']
    $144binary_add.25 = n + $const142.24     ['$144binary_add.25', '$const142.24', 'n']
    $150binary_subtract.28 = nwin - offset   ['$150binary_subtract.28', 'nwin', 'offset']
    $154binary_floor_divide.30 = $150binary_subtract.28 // index_step ['$150binary_subtract.28', '$154binary_floor_divide.30', 'index_step']
    i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None) ['$138load_global.22', '$144binary_add.25', '$154binary_floor_divide.30', 'i_max']
    $160load_global.32 = global(range: <class 'range'>) ['$160load_global.32']
    $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None) ['$160load_global.32', '$164call_function.34', 'i_max']
    $166get_iter.35 = getiter(value=$164call_function.34) ['$164call_function.34', '$166get_iter.35']
    $phi168.1 = $166get_iter.35              ['$166get_iter.35', '$phi168.1']
    jump 168                                 []
label 168:
    $168for_iter.2 = iternext(value=$phi168.1) ['$168for_iter.2', '$phi168.1']
    $168for_iter.3 = pair_first(value=$168for_iter.2) ['$168for_iter.2', '$168for_iter.3']
    $168for_iter.4 = pair_second(value=$168for_iter.2) ['$168for_iter.2', '$168for_iter.4']
    $phi170.2 = $168for_iter.3               ['$168for_iter.3', '$phi170.2']
    branch $168for_iter.4, 170, 238          ['$168for_iter.4']
label 170:
    i = $phi170.2                            ['$phi170.2', 'i']
    $180binary_multiply.7 = i * index_step   ['$180binary_multiply.7', 'i', 'index_step']
    $182binary_add.8 = offset + $180binary_multiply.7 ['$180binary_multiply.7', '$182binary_add.8', 'offset']
    $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>) ['$182binary_add.8', '$184binary_subscr.9', 'interp_win']
    $196binary_multiply.15 = i * index_step  ['$196binary_multiply.15', 'i', 'index_step']
    $198binary_add.16 = offset + $196binary_multiply.15 ['$196binary_multiply.15', '$198binary_add.16', 'offset']
    $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>) ['$198binary_add.16', '$200binary_subscr.17', 'interp_delta']
    $202binary_multiply.18 = eta * $200binary_subscr.17 ['$200binary_subscr.17', '$202binary_multiply.18', 'eta']
    weight = $184binary_subscr.9 + $202binary_multiply.18 ['$184binary_subscr.9', '$202binary_multiply.18', 'weight']
    $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>) ['$214binary_subscr.24', 't', 'y']
    $224binary_subtract.29 = n - i           ['$224binary_subtract.29', 'i', 'n']
    $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>) ['$224binary_subtract.29', '$226binary_subscr.30', 'x']
    $228binary_multiply.31 = weight * $226binary_subscr.30 ['$226binary_subscr.30', '$228binary_multiply.31', 'weight']
    $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined) ['$214binary_subscr.24', '$228binary_multiply.31', '$230inplace_add.32']
    y[t] = $230inplace_add.32                ['$230inplace_add.32', 't', 'y']
    jump 168                                 []
label 238:
    $242binary_subtract.3 = scale - frac     ['$242binary_subtract.3', 'frac', 'scale']
    frac = $242binary_subtract.3             ['$242binary_subtract.3', 'frac']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $254load_global.7 = global(int: <class 'int'>) ['$254load_global.7']
    offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None) ['$254load_global.7', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $270load_global.13 = global(min: <built-in function min>) ['$270load_global.13']
    $276binary_subtract.16 = n_orig - n      ['$276binary_subtract.16', 'n', 'n_orig']
    $const278.17 = const(int, 1)             ['$const278.17']
    $280binary_subtract.18 = $276binary_subtract.16 - $const278.17 ['$276binary_subtract.16', '$280binary_subtract.18', '$const278.17']
    $286binary_subtract.21 = nwin - offset   ['$286binary_subtract.21', 'nwin', 'offset']
    $290binary_floor_divide.23 = $286binary_subtract.21 // index_step ['$286binary_subtract.21', '$290binary_floor_divide.23', 'index_step']
    k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None) ['$270load_global.13', '$280binary_subtract.18', '$290binary_floor_divide.23', 'k_max']
    $296load_global.25 = global(range: <class 'range'>) ['$296load_global.25']
    $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None) ['$296load_global.25', '$300call_function.27', 'k_max']
    $302get_iter.28 = getiter(value=$300call_function.27) ['$300call_function.27', '$302get_iter.28']
    $phi304.1 = $302get_iter.28              ['$302get_iter.28', '$phi304.1']
    jump 304                                 []
label 304:
    $304for_iter.2 = iternext(value=$phi304.1) ['$304for_iter.2', '$phi304.1']
    $304for_iter.3 = pair_first(value=$304for_iter.2) ['$304for_iter.2', '$304for_iter.3']
    $304for_iter.4 = pair_second(value=$304for_iter.2) ['$304for_iter.2', '$304for_iter.4']
    $phi306.2 = $304for_iter.3               ['$304for_iter.3', '$phi306.2']
    branch $304for_iter.4, 306, 380          ['$304for_iter.4']
label 306:
    k = $phi306.2                            ['$phi306.2', 'k']
    $316binary_multiply.7 = k * index_step   ['$316binary_multiply.7', 'index_step', 'k']
    $318binary_add.8 = offset + $316binary_multiply.7 ['$316binary_multiply.7', '$318binary_add.8', 'offset']
    $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>) ['$318binary_add.8', '$320binary_subscr.9', 'interp_win']
    $332binary_multiply.15 = k * index_step  ['$332binary_multiply.15', 'index_step', 'k']
    $334binary_add.16 = offset + $332binary_multiply.15 ['$332binary_multiply.15', '$334binary_add.16', 'offset']
    $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>) ['$334binary_add.16', '$336binary_subscr.17', 'interp_delta']
    $338binary_multiply.18 = eta * $336binary_subscr.17 ['$336binary_subscr.17', '$338binary_multiply.18', 'eta']
    weight = $320binary_subscr.9 + $338binary_multiply.18 ['$320binary_subscr.9', '$338binary_multiply.18', 'weight']
    $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>) ['$350binary_subscr.24', 't', 'y']
    $360binary_add.29 = n + k                ['$360binary_add.29', 'k', 'n']
    $const362.30 = const(int, 1)             ['$const362.30']
    $364binary_add.31 = $360binary_add.29 + $const362.30 ['$360binary_add.29', '$364binary_add.31', '$const362.30']
    $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>) ['$364binary_add.31', '$366binary_subscr.32', 'x']
    $368binary_multiply.33 = weight * $366binary_subscr.32 ['$366binary_subscr.32', '$368binary_multiply.33', 'weight']
    $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined) ['$350binary_subscr.24', '$368binary_multiply.33', '$370inplace_add.34']
    y[t] = $370inplace_add.34                ['$370inplace_add.34', 't', 'y']
    jump 304                                 []
label 380:
    jump 80                                  []
label 382:
    $const382.0 = const(NoneType, None)      ['$const382.0']
    $384return_value.1 = cast(value=$const382.0) ['$384return_value.1', '$const382.0']
    return $384return_value.1                ['$384return_value.1']

2025-05-02 18:14:39,610 - DEBUG - ==== SSA block analysis pass on 0
2025-05-02 18:14:39,610 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000293448614F0>
2025-05-02 18:14:39,610 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 18:14:39,610 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 18:14:39,610 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 18:14:39,610 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 18:14:39,610 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 18:14:39,610 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 18:14:39,610 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 18:14:39,610 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 18:14:39,610 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 18:14:39,610 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,610 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 18:14:39,610 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 18:14:39,610 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 18:14:39,610 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 18:14:39,610 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 18:14:39,610 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 18:14:39,610 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 18:14:39,610 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 18:14:39,610 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 18:14:39,610 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 18:14:39,610 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 18:14:39,610 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 18:14:39,610 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 18:14:39,610 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 18:14:39,610 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 18:14:39,610 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 18:14:39,610 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 18:14:39,610 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,610 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 18:14:39,610 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 18:14:39,610 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,610 - DEBUG - ==== SSA block analysis pass on 80
2025-05-02 18:14:39,610 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000293448614F0>
2025-05-02 18:14:39,610 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 18:14:39,610 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 18:14:39,610 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 18:14:39,610 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 18:14:39,610 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 18:14:39,610 - DEBUG - ==== SSA block analysis pass on 84
2025-05-02 18:14:39,610 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000293448614F0>
2025-05-02 18:14:39,610 - DEBUG - on stmt: t = $phi84.1
2025-05-02 18:14:39,610 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,610 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 18:14:39,610 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,610 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 18:14:39,610 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 18:14:39,610 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 18:14:39,610 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 18:14:39,610 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,610 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 18:14:39,610 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 18:14:39,610 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 18:14:39,610 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 18:14:39,610 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 18:14:39,610 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 18:14:39,610 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,612 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 18:14:39,613 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,613 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 18:14:39,613 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 18:14:39,613 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,613 - DEBUG - ==== SSA block analysis pass on 168
2025-05-02 18:14:39,613 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000293448614F0>
2025-05-02 18:14:39,613 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 18:14:39,613 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 18:14:39,613 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 18:14:39,613 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 18:14:39,613 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 18:14:39,613 - DEBUG - ==== SSA block analysis pass on 170
2025-05-02 18:14:39,613 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000293448614F0>
2025-05-02 18:14:39,613 - DEBUG - on stmt: i = $phi170.2
2025-05-02 18:14:39,613 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 18:14:39,613 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 18:14:39,613 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,613 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 18:14:39,613 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 18:14:39,613 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,613 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 18:14:39,613 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 18:14:39,613 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,613 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 18:14:39,613 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 18:14:39,613 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 18:14:39,613 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,613 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 18:14:39,613 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,613 - DEBUG - ==== SSA block analysis pass on 238
2025-05-02 18:14:39,613 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000293448614F0>
2025-05-02 18:14:39,613 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 18:14:39,613 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 18:14:39,613 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 18:14:39,616 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 18:14:39,616 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,616 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 18:14:39,616 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 18:14:39,616 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 18:14:39,616 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 18:14:39,616 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 18:14:39,616 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 18:14:39,616 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 18:14:39,616 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,616 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 18:14:39,616 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,616 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 18:14:39,616 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 18:14:39,616 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,616 - DEBUG - ==== SSA block analysis pass on 304
2025-05-02 18:14:39,616 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000293448614F0>
2025-05-02 18:14:39,616 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 18:14:39,616 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 18:14:39,616 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 18:14:39,616 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 18:14:39,616 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 18:14:39,616 - DEBUG - ==== SSA block analysis pass on 306
2025-05-02 18:14:39,616 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000293448614F0>
2025-05-02 18:14:39,616 - DEBUG - on stmt: k = $phi306.2
2025-05-02 18:14:39,616 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 18:14:39,616 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 18:14:39,616 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,616 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 18:14:39,616 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 18:14:39,616 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,616 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 18:14:39,616 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 18:14:39,616 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,616 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 18:14:39,616 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 18:14:39,616 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 18:14:39,616 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 18:14:39,616 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 18:14:39,616 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,616 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 18:14:39,616 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,616 - DEBUG - ==== SSA block analysis pass on 380
2025-05-02 18:14:39,616 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000293448614F0>
2025-05-02 18:14:39,616 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,616 - DEBUG - ==== SSA block analysis pass on 382
2025-05-02 18:14:39,616 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000293448614F0>
2025-05-02 18:14:39,616 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 18:14:39,616 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 18:14:39,616 - DEBUG - on stmt: return $384return_value.1
2025-05-02 18:14:39,616 - DEBUG - defs defaultdict(<class 'list'>,
            {'$108binary_subtract.11': [<numba.core.ir.Assign object at 0x000002934484C4F0>],
             '$122load_global.16': [<numba.core.ir.Assign object at 0x000002934484CD00>],
             '$138load_global.22': [<numba.core.ir.Assign object at 0x000002934484F6A0>],
             '$144binary_add.25': [<numba.core.ir.Assign object at 0x000002934484FAF0>],
             '$150binary_subtract.28': [<numba.core.ir.Assign object at 0x000002934484FEB0>],
             '$154binary_floor_divide.30': [<numba.core.ir.Assign object at 0x0000029344853190>],
             '$160load_global.32': [<numba.core.ir.Assign object at 0x0000029344853580>],
             '$164call_function.34': [<numba.core.ir.Assign object at 0x0000029344853880>],
             '$166get_iter.35': [<numba.core.ir.Assign object at 0x00000293448539A0>],
             '$168for_iter.2': [<numba.core.ir.Assign object at 0x000002934484C2B0>],
             '$168for_iter.3': [<numba.core.ir.Assign object at 0x000002934484C6D0>],
             '$168for_iter.4': [<numba.core.ir.Assign object at 0x000002934484CC10>],
             '$180binary_multiply.7': [<numba.core.ir.Assign object at 0x0000029344853D90>],
             '$182binary_add.8': [<numba.core.ir.Assign object at 0x0000029344853F10>],
             '$184binary_subscr.9': [<numba.core.ir.Assign object at 0x00000293448550D0>],
             '$196binary_multiply.15': [<numba.core.ir.Assign object at 0x00000293448557F0>],
             '$198binary_add.16': [<numba.core.ir.Assign object at 0x0000029344855970>],
             '$200binary_subscr.17': [<numba.core.ir.Assign object at 0x0000029344855AF0>],
             '$202binary_multiply.18': [<numba.core.ir.Assign object at 0x0000029344855C70>],
             '$214binary_subscr.24': [<numba.core.ir.Assign object at 0x0000029344857490>],
             '$224binary_subtract.29': [<numba.core.ir.Assign object at 0x0000029344857A90>],
             '$226binary_subscr.30': [<numba.core.ir.Assign object at 0x0000029344857C10>],
             '$228binary_multiply.31': [<numba.core.ir.Assign object at 0x0000029344857D90>],
             '$230inplace_add.32': [<numba.core.ir.Assign object at 0x0000029344857F10>],
             '$242binary_subtract.3': [<numba.core.ir.Assign object at 0x0000029344857070>],
             '$254load_global.7': [<numba.core.ir.Assign object at 0x00000293448594C0>],
             '$270load_global.13': [<numba.core.ir.Assign object at 0x0000029344859E20>],
             '$276binary_subtract.16': [<numba.core.ir.Assign object at 0x000002934485B250>],
             '$280binary_subtract.18': [<numba.core.ir.Assign object at 0x000002934485B550>],
             '$286binary_subtract.21': [<numba.core.ir.Assign object at 0x000002934485B910>],
             '$290binary_floor_divide.23': [<numba.core.ir.Assign object at 0x000002934485BBB0>],
             '$296load_global.25': [<numba.core.ir.Assign object at 0x000002934485BFA0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x00000293448420A0>],
             '$300call_function.27': [<numba.core.ir.Assign object at 0x000002934485D2E0>],
             '$302get_iter.28': [<numba.core.ir.Assign object at 0x000002934485D400>],
             '$304for_iter.2': [<numba.core.ir.Assign object at 0x0000029344859700>],
             '$304for_iter.3': [<numba.core.ir.Assign object at 0x0000029344859D30>],
             '$304for_iter.4': [<numba.core.ir.Assign object at 0x000002934485B130>],
             '$316binary_multiply.7': [<numba.core.ir.Assign object at 0x000002934485DB50>],
             '$318binary_add.8': [<numba.core.ir.Assign object at 0x000002934485DCD0>],
             '$320binary_subscr.9': [<numba.core.ir.Assign object at 0x000002934485DE50>],
             '$332binary_multiply.15': [<numba.core.ir.Assign object at 0x000002934485F5B0>],
             '$334binary_add.16': [<numba.core.ir.Assign object at 0x000002934485F730>],
             '$336binary_subscr.17': [<numba.core.ir.Assign object at 0x000002934485F8B0>],
             '$338binary_multiply.18': [<numba.core.ir.Assign object at 0x000002934485FA30>],
             '$350binary_subscr.24': [<numba.core.ir.Assign object at 0x0000029344861250>],
             '$360binary_add.29': [<numba.core.ir.Assign object at 0x0000029344861850>],
             '$364binary_add.31': [<numba.core.ir.Assign object at 0x0000029344861B50>],
             '$366binary_subscr.32': [<numba.core.ir.Assign object at 0x0000029344861CD0>],
             '$368binary_multiply.33': [<numba.core.ir.Assign object at 0x0000029344861E50>],
             '$370inplace_add.34': [<numba.core.ir.Assign object at 0x0000029344861FD0>],
             '$384return_value.1': [<numba.core.ir.Assign object at 0x0000029344861040>],
             '$44load_attr.13': [<numba.core.ir.Assign object at 0x0000029344845C40>],
             '$54load_attr.17': [<numba.core.ir.Assign object at 0x0000029344848340>],
             '$64load_attr.21': [<numba.core.ir.Assign object at 0x0000029344848A00>],
             '$72load_global.24': [<numba.core.ir.Assign object at 0x0000029344848FA0>],
             '$76call_function.26': [<numba.core.ir.Assign object at 0x000002934484A2E0>],
             '$78get_iter.27': [<numba.core.ir.Assign object at 0x000002934484A400>],
             '$80for_iter.1': [<numba.core.ir.Assign object at 0x0000029344845A30>],
             '$80for_iter.2': [<numba.core.ir.Assign object at 0x0000029344848250>],
             '$80for_iter.3': [<numba.core.ir.Assign object at 0x0000029344848EB0>],
             '$8binary_multiply.3': [<numba.core.ir.Assign object at 0x0000029344842490>],
             '$94load_global.5': [<numba.core.ir.Assign object at 0x000002934484AC40>],
             '$const142.24': [<numba.core.ir.Assign object at 0x000002934484F940>],
             '$const278.17': [<numba.core.ir.Assign object at 0x000002934485B3A0>],
             '$const362.30': [<numba.core.ir.Assign object at 0x00000293448619A0>],
             '$const382.0': [<numba.core.ir.Assign object at 0x000002934485FC70>],
             '$const46.14': [<numba.core.ir.Assign object at 0x0000029344845DC0>],
             '$const56.18': [<numba.core.ir.Assign object at 0x00000293448484C0>],
             '$const66.22': [<numba.core.ir.Assign object at 0x0000029344848B80>],
             '$phi168.1': [<numba.core.ir.Assign object at 0x000002934484A7F0>],
             '$phi170.2': [<numba.core.ir.Assign object at 0x000002934484C070>],
             '$phi304.1': [<numba.core.ir.Assign object at 0x0000029344855370>],
             '$phi306.2': [<numba.core.ir.Assign object at 0x0000029344859670>],
             '$phi80.0': [<numba.core.ir.Assign object at 0x0000029344842250>],
             '$phi84.1': [<numba.core.ir.Assign object at 0x00000293448454F0>],
             'eta': [<numba.core.ir.Assign object at 0x00000293448455E0>,
                     <numba.core.ir.Assign object at 0x000002934484F490>,
                     <numba.core.ir.Assign object at 0x0000029344859C10>],
             'frac': [<numba.core.ir.Assign object at 0x0000029344842DC0>,
                      <numba.core.ir.Assign object at 0x000002934484C670>,
                      <numba.core.ir.Assign object at 0x0000029344857310>],
             'i': [<numba.core.ir.Assign object at 0x000002934484F3D0>],
             'i_max': [<numba.core.ir.Assign object at 0x0000029344853340>],
             'index_frac': [<numba.core.ir.Assign object at 0x00000293448450A0>,
                            <numba.core.ir.Assign object at 0x000002934484CAF0>,
                            <numba.core.ir.Assign object at 0x00000293448592B0>],
             'index_step': [<numba.core.ir.Assign object at 0x0000029344842640>],
             'interp_delta': [<numba.core.ir.Assign object at 0x00000293448241C0>],
             'interp_win': [<numba.core.ir.Assign object at 0x0000029344824280>],
             'k': [<numba.core.ir.Assign object at 0x000002934485D520>],
             'k_max': [<numba.core.ir.Assign object at 0x000002934485BD60>],
             'n': [<numba.core.ir.Assign object at 0x0000029344842B20>,
                   <numba.core.ir.Assign object at 0x000002934484AF40>],
             'n_orig': [<numba.core.ir.Assign object at 0x000002934486EC10>],
             'n_out': [<numba.core.ir.Assign object at 0x000002934486ECD0>],
             'num_table': [<numba.core.ir.Assign object at 0x00000293448244C0>],
             'nwin': [<numba.core.ir.Assign object at 0x000002934486E070>],
             'offset': [<numba.core.ir.Assign object at 0x0000029344845340>,
                        <numba.core.ir.Assign object at 0x000002934484F040>,
                        <numba.core.ir.Assign object at 0x00000293448597C0>],
             'scale': [<numba.core.ir.Assign object at 0x0000029344824DC0>],
             't': [<numba.core.ir.Assign object at 0x000002934484A640>],
             't_out': [<numba.core.ir.Assign object at 0x0000029344824700>],
             'time_register': [<numba.core.ir.Assign object at 0x0000029344842880>,
                               <numba.core.ir.Assign object at 0x000002934484AA30>],
             'weight': [<numba.core.ir.Assign object at 0x0000029344845880>,
                        <numba.core.ir.Assign object at 0x0000029344855DF0>,
                        <numba.core.ir.Assign object at 0x000002934485FBB0>],
             'x': [<numba.core.ir.Assign object at 0x0000029344824640>],
             'y': [<numba.core.ir.Assign object at 0x0000029344824EE0>]})
2025-05-02 18:14:39,616 - DEBUG - SSA violators {'time_register', 'eta', 'frac', 'index_frac', 'weight', 'offset', 'n'}
2025-05-02 18:14:39,616 - DEBUG - Fix SSA violator on var time_register
2025-05-02 18:14:39,616 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 18:14:39,616 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000293448616A0>
2025-05-02 18:14:39,616 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 18:14:39,616 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 18:14:39,616 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 18:14:39,616 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 18:14:39,616 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 18:14:39,620 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 18:14:39,620 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 18:14:39,620 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 18:14:39,620 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 18:14:39,620 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,620 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 18:14:39,620 - DEBUG - first assign: time_register
2025-05-02 18:14:39,620 - DEBUG - replaced with: time_register = const(float, 0.0)
2025-05-02 18:14:39,620 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 18:14:39,620 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 18:14:39,620 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 18:14:39,620 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 18:14:39,620 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 18:14:39,620 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 18:14:39,620 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 18:14:39,620 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 18:14:39,620 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 18:14:39,620 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 18:14:39,620 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 18:14:39,620 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 18:14:39,620 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 18:14:39,620 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 18:14:39,620 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 18:14:39,620 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 18:14:39,620 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,620 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 18:14:39,620 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 18:14:39,620 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,620 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 18:14:39,620 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000293448616A0>
2025-05-02 18:14:39,620 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 18:14:39,620 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 18:14:39,620 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 18:14:39,620 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 18:14:39,620 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 18:14:39,620 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 18:14:39,620 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000293448616A0>
2025-05-02 18:14:39,620 - DEBUG - on stmt: t = $phi84.1
2025-05-02 18:14:39,620 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,620 - DEBUG - replaced with: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,620 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 18:14:39,620 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,620 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 18:14:39,620 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 18:14:39,620 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 18:14:39,620 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 18:14:39,620 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,620 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 18:14:39,620 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 18:14:39,620 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 18:14:39,620 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 18:14:39,620 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 18:14:39,620 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 18:14:39,620 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,620 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 18:14:39,620 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,622 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 18:14:39,622 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 18:14:39,622 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,622 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 18:14:39,622 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000293448616A0>
2025-05-02 18:14:39,622 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 18:14:39,622 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 18:14:39,622 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 18:14:39,622 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 18:14:39,622 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 18:14:39,622 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 18:14:39,622 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000293448616A0>
2025-05-02 18:14:39,622 - DEBUG - on stmt: i = $phi170.2
2025-05-02 18:14:39,622 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 18:14:39,622 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 18:14:39,622 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,622 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 18:14:39,622 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 18:14:39,622 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,622 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 18:14:39,622 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 18:14:39,622 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,622 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 18:14:39,622 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 18:14:39,622 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 18:14:39,622 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,622 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 18:14:39,622 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,622 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 18:14:39,622 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000293448616A0>
2025-05-02 18:14:39,622 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 18:14:39,622 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 18:14:39,622 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 18:14:39,622 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 18:14:39,622 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,622 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 18:14:39,622 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 18:14:39,622 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 18:14:39,622 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 18:14:39,622 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 18:14:39,622 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 18:14:39,622 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 18:14:39,622 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,622 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 18:14:39,622 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,622 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 18:14:39,622 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 18:14:39,622 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,622 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 18:14:39,622 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000293448616A0>
2025-05-02 18:14:39,622 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 18:14:39,622 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 18:14:39,622 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 18:14:39,622 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 18:14:39,622 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 18:14:39,622 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 18:14:39,622 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000293448616A0>
2025-05-02 18:14:39,622 - DEBUG - on stmt: k = $phi306.2
2025-05-02 18:14:39,622 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 18:14:39,622 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 18:14:39,622 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,624 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 18:14:39,624 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 18:14:39,624 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,624 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 18:14:39,624 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 18:14:39,624 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,624 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 18:14:39,624 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 18:14:39,624 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 18:14:39,624 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 18:14:39,624 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 18:14:39,624 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,624 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 18:14:39,624 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,624 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 18:14:39,624 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000293448616A0>
2025-05-02 18:14:39,624 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,624 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 18:14:39,624 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000293448616A0>
2025-05-02 18:14:39,624 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 18:14:39,624 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 18:14:39,624 - DEBUG - on stmt: return $384return_value.1
2025-05-02 18:14:39,624 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002934486E400>],
             84: [<numba.core.ir.Assign object at 0x000002934486EEB0>]})
2025-05-02 18:14:39,624 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 18:14:39,624 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000293448616A0>
2025-05-02 18:14:39,624 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 18:14:39,624 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 18:14:39,624 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 18:14:39,624 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 18:14:39,624 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 18:14:39,624 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 18:14:39,624 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 18:14:39,624 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 18:14:39,624 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 18:14:39,624 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,624 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 18:14:39,624 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 18:14:39,624 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 18:14:39,624 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 18:14:39,624 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 18:14:39,624 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 18:14:39,624 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 18:14:39,624 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 18:14:39,624 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 18:14:39,624 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 18:14:39,624 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 18:14:39,624 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 18:14:39,624 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 18:14:39,624 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 18:14:39,624 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 18:14:39,624 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 18:14:39,624 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 18:14:39,624 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,624 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 18:14:39,624 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 18:14:39,624 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,624 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 18:14:39,624 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000293448616A0>
2025-05-02 18:14:39,624 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 18:14:39,626 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 18:14:39,626 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 18:14:39,626 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 18:14:39,626 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 18:14:39,626 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 18:14:39,626 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000293448616A0>
2025-05-02 18:14:39,626 - DEBUG - on stmt: t = $phi84.1
2025-05-02 18:14:39,626 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,626 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 18:14:39,626 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,626 - DEBUG - find_def var='time_register' stmt=n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,626 - DEBUG - replaced with: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,626 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 18:14:39,626 - DEBUG - find_def var='time_register' stmt=$108binary_subtract.11 = time_register - n
2025-05-02 18:14:39,626 - DEBUG - replaced with: $108binary_subtract.11 = time_register.1 - n
2025-05-02 18:14:39,626 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 18:14:39,626 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 18:14:39,626 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 18:14:39,626 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,626 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 18:14:39,626 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 18:14:39,626 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 18:14:39,626 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 18:14:39,626 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 18:14:39,626 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 18:14:39,626 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,626 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 18:14:39,626 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,626 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 18:14:39,626 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 18:14:39,626 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,626 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 18:14:39,626 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000293448616A0>
2025-05-02 18:14:39,626 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 18:14:39,626 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 18:14:39,626 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 18:14:39,626 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 18:14:39,626 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 18:14:39,626 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 18:14:39,626 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000293448616A0>
2025-05-02 18:14:39,626 - DEBUG - on stmt: i = $phi170.2
2025-05-02 18:14:39,626 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 18:14:39,626 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 18:14:39,626 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,626 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 18:14:39,626 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 18:14:39,626 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,626 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 18:14:39,626 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 18:14:39,626 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,626 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 18:14:39,626 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 18:14:39,628 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 18:14:39,628 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,628 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 18:14:39,628 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,628 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 18:14:39,628 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000293448616A0>
2025-05-02 18:14:39,628 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 18:14:39,628 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 18:14:39,628 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 18:14:39,628 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 18:14:39,628 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,628 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 18:14:39,628 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 18:14:39,628 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 18:14:39,628 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 18:14:39,628 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 18:14:39,628 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 18:14:39,628 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 18:14:39,628 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,628 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 18:14:39,628 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,628 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 18:14:39,628 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 18:14:39,628 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,632 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 18:14:39,632 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000293448616A0>
2025-05-02 18:14:39,632 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 18:14:39,632 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 18:14:39,632 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 18:14:39,632 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 18:14:39,632 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 18:14:39,632 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 18:14:39,632 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000293448616A0>
2025-05-02 18:14:39,632 - DEBUG - on stmt: k = $phi306.2
2025-05-02 18:14:39,632 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 18:14:39,632 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 18:14:39,632 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,632 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 18:14:39,632 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 18:14:39,632 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,632 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 18:14:39,632 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 18:14:39,632 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,632 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 18:14:39,632 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 18:14:39,632 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 18:14:39,632 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 18:14:39,632 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 18:14:39,632 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,632 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 18:14:39,632 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,632 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 18:14:39,632 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000293448616A0>
2025-05-02 18:14:39,632 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,632 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 18:14:39,632 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000293448616A0>
2025-05-02 18:14:39,632 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 18:14:39,632 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 18:14:39,632 - DEBUG - on stmt: return $384return_value.1
2025-05-02 18:14:39,632 - DEBUG - Fix SSA violator on var eta
2025-05-02 18:14:39,632 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 18:14:39,632 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000293448616A0>
2025-05-02 18:14:39,632 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 18:14:39,632 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 18:14:39,632 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 18:14:39,633 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 18:14:39,633 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 18:14:39,633 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 18:14:39,633 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 18:14:39,633 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 18:14:39,633 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 18:14:39,633 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,633 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 18:14:39,633 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 18:14:39,633 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 18:14:39,633 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 18:14:39,633 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 18:14:39,633 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 18:14:39,633 - DEBUG - first assign: eta
2025-05-02 18:14:39,634 - DEBUG - replaced with: eta = const(float, 0.0)
2025-05-02 18:14:39,634 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 18:14:39,634 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 18:14:39,634 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 18:14:39,634 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 18:14:39,634 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,634 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 18:14:39,634 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000293448616A0>
2025-05-02 18:14:39,634 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 18:14:39,634 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 18:14:39,634 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 18:14:39,634 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000293448616A0>
2025-05-02 18:14:39,634 - DEBUG - on stmt: t = $phi84.1
2025-05-02 18:14:39,634 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 18:14:39,634 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 18:14:39,634 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 18:14:39,634 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,634 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 18:14:39,634 - DEBUG - replaced with: eta.1 = index_frac - offset
2025-05-02 18:14:39,634 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 18:14:39,634 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 18:14:39,634 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 18:14:39,634 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 18:14:39,634 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,634 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 18:14:39,634 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000293448616A0>
2025-05-02 18:14:39,634 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 18:14:39,634 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 18:14:39,634 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 18:14:39,634 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000293448616A0>
2025-05-02 18:14:39,634 - DEBUG - on stmt: i = $phi170.2
2025-05-02 18:14:39,634 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 18:14:39,634 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 18:14:39,634 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 18:14:39,634 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 18:14:39,634 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 18:14:39,634 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 18:14:39,634 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 18:14:39,634 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 18:14:39,634 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,634 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 18:14:39,634 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,634 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 18:14:39,634 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000293448616A0>
2025-05-02 18:14:39,634 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 18:14:39,634 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 18:14:39,634 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 18:14:39,634 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,634 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 18:14:39,634 - DEBUG - replaced with: eta.2 = index_frac - offset
2025-05-02 18:14:39,634 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 18:14:39,634 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 18:14:39,634 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 18:14:39,634 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 18:14:39,634 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 18:14:39,634 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,634 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 18:14:39,634 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000293448616A0>
2025-05-02 18:14:39,634 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 18:14:39,634 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 18:14:39,634 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 18:14:39,634 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000293448616A0>
2025-05-02 18:14:39,634 - DEBUG - on stmt: k = $phi306.2
2025-05-02 18:14:39,634 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 18:14:39,634 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 18:14:39,634 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 18:14:39,634 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 18:14:39,634 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 18:14:39,634 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 18:14:39,634 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 18:14:39,634 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 18:14:39,634 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 18:14:39,634 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,634 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 18:14:39,634 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,634 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 18:14:39,634 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000293448616A0>
2025-05-02 18:14:39,634 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,634 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 18:14:39,634 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000293448616A0>
2025-05-02 18:14:39,634 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 18:14:39,634 - DEBUG - on stmt: return $384return_value.1
2025-05-02 18:14:39,634 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002934486E880>],
             84: [<numba.core.ir.Assign object at 0x000002934486E9D0>],
             238: [<numba.core.ir.Assign object at 0x000002934486F4C0>]})
2025-05-02 18:14:39,634 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 18:14:39,634 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486EDF0>
2025-05-02 18:14:39,634 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 18:14:39,634 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 18:14:39,634 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 18:14:39,634 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 18:14:39,634 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 18:14:39,634 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 18:14:39,634 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 18:14:39,634 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,634 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 18:14:39,634 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 18:14:39,634 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 18:14:39,634 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 18:14:39,634 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 18:14:39,634 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 18:14:39,634 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 18:14:39,634 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 18:14:39,634 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 18:14:39,634 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 18:14:39,634 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,634 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 18:14:39,634 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486EDF0>
2025-05-02 18:14:39,634 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 18:14:39,634 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 18:14:39,634 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 18:14:39,634 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486EDF0>
2025-05-02 18:14:39,634 - DEBUG - on stmt: t = $phi84.1
2025-05-02 18:14:39,634 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 18:14:39,634 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 18:14:39,634 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 18:14:39,634 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,634 - DEBUG - on stmt: eta.1 = index_frac - offset
2025-05-02 18:14:39,634 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 18:14:39,634 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 18:14:39,634 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 18:14:39,634 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 18:14:39,634 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,634 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 18:14:39,634 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486EDF0>
2025-05-02 18:14:39,634 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 18:14:39,634 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 18:14:39,634 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 18:14:39,634 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486EDF0>
2025-05-02 18:14:39,634 - DEBUG - on stmt: i = $phi170.2
2025-05-02 18:14:39,634 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 18:14:39,634 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 18:14:39,634 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 18:14:39,634 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 18:14:39,634 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 18:14:39,634 - DEBUG - find_def var='eta' stmt=$202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 18:14:39,634 - DEBUG - find_def_from_top label 170
2025-05-02 18:14:39,634 - DEBUG - idom 168 from label 170
2025-05-02 18:14:39,634 - DEBUG - find_def_from_bottom label 168
2025-05-02 18:14:39,634 - DEBUG - find_def_from_top label 168
2025-05-02 18:14:39,634 - DEBUG - idom 84 from label 168
2025-05-02 18:14:39,634 - DEBUG - find_def_from_bottom label 84
2025-05-02 18:14:39,634 - DEBUG - replaced with: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 18:14:39,634 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 18:14:39,634 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 18:14:39,634 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 18:14:39,634 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,634 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 18:14:39,634 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,634 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 18:14:39,634 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486EDF0>
2025-05-02 18:14:39,634 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 18:14:39,634 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 18:14:39,634 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 18:14:39,634 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,634 - DEBUG - on stmt: eta.2 = index_frac - offset
2025-05-02 18:14:39,634 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 18:14:39,634 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 18:14:39,634 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 18:14:39,634 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 18:14:39,634 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 18:14:39,634 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 18:14:39,644 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,644 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 18:14:39,644 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486EDF0>
2025-05-02 18:14:39,644 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 18:14:39,644 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 18:14:39,644 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 18:14:39,644 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486EDF0>
2025-05-02 18:14:39,644 - DEBUG - on stmt: k = $phi306.2
2025-05-02 18:14:39,644 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 18:14:39,644 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 18:14:39,644 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 18:14:39,644 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 18:14:39,644 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 18:14:39,644 - DEBUG - find_def var='eta' stmt=$338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 18:14:39,644 - DEBUG - find_def_from_top label 306
2025-05-02 18:14:39,644 - DEBUG - idom 304 from label 306
2025-05-02 18:14:39,644 - DEBUG - find_def_from_bottom label 304
2025-05-02 18:14:39,644 - DEBUG - find_def_from_top label 304
2025-05-02 18:14:39,644 - DEBUG - idom 238 from label 304
2025-05-02 18:14:39,644 - DEBUG - find_def_from_bottom label 238
2025-05-02 18:14:39,644 - DEBUG - replaced with: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 18:14:39,644 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 18:14:39,644 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 18:14:39,644 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 18:14:39,644 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 18:14:39,644 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,644 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 18:14:39,644 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,644 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 18:14:39,644 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486EDF0>
2025-05-02 18:14:39,644 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,644 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 18:14:39,644 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486EDF0>
2025-05-02 18:14:39,644 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 18:14:39,644 - DEBUG - on stmt: return $384return_value.1
2025-05-02 18:14:39,644 - DEBUG - Fix SSA violator on var frac
2025-05-02 18:14:39,644 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 18:14:39,644 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486E160>
2025-05-02 18:14:39,644 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 18:14:39,644 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 18:14:39,644 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 18:14:39,644 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 18:14:39,644 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 18:14:39,644 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 18:14:39,644 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 18:14:39,644 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,644 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 18:14:39,644 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 18:14:39,644 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 18:14:39,644 - DEBUG - first assign: frac
2025-05-02 18:14:39,644 - DEBUG - replaced with: frac = const(float, 0.0)
2025-05-02 18:14:39,644 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 18:14:39,644 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 18:14:39,644 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 18:14:39,644 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 18:14:39,644 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 18:14:39,644 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 18:14:39,644 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 18:14:39,644 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,644 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 18:14:39,644 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486E160>
2025-05-02 18:14:39,644 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 18:14:39,644 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 18:14:39,644 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 18:14:39,644 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486E160>
2025-05-02 18:14:39,644 - DEBUG - on stmt: t = $phi84.1
2025-05-02 18:14:39,644 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 18:14:39,644 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 18:14:39,644 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 18:14:39,644 - DEBUG - replaced with: frac.1 = scale * $108binary_subtract.11
2025-05-02 18:14:39,644 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 18:14:39,644 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 18:14:39,644 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,644 - DEBUG - on stmt: eta.1 = index_frac - offset
2025-05-02 18:14:39,644 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 18:14:39,644 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 18:14:39,644 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 18:14:39,644 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 18:14:39,644 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,644 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 18:14:39,644 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486E160>
2025-05-02 18:14:39,644 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 18:14:39,644 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 18:14:39,644 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 18:14:39,644 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 18:14:39,644 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486E160>
2025-05-02 18:14:39,648 - DEBUG - on stmt: i = $phi170.2
2025-05-02 18:14:39,648 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 18:14:39,648 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 18:14:39,648 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,648 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 18:14:39,648 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 18:14:39,648 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,648 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 18:14:39,648 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 18:14:39,648 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,648 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 18:14:39,648 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 18:14:39,648 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 18:14:39,648 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,648 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 18:14:39,648 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,648 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 18:14:39,648 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486E160>
2025-05-02 18:14:39,648 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 18:14:39,648 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 18:14:39,648 - DEBUG - replaced with: frac.2 = $242binary_subtract.3
2025-05-02 18:14:39,648 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 18:14:39,648 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 18:14:39,648 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,648 - DEBUG - on stmt: eta.2 = index_frac - offset
2025-05-02 18:14:39,648 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 18:14:39,648 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 18:14:39,648 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 18:14:39,648 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 18:14:39,648 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 18:14:39,648 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 18:14:39,648 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,648 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 18:14:39,648 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,648 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 18:14:39,648 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 18:14:39,648 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,648 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 18:14:39,648 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486E160>
2025-05-02 18:14:39,648 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 18:14:39,648 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 18:14:39,648 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 18:14:39,648 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 18:14:39,648 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 18:14:39,648 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 18:14:39,648 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486E160>
2025-05-02 18:14:39,648 - DEBUG - on stmt: k = $phi306.2
2025-05-02 18:14:39,648 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 18:14:39,648 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 18:14:39,648 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,650 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 18:14:39,650 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 18:14:39,650 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,650 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 18:14:39,650 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 18:14:39,650 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,650 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 18:14:39,650 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 18:14:39,650 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 18:14:39,650 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 18:14:39,650 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 18:14:39,650 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,650 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 18:14:39,650 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,650 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 18:14:39,650 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486E160>
2025-05-02 18:14:39,650 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,650 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 18:14:39,650 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486E160>
2025-05-02 18:14:39,650 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 18:14:39,650 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 18:14:39,650 - DEBUG - on stmt: return $384return_value.1
2025-05-02 18:14:39,650 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002934486E2B0>],
             84: [<numba.core.ir.Assign object at 0x000002934486E670>],
             238: [<numba.core.ir.Assign object at 0x000002934486F340>]})
2025-05-02 18:14:39,650 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 18:14:39,650 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E7F0>
2025-05-02 18:14:39,650 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 18:14:39,650 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 18:14:39,650 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 18:14:39,650 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 18:14:39,650 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 18:14:39,650 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 18:14:39,650 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 18:14:39,650 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 18:14:39,650 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 18:14:39,650 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,650 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 18:14:39,650 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 18:14:39,650 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 18:14:39,650 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 18:14:39,650 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 18:14:39,650 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 18:14:39,650 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 18:14:39,650 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 18:14:39,650 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 18:14:39,650 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 18:14:39,650 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 18:14:39,650 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 18:14:39,650 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 18:14:39,652 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 18:14:39,652 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 18:14:39,652 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 18:14:39,652 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 18:14:39,652 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,652 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 18:14:39,652 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 18:14:39,652 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,652 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 18:14:39,652 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E7F0>
2025-05-02 18:14:39,652 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 18:14:39,652 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 18:14:39,652 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 18:14:39,652 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 18:14:39,652 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 18:14:39,652 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 18:14:39,652 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E7F0>
2025-05-02 18:14:39,652 - DEBUG - on stmt: t = $phi84.1
2025-05-02 18:14:39,652 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,652 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 18:14:39,652 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,652 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 18:14:39,652 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 18:14:39,652 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 18:14:39,652 - DEBUG - find_def var='frac' stmt=index_frac = frac * num_table
2025-05-02 18:14:39,652 - DEBUG - replaced with: index_frac = frac.1 * num_table
2025-05-02 18:14:39,652 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 18:14:39,652 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,652 - DEBUG - on stmt: eta.1 = index_frac - offset
2025-05-02 18:14:39,652 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 18:14:39,652 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 18:14:39,652 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 18:14:39,652 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 18:14:39,652 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 18:14:39,652 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,652 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 18:14:39,652 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,652 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 18:14:39,652 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 18:14:39,652 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,652 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 18:14:39,652 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E7F0>
2025-05-02 18:14:39,652 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 18:14:39,652 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 18:14:39,652 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 18:14:39,652 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 18:14:39,652 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 18:14:39,652 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 18:14:39,652 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E7F0>
2025-05-02 18:14:39,652 - DEBUG - on stmt: i = $phi170.2
2025-05-02 18:14:39,652 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 18:14:39,654 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 18:14:39,654 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,654 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 18:14:39,654 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 18:14:39,654 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,654 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 18:14:39,654 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 18:14:39,654 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,654 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 18:14:39,654 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 18:14:39,654 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 18:14:39,654 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,654 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 18:14:39,654 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,654 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 18:14:39,654 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E7F0>
2025-05-02 18:14:39,654 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 18:14:39,654 - DEBUG - find_def var='frac' stmt=$242binary_subtract.3 = scale - frac
2025-05-02 18:14:39,654 - DEBUG - find_def_from_top label 238
2025-05-02 18:14:39,654 - DEBUG - idom 168 from label 238
2025-05-02 18:14:39,654 - DEBUG - find_def_from_bottom label 168
2025-05-02 18:14:39,654 - DEBUG - find_def_from_top label 168
2025-05-02 18:14:39,654 - DEBUG - idom 84 from label 168
2025-05-02 18:14:39,654 - DEBUG - find_def_from_bottom label 84
2025-05-02 18:14:39,654 - DEBUG - replaced with: $242binary_subtract.3 = scale - frac.1
2025-05-02 18:14:39,654 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 18:14:39,654 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 18:14:39,654 - DEBUG - find_def var='frac' stmt=index_frac = frac * num_table
2025-05-02 18:14:39,654 - DEBUG - replaced with: index_frac = frac.2 * num_table
2025-05-02 18:14:39,654 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 18:14:39,654 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,654 - DEBUG - on stmt: eta.2 = index_frac - offset
2025-05-02 18:14:39,654 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 18:14:39,654 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 18:14:39,654 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 18:14:39,654 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 18:14:39,654 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 18:14:39,654 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 18:14:39,654 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,654 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 18:14:39,654 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,654 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 18:14:39,654 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 18:14:39,654 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,654 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 18:14:39,654 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E7F0>
2025-05-02 18:14:39,654 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 18:14:39,654 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 18:14:39,654 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 18:14:39,654 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 18:14:39,656 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 18:14:39,656 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 18:14:39,656 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E7F0>
2025-05-02 18:14:39,656 - DEBUG - on stmt: k = $phi306.2
2025-05-02 18:14:39,656 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 18:14:39,656 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 18:14:39,656 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,656 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 18:14:39,656 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 18:14:39,656 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,656 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 18:14:39,656 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 18:14:39,656 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,656 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 18:14:39,656 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 18:14:39,656 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 18:14:39,656 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 18:14:39,656 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 18:14:39,656 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,656 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 18:14:39,656 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,656 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 18:14:39,656 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E7F0>
2025-05-02 18:14:39,656 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,656 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 18:14:39,656 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E7F0>
2025-05-02 18:14:39,656 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 18:14:39,656 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 18:14:39,656 - DEBUG - on stmt: return $384return_value.1
2025-05-02 18:14:39,656 - DEBUG - Fix SSA violator on var index_frac
2025-05-02 18:14:39,656 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 18:14:39,656 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486E910>
2025-05-02 18:14:39,656 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 18:14:39,656 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 18:14:39,656 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 18:14:39,656 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 18:14:39,656 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 18:14:39,656 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 18:14:39,656 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 18:14:39,656 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 18:14:39,656 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 18:14:39,656 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,656 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 18:14:39,656 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 18:14:39,656 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 18:14:39,656 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 18:14:39,656 - DEBUG - first assign: index_frac
2025-05-02 18:14:39,656 - DEBUG - replaced with: index_frac = const(float, 0.0)
2025-05-02 18:14:39,656 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 18:14:39,656 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 18:14:39,656 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 18:14:39,656 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 18:14:39,656 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 18:14:39,656 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 18:14:39,656 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 18:14:39,658 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 18:14:39,658 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 18:14:39,658 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 18:14:39,658 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 18:14:39,658 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 18:14:39,658 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 18:14:39,658 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,658 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 18:14:39,658 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 18:14:39,658 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,658 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 18:14:39,658 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486E910>
2025-05-02 18:14:39,658 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 18:14:39,658 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 18:14:39,658 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 18:14:39,658 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 18:14:39,658 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 18:14:39,658 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 18:14:39,658 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486E910>
2025-05-02 18:14:39,658 - DEBUG - on stmt: t = $phi84.1
2025-05-02 18:14:39,658 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,658 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 18:14:39,658 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,658 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 18:14:39,658 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 18:14:39,658 - DEBUG - on stmt: index_frac = frac.1 * num_table
2025-05-02 18:14:39,658 - DEBUG - replaced with: index_frac.1 = frac.1 * num_table
2025-05-02 18:14:39,659 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: eta.1 = index_frac - offset
2025-05-02 18:14:39,659 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 18:14:39,659 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 18:14:39,659 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 18:14:39,659 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 18:14:39,659 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486E910>
2025-05-02 18:14:39,659 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 18:14:39,659 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486E910>
2025-05-02 18:14:39,659 - DEBUG - on stmt: i = $phi170.2
2025-05-02 18:14:39,659 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 18:14:39,659 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 18:14:39,659 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 18:14:39,659 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 18:14:39,659 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 18:14:39,659 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 18:14:39,659 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 18:14:39,659 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 18:14:39,659 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,659 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 18:14:39,659 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486E910>
2025-05-02 18:14:39,659 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 18:14:39,659 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 18:14:39,659 - DEBUG - on stmt: index_frac = frac.2 * num_table
2025-05-02 18:14:39,659 - DEBUG - replaced with: index_frac.2 = frac.2 * num_table
2025-05-02 18:14:39,659 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: eta.2 = index_frac - offset
2025-05-02 18:14:39,659 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 18:14:39,659 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 18:14:39,659 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 18:14:39,659 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 18:14:39,659 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 18:14:39,659 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486E910>
2025-05-02 18:14:39,659 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 18:14:39,659 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486E910>
2025-05-02 18:14:39,659 - DEBUG - on stmt: k = $phi306.2
2025-05-02 18:14:39,659 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 18:14:39,659 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 18:14:39,659 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 18:14:39,659 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 18:14:39,659 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 18:14:39,659 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 18:14:39,659 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 18:14:39,659 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 18:14:39,659 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 18:14:39,659 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,659 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 18:14:39,659 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486E910>
2025-05-02 18:14:39,659 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486E910>
2025-05-02 18:14:39,659 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: return $384return_value.1
2025-05-02 18:14:39,659 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002934486E280>],
             84: [<numba.core.ir.Assign object at 0x000002934486F6D0>],
             238: [<numba.core.ir.Assign object at 0x000002934486F670>]})
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E1C0>
2025-05-02 18:14:39,659 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 18:14:39,659 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 18:14:39,659 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 18:14:39,659 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 18:14:39,659 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 18:14:39,659 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 18:14:39,659 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 18:14:39,659 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 18:14:39,659 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E1C0>
2025-05-02 18:14:39,659 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 18:14:39,659 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E1C0>
2025-05-02 18:14:39,659 - DEBUG - on stmt: t = $phi84.1
2025-05-02 18:14:39,659 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 18:14:39,659 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 18:14:39,659 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 18:14:39,659 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - find_def var='index_frac' stmt=offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - replaced with: offset = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: eta.1 = index_frac - offset
2025-05-02 18:14:39,659 - DEBUG - find_def var='index_frac' stmt=eta.1 = index_frac - offset
2025-05-02 18:14:39,659 - DEBUG - replaced with: eta.1 = index_frac.1 - offset
2025-05-02 18:14:39,659 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 18:14:39,659 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 18:14:39,659 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 18:14:39,659 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 18:14:39,659 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E1C0>
2025-05-02 18:14:39,659 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 18:14:39,659 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E1C0>
2025-05-02 18:14:39,659 - DEBUG - on stmt: i = $phi170.2
2025-05-02 18:14:39,659 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 18:14:39,659 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 18:14:39,659 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 18:14:39,659 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 18:14:39,659 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 18:14:39,659 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 18:14:39,659 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 18:14:39,659 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 18:14:39,659 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,659 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 18:14:39,659 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E1C0>
2025-05-02 18:14:39,659 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 18:14:39,659 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 18:14:39,659 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 18:14:39,659 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - find_def var='index_frac' stmt=offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - replaced with: offset = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: eta.2 = index_frac - offset
2025-05-02 18:14:39,659 - DEBUG - find_def var='index_frac' stmt=eta.2 = index_frac - offset
2025-05-02 18:14:39,659 - DEBUG - replaced with: eta.2 = index_frac.2 - offset
2025-05-02 18:14:39,659 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 18:14:39,659 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 18:14:39,659 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 18:14:39,659 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 18:14:39,659 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 18:14:39,659 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E1C0>
2025-05-02 18:14:39,659 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 18:14:39,659 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E1C0>
2025-05-02 18:14:39,659 - DEBUG - on stmt: k = $phi306.2
2025-05-02 18:14:39,659 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 18:14:39,659 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 18:14:39,659 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 18:14:39,659 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 18:14:39,659 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 18:14:39,659 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 18:14:39,659 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 18:14:39,659 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 18:14:39,659 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 18:14:39,659 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,659 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 18:14:39,659 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E1C0>
2025-05-02 18:14:39,659 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E1C0>
2025-05-02 18:14:39,659 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: return $384return_value.1
2025-05-02 18:14:39,659 - DEBUG - Fix SSA violator on var weight
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486FAC0>
2025-05-02 18:14:39,659 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 18:14:39,659 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 18:14:39,659 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 18:14:39,659 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 18:14:39,659 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 18:14:39,659 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 18:14:39,659 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 18:14:39,659 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 18:14:39,659 - DEBUG - first assign: weight
2025-05-02 18:14:39,659 - DEBUG - replaced with: weight = const(float, 0.0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 18:14:39,659 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486FAC0>
2025-05-02 18:14:39,659 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 18:14:39,659 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486FAC0>
2025-05-02 18:14:39,659 - DEBUG - on stmt: t = $phi84.1
2025-05-02 18:14:39,659 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 18:14:39,659 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 18:14:39,659 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 18:14:39,659 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: offset = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: eta.1 = index_frac.1 - offset
2025-05-02 18:14:39,659 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 18:14:39,659 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 18:14:39,659 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 18:14:39,659 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 18:14:39,659 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486FAC0>
2025-05-02 18:14:39,659 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 18:14:39,659 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486FAC0>
2025-05-02 18:14:39,659 - DEBUG - on stmt: i = $phi170.2
2025-05-02 18:14:39,659 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 18:14:39,659 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 18:14:39,659 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 18:14:39,659 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 18:14:39,659 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 18:14:39,659 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 18:14:39,659 - DEBUG - replaced with: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 18:14:39,659 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 18:14:39,659 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 18:14:39,659 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,659 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 18:14:39,659 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486FAC0>
2025-05-02 18:14:39,659 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 18:14:39,659 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 18:14:39,659 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 18:14:39,659 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: offset = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: eta.2 = index_frac.2 - offset
2025-05-02 18:14:39,659 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 18:14:39,659 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 18:14:39,659 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 18:14:39,659 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 18:14:39,659 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 18:14:39,659 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486FAC0>
2025-05-02 18:14:39,659 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 18:14:39,659 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 18:14:39,659 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 18:14:39,659 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486FAC0>
2025-05-02 18:14:39,659 - DEBUG - on stmt: k = $phi306.2
2025-05-02 18:14:39,659 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 18:14:39,659 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 18:14:39,659 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,659 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 18:14:39,675 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 18:14:39,675 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 18:14:39,675 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 18:14:39,675 - DEBUG - replaced with: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 18:14:39,675 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 18:14:39,675 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 18:14:39,675 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 18:14:39,675 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,675 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 18:14:39,675 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486FAC0>
2025-05-02 18:14:39,675 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486FAC0>
2025-05-02 18:14:39,675 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: return $384return_value.1
2025-05-02 18:14:39,675 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002934486FB80>],
             170: [<numba.core.ir.Assign object at 0x000002934486E610>],
             306: [<numba.core.ir.Assign object at 0x000002934486E4F0>]})
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486EE50>
2025-05-02 18:14:39,675 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 18:14:39,675 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 18:14:39,675 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 18:14:39,675 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 18:14:39,675 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 18:14:39,675 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 18:14:39,675 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 18:14:39,675 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 18:14:39,675 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486EE50>
2025-05-02 18:14:39,675 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 18:14:39,675 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486EE50>
2025-05-02 18:14:39,675 - DEBUG - on stmt: t = $phi84.1
2025-05-02 18:14:39,675 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 18:14:39,675 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 18:14:39,675 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 18:14:39,675 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: offset = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: eta.1 = index_frac.1 - offset
2025-05-02 18:14:39,675 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 18:14:39,675 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 18:14:39,675 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 18:14:39,675 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 18:14:39,675 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486EE50>
2025-05-02 18:14:39,675 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 18:14:39,675 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486EE50>
2025-05-02 18:14:39,675 - DEBUG - on stmt: i = $phi170.2
2025-05-02 18:14:39,675 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 18:14:39,675 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 18:14:39,675 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 18:14:39,675 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 18:14:39,675 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 18:14:39,675 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 18:14:39,675 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 18:14:39,675 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 18:14:39,675 - DEBUG - find_def var='weight' stmt=$228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 18:14:39,675 - DEBUG - replaced with: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 18:14:39,675 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,675 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 18:14:39,675 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486EE50>
2025-05-02 18:14:39,675 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 18:14:39,675 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 18:14:39,675 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 18:14:39,675 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: offset = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: eta.2 = index_frac.2 - offset
2025-05-02 18:14:39,675 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 18:14:39,675 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 18:14:39,675 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 18:14:39,675 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 18:14:39,675 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 18:14:39,675 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486EE50>
2025-05-02 18:14:39,675 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 18:14:39,675 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486EE50>
2025-05-02 18:14:39,675 - DEBUG - on stmt: k = $phi306.2
2025-05-02 18:14:39,675 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 18:14:39,675 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 18:14:39,675 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 18:14:39,675 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 18:14:39,675 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 18:14:39,675 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 18:14:39,675 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 18:14:39,675 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 18:14:39,675 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 18:14:39,675 - DEBUG - find_def var='weight' stmt=$368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 18:14:39,675 - DEBUG - replaced with: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 18:14:39,675 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,675 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 18:14:39,675 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486EE50>
2025-05-02 18:14:39,675 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486EE50>
2025-05-02 18:14:39,675 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: return $384return_value.1
2025-05-02 18:14:39,675 - DEBUG - Fix SSA violator on var offset
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486FDC0>
2025-05-02 18:14:39,675 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 18:14:39,675 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 18:14:39,675 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 18:14:39,675 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 18:14:39,675 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 18:14:39,675 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 18:14:39,675 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 18:14:39,675 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 18:14:39,675 - DEBUG - first assign: offset
2025-05-02 18:14:39,675 - DEBUG - replaced with: offset = const(int, 0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 18:14:39,675 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486FDC0>
2025-05-02 18:14:39,675 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 18:14:39,675 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486FDC0>
2025-05-02 18:14:39,675 - DEBUG - on stmt: t = $phi84.1
2025-05-02 18:14:39,675 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 18:14:39,675 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 18:14:39,675 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 18:14:39,675 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: offset = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - replaced with: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: eta.1 = index_frac.1 - offset
2025-05-02 18:14:39,675 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 18:14:39,675 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 18:14:39,675 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 18:14:39,675 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 18:14:39,675 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486FDC0>
2025-05-02 18:14:39,675 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 18:14:39,675 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486FDC0>
2025-05-02 18:14:39,675 - DEBUG - on stmt: i = $phi170.2
2025-05-02 18:14:39,675 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 18:14:39,675 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 18:14:39,675 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 18:14:39,675 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 18:14:39,675 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 18:14:39,675 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 18:14:39,675 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 18:14:39,675 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 18:14:39,675 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,675 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 18:14:39,675 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486FDC0>
2025-05-02 18:14:39,675 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 18:14:39,675 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 18:14:39,675 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 18:14:39,675 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: offset = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - replaced with: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: eta.2 = index_frac.2 - offset
2025-05-02 18:14:39,675 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 18:14:39,675 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 18:14:39,675 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 18:14:39,675 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 18:14:39,675 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 18:14:39,675 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486FDC0>
2025-05-02 18:14:39,675 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 18:14:39,675 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486FDC0>
2025-05-02 18:14:39,675 - DEBUG - on stmt: k = $phi306.2
2025-05-02 18:14:39,675 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 18:14:39,675 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 18:14:39,675 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 18:14:39,675 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 18:14:39,675 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 18:14:39,675 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 18:14:39,675 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 18:14:39,675 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 18:14:39,675 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 18:14:39,675 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,675 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 18:14:39,675 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486FDC0>
2025-05-02 18:14:39,675 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002934486FDC0>
2025-05-02 18:14:39,675 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: return $384return_value.1
2025-05-02 18:14:39,675 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002934486F4C0>],
             84: [<numba.core.ir.Assign object at 0x000002934486E790>],
             238: [<numba.core.ir.Assign object at 0x0000029344812820>]})
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E130>
2025-05-02 18:14:39,675 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 18:14:39,675 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 18:14:39,675 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 18:14:39,675 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 18:14:39,675 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 18:14:39,675 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 18:14:39,675 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 18:14:39,675 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 18:14:39,675 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E130>
2025-05-02 18:14:39,675 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 18:14:39,675 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E130>
2025-05-02 18:14:39,675 - DEBUG - on stmt: t = $phi84.1
2025-05-02 18:14:39,675 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 18:14:39,675 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 18:14:39,675 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 18:14:39,675 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: eta.1 = index_frac.1 - offset
2025-05-02 18:14:39,675 - DEBUG - find_def var='offset' stmt=eta.1 = index_frac.1 - offset
2025-05-02 18:14:39,675 - DEBUG - replaced with: eta.1 = index_frac.1 - offset.1
2025-05-02 18:14:39,675 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 18:14:39,675 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 18:14:39,675 - DEBUG - find_def var='offset' stmt=$150binary_subtract.28 = nwin - offset
2025-05-02 18:14:39,675 - DEBUG - replaced with: $150binary_subtract.28 = nwin - offset.1
2025-05-02 18:14:39,675 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 18:14:39,675 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 18:14:39,675 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,675 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 18:14:39,675 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E130>
2025-05-02 18:14:39,675 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 18:14:39,675 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 18:14:39,691 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 18:14:39,691 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 18:14:39,691 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E130>
2025-05-02 18:14:39,691 - DEBUG - on stmt: i = $phi170.2
2025-05-02 18:14:39,691 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 18:14:39,691 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 18:14:39,691 - DEBUG - find_def var='offset' stmt=$182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 18:14:39,691 - DEBUG - find_def_from_top label 170
2025-05-02 18:14:39,691 - DEBUG - idom 168 from label 170
2025-05-02 18:14:39,691 - DEBUG - find_def_from_bottom label 168
2025-05-02 18:14:39,691 - DEBUG - find_def_from_top label 168
2025-05-02 18:14:39,691 - DEBUG - idom 84 from label 168
2025-05-02 18:14:39,691 - DEBUG - find_def_from_bottom label 84
2025-05-02 18:14:39,691 - DEBUG - replaced with: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 18:14:39,691 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 18:14:39,691 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 18:14:39,691 - DEBUG - find_def var='offset' stmt=$198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 18:14:39,691 - DEBUG - find_def_from_top label 170
2025-05-02 18:14:39,691 - DEBUG - idom 168 from label 170
2025-05-02 18:14:39,691 - DEBUG - find_def_from_bottom label 168
2025-05-02 18:14:39,691 - DEBUG - find_def_from_top label 168
2025-05-02 18:14:39,691 - DEBUG - idom 84 from label 168
2025-05-02 18:14:39,691 - DEBUG - find_def_from_bottom label 84
2025-05-02 18:14:39,691 - DEBUG - replaced with: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 18:14:39,691 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 18:14:39,691 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 18:14:39,691 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 18:14:39,691 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 18:14:39,691 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,691 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 18:14:39,691 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,691 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 18:14:39,691 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E130>
2025-05-02 18:14:39,691 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 18:14:39,691 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 18:14:39,691 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 18:14:39,691 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,691 - DEBUG - on stmt: eta.2 = index_frac.2 - offset
2025-05-02 18:14:39,691 - DEBUG - find_def var='offset' stmt=eta.2 = index_frac.2 - offset
2025-05-02 18:14:39,691 - DEBUG - replaced with: eta.2 = index_frac.2 - offset.2
2025-05-02 18:14:39,691 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 18:14:39,691 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 18:14:39,691 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 18:14:39,691 - DEBUG - find_def var='offset' stmt=$286binary_subtract.21 = nwin - offset
2025-05-02 18:14:39,691 - DEBUG - replaced with: $286binary_subtract.21 = nwin - offset.2
2025-05-02 18:14:39,691 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 18:14:39,691 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 18:14:39,691 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,691 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 18:14:39,691 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E130>
2025-05-02 18:14:39,691 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 18:14:39,691 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 18:14:39,691 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 18:14:39,691 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E130>
2025-05-02 18:14:39,691 - DEBUG - on stmt: k = $phi306.2
2025-05-02 18:14:39,691 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 18:14:39,691 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 18:14:39,691 - DEBUG - find_def var='offset' stmt=$318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 18:14:39,691 - DEBUG - find_def_from_top label 306
2025-05-02 18:14:39,691 - DEBUG - idom 304 from label 306
2025-05-02 18:14:39,691 - DEBUG - find_def_from_bottom label 304
2025-05-02 18:14:39,691 - DEBUG - find_def_from_top label 304
2025-05-02 18:14:39,691 - DEBUG - idom 238 from label 304
2025-05-02 18:14:39,691 - DEBUG - find_def_from_bottom label 238
2025-05-02 18:14:39,691 - DEBUG - replaced with: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 18:14:39,691 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 18:14:39,691 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 18:14:39,691 - DEBUG - find_def var='offset' stmt=$334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 18:14:39,691 - DEBUG - find_def_from_top label 306
2025-05-02 18:14:39,691 - DEBUG - idom 304 from label 306
2025-05-02 18:14:39,691 - DEBUG - find_def_from_bottom label 304
2025-05-02 18:14:39,691 - DEBUG - find_def_from_top label 304
2025-05-02 18:14:39,691 - DEBUG - idom 238 from label 304
2025-05-02 18:14:39,691 - DEBUG - find_def_from_bottom label 238
2025-05-02 18:14:39,691 - DEBUG - replaced with: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 18:14:39,691 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 18:14:39,691 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 18:14:39,691 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 18:14:39,691 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 18:14:39,691 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 18:14:39,691 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,691 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 18:14:39,691 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,691 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 18:14:39,691 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E130>
2025-05-02 18:14:39,691 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,691 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 18:14:39,691 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486E130>
2025-05-02 18:14:39,691 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 18:14:39,691 - DEBUG - on stmt: return $384return_value.1
2025-05-02 18:14:39,691 - DEBUG - Fix SSA violator on var n
2025-05-02 18:14:39,691 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 18:14:39,691 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000029344812FD0>
2025-05-02 18:14:39,691 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 18:14:39,691 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 18:14:39,691 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 18:14:39,691 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 18:14:39,691 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 18:14:39,691 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 18:14:39,691 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 18:14:39,691 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,691 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 18:14:39,691 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 18:14:39,691 - DEBUG - first assign: n
2025-05-02 18:14:39,691 - DEBUG - replaced with: n = const(int, 0)
2025-05-02 18:14:39,691 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 18:14:39,691 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 18:14:39,691 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 18:14:39,691 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 18:14:39,691 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 18:14:39,691 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 18:14:39,691 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 18:14:39,691 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 18:14:39,691 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,691 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 18:14:39,691 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000029344812FD0>
2025-05-02 18:14:39,691 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 18:14:39,691 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 18:14:39,691 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 18:14:39,691 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000029344812FD0>
2025-05-02 18:14:39,691 - DEBUG - on stmt: t = $phi84.1
2025-05-02 18:14:39,691 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,691 - DEBUG - replaced with: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 18:14:39,691 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 18:14:39,691 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 18:14:39,691 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,691 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 18:14:39,691 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 18:14:39,691 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 18:14:39,691 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 18:14:39,691 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 18:14:39,691 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,691 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 18:14:39,691 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000029344812FD0>
2025-05-02 18:14:39,691 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 18:14:39,691 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 18:14:39,691 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 18:14:39,691 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000029344812FD0>
2025-05-02 18:14:39,691 - DEBUG - on stmt: i = $phi170.2
2025-05-02 18:14:39,691 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 18:14:39,691 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 18:14:39,691 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 18:14:39,691 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 18:14:39,691 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 18:14:39,691 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 18:14:39,691 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 18:14:39,691 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 18:14:39,691 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 18:14:39,691 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,691 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 18:14:39,691 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,691 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 18:14:39,691 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000029344812FD0>
2025-05-02 18:14:39,691 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 18:14:39,691 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 18:14:39,691 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 18:14:39,699 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 18:14:39,699 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,699 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 18:14:39,699 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 18:14:39,699 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 18:14:39,699 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 18:14:39,699 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 18:14:39,699 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 18:14:39,699 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 18:14:39,699 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,699 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 18:14:39,699 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,699 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 18:14:39,699 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 18:14:39,699 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,699 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 18:14:39,699 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000029344812FD0>
2025-05-02 18:14:39,699 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 18:14:39,699 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 18:14:39,699 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 18:14:39,699 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 18:14:39,699 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 18:14:39,699 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 18:14:39,699 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000029344812FD0>
2025-05-02 18:14:39,699 - DEBUG - on stmt: k = $phi306.2
2025-05-02 18:14:39,699 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 18:14:39,699 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 18:14:39,699 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,699 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 18:14:39,699 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 18:14:39,699 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,699 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 18:14:39,699 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 18:14:39,699 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,699 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 18:14:39,699 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 18:14:39,699 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 18:14:39,699 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 18:14:39,699 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 18:14:39,699 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,699 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 18:14:39,699 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,699 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 18:14:39,699 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000029344812FD0>
2025-05-02 18:14:39,699 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,699 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 18:14:39,699 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000029344812FD0>
2025-05-02 18:14:39,699 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 18:14:39,699 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 18:14:39,699 - DEBUG - on stmt: return $384return_value.1
2025-05-02 18:14:39,699 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000029344812C40>],
             84: [<numba.core.ir.Assign object at 0x000002934486FB50>]})
2025-05-02 18:14:39,699 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 18:14:39,701 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486F8B0>
2025-05-02 18:14:39,701 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 18:14:39,701 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 18:14:39,701 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 18:14:39,701 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 18:14:39,701 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 18:14:39,701 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 18:14:39,701 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 18:14:39,701 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,701 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 18:14:39,701 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 18:14:39,701 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 18:14:39,701 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 18:14:39,701 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 18:14:39,701 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 18:14:39,701 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 18:14:39,701 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 18:14:39,701 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 18:14:39,701 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 18:14:39,701 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,701 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 18:14:39,701 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486F8B0>
2025-05-02 18:14:39,701 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 18:14:39,701 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 18:14:39,701 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 18:14:39,701 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486F8B0>
2025-05-02 18:14:39,701 - DEBUG - on stmt: t = $phi84.1
2025-05-02 18:14:39,701 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 18:14:39,701 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 18:14:39,701 - DEBUG - find_def var='n' stmt=$108binary_subtract.11 = time_register.1 - n
2025-05-02 18:14:39,701 - DEBUG - replaced with: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 18:14:39,701 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 18:14:39,701 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 18:14:39,701 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 18:14:39,701 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,701 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 18:14:39,701 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 18:14:39,701 - DEBUG - find_def var='n' stmt=$144binary_add.25 = n + $const142.24
2025-05-02 18:14:39,701 - DEBUG - replaced with: $144binary_add.25 = n.1 + $const142.24
2025-05-02 18:14:39,701 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 18:14:39,701 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 18:14:39,701 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 18:14:39,701 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,701 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 18:14:39,701 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486F8B0>
2025-05-02 18:14:39,701 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 18:14:39,701 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 18:14:39,701 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 18:14:39,701 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486F8B0>
2025-05-02 18:14:39,701 - DEBUG - on stmt: i = $phi170.2
2025-05-02 18:14:39,701 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 18:14:39,701 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 18:14:39,701 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 18:14:39,701 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 18:14:39,701 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 18:14:39,701 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 18:14:39,701 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 18:14:39,701 - DEBUG - find_def var='n' stmt=$224binary_subtract.29 = n - i
2025-05-02 18:14:39,701 - DEBUG - find_def_from_top label 170
2025-05-02 18:14:39,701 - DEBUG - idom 168 from label 170
2025-05-02 18:14:39,701 - DEBUG - find_def_from_bottom label 168
2025-05-02 18:14:39,701 - DEBUG - find_def_from_top label 168
2025-05-02 18:14:39,701 - DEBUG - idom 84 from label 168
2025-05-02 18:14:39,701 - DEBUG - find_def_from_bottom label 84
2025-05-02 18:14:39,701 - DEBUG - replaced with: $224binary_subtract.29 = n.1 - i
2025-05-02 18:14:39,701 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 18:14:39,701 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,701 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 18:14:39,701 - DEBUG - on stmt: jump 168
2025-05-02 18:14:39,701 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 18:14:39,701 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486F8B0>
2025-05-02 18:14:39,701 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 18:14:39,701 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 18:14:39,701 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 18:14:39,701 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 18:14:39,701 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,701 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 18:14:39,701 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 18:14:39,701 - DEBUG - find_def var='n' stmt=$276binary_subtract.16 = n_orig - n
2025-05-02 18:14:39,701 - DEBUG - find_def_from_top label 238
2025-05-02 18:14:39,701 - DEBUG - idom 168 from label 238
2025-05-02 18:14:39,701 - DEBUG - find_def_from_bottom label 168
2025-05-02 18:14:39,701 - DEBUG - find_def_from_top label 168
2025-05-02 18:14:39,701 - DEBUG - idom 84 from label 168
2025-05-02 18:14:39,701 - DEBUG - find_def_from_bottom label 84
2025-05-02 18:14:39,701 - DEBUG - replaced with: $276binary_subtract.16 = n_orig - n.1
2025-05-02 18:14:39,701 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 18:14:39,701 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 18:14:39,701 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 18:14:39,701 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 18:14:39,701 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,701 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 18:14:39,701 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486F8B0>
2025-05-02 18:14:39,701 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 18:14:39,701 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 18:14:39,701 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 18:14:39,701 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 18:14:39,701 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486F8B0>
2025-05-02 18:14:39,701 - DEBUG - on stmt: k = $phi306.2
2025-05-02 18:14:39,701 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 18:14:39,701 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 18:14:39,706 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 18:14:39,706 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 18:14:39,706 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 18:14:39,706 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 18:14:39,706 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 18:14:39,706 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 18:14:39,706 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 18:14:39,706 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 18:14:39,706 - DEBUG - find_def var='n' stmt=$360binary_add.29 = n + k
2025-05-02 18:14:39,706 - DEBUG - find_def_from_top label 306
2025-05-02 18:14:39,706 - DEBUG - idom 304 from label 306
2025-05-02 18:14:39,706 - DEBUG - find_def_from_bottom label 304
2025-05-02 18:14:39,706 - DEBUG - find_def_from_top label 304
2025-05-02 18:14:39,706 - DEBUG - idom 238 from label 304
2025-05-02 18:14:39,706 - DEBUG - find_def_from_bottom label 238
2025-05-02 18:14:39,706 - DEBUG - find_def_from_top label 238
2025-05-02 18:14:39,706 - DEBUG - idom 168 from label 238
2025-05-02 18:14:39,706 - DEBUG - find_def_from_bottom label 168
2025-05-02 18:14:39,706 - DEBUG - find_def_from_top label 168
2025-05-02 18:14:39,706 - DEBUG - idom 84 from label 168
2025-05-02 18:14:39,706 - DEBUG - find_def_from_bottom label 84
2025-05-02 18:14:39,706 - DEBUG - replaced with: $360binary_add.29 = n.1 + k
2025-05-02 18:14:39,706 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 18:14:39,706 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 18:14:39,706 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 18:14:39,706 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 18:14:39,706 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 18:14:39,706 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 18:14:39,706 - DEBUG - on stmt: jump 304
2025-05-02 18:14:39,706 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 18:14:39,706 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486F8B0>
2025-05-02 18:14:39,706 - DEBUG - on stmt: jump 80
2025-05-02 18:14:39,706 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 18:14:39,706 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002934486F8B0>
2025-05-02 18:14:39,706 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 18:14:39,706 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 18:14:39,706 - DEBUG - on stmt: return $384return_value.1
2025-05-02 18:14:55,286 - DEBUG - Audio loaded: shape=(2, 7385280), sample_rate=44100
2025-05-02 18:14:55,286 - DEBUG - Demixing audio: samples=7385280, margin=44100, chunk_size=661500
2025-05-02 18:14:55,302 - DEBUG - Created 12 chunks for demixing
2025-05-02 18:14:55,318 - DEBUG - Processing chunk: 2 waves
2025-05-02 18:14:55,372 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 512 Expected: 128
 Please fix either the inputs/outputs or the model.
2025-05-02 18:18:39,672 - DEBUG - Logging initialized
2025-05-02 18:18:39,672 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song10.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 9, 'dim_f': 4096}
2025-05-02 18:18:39,676 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:18:39,676 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac
2025-05-02 18:18:39,698 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac: Trying to create tensor with negative dimension -2047: [1, 4, -2047, 512]
2025-05-02 18:21:53,652 - DEBUG - Logging initialized
2025-05-02 18:21:53,652 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song7.mp3')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 18:21:53,652 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:21:53,652 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song7.mp3
2025-05-02 18:21:53,652 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=512, n_fft=4096, hop=1024
2025-05-02 18:21:53,652 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song7.mp3')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 18:21:53,652 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_drums.onnx
2025-05-02 18:21:53,707 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song7.mp3
2025-05-02 18:21:53,999 - DEBUG - Audio loaded: shape=(2, 11690496), sample_rate=44100
2025-05-02 18:21:53,999 - DEBUG - Demixing audio: samples=11690496, margin=44100, chunk_size=661500
2025-05-02 18:21:54,030 - DEBUG - Created 18 chunks for demixing
2025-05-02 18:21:54,046 - DEBUG - Processing chunk: 2 waves
2025-05-02 18:21:54,063 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song7.mp3: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 512 Expected: 128
 Please fix either the inputs/outputs or the model.
2025-05-02 18:22:08,552 - DEBUG - Logging initialized
2025-05-02 18:22:08,552 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song7.mp3')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 18:22:08,552 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:22:08,552 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song7.mp3
2025-05-02 18:22:08,552 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=512, n_fft=6144, hop=1024
2025-05-02 18:22:08,552 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song7.mp3')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 18:22:08,552 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_drums.onnx
2025-05-02 18:22:08,615 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song7.mp3
2025-05-02 18:22:08,902 - DEBUG - Audio loaded: shape=(2, 11690496), sample_rate=44100
2025-05-02 18:22:08,902 - DEBUG - Demixing audio: samples=11690496, margin=44100, chunk_size=661500
2025-05-02 18:22:08,934 - DEBUG - Created 18 chunks for demixing
2025-05-02 18:22:08,952 - DEBUG - Processing chunk: 2 waves
2025-05-02 18:22:08,977 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song7.mp3: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 512 Expected: 128
 Please fix either the inputs/outputs or the model.
2025-05-02 18:22:42,964 - DEBUG - Logging initialized
2025-05-02 18:22:42,964 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song7.mp3')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 7, 'dim_f': 2048}
2025-05-02 18:22:42,964 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:22:42,964 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song7.mp3
2025-05-02 18:22:42,975 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=128, n_fft=6144, hop=1024
2025-05-02 18:22:42,975 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song7.mp3')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6144, 'dim_t': 7, 'dim_f': 2048}
2025-05-02 18:22:42,975 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_drums.onnx
2025-05-02 18:22:43,035 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song7.mp3
2025-05-02 18:22:43,307 - DEBUG - Audio loaded: shape=(2, 11690496), sample_rate=44100
2025-05-02 18:22:43,307 - DEBUG - Demixing audio: samples=11690496, margin=44100, chunk_size=661500
2025-05-02 18:22:43,343 - DEBUG - Created 18 chunks for demixing
2025-05-02 18:22:43,345 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:22:49,061 - DEBUG - Processing chunk: 7 waves
2025-05-02 18:22:55,338 - DEBUG - Processing chunk: 7 waves
2025-05-02 18:23:01,489 - DEBUG - Processing chunk: 7 waves
2025-05-02 18:23:07,744 - DEBUG - Processing chunk: 7 waves
2025-05-02 18:23:14,289 - DEBUG - Processing chunk: 7 waves
2025-05-02 18:23:21,576 - DEBUG - Processing chunk: 7 waves
2025-05-02 18:23:28,968 - DEBUG - Processing chunk: 7 waves
2025-05-02 18:23:36,279 - DEBUG - Processing chunk: 7 waves
2025-05-02 18:23:43,554 - DEBUG - Processing chunk: 7 waves
2025-05-02 18:23:50,854 - DEBUG - Processing chunk: 7 waves
2025-05-02 18:23:58,106 - DEBUG - Processing chunk: 7 waves
2025-05-02 18:24:05,907 - DEBUG - Processing chunk: 7 waves
2025-05-02 18:24:14,458 - DEBUG - Processing chunk: 7 waves
2025-05-02 18:24:22,849 - DEBUG - Processing chunk: 7 waves
2025-05-02 18:24:32,405 - DEBUG - Processing chunk: 7 waves
2025-05-02 18:24:41,497 - DEBUG - Processing chunk: 7 waves
2025-05-02 18:24:50,617 - DEBUG - Processing chunk: 4 waves
2025-05-02 18:24:56,222 - DEBUG - Demixing complete
2025-05-02 18:24:56,886 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song7_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song7_no_vocals.wav
2025-05-02 18:26:20,403 - DEBUG - Logging initialized
2025-05-02 18:26:20,403 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 7, 'dim_f': 2048}
2025-05-02 18:26:20,403 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:26:20,403 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:26:20,403 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=128, n_fft=4096, hop=1024
2025-05-02 18:26:20,403 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 7, 'dim_f': 2048}
2025-05-02 18:26:20,403 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_drums.onnx
2025-05-02 18:26:20,467 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:26:20,720 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 18:26:20,720 - DEBUG - Demixing audio: samples=13371120, margin=44100, chunk_size=661500
2025-05-02 18:26:20,752 - DEBUG - Created 21 chunks for demixing
2025-05-02 18:26:20,763 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:26:26,459 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:26:31,740 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:26:37,094 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:26:42,355 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:26:48,427 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:26:54,382 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:27:00,255 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:27:06,065 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:27:11,940 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:27:17,878 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:27:23,999 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:27:30,114 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:27:36,356 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:27:42,665 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:27:49,050 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:27:55,514 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:28:02,110 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:28:08,986 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:28:15,944 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:28:23,044 - DEBUG - Processing chunk: 2 waves
2025-05-02 18:28:25,572 - DEBUG - Demixing complete
2025-05-02 18:28:26,507 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_no_vocals.wav
2025-05-02 18:30:37,915 - DEBUG - Logging initialized
2025-05-02 18:30:37,915 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 7, 'dim_f': 4096}
2025-05-02 18:30:37,920 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:30:37,920 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:30:37,920 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac: Trying to create tensor with negative dimension -2047: [1, 4, -2047, 128]
2025-05-02 18:30:48,701 - DEBUG - Logging initialized
2025-05-02 18:30:48,701 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 7, 'dim_f': 2046}
2025-05-02 18:30:48,701 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:30:48,701 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:30:48,717 - DEBUG - ConvTDFNet initialized: dim_f=2046, dim_t=128, n_fft=4096, hop=1024
2025-05-02 18:30:48,717 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 7, 'dim_f': 2046}
2025-05-02 18:30:48,717 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_bass.onnx
2025-05-02 18:30:48,795 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:30:49,050 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 18:30:49,050 - DEBUG - Demixing audio: samples=13371120, margin=44100, chunk_size=661500
2025-05-02 18:30:49,082 - DEBUG - Created 21 chunks for demixing
2025-05-02 18:30:49,093 - DEBUG - Processing chunk: 6 waves
2025-05-02 18:30:49,104 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 2 Got: 2046 Expected: 2048
 index: 3 Got: 128 Expected: 256
 Please fix either the inputs/outputs or the model.
2025-05-02 18:31:16,627 - DEBUG - Logging initialized
2025-05-02 18:31:16,627 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2046}
2025-05-02 18:31:16,630 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:31:16,630 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:31:16,633 - DEBUG - ConvTDFNet initialized: dim_f=2046, dim_t=256, n_fft=4096, hop=1024
2025-05-02 18:31:16,633 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2046}
2025-05-02 18:31:16,633 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_bass.onnx
2025-05-02 18:31:16,694 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:31:16,957 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 18:31:16,957 - DEBUG - Demixing audio: samples=13371120, margin=44100, chunk_size=661500
2025-05-02 18:31:16,985 - DEBUG - Created 21 chunks for demixing
2025-05-02 18:31:16,995 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:31:17,002 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 2 Got: 2046 Expected: 2048
 Please fix either the inputs/outputs or the model.
2025-05-02 18:31:57,322 - DEBUG - Logging initialized
2025-05-02 18:31:57,322 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 18:31:57,324 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:31:57,324 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:31:57,324 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=4096, hop=1024
2025-05-02 18:31:57,324 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 18:31:57,324 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_bass.onnx
2025-05-02 18:31:57,383 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:31:57,650 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 18:31:57,650 - DEBUG - Demixing audio: samples=13371120, margin=44100, chunk_size=661500
2025-05-02 18:31:57,679 - DEBUG - Created 21 chunks for demixing
2025-05-02 18:31:57,687 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:32:03,427 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:32:09,000 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:32:14,504 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:32:20,042 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:32:25,618 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:32:31,328 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:32:36,911 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:32:42,507 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:32:48,232 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:32:53,877 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:33:00,132 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:33:06,722 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:33:13,244 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:33:19,970 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:33:26,538 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:33:33,092 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:33:39,553 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:33:45,422 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:33:51,346 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:33:57,264 - DEBUG - Processing chunk: 1 waves
2025-05-02 18:33:59,303 - DEBUG - Demixing complete
2025-05-02 18:33:59,763 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_no_vocals.wav
2025-05-02 18:35:38,184 - DEBUG - Logging initialized
2025-05-02 18:35:38,184 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6152, 'dim_t': 8, 'dim_f': 2046}
2025-05-02 18:35:38,184 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:35:38,184 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:35:38,184 - DEBUG - ConvTDFNet initialized: dim_f=2046, dim_t=256, n_fft=6152, hop=1024
2025-05-02 18:35:38,184 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 6152, 'dim_t': 8, 'dim_f': 2046}
2025-05-02 18:35:38,184 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_bass.onnx
2025-05-02 18:35:38,247 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:35:38,498 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 18:35:38,498 - DEBUG - Demixing audio: samples=13371120, margin=44100, chunk_size=661500
2025-05-02 18:35:38,538 - DEBUG - Created 21 chunks for demixing
2025-05-02 18:35:38,548 - DEBUG - Processing chunk: 3 waves
2025-05-02 18:35:38,578 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 2 Got: 2046 Expected: 2048
 Please fix either the inputs/outputs or the model.
2025-05-02 18:36:30,432 - DEBUG - Logging initialized
2025-05-02 18:36:30,432 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 7, 'dim_f': 4096}
2025-05-02 18:36:30,434 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:36:30,434 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:36:30,434 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac: Trying to create tensor with negative dimension -2047: [1, 4, -2047, 128]
2025-05-02 18:38:06,459 - DEBUG - Logging initialized
2025-05-02 18:38:06,459 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 256, 'dim_t': 7, 'dim_f': 2048}
2025-05-02 18:38:06,459 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:38:06,459 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:38:06,475 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac: Trying to create tensor with negative dimension -1919: [1, 4, -1919, 128]
2025-05-02 18:39:14,065 - DEBUG - Logging initialized
2025-05-02 18:39:14,065 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 1024, 'dim_t': 7, 'dim_f': 2048}
2025-05-02 18:39:14,069 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:39:14,069 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:39:14,069 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac: Trying to create tensor with negative dimension -1535: [1, 4, -1535, 128]
2025-05-02 18:40:28,919 - DEBUG - Logging initialized
2025-05-02 18:40:28,919 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 7, 'dim_f': 2048}
2025-05-02 18:40:28,919 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:40:28,919 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:40:28,919 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=128, n_fft=4096, hop=1024
2025-05-02 18:40:28,919 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 7, 'dim_f': 2048}
2025-05-02 18:40:28,919 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_bass.onnx
2025-05-02 18:40:28,984 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:40:29,242 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 18:40:29,242 - DEBUG - Demixing audio: samples=13371120, margin=88200, chunk_size=882000
2025-05-02 18:40:29,274 - DEBUG - Created 16 chunks for demixing
2025-05-02 18:40:29,286 - DEBUG - Processing chunk: 8 waves
2025-05-02 18:40:29,299 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 128 Expected: 256
 Please fix either the inputs/outputs or the model.
2025-05-02 18:40:49,845 - DEBUG - Logging initialized
2025-05-02 18:40:49,845 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 18:40:49,845 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:40:49,845 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:40:49,845 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=4096, hop=1024
2025-05-02 18:40:49,845 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 18:40:49,845 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_bass.onnx
2025-05-02 18:40:49,925 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:40:50,176 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 18:40:50,176 - DEBUG - Demixing audio: samples=13371120, margin=88200, chunk_size=882000
2025-05-02 18:40:50,207 - DEBUG - Created 16 chunks for demixing
2025-05-02 18:40:50,223 - DEBUG - Processing chunk: 4 waves
2025-05-02 18:40:57,896 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:41:08,225 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:41:17,393 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:41:26,507 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:41:36,170 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:41:47,098 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:41:57,959 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:42:08,636 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:42:19,330 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:42:29,409 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:42:38,627 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:42:47,922 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:42:57,487 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:43:07,319 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:43:17,726 - DEBUG - Processing chunk: 1 waves
2025-05-02 18:43:19,811 - DEBUG - Demixing complete
2025-05-02 18:43:20,255 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_no_vocals.wav
2025-05-02 18:44:18,446 - DEBUG - Logging initialized
2025-05-02 18:44:18,446 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 18:44:18,446 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:44:18,446 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:44:18,446 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=512, n_fft=4096, hop=1024
2025-05-02 18:44:18,446 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 18:44:18,446 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_other.onnx
2025-05-02 18:44:18,519 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:44:18,788 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 18:44:18,788 - DEBUG - Demixing audio: samples=13371120, margin=88200, chunk_size=882000
2025-05-02 18:44:18,820 - DEBUG - Created 16 chunks for demixing
2025-05-02 18:44:18,836 - DEBUG - Processing chunk: 2 waves
2025-05-02 18:44:18,867 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 512 Expected: 256
 Please fix either the inputs/outputs or the model.
2025-05-02 18:44:54,369 - DEBUG - Logging initialized
2025-05-02 18:44:54,369 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 18:44:54,369 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:44:54,369 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:44:54,369 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=4096, hop=1024
2025-05-02 18:44:54,369 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 18:44:54,369 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_other.onnx
2025-05-02 18:44:54,439 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:44:54,698 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 18:44:54,698 - DEBUG - Demixing audio: samples=13371120, margin=88200, chunk_size=882000
2025-05-02 18:44:54,730 - DEBUG - Created 16 chunks for demixing
2025-05-02 18:44:54,746 - DEBUG - Processing chunk: 4 waves
2025-05-02 18:45:02,584 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:45:13,352 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:45:28,750 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:45:44,701 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:46:00,724 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:46:18,632 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:46:35,135 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:46:51,167 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:47:07,343 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:47:23,191 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:47:39,251 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:47:56,032 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:48:12,678 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:48:30,611 - DEBUG - Processing chunk: 5 waves
2025-05-02 18:48:47,765 - DEBUG - Processing chunk: 1 waves
2025-05-02 18:48:51,313 - DEBUG - Demixing complete
2025-05-02 18:48:52,361 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_no_vocals.wav
2025-05-02 19:29:16,425 - DEBUG - Logging initialized
2025-05-02 19:29:16,426 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song6.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_vocals.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 19:29:16,426 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 19:29:16,426 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song6.wav
2025-05-02 19:29:16,429 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=512, n_fft=4096, hop=1024
2025-05-02 19:29:16,429 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song6.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_vocals.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 19:29:16,429 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_vocals.onnx
2025-05-02 19:29:16,516 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song6.wav
2025-05-02 19:29:16,598 - DEBUG - Audio loaded: shape=(2, 11715900), sample_rate=44100
2025-05-02 19:29:16,598 - DEBUG - Demixing audio: samples=11715900, margin=44100, chunk_size=661500
2025-05-02 19:29:16,622 - DEBUG - Created 18 chunks for demixing
2025-05-02 19:29:16,634 - DEBUG - Processing chunk: 2 waves
2025-05-02 19:29:16,651 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song6.wav: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 512 Expected: 256
 Please fix either the inputs/outputs or the model.
2025-05-02 19:29:26,890 - DEBUG - Logging initialized
2025-05-02 19:29:26,890 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song6.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_vocals.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 19:29:26,894 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 19:29:26,894 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song6.wav
2025-05-02 19:29:26,894 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=4096, hop=1024
2025-05-02 19:29:26,894 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song6.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_vocals.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 19:29:26,894 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_vocals.onnx
2025-05-02 19:29:26,945 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song6.wav
2025-05-02 19:29:26,993 - DEBUG - Audio loaded: shape=(2, 11715900), sample_rate=44100
2025-05-02 19:29:26,993 - DEBUG - Demixing audio: samples=11715900, margin=44100, chunk_size=661500
2025-05-02 19:29:27,024 - DEBUG - Created 18 chunks for demixing
2025-05-02 19:29:27,024 - DEBUG - Processing chunk: 3 waves
2025-05-02 19:29:32,885 - DEBUG - Processing chunk: 3 waves
2025-05-02 19:29:38,440 - DEBUG - Processing chunk: 3 waves
2025-05-02 19:29:44,011 - DEBUG - Processing chunk: 3 waves
2025-05-02 19:29:49,617 - DEBUG - Processing chunk: 3 waves
2025-05-02 19:29:56,052 - DEBUG - Processing chunk: 3 waves
2025-05-02 19:30:02,522 - DEBUG - Processing chunk: 3 waves
2025-05-02 19:30:09,040 - DEBUG - Processing chunk: 3 waves
2025-05-02 19:30:15,730 - DEBUG - Processing chunk: 3 waves
2025-05-02 19:30:22,196 - DEBUG - Processing chunk: 3 waves
2025-05-02 19:30:28,662 - DEBUG - Processing chunk: 3 waves
2025-05-02 19:30:35,110 - DEBUG - Processing chunk: 3 waves
2025-05-02 19:30:41,577 - DEBUG - Processing chunk: 3 waves
2025-05-02 19:30:48,000 - DEBUG - Processing chunk: 3 waves
2025-05-02 19:30:54,445 - DEBUG - Processing chunk: 3 waves
2025-05-02 19:31:00,825 - DEBUG - Processing chunk: 3 waves
2025-05-02 19:31:07,520 - DEBUG - Processing chunk: 3 waves
2025-05-02 19:31:13,932 - DEBUG - Processing chunk: 3 waves
2025-05-02 19:31:20,826 - DEBUG - Demixing complete
2025-05-02 19:31:21,312 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song6_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song6_no_vocals.wav
