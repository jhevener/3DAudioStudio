2025-05-02 18:40:47 - INFO - Starting separation for model: kuielab_b_bass, Quality: Quality, Input: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac, Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems, SegmentSize: 20, Overlap: 88200, Denoise: True, NFFT: 4096, DimF: 2048, DimT: 8
2025-05-02 18:40:47 - DEBUG - Original command: cmd /c "cd @EnvPath@ && activate.bat && cd @ScriptDir@ && python @PythonScript@ "@SongPath@" -m "@Path@" -o "@OutputDir@" --chunks @SegmentSize@ --margin @Overlap@ --n_fft @NFFT@ --dim_f @DimF@ --dim_t @DimT@ && deactivate"
2025-05-02 18:40:47 - INFO - Resolved command: cmd /c "cd C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\UVR\uvr_env\Scripts && activate.bat && cd C:\Git\3DAudioStudio\scripts\autoit\1.3 && python separate.py "C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac" -m "C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_bass.onnx" -o "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems" --chunks 20 --margin 88200 --n_fft 4096 --dim_f 2048 --dim_t 8 && deactivate"
2025-05-02 18:43:21 - INFO - Separation output: 2025-05-02 18:40:49,845 - DEBUG - Logging initialized
2025-05-02 18:40:49,845 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 18:40:49,845 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:40:49,845 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:40:49,845 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=4096, hop=1024
2025-05-02 18:40:49,845 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 18:40:49,845 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_bass.onnx
2025-05-02 18:40:49,925 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:40:50,176 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 18:40:50,176 - DEBUG - Demixing audio: samples=13371120, margin=88200, chunk_size=882000
2025-05-02 18:40:50,207 - DEBUG - Created 16 chunks for demixing

  0%|          | 0/16 [00:00<?, ?it/s]
Processing:   0%|          | 0/16 [00:00<?, ?it/s]2025-05-02 18:40:50,223 - DEBUG - Processing chunk: 4 waves

Processing:   6%|6         | 1/16 [00:07<01:54,  7.67s/it]2025-05-02 18:40:57,896 - DEBUG - Processing chunk: 5 waves

Processing:  12%|#2        | 2/16 [00:18<02:09,  9.24s/it]2025-05-02 18:41:08,225 - DEBUG - Processing chunk: 5 waves

Processing:  19%|#8        | 3/16 [00:27<01:59,  9.20s/it]2025-05-02 18:41:17,393 - DEBUG - Processing chunk: 5 waves

Processing:  25%|##5       | 4/16 [00:36<01:50,  9.17s/it]2025-05-02 18:41:26,507 - DEBUG - Processing chunk: 5 waves

Processing:  31%|###1      | 5/16 [00:45<01:42,  9.35s/it]2025-05-02 18:41:36,170 - DEBUG - Processing chunk: 5 waves

Processing:  38%|###7      | 6/16 [00:56<01:38,  9.88s/it]2025-05-02 18:41:47,098 - DEBUG - Processing chunk: 5 waves

Processing:  44%|####3     | 7/16 [01:07<01:31, 10.21s/it]2025-05-02 18:41:57,959 - DEBUG - Processing chunk: 5 waves

Processing:  50%|#####     | 8/16 [01:18<01:22, 10.36s/it]2025-05-02 18:42:08,636 - DEBUG - Processing chunk: 5 waves

Processing:  56%|#####6    | 9/16 [01:29<01:13, 10.46s/it]2025-05-02 18:42:19,330 - DEBUG - Processing chunk: 5 waves

Processing:  62%|######2   | 10/16 [01:39<01:02, 10.34s/it]2025-05-02 18:42:29,409 - DEBUG - Processing chunk: 5 waves

Processing:  69%|######8   | 11/16 [01:48<00:49, 10.00s/it]2025-05-02 18:42:38,627 - DEBUG - Processing chunk: 5 waves

Processing:  75%|#######5  | 12/16 [01:57<00:39,  9.78s/it]2025-05-02 18:42:47,922 - DEBUG - Processing chunk: 5 waves

Processing:  81%|########1 | 13/16 [02:07<00:29,  9.72s/it]2025-05-02 18:42:57,487 - DEBUG - Processing chunk: 5 waves

Processing:  88%|########7 | 14/16 [02:17<00:19,  9.75s/it]2025-05-02 18:43:07,319 - DEBUG - Processing chunk: 5 waves

Processing:  94%|#########3| 15/16 [02:27<00:09,  9.96s/it]2025-05-02 18:43:17,726 - DEBUG - Processing chunk: 1 waves

Processing: 100%|##########| 16/16 [02:29<00:00,  7.56s/it]
Processing: 100%|##########| 16/16 [02:29<00:00,  9.35s/it]
2025-05-02 18:43:19,811 - DEBUG - Demixing complete
2025-05-02 18:43:20,255 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_no_vocals.wav

2025-05-02 18:43:21 - ERROR - Failed to generate stem: 2025-05-02 18:40:49,845 - DEBUG - Logging initialized
2025-05-02 18:40:49,845 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 18:40:49,845 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:40:49,845 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:40:49,845 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=4096, hop=1024
2025-05-02 18:40:49,845 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 18:40:49,845 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_bass.onnx
2025-05-02 18:40:49,925 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:40:50,176 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 18:40:50,176 - DEBUG - Demixing audio: samples=13371120, margin=88200, chunk_size=882000
2025-05-02 18:40:50,207 - DEBUG - Created 16 chunks for demixing

  0%|          | 0/16 [00:00<?, ?it/s]
Processing:   0%|          | 0/16 [00:00<?, ?it/s]2025-05-02 18:40:50,223 - DEBUG - Processing chunk: 4 waves

Processing:   6%|6         | 1/16 [00:07<01:54,  7.67s/it]2025-05-02 18:40:57,896 - DEBUG - Processing chunk: 5 waves

Processing:  12%|#2        | 2/16 [00:18<02:09,  9.24s/it]2025-05-02 18:41:08,225 - DEBUG - Processing chunk: 5 waves

Processing:  19%|#8        | 3/16 [00:27<01:59,  9.20s/it]2025-05-02 18:41:17,393 - DEBUG - Processing chunk: 5 waves

Processing:  25%|##5       | 4/16 [00:36<01:50,  9.17s/it]2025-05-02 18:41:26,507 - DEBUG - Processing chunk: 5 waves

Processing:  31%|###1      | 5/16 [00:45<01:42,  9.35s/it]2025-05-02 18:41:36,170 - DEBUG - Processing chunk: 5 waves

Processing:  38%|###7      | 6/16 [00:56<01:38,  9.88s/it]2025-05-02 18:41:47,098 - DEBUG - Processing chunk: 5 waves

Processing:  44%|####3     | 7/16 [01:07<01:31, 10.21s/it]2025-05-02 18:41:57,959 - DEBUG - Processing chunk: 5 waves

Processing:  50%|#####     | 8/16 [01:18<01:22, 10.36s/it]2025-05-02 18:42:08,636 - DEBUG - Processing chunk: 5 waves

Processing:  56%|#####6    | 9/16 [01:29<01:13, 10.46s/it]2025-05-02 18:42:19,330 - DEBUG - Processing chunk: 5 waves

Processing:  62%|######2   | 10/16 [01:39<01:02, 10.34s/it]2025-05-02 18:42:29,409 - DEBUG - Processing chunk: 5 waves

Processing:  69%|######8   | 11/16 [01:48<00:49, 10.00s/it]2025-05-02 18:42:38,627 - DEBUG - Processing chunk: 5 waves

Processing:  75%|#######5  | 12/16 [01:57<00:39,  9.78s/it]2025-05-02 18:42:47,922 - DEBUG - Processing chunk: 5 waves

Processing:  81%|########1 | 13/16 [02:07<00:29,  9.72s/it]2025-05-02 18:42:57,487 - DEBUG - Processing chunk: 5 waves

Processing:  88%|########7 | 14/16 [02:17<00:19,  9.75s/it]2025-05-02 18:43:07,319 - DEBUG - Processing chunk: 5 waves

Processing:  94%|#########3| 15/16 [02:27<00:09,  9.96s/it]2kuielab-02 18:43:17,726 - DEBUG - Processing chunk: 1 waves

Processing: 100%|##########| 16/16 [02:29<00:00,  7.56s/it]
Processing: 100%|##########| 16/16 [02:29<00:00,  9.35s/it]
2025-05-02 18:43:19,811 - DEBUG - Demixing complete
2025-05-02 18:43:20,255 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_no_vocals.wav
\song0_bass.wav
2025-05-02 18:43:21 - ERROR - Failed to generate stem: 2025-05-02 18:40:49,845 - DEBUG - Logging initialized
2025-05-02 18:40:49,845 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 18:40:49,845 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:40:49,845 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:40:49,845 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=4096, hop=1024
2025-05-02 18:40:49,845 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_bass.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 18:40:49,845 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_bass.onnx
2025-05-02 18:40:49,925 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:40:50,176 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 18:40:50,176 - DEBUG - Demixing audio: samples=13371120, margin=88200, chunk_size=882000
2025-05-02 18:40:50,207 - DEBUG - Created 16 chunks for demixing

  0%|          | 0/16 [00:00<?, ?it/s]
Processing:   0%|          | 0/16 [00:00<?, ?it/s]2025-05-02 18:40:50,223 - DEBUG - Processing chunk: 4 waves

Processing:   6%|6         | 1/16 [00:07<01:54,  7.67s/it]2025-05-02 18:40:57,896 - DEBUG - Processing chunk: 5 waves

Processing:  12%|#2        | 2/16 [00:18<02:09,  9.24s/it]2025-05-02 18:41:08,225 - DEBUG - Processing chunk: 5 waves

Processing:  19%|#8        | 3/16 [00:27<01:59,  9.20s/it]2025-05-02 18:41:17,393 - DEBUG - Processing chunk: 5 waves

Processing:  25%|##5       | 4/16 [00:36<01:50,  9.17s/it]2025-05-02 18:41:26,507 - DEBUG - Processing chunk: 5 waves

Processing:  31%|###1      | 5/16 [00:45<01:42,  9.35s/it]2025-05-02 18:41:36,170 - DEBUG - Processing chunk: 5 waves

Processing:  38%|###7      | 6/16 [00:56<01:38,  9.88s/it]2025-05-02 18:41:47,098 - DEBUG - Processing chunk: 5 waves

Processing:  44%|####3     | 7/16 [01:07<01:31, 10.21s/it]2025-05-02 18:41:57,959 - DEBUG - Processing chunk: 5 waves

Processing:  50%|#####     | 8/16 [01:18<01:22, 10.36s/it]2025-05-02 18:42:08,636 - DEBUG - Processing chunk: 5 waves

Processing:  56%|#####6    | 9/16 [01:29<01:13, 10.46s/it]2025-05-02 18:42:19,330 - DEBUG - Processing chunk: 5 waves

Processing:  62%|######2   | 10/16 [01:39<01:02, 10.34s/it]2025-05-02 18:42:29,409 - DEBUG - Processing chunk: 5 waves

Processing:  69%|######8   | 11/16 [01:48<00:49, 10.00s/it]2025-05-02 18:42:38,627 - DEBUG - Processing chunk: 5 waves

Processing:  75%|#######5  | 12/16 [01:57<00:39,  9.78s/it]2025-05-02 18:42:47,922 - DEBUG - Processing chunk: 5 waves

Processing:  81%|########1 | 13/16 [02:07<00:29,  9.72s/it]2025-05-02 18:42:57,487 - DEBUG - Processing chunk: 5 waves

Processing:  88%|########7 | 14/16 [02:17<00:19,  9.75s/it]2025-05-02 18:43:07,319 - DEBUG - Processing chunk: 5 waves

Processing:  94%|#########3| 15/16 [02:27<00:09,  9.96s/it]2025-05-02 18:43:17,726 - DEBUG - Processing chunk: 1 waves

Processing: 100%|##########| 16/16 [02:29<00:00,  7.56s/it]
Processing: 100%|##########| 16/16 [02:29<00:00,  9.35s/it]
2025-05-02 18:43:19,811 - DEBUG - Demixing complete
2025-05-02 18:43:20,255 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_no_vocals.wav
\song0_other.wav
2025-05-02 18:44:16 - INFO - Starting separation for model: kuelab_b_other, Quality: Quality, Input: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac, Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems, SegmentSize: 20, Overlap: 88200, Denoise: True, NFFT: 4096, DimF: 2048, DimT: 9
2025-05-02 18:44:16 - DEBUG - Original command: cmd /c "cd @EnvPath@ && activate.bat && cd @ScriptDir@ && python @PythonScript@ "@SongPath@" -m "@Path@" -o "@OutputDir@" --chunks @SegmentSize@ --margin @Overlap@ --n_fft @NFFT@ --dim_f @DimF@ --dim_t @DimT@ && deactivate"
2025-05-02 18:44:16 - INFO - Resolved command: cmd /c "cd C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\UVR\uvr_env\Scripts && activate.bat && cd C:\Git\3DAudioStudio\scripts\autoit\1.3 && python separate.py "C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac" -m "C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_other.onnx" -o "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems" --chunks 20 --margin 88200 --n_fft 4096 --dim_f 2048 --dim_t 9 && deactivate"
2025-05-02 18:44:19 - INFO - Separation output: 2025-05-02 18:44:18,446 - DEBUG - Logging initialized
2025-05-02 18:44:18,446 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 18:44:18,446 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:44:18,446 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:44:18,446 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=512, n_fft=4096, hop=1024
2025-05-02 18:44:18,446 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 18:44:18,446 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_other.onnx
2025-05-02 18:44:18,519 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:44:18,788 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 18:44:18,788 - DEBUG - Demixing audio: samples=13kuielab, margin=88200, chunk_size=882000
2025-05-02 18:44:18,820 - DEBUG - Created 16 chunks for demixing

  0%|          | 0/16 [00:00<?, ?it/s]
Processing:   0%|          | 0/16 [00:00<?, ?it/s]2025-05-02 18:44:18,836 - DEBUG - Processing chunk: 2 waves
2025-05-02 18:44:18,867 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 512 Expected: 256
 Please fix either the inputs/outputs or the model.
Traceback (most recent call last):
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 258, in <module>
    main()
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 242, in main
    vocals, no_vocals, sampling_rate = predictor.predict(file_path)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 210, in predict
    sources = self.demix(mix.T)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 131, in demix
    sources = self.demix_base(segmented_mix, margin_size=margin)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 165, in demix_base
    -_ort.run(None, {"input": -spek.cpu().numpy()})[0] * 0.5
  File "C:\temp\s2S\installs\UVR\uvr_env\lib\site-packages\onnxruntime\capi\onnxruntime_inference_collection.py", line 220, in run
    return self._sess.run(output_names, input_feed, run_options)
onnxruntime.capi.onnxruntime_pybind11_state.InvalidArgument: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 512 Expected: 256
 Please fix either the inputs/outputs or the model.

Processing:   0%|          | 0/16 [00:00<?, ?it/s]

2025-05-02 18:44:19 - ERROR - Python error occurred: 2025-05-02 18:44:18,446 - DEBUG - Logging initialized
2025-05-02 18:44:18,446 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 18:44:18,446 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:44:18,446 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:44:18,446 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=512, n_fft=4096, hop=1024
2025-05-02 18:44:18,446 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 18:44:18,446 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_other.onnx
2025-05-02 18:44:18,519 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:44:18,788 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 18:44:18,788 - DEBUG - Demixing audio: samples=13371120, margin=88200, chunk_size=882000
2025-05-02 18:44:18,820 - DEBUG - Created 16 chunks for demixing

  0%|          | 0/16 [00:00<?, ?it/s]
Processing:   0%|          | 0/16 [00:00<?, ?it/s]2025-05-02 18:44:18,836 - DEBUG - Processing chunk: 2 waves
2025-05-02 18:44:18,867 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 512 Expected: 256
 Please fix either the inputs/outputs or the model.
Traceback (most recent call last):
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 258, in <module>
    main()
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 242, in main
    vocals, no_vocals, sampling_rate = predictor.predict(file_path)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 210, in predict
    sources = self.demix(mix.T)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 131, in demix
    sources = self.demix_base(segmented_mix, margin_size=margin)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 165, in demix_base
    -_ort.run(None, {"input": -spek.cpu().numpy()})[0] * 0.5
  File "C:\temp\s2S\installs\UVR\uvr_env\lib\site-packages\onnxruntime\capi\onnxruntime_inference_collection.py", line 220, in run
    return self._sess.run(output_names, input_feed, run_options)
onnxruntime.capi.onnxruntime_pybind11_state.InvalidArgument: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 512 Expected: 256
 Please fix either the inputs/outputs or the model.

Processing:   0%|          | 0/16 [00:00<?, ?it/s]

2025-05-02 18:44:52 - INFO - Starting separation for model: kuelab_b_other, Quality: Quality, Input: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac, Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems, SegmentSize: 20, Overlap: 88200, Denoise: True, NFFT: 4096, DimF: 2048, DimT: 8
2025-05-02 18:44:52 - DEBUG - Original command: cmd /c "cd @EnvPath@ && activate.bat && cd @ScriptDir@ && python @PythonScript@ "@SongPath@" -m "@Path@" -o "@OutputDir@" --chunks @SegmentSize@ --margin @Overlap@ --n_fft @NFFT@ --dim_f @DimF@ --dim_t @DimT@ && deactivate"
2025-05-02 18:44:52 - INFO - Resolved command: cmd /c "cd C:kuielabDAudioStudio\scripts\autoit\1.3\installs\UVR\uvr_env\Scripts && activate.bat && cd C:\Git\3DAudioStudio\scripts\autoit\1.3 && python separate.py "C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac" -m "C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_other.onnx" -o "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems" --chunks 20 --margin 88200 --n_fft 4096 --dim_f 2048 --dim_t 8 && deactivate"
2025-05-02 18:48:53 - INFO - Separation output: 2025-05-02 18:44:54,369 - DEBUG - Logging initialized
2025-05-02 18:44:54,369 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 18:44:54,369 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:44:54,369 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:44:54,369 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=4096, hop=1024
2025-05-02 18:44:54,369 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 18:44:54,369 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_other.onnx
2025-05-02 18:44:54,439 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:44:54,698 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 18:44:54,698 - DEBUG - Demixing audio: samples=13371120, margin=88200, chunk_size=882000
2025-05-02 18:44:54,730 - DEBUG - Created 16 chunks for demixing

  0%|          | 0/16 [00:00<?, ?it/s]
Processing:   0%|          | 0/16 [00:00<?, ?it/s]2025-05-02 18:44:54,746 - DEBUG - Processing chunk: 4 waves

Processing:   6%|6         | 1/16 [00:07<01:57,  7.84s/it]2025-05-02 18:45:02,584 - DEBUG - Processing chunk: 5 waves

Processing:  12%|#2        | 2/16 [00:18<02:13,  9.55s/it]2025-05-02 18:45:13,352 - DEBUG - Processing chunk: 5 waves

Processing:  19%|#8        | 3/16 [00:33<02:38, 12.22s/it]2025-05-02 18:45:28,750 - DEBUG - Processing chunk: 5 waves

Processing:  25%|##5       | 4/16 [00:49<02:44, 13.70s/it]2025-05-02 18:45:44,701 - DEBUG - Processing chunk: 5 waves

Processing:  31%|###1      | 5/16 [01:05<02:39, 14.53s/it]2025-05-02 18:46:00,724 - DEBUG - Processing chunk: 5 waves

Processing:  38%|###7      | 6/16 [01:23<02:36, 15.68s/it]2025-05-02 18:46:18,632 - DEBUG - Processing chunk: 5 waves

Processing:  44%|####3     | 7/16 [01:40<02:23, 15.95s/it]2025-05-02 18:46:35,135 - DEBUG - Processing chunk: 5 waves

Processing:  50%|#####     | 8/16 [01:56<02:07, 15.97s/it]2025-05-02 18:46:51,167 - DEBUG - Processing chunk: 5 waves

Processing:  56%|#####6    | 9/16 [02:12<01:52, 16.04s/it]2025-05-02 18:47:07,343 - DEBUG - Processing chunk: 5 waves

Processing:  62%|######2   | 10/16 [02:28<01:35, 15.98s/it]2025-05-02 18:47:23,191 - DEBUG - Processing chunk: 5 waves

Processing:  69%|######8   | 11/16 [02:44<01:20, 16.00s/it]2025-05-02 18:47:39,251 - DEBUG - Processing chunk: 5 waves

Processing:  75%|#######5  | 12/16 [03:01<01:04, 16.24s/it]2025-05-02 18:47:56,032 - DEBUG - Processing chunk: 5 waves

Processing:  81%|########1 | 13/16 [03:17<00:49, 16.36s/it]2025-05-02 18:48:12,678 - DEBUG - Processing chunk: 5 waves

Processing:  88%|########7 | 14/16 [03:35<00:33, 16.84s/it]2025-05-02 18:48:30,611 - DEBUG - Processing chunk: 5 waves

Processing:  94%|#########3| 15/16 [03:53<00:16, 16.94s/it]2025-05-02 18:48:47,765 - DEBUG - Processing chunk: 1 waves

Processing: 100%|##########| 16/16 [03:56<00:00, 12.86s/it]
Processing: 100%|##########| 16/16 [03:56<00:00, 14.79s/it]
2025-05-02 18:48:51,313 - DEBUG - Demixing complete
2025-05-02 18:48:52,361 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_no_vocals.wav

2025-05-02 18:48:53 - ERROR - Failed to generate stem: 2025-05-02 18:44:54,369 - DEBUG - Logging initialized
2025-05-02 18:44:54,369 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 18:44:54,369 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 18:44:54,369 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:44:54,369 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=4096, hop=1024
2025-05-02 18:44:54,369 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song0.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 88200, 'chunks': 20, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 18:44:54,369 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_other.onnx
2025-05-02 18:44:54,439 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac
2025-05-02 18:44:54,698 - DEBUG - Audio loaded: shape=(2, 13371120), sample_rate=44100
2025-05-02 18:44:54,698 - DEBUG - Demixing audio: samples=13371120, margin=88200, chunk_size=882000
2025-05-02 18:44:54,730 - DEBUG - Created 16 chunks for demixing

  0%|          | 0/16 [00:00<?, ?it/s]
Processing:   0%|          | 0/16 [00:00<?, ?it/s]2025-05-02 18:44:54,746 - DEBUG - Processing chunk: 4 waves

Processing:   6%|6         | 1/16 [00:07<01:57,  7.84s/it]2025-05-02 18:45:02,584 - DEBUG - Processing chunk: 5 waves

Processing:  12%|#2        | 2/16 [00:18<02:13,  9.55s/it]2025-05-02 18:45:13,352 - DEBUG - Processing chunk: 5 waves
kuielab
Processing:  19%|#8        | 3/16 [00:33<02:38, 12.22s/it]2025-05-02 18:45:28,750 - DEBUG - Processing chunk: 5 waves

Processing:  25%|##5       | 4/16 [00:49<02:44, 13.70s/it]2025-05-02 18:45:44,701 - DEBUG - Processing chunk: 5 waves

Processing:  31%|###1      | 5/16 [01:05<02:39, 14.53s/it]2025-05-02 18:46:00,724 - DEBUG - Processing chunk: 5 waves

Processing:  38%|###7      | 6/16 [01:23<02:36, 15.68s/it]2025-05-02 18:46:18,632 - DEBUG - Processing chunk: 5 waves

Processing:  44%|####3     | 7/16 [01:40<02:23, 15.95s/it]2025-05-02 18:46:35,135 - DEBUG - Processing chunk: 5 waves

Processing:  50%|#####     | 8/16 [01:56<02:07, 15.97s/it]2025-05-02 18:46:51,167 - DEBUG - Processing chunk: 5 waves

Processing:  56%|#####6    | 9/16 [02:12<01:52, 16.04s/it]2025-05-02 18:47:07,343 - DEBUG - Processing chunk: 5 waves

Processing:  62%|######2   | 10/16 [02:28<01:35, 15.98s/it]2025-05-02 18:47:23,191 - DEBUG - Processing chunk: 5 waves

Processing:  69%|######8   | 11/16 [02:44<01:20, 16.00s/it]2025-05-02 18:47:39,251 - DEBUG - Processing chunk: 5 waves

Processing:  75%|#######5  | 12/16 [03:01<01:04, 16.24s/it]2025-05-02 18:47:56,032 - DEBUG - Processing chunk: 5 waves

Processing:  81%|########1 | 13/16 [03:17<00:49, 16.36s/it]2025-05-02 18:48:12,678 - DEBUG - Processing chunk: 5 waves

Processing:  88%|########7 | 14/16 [03:35<00:33, 16.84s/it]2025-05-02 18:48:30,611 - DEBUG - Processing chunk: 5 waves

Processing:  94%|#########3| 15/16 [03:53<00:16, 16.94s/it]2025-05-02 18:48:47,765 - DEBUG - Processing chunk: 1 waves

Processing: 100%|##########| 16/16 [03:56<00:00, 12.86s/it]
Processing: 100%|##########| 16/16 [03:56<00:00, 14.79s/it]
2025-05-02 18:48:51,313 - DEBUG - Demixing complete
2025-05-02 18:48:52,361 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song0_no_vocals.wav
\song0_other.wav
2025-05-02 19:29:14 - INFO - Starting separation for model: kuelab_b_vocals, Quality: Balanced, Input: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song6.wav, Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems, SegmentSize: 15, Overlap: 44100, Denoise: True, NFFT: 4096, DimF: 2048, DimT: 9
2025-05-02 19:29:14 - DEBUG - Original command: cmd /c "cd @EnvPath@ && activate.bat && cd @ScriptDir@ && python @PythonScript@ "@SongPath@" -m "@Path@" -o "@OutputDir@" --chunks @SegmentSize@ --margin @Overlap@ --n_fft @NFFT@ --dim_f @DimF@ --dim_t @DimT@ && deactivate"
2025-05-02 19:29:14 - INFO - Resolved command: cmd /c "cd C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\UVR\uvr_env\Scripts && activate.bat && cd C:\Git\3DAudioStudio\scripts\autoit\1.3 && python separate.py "C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song6.wav" -m "C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_vocals.onnx" -o "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems" --chunks 15 --margin 44100 --n_fft 4096 --dim_f 2048 --dim_t 9 && deactivate"
2025-05-02 19:29:17 - INFO - Separation output: 2025-05-02 19:29:16,425 - DEBUG - Logging initialized
2025-05-02 19:29:16,426 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song6.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_vocals.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 19:29:16,426 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 19:29:16,426 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song6.wav
2025-05-02 19:29:16,429 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=512, n_fft=4096, hop=1024
2025-05-02 19:29:16,429 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song6.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_vocals.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 19:29:16,429 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_vocals.onnx
2025-05-02 19:29:16,516 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song6.wav
2025-05-02 19:29:16,598 - DEBUG - Audio loaded: shape=(2, 11715900), sample_rate=44100
2025-05-02 19:29:16,598 - DEBUG - Demixing audio: samples=11715900, margin=44100, chunk_size=661500
2025-05-02 19:29:16,622 - DEBUG - Created 18 chunks for demixing

  0%|          | 0/18 [00:00<?, ?it/s]
Processing:   0%|          | 0/18 [00:00<?, ?it/s]2025-05-02 19:29:16,634 - DEBUG - Processing chunk: 2 waves
2025-05-02 19:29:16,651 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song6.wav: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 512 Expected: 256
 Please fix either the inputs/outputs or the model.
Traceback (most recent call last):
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 258, in <module>
    main()
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 242, in main
    vocals, no_vocals, sampling_rate = predictor.predict(file_path)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 210, in predict
    sources = self.demix(mix.T)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 131, in demix
    sources = self.demix_base(segmented_mix, margin_size=margin)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 165, in demix_base
    -_ort.run(None, {"input": -spek.cpu().numpy()})[0] * 0.5
  File "C:\temp\s2S\installs\UVR\uvr_env\lib\site-packages\onnxruntime\capi\onnxruntime_inference_collection.py", line 220, in run
    return self._sess.run(output_names, input_feed, run_options)
onnxruntime.capi.onnxruntime_pybind11_state.InvalidArgument: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 512 Expected: 256
 Please fix either the inputs/outputs or the model.

Processing:   0%|          | 0/18 [00:00<?, ?it/s]

2025-05-02 19:29:17 - ERROR - Python error occurred: 2025-05-02 19:29:16,425 - DEBUG - Logging initialized
2025-05-02 19:29:16,426 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song6.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_vocals.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 19:29:16,426 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 19:29:16,426 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song6.wav
2025-05-02 19:29:16,429 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=512, n_fft=4096, hop=1024
2025-05-02 19:29:16,429 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song6.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_vocals.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 19:29:16,429 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_vocals.onnx
2025-05-02 19:29:16,516 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song6.wav
2025-05-02 19:29:16,598 - DEBUG - Audio loaded: shape=(2, 11715900), sample_rate=44100
2025-05-02 19:29:16,598 - DEBUG - Demixing audio: samples=11715900, margin=44100, chunk_size=661500
2025-05-02 19:29:16,622 - DEBUG - Created 18 chunks for demixing

  0%|          | 0/18 [00:00<?, ?it/s]
Processing:   0%|          | 0/18 [00:00<?, ?it/s]2025-05-02 19:29:16,634 - DEBUG - Processing chunk: 2 waves
2025-05-02 19:29:16,651 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song6.wav: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 512 Expected: 256
 Please fix either the inputs/outputs or the model.
Traceback (most recent call last):
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 258, in <module>
    main()
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 242, in main
    vocals, no_vocals, sampling_rate = predictor.predict(file_path)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 210, in predict
    sources = self.demix(mix.T)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 131, in demix
    sources = self.demix_base(segmented_mix, margin_size=margin)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 165, in demix_base
    -_ort.run(None, {"input": -spek.cpu().numpy()})[0] * 0.5
  File "C:\temp\s2S\installs\UVR\uvr_env\lib\site-packages\onnxruntime\capi\onnxruntime_inference_collection.py", line 220, in run
    return self._sess.run(output_names, input_feed, run_options)
onnxruntime.capi.onnxruntime_pybind11_state.InvalidArgument: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 512 Expected: 256
 Please fix either the inputs/outputs or the model.

Processing:   0%|          | 0/18 [00:00<?, ?it/s]

2025-05-02 19:29:24 - INFO - Starting separation for model: kuelab_b_vocals, Quality: Balanced, Input: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song6.wav, Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems, SegmentSize: 15, Overlap: 44100, Denoise: True, NFFT: 4096, DimF: 2048, DimT: 8
2025-05-02 19:29:24 - DEBUG - Original command: cmd /c "cd @EnvPath@ && activate.bat && cd @ScriptDir@ && python @PythonScript@ "@SongPath@" -m "@Path@" -o "@OutputDir@" --chunks @SegmentSize@ --margin @Overlap@ --n_fft @NFFT@ --dim_f @DimF@ --dim_t @DimT@ && deactivate"
2025-05-02 19:29:24 - INFO - Resolved command: cmd /c "cd C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\UVR\uvr_env\Scripts && activate.bat && cd C:\Git\3DAudioStudio\scripts\autoit\1.3 && python separate.py "C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song6.wav" -m "C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_vocals.onnx" -o "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems" --chunks 15 --margin 44100 --n_fft 4096 --dim_f 2048 --dim_t 8 && deactivate"
2025-05-02 19:31:22 - INFO - Separation output: 2025-05-02 19:29:26,890 - DEBUG - Logging initialized
2025-05-02 19:29:26,890 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song6.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_vocals.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 19:29:26,894 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 19:29:26,894 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song6.wav
2025-05-02 19:29:26,894 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=4096, hop=1024
2025-05-02 19:29:26,894 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song6.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_vocals.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 19:29:26,894 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_vocals.onnx
2025-05-02 19:29:26,945 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song6.wav
2025-05-02 19:29:26,993 - DEBUG - Audio loaded: shape=(2, 11715900), sample_rate=44100
2025-05-02 19:29:26,993 - DEBUG - Demixing audio: samples=11715900, margin=44100, chunk_size=661500
2025-05-02 19:29:27,024 - DEBUG - Created 18 chunks for demixing

  0%|          | 0/18 [00:00<?, ?it/s]
Processing:   0%|          | 0/18 [00:00<?, ?it/s]2025-05-02 19:29:27,024 - DEBUG - Processing chunk: 3 waves

Processing:   6%|5         | 1/18 [00:05<01:39,  5.85s/it]2025-05-02 19:29:32,885 - DEBUG - Processing chunk: 3 waves

Processing:  11%|#1        | 2/18 [00:11<01:30,  5.68s/it]2025-05-02 19:29:38,440 - DEBUG - Processing chunk: 3 waves

Processing:  17%|#6        | 3/18 [00:16<01:24,  5.63s/it]2025-05-02 19:29:44,011 - DEBUG - Processing chunk: 3 waves

Processing:  22%|##2       | 4/18 [00:22<01:18,  5.62s/it]20kuielab02 19:29:49,617 - DEBUG - Processing chunk: 3 waves

Processing:  28%|##7       | 5/18 [00:29<01:16,  5.91s/it]2025-05-02 19:29:56,052 - DEBUG - Processing chunk: 3 waves

Processing:  33%|###3      | 6/18 [00:35<01:13,  6.10s/it]2025-05-02 19:30:02,522 - DEBUG - Processing chunk: 3 waves

Processing:  39%|###8      | 7/18 [00:42<01:08,  6.24s/it]2025-05-02 19:30:09,040 - DEBUG - Processing chunk: 3 waves

Processing:  44%|####4     | 8/18 [00:48<01:03,  6.38s/it]2025-05-02 19:30:15,730 - DEBUG - Processing chunk: 3 waves

Processing:  50%|#####     | 9/18 [00:55<00:57,  6.41s/it]2025-05-02 19:30:22,196 - DEBUG - Processing chunk: 3 waves

Processing:  56%|#####5    | 10/18 [01:01<00:51,  6.42s/it]2025-05-02 19:30:28,662 - DEBUG - Processing chunk: 3 waves

Processing:  61%|######1   | 11/18 [01:08<00:45,  6.43s/it]2025-05-02 19:30:35,110 - DEBUG - Processing chunk: 3 waves

Processing:  67%|######6   | 12/18 [01:14<00:38,  6.44s/it]2025-05-02 19:30:41,577 - DEBUG - Processing chunk: 3 waves

Processing:  72%|#######2  | 13/18 [01:20<00:32,  6.44s/it]2025-05-02 19:30:48,000 - DEBUG - Processing chunk: 3 waves

Processing:  78%|#######7  | 14/18 [01:27<00:25,  6.44s/it]2025-05-02 19:30:54,445 - DEBUG - Processing chunk: 3 waves

Processing:  83%|########3 | 15/18 [01:33<00:19,  6.42s/it]2025-05-02 19:31:00,825 - DEBUG - Processing chunk: 3 waves

Processing:  89%|########8 | 16/18 [01:40<00:13,  6.50s/it]2025-05-02 19:31:07,520 - DEBUG - Processing chunk: 3 waves

Processing:  94%|#########4| 17/18 [01:46<00:06,  6.48s/it]2025-05-02 19:31:13,932 - DEBUG - Processing chunk: 3 waves

Processing: 100%|##########| 18/18 [01:53<00:00,  6.59s/it]
Processing: 100%|##########| 18/18 [01:53<00:00,  6.32s/it]
2025-05-02 19:31:20,826 - DEBUG - Demixing complete
2025-05-02 19:31:21,312 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song6_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song6_no_vocals.wav

2025-05-02 19:31:22 - ERROR - Failed to generate stem: 2025-05-02 19:29:26,890 - DEBUG - Logging initialized
2025-05-02 19:29:26,890 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song6.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_vocals.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 19:29:26,894 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 19:29:26,894 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song6.wav
2025-05-02 19:29:26,894 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=4096, hop=1024
2025-05-02 19:29:26,894 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song6.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_vocals.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 19:29:26,894 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_vocals.onnx
2025-05-02 19:29:26,945 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song6.wav
2025-05-02 19:29:26,993 - DEBUG - Audio loaded: shape=(2, 11715900), sample_rate=44100
2025-05-02 19:29:26,993 - DEBUG - Demixing audio: samples=11715900, margin=44100, chunk_size=661500
2025-05-02 19:29:27,024 - DEBUG - Created 18 chunks for demixing

  0%|          | 0/18 [00:00<?, ?it/s]
Processing:   0%|          | 0/18 [00:00<?, ?it/s]2025-05-02 19:29:27,024 - DEBUG - Processing chunk: 3 waves

Processing:   6%|5         | 1/18 [00:05<01:39,  5.85s/it]2025-05-02 19:29:32,885 - DEBUG - Processing chunk: 3 waves

Processing:  11%|#1        | 2/18 [00:11<01:30,  5.68s/it]2025-05-02 19:29:38,440 - DEBUG - Processing chunk: 3 waves

Processing:  17%|#6        | 3/18 [00:16<01:24,  5.63s/it]2025-05-02 19:29:44,011 - DEBUG - Processing chunk: 3 waves

Processing:  22%|##2       | 4/18 [00:22<01:18,  5.62s/it]2025-05-02 19:29:49,617 - DEBUG - Processing chunk: 3 waves

Processing:  28%|##7       | 5/18 [00:29<01:16,  5.91s/it]2025-05-02 19:29:56,052 - DEBUG - Processing chunk: 3 waves

Processing:  33%|###3      | 6/18 [00:35<01:13,  6.10s/it]2025-05-02 19:30:02,522 - DEBUG - Processing chunk: 3 waves

Processing:  39%|###8      | 7/18 [00:42<01:08,  6.24s/it]2025-05-02 19:30:09,040 - DEBUG - Processing chunk: 3 waves

Processing:  44%|####4     | 8/18 [00:48<01:03,  6.38s/it]2025-05-02 19:30:15,730 - DEBUG - Processing chunk: 3 waves

Processing:  50%|#####     | 9/18 [00:55<00:57,  6.41s/it]2025-05-02 19:30:22,196 - DEBUG - Processing chunk: 3 waves

Processing:  56%|#####5    | 10/18 [01:01<00:51,  6.42s/it]2025-05-02 19:30:28,662 - DEBUG - Processing chunk: 3 waves

Processing:  61%|######1   | 11/18 [01:08<00:45,  6.43s/it]2025-05-02 19:30:35,110 - DEBUG - Processing chunk: 3 waves

Processing:  67%|######6   | 12/18 [01:14<00:38,  6.44s/it]2025-05-02 19:30:41,577 - DEBUG - Processing chunk: 3 waves

Processing:  72%|#######2  | 13/18 [01:20<00:32,  6.44s/it]2025-05-02 19:30:48,000 - DEBUG - Processing chunk: 3 waves

Processing:  78%|#######7  | 14/18 [01:27<00:25,  6.44s/it]2025-05-02 19:30:54,445 - DEBUG - Processing chunk: 3 waves

Processing:  83%|########3 | 15/18 [01:33<00:19,  6.42s/it]2025-05-02 19:31:00,825 - DEBUG - Processing chunk: 3 waves

Processing:  89%|########8 | 16/18 [01:40<00:13,  6.50s/it]2025-05-02 19:31:07,520 - DEBUG - Processing chunk: 3 waves

Processing:  94%|#########4| 17/18 [01:46<00:06,  6.48s/it]2025-05-02 19:31:13,932 - DEBUG - Processing chunk: 3 waves

Processing: 100%|##########| 18/18 [01:53<00:00,  6.59s/it]
Processing: 100%|##########| 18/18 [01:53<00:00,  6.32s/it]
2025-05-02 19:31:20,826 - DEBUG - Demixing complete
2025-05-02 19:31:21,312 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song6_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song6_no_vocals.wav
\song6_vocals.wav
2025-05-02 19:31:22 - ERROR - Failed to generate stem: 2025-05-02 19:29:26,890 - DEBUG - Logging initialized
2025-05-02 19:29:26,890 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song6.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_vocals.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 19:29:26,894 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 19:29:26,894 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song6.wav
2025-05-02 19:29:26,894 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=4096, hop=1024
2025-05-02 19:29:26,894 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song6.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_vocals.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 15, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 19:29:26,894 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_vocals.onnx
2025-05-02 19:29:26,945 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song6.wav
2025-05-02 19:29:26,993 - DEBUG - Audio loaded: shape=(2, 11715900), sample_rate=44100
2025-05-02 19:29:26,993 - DEBUG - Demixing audio: samples=11715900, margin=44100, chunk_size=661500
2025-05-02 19:29:27,024 - DEBUG - Created 18 chunks for demixing

  0%|          | 0/18 [00:00<?, ?it/s]
Processing:   0%|          | 0/18 [00:00<?, ?it/s]2025-05-02 19:29:27,024 - DEBUG - Processing chunk: 3 waves

Processing:   6%|5         | 1/18 [00:05<01:39,  5.85s/it]2025-05-02 19:29:32,885 - DEBUG - Processing chunk: 3 waves

Processing:  11%|#1        | 2/18 [00:11<01:30,  5.68s/it]2025-05-02 19:29:38,440 - DEBUG - Processing chunk: 3 waves

Processing:  17%|#6        | 3/18 [00:16<01:24,  5.63s/it]2025-05-02 19:29:44,011 - DEBUG - Processing chunk: 3 waves

Processing:  22%|##2       | 4/18 [00:22<01:18,  5.62s/it]2025-05-02 19:29:49,617 - DEBUG - Processing chunk: 3 waves

Processing:  28%|##7       | 5/18 [00:29<01:16,  5.91s/it]2025-05-02 19:29:56,052 - DEBUG - Processing chunk: 3 waves

Processing:  33%|###3      | 6/18 [00:35<01:13,  6.10s/it]2025-05-02 19:30:02,522 - DEBUG - Processing chunk: 3 waves

Processing:  39%|###8      | 7/18 [00:42<01:08,  6.24s/it]2025-05-02 19:30:09,040 - DEBUG - Processing chunk: 3 waves

Processing:  44%|####4     | 8/18 [00:48<01:03,  6.38s/it]2025-05-02 19:30:15,730 - DEBUG - Processing chunk: 3 waves

Processing:  50%|#####     | 9/18 [00:55<00:57,  6.41s/it]2025-05-02 19:30:22,196 - DEBUG - Processing chunk: 3 waves

Processing:  56%|#####5    | 10/18 [01:01<00:51,  6.42s/it]2025-05-02 19:30:28,662 - DEBUG - Processing chunk: 3 waves

Processing:  61%|######1   | 11/18 [01:08<00:45,  6.43s/it]2025-05-02 19:30:35,110 - DEBUG - Processing chunk: 3 waves

Processing:  67%|######6   | 12/18 [01:14<00:38,  6.44s/it]2025-05-02 19:30:41,577 - DEBUG - Processing chunk: 3 waves

Processing:  72%|#######2  | 13/18 [01:20<00:32,  6.44s/it]2025-05-02 19:30:48,000 - DEBUG - Processing chunk: 3 waves

Processing:  78%|#######7  | 14/18 [01:27<00:25,  6.44s/it]2025-05-02 19:30:54,445 - DEBUG - Processing chunk: 3 waves

Processing:  83%|########3 | 15/18 [01:33<00:19,  6.42s/it]2025-05-02 19:31:00,825 - DEBUG - Processing chunk: 3 waves

Processing:  89%|########8 | 16/18 [01:40<00:13,  6.50s/it]2025-05-02 19:31:07,520 - DEBUG - Processing chunk: 3 waves

Processing:  94%|#########4| 17/18 [01:46<00:06,  6.48s/it]2025-05-02 19:31:13,932 - DEBUG - Processing chunk: 3 waves

Processing: 100%|##########| 18/18 [01:53<00:00,  6.59s/it]
Processing: 100%|##########| 18/18 [01:53<00:00,  6.32s/it]
2025-05-02 19:31:20,826 - DEBUG - Demixing complete
2025-05-02 19:31:21,312 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song6_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song6_no_vocals.wav
\song6_other.wav
[2025-05-02 20:42:47] INFO GUI: Starting Test Models.ini GUI
[2025-05-02 20:42:47] INFO GUI: Loading models.ini from C:\Git\3DAudioStudio\scripts\autoit\1.3\models.ini
[2025-05-02 20:42:47] INFO GUI: Loaded 10 models from models.ini
[2025-05-02 20:42:47] INFO GUI: Selected model: UVR_MDXNET_Inst_Main
[2025-05-02 20:42:47] INFO GUI: Updated model info for UVR_MDXNET_Inst_Main
[2025-05-02 20:42:55] INFO GUI: Exiting GUI
[2025-05-02 20:43:32] INFO GUI: Starting Test Models.ini GUI
[2025-05-02 20:43:32] INFO GUI: Loading models.ini from C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\models.ini
[2025-05-02 20:43:32] INFO GUI: Loaded 23 models from models.ini
[2025-05-02 20:43:32] INFO GUI: Selected model: UVR_MDXNET_Inst_Main
[2025-05-02 20:43:32] INFO GUI: Updated parameters for UVR_MDXNET_Inst_Main: Chunks=512, Margin=10, N_FFT=6144, Dim_T=256, Dim_F=2048, Denoise=--denoise
[2025-05-02 20:44:12] INFO GUI: Selected input file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac
[2025-05-02 20:44:30] INFO GUI: Selected model: UVR_MDXNET_kuielab_a_drums
[2025-05-02 20:44:30] INFO GUI: Updated parameters for UVR_MDXNET_kuielab_a_drums: Chunks=512, Margin=10, N_FFT=6144, Dim_T=256, Dim_F=2048, Denoise=--denoise
[2025-05-02 20:45:43] INFO GUI: Starting separation for model: UVR_MDXNET_kuielab_a_drums, Input: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac, Output: 
[2025-05-02 20:45:43] INFO GUI: Parameters: Chunks=64, Margin=10, N_FFT=6144, Dim_T=9, Dim_F=20256, Denoise=--denoise
[2025-05-02 20:45:43] ERROR GUI: Invalid output directory: 
[2025-05-02 20:45:51] INFO GUI: Selected output directory: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
[2025-05-02 20:45:52] INFO GUI: Starting separation for model: UVR_MDXNET_kuielab_a_drums, Input: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac, Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
[2025-05-02 20:45:52] INFO GUI: Parameters: Chunks=64, Margin=10, N_FFT=6144, Dim_T=9, Dim_F=20256, Denoise=--denoise
[2025-05-02 20:45:52] INFO GUI: Resolved command: cmd /c "cd C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\UVR\uvr_env\Scripts && activate.bat && cd "C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\UVR\uvr-main" && python.exe separate.py "C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac" -m "C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\models\MDXNet\kuielab_a_drums.onnx" -o "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems" --chunks=64 --margin=10 --n_fft=6144 --dim_t=9 --dim_f=20256 --denoise && deactivate"
[2025-05-02 20:45:52] ERROR GUI: separate.py not found: C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\UVR\uvr-main\separate.py
[2025-05-02 20:46:01] INFO GUI: Exiting GUI
[2025-05-02 20:46:53] INFO GUI: Starting Test Models.ini GUI
[2025-05-02 20:46:53] INFO GUI: Loading models.ini from C:\Git\3DAudioStudio\scripts\autoit\1.3\models.ini
[2025-05-02 20:46:53] INFO GUI: Loaded 10 models from models.ini
[2025-05-02 20:46:53] INFO GUI: Selected model: UVR_MDXNET_Inst_Main
[2025-05-02 20:46:53] INFO GUI: Updated model info for UVR_MDXNET_Inst_Main
[2025-05-02 20:46:59] INFO GUI: Exiting GUI
2025-05-02 21:04:31 - INFO - Starting separation for model: kuelab_b_other, Quality: Balanced, Input: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac, Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems, SegmentSize: 10, Overlap: 44100, Denoise: True, NFFT: 4096, DimF: 2048, DimT: 9
2025-05-02 21:04:31 - DEBUG - Original command: cmd /c "cd @EnvPath@ && activate.bat && cd @ScriptDir@ && python @PythonScript@ "@SongPath@" -m "@Path@" -o "@OutputDir@" --chunks @SegmentSize@ --margin @Overlap@ --n_fft @NFFT@ --dim_f @DimF@ --dim_t @DimT@ && deactivate"
2025-05-02 21:04:31 - INFO - Resolved command: cmd /c "cd C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\UVR\uvr_env\Scripts && activate.bat && cd C:\Git\3DAudioStudio\scripts\autoit\1.3 && python separate.py "C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac" -m "C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_other.onnx" -o "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems" --chunks 10 --margin 44100 --n_fft 4096 --dim_f 2048 --dim_t 9 && deactivate"
2025-05-02 21:05:00 - INFO - Separation output: 2025-05-02 21:04:42,512 - DEBUG - Logging initialized
2025-05-02 21:04:42,514 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song10.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 10, 'n_fft': 4096, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 21:04:42,514 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 21:04:42,514 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac
2025-05-02 21:04:42,516 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=512, n_fft=4096, hop=1024
2025-05-02 21:04:42,516 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song10.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 10, 'n_fft': 4096, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 21:04:42,517 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_other.onnx
2025-05-02 21:04:42,592 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac
2025-05-02 21:04:43,086 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=86)
           2	LOAD_GLOBAL(arg=0, lineno=86)
           4	LOAD_FAST(arg=0, lineno=86)
           6	LOAD_FAST(arg=1, lineno=86)
           8	LOAD_FAST(arg=2, lineno=86)
          10	LOAD_FAST(arg=3, lineno=86)
          12	LOAD_FAST(arg=4, lineno=86)
          14	LOAD_FAST(arg=5, lineno=86)
          16	LOAD_FAST(arg=6, lineno=86)
          18	CALL_FUNCTION(arg=7, lineno=86)
          20	POP_TOP(arg=None, lineno=86)
          22	LOAD_CONST(arg=0, lineno=86)
          24	RETURN_VALUE(arg=None, lineno=86)
2025-05-02 21:04:43,087 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-02 21:04:43,087 - DEBUG - stack: []
2025-05-02 21:04:43,087 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=86)
2025-05-02 21:04:43,087 - DEBUG - stack []
2025-05-02 21:04:43,087 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=86)
2025-05-02 21:04:43,087 - DEBUG - stack []
2025-05-02 21:04:43,087 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=86)
2025-05-02 21:04:43,087 - DEBUG - stack ['$2load_global.0']
2025-05-02 21:04:43,087 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=86)
2025-05-02 21:04:43,087 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-05-02 21:04:43,087 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=86)
2025-05-02 21:04:43,087 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2']
2025-05-02 21:04:43,087 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=86)
2025-05-02 21:04:43,087 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3']
2025-05-02 21:04:43,087 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=4, lineno=86)
2025-05-02 21:04:43,087 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4']
2025-05-02 21:04:43,087 - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=5, lineno=86)
2025-05-02 21:04:43,087 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5']
2025-05-02 21:04:43,087 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=6, lineno=86)
2025-05-02 21:04:43,087 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6']
2025-05-02 21:04:43,088 - DEBUG - dispatch pc=18, inst=CALL_FUNCTION(arg=7, lineno=86)
2025-05-02 21:04:43,088 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6', '$y16.7']
2025-05-02 21:04:43,088 - DEBUG - dispatch pc=20, inst=POP_TOP(arg=None, lineno=86)
2025-05-02 21:04:43,088 - DEBUG - stack ['$18call_function.8']
2025-05-02 21:04:43,088 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=0, lineno=86)
2025-05-02 21:04:43,088 - DEBUG - stack []
2025-05-02 21:04:43,088 - DEBUG - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=86)
2025-05-02 21:04:43,088 - DEBUG - stack ['$const22.9']
2025-05-02 21:04:43,088 - DEBUG - end state. edges=[]
2025-05-02 21:04:43,088 - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-02 21:04:43,088 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-02 21:04:43,088 - DEBUG - defmap: {}
2025-05-02 21:04:43,088 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-02 21:04:43,088 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-02 21:04:43,088 - DEBUG - keep phismap: {}
2025-05-02 21:04:43,088 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-02 21:04:43,088 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-02 21:04:43,088 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'res': '$t_out6.2'}), (8, {'res': '$interp_win8.3'}), (10, {'res': '$interp_delta10.4'}), (12, {'res': '$num_table12.5'}), (14, {'res': '$scale14.6'}), (16, {'res': '$y16.7'}), (18, {'func': '$2load_global.0', 'args': ['$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6', '$y16.7'], 'res': '$18call_function.8'}), (22, {'res': '$const22.9'}), (24, {'retval': '$const22.9', 'castval': '$24return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-02 21:04:43,145 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    t_out = arg(1, name=t_out)               ['t_out']
    interp_win = arg(2, name=interp_win)     ['interp_win']
    interp_delta = arg(3, name=interp_delta) ['interp_delta']
    num_table = arg(4, name=num_table)       ['num_table']
    scale = arg(5, name=scale)               ['scale']
    y = arg(6, name=y)                       ['y']
    $2load_global.0 = global(_resample_loop_s: CPUDispatcher(<function _resample_loop at 0x000001EA6E1F8F70>)) ['$2load_global.0']
    $18call_function.8 = call $2load_global.0(x, t_out, interp_win, interp_delta, num_table, scale, y, func=$2load_global.0, args=[Var(x, interpn.py:86), Var(t_out, interpn.py:86), Var(interp_win, interpn.py:86), Var(interp_delta, interpn.py:86), Var(num_table, interpn.py:86), Var(scale, interpn.py:86), Var(y, interpn.py:86)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call_function.8', '$2load_global.0', 'interp_delta', 'interp_win', 'num_table', 'scale', 't_out', 'x', 'y']
    $const22.9 = const(NoneType, None)       ['$const22.9']
    $24return_value.10 = cast(value=$const22.9) ['$24return_value.10', '$const22.9']
    return $24return_value.10                ['$24return_value.10']

2025-05-02 21:04:43,149 - DEBUG - ==== SSA block analysis pass on 0
2025-05-02 21:04:43,149 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA007F7A00>
2025-05-02 21:04:43,150 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,150 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,150 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,150 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,150 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,150 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,150 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,150 - DEBUG - on stmt: $2load_global.0 = global(_resample_loop_s: CPUDispatcher(<function _resample_loop at 0x000001EA6E1F8F70>))
2025-05-02 21:04:43,150 - DEBUG - on stmt: $18call_function.8 = call $2load_global.0(x, t_out, interp_win, interp_delta, num_table, scale, y, func=$2load_global.0, args=[Var(x, interpn.py:86), Var(t_out, interpn.py:86), Var(interp_win, interpn.py:86), Var(interp_delta, interpn.py:86), Var(num_table, interpn.py:86), Var(scale, interpn.py:86), Var(y, interpn.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,150 - DEBUG - on stmt: $const22.9 = const(NoneType, None)
2025-05-02 21:04:43,150 - DEBUG - on stmt: $24return_value.10 = cast(value=$const22.9)
2025-05-02 21:04:43,150 - DEBUG - on stmt: return $24return_value.10
2025-05-02 21:04:43,150 - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call_function.8': [<numba.core.ir.Assign object at 0x000001EA00810D90>],
             '$24return_value.10': [<numba.core.ir.Assign object at 0x000001EA007F78B0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001EA008103D0>],
             '$const22.9': [<numba.core.ir.Assign object at 0x000001EA007F7130>],
             'interp_delta': [<numba.core.ir.Assign object at 0x000001EA007F7EB0>],
             'interp_win': [<numba.core.ir.Assign object at 0x000001EA007F7D90>],
             'num_table': [<numba.core.ir.Assign object at 0x000001EA007F7FD0>],
             'scale': [<numba.core.ir.Assign object at 0x000001EA00810130>],
             't_out': [<numba.core.ir.Assign object at 0x000001EA007F7C70>],
             'x': [<numba.core.ir.Assign object at 0x000001EA007F71F0>],
             'y': [<numba.core.ir.Assign object at 0x000001EA00810250>]})
2025-05-02 21:04:43,150 - DEBUG - SSA violators set()
2025-05-02 21:04:43,153 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=9)
           2	LOAD_GLOBAL(arg=0, lineno=9)
           4	LOAD_FAST(arg=5, lineno=9)
           6	LOAD_FAST(arg=4, lineno=9)
           8	BINARY_MULTIPLY(arg=None, lineno=9)
          10	CALL_FUNCTION(arg=1, lineno=9)
          12	STORE_FAST(arg=7, lineno=9)
          14	LOAD_CONST(arg=1, lineno=10)
          16	STORE_FAST(arg=8, lineno=10)
          18	LOAD_CONST(arg=2, lineno=12)
          20	STORE_FAST(arg=9, lineno=12)
          22	LOAD_CONST(arg=1, lineno=13)
          24	STORE_FAST(arg=10, lineno=13)
          26	LOAD_CONST(arg=1, lineno=14)
          28	STORE_FAST(arg=11, lineno=14)
          30	LOAD_CONST(arg=2, lineno=15)
          32	STORE_FAST(arg=12, lineno=15)
          34	LOAD_CONST(arg=1, lineno=16)
          36	STORE_FAST(arg=13, lineno=16)
          38	LOAD_CONST(arg=1, lineno=17)
          40	STORE_FAST(arg=14, lineno=17)
          42	LOAD_FAST(arg=2, lineno=19)
          44	LOAD_ATTR(arg=1, lineno=19)
          46	LOAD_CONST(arg=2, lineno=19)
          48	BINARY_SUBSCR(arg=None, lineno=19)
          50	STORE_FAST(arg=15, lineno=19)
          52	LOAD_FAST(arg=0, lineno=20)
          54	LOAD_ATTR(arg=1, lineno=20)
          56	LOAD_CONST(arg=2, lineno=20)
          58	BINARY_SUBSCR(arg=None, lineno=20)
          60	STORE_FAST(arg=16, lineno=20)
          62	LOAD_FAST(arg=1, lineno=21)
          64	LOAD_ATTR(arg=1, lineno=21)
          66	LOAD_CONST(arg=2, lineno=21)
          68	BINARY_SUBSCR(arg=None, lineno=21)
          70	STORE_FAST(arg=17, lineno=21)
          72	LOAD_GLOBAL(arg=2, lineno=23)
          74	LOAD_FAST(arg=17, lineno=23)
          76	CALL_FUNCTION(arg=1, lineno=23)
          78	GET_ITER(arg=None, lineno=23)
>         80	FOR_ITER(arg=298, lineno=23)
          84	STORE_FAST(arg=18, lineno=23)
          86	LOAD_FAST(arg=1, lineno=24)
          88	LOAD_FAST(arg=18, lineno=24)
          90	BINARY_SUBSCR(arg=None, lineno=24)
          92	STORE_FAST(arg=8, lineno=24)
          94	LOAD_GLOBAL(arg=0, lineno=27)
          96	LOAD_FAST(arg=8, lineno=27)
          98	CALL_FUNCTION(arg=1, lineno=27)
         100	STORE_FAST(arg=9, lineno=27)
         102	LOAD_FAST(arg=5, lineno=30)
         104	LOAD_FAST(arg=8, lineno=30)
         106	LOAD_FAST(arg=9, lineno=30)
         108	BINARY_SUBTRACT(arg=None, lineno=30)
         110	BINARY_MULTIPLY(arg=None, lineno=30)
         112	STORE_FAST(arg=10, lineno=30)
         114	LOAD_FAST(arg=10, lineno=33)
         116	LOAD_FAST(arg=4, lineno=33)
         118	BINARY_MULTIPLY(arg=None, lineno=33)
         120	STORE_FAST(arg=11, lineno=33)
         122	LOAD_GLOBAL(arg=0, lineno=34)
         124	LOAD_FAST(arg=11, lineno=34)
         126	CALL_FUNCTION(arg=1, lineno=34)
         128	STORE_FAST(arg=12, lineno=34)
         130	LOAD_FAST(arg=11, lineno=37)
         132	LOAD_FAST(arg=12, lineno=37)
         134	BINARY_SUBTRACT(arg=None, lineno=37)
         136	STORE_FAST(arg=13, lineno=37)
         138	LOAD_GLOBAL(arg=3, lineno=40)
         140	LOAD_FAST(arg=9, lineno=40)
         142	LOAD_CONST(arg=3, lineno=40)
         144	BINARY_ADD(arg=None, lineno=40)
         146	LOAD_FAST(arg=15, lineno=40)
         148	LOAD_FAST(arg=12, lineno=40)
         150	BINARY_SUBTRACT(arg=None, lineno=40)
         152	LOAD_FAST(arg=7, lineno=40)
         154	BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
         156	CALL_FUNCTION(arg=2, lineno=40)
         158	STORE_FAST(arg=19, lineno=40)
         160	LOAD_GLOBAL(arg=4, lineno=41)
         162	LOAD_FAST(arg=19, lineno=41)
         164	CALL_FUNCTION(arg=1, lineno=41)
         166	GET_ITER(arg=None, lineno=41)
>        168	FOR_ITER(arg=68, lineno=41)
         170	STORE_FAST(arg=20, lineno=41)
         172	LOAD_FAST(arg=2, lineno=44)
         174	LOAD_FAST(arg=12, lineno=44)
         176	LOAD_FAST(arg=20, lineno=44)
         178	LOAD_FAST(arg=7, lineno=44)
         180	BINARY_MULTIPLY(arg=None, lineno=44)
         182	BINARY_ADD(arg=None, lineno=44)
         184	BINARY_SUBSCR(arg=None, lineno=44)
         186	LOAD_FAST(arg=13, lineno=45)
         188	LOAD_FAST(arg=3, lineno=45)
         190	LOAD_FAST(arg=12, lineno=45)
         192	LOAD_FAST(arg=20, lineno=45)
         194	LOAD_FAST(arg=7, lineno=45)
         196	BINARY_MULTIPLY(arg=None, lineno=45)
         198	BINARY_ADD(arg=None, lineno=45)
         200	BINARY_SUBSCR(arg=None, lineno=45)
         202	BINARY_MULTIPLY(arg=None, lineno=45)
         204	BINARY_ADD(arg=None, lineno=44)
         206	STORE_FAST(arg=14, lineno=43)
         208	LOAD_FAST(arg=6, lineno=47)
         210	LOAD_FAST(arg=18, lineno=47)
         212	DUP_TOP_TWO(arg=None, lineno=47)
         214	BINARY_SUBSCR(arg=None, lineno=47)
         216	LOAD_FAST(arg=14, lineno=47)
         218	LOAD_FAST(arg=0, lineno=47)
         220	LOAD_FAST(arg=9, lineno=47)
         222	LOAD_FAST(arg=20, lineno=47)
         224	BINARY_SUBTRACT(arg=None, lineno=47)
         226	BINARY_SUBSCR(arg=None, lineno=47)
         228	BINARY_MULTIPLY(arg=None, lineno=47)
         230	INPLACE_ADD(arg=None, lineno=47)
         232	ROT_THREE(arg=None, lineno=47)
         234	STORE_SUBSCR(arg=None, lineno=47)
         236	JUMP_ABSOLUTE(arg=168, lineno=47)
>        238	LOAD_FAST(arg=5, lineno=50)
         240	LOAD_FAST(arg=10, lineno=50)
         242	BINARY_SUBTRACT(arg=None, lineno=50)
         244	STORE_FAST(arg=10, lineno=50)
         246	LOAD_FAST(arg=10, lineno=53)
         248	LOAD_FAST(arg=4, lineno=53)
         250	BINARY_MULTIPLY(arg=None, lineno=53)
         252	STORE_FAST(arg=11, lineno=53)
         254	LOAD_GLOBAL(arg=0, lineno=54)
         256	LOAD_FAST(arg=11, lineno=54)
         258	CALL_FUNCTION(arg=1, lineno=54)
         260	STORE_FAST(arg=12, lineno=54)
         262	LOAD_FAST(arg=11, lineno=57)
         264	LOAD_FAST(arg=12, lineno=57)
         266	BINARY_SUBTRACT(arg=None, lineno=57)
         268	STORE_FAST(arg=13, lineno=57)
         270	LOAD_GLOBAL(arg=3, lineno=60)
         272	LOAD_FAST(arg=16, lineno=60)
         274	LOAD_FAST(arg=9, lineno=60)
         276	BINARY_SUBTRACT(arg=None, lineno=60)
         278	LOAD_CONST(arg=3, lineno=60)
         280	BINARY_SUBTRACT(arg=None, lineno=60)
         282	LOAD_FAST(arg=15, lineno=60)
         284	LOAD_FAST(arg=12, lineno=60)
         286	BINARY_SUBTRACT(arg=None, lineno=60)
         288	LOAD_FAST(arg=7, lineno=60)
         290	BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
         292	CALL_FUNCTION(arg=2, lineno=60)
         294	STORE_FAST(arg=21, lineno=60)
         296	LOAD_GLOBAL(arg=4, lineno=61)
         298	LOAD_FAST(arg=21, lineno=61)
         300	CALL_FUNCTION(arg=1, lineno=61)
         302	GET_ITER(arg=None, lineno=61)
>        304	FOR_ITER(arg=74, lineno=61)
         306	STORE_FAST(arg=22, lineno=61)
         308	LOAD_FAST(arg=2, lineno=63)
         310	LOAD_FAST(arg=12, lineno=63)
         312	LOAD_FAST(arg=22, lineno=63)
         314	LOAD_FAST(arg=7, lineno=63)
         316	BINARY_MULTIPLY(arg=None, lineno=63)
         318	BINARY_ADD(arg=None, lineno=63)
         320	BINARY_SUBSCR(arg=None, lineno=63)
         322	LOAD_FAST(arg=13, lineno=64)
         324	LOAD_FAST(arg=3, lineno=64)
         326	LOAD_FAST(arg=12, lineno=64)
         328	LOAD_FAST(arg=22, lineno=64)
         330	LOAD_FAST(arg=7, lineno=64)
         332	BINARY_MULTIPLY(arg=None, lineno=64)
         334	BINARY_ADD(arg=None, lineno=64)
         336	BINARY_SUBSCR(arg=None, lineno=64)
         338	BINARY_MULTIPLY(arg=None, lineno=64)
         340	BINARY_ADD(arg=None, lineno=63)
         342	STORE_FAST(arg=14, lineno=62)
         344	LOAD_FAST(arg=6, lineno=66)
         346	LOAD_FAST(arg=18, lineno=66)
         348	DUP_TOP_TWO(arg=None, lineno=66)
         350	BINARY_SUBSCR(arg=None, lineno=66)
         352	LOAD_FAST(arg=14, lineno=66)
         354	LOAD_FAST(arg=0, lineno=66)
         356	LOAD_FAST(arg=9, lineno=66)
         358	LOAD_FAST(arg=22, lineno=66)
         360	BINARY_ADD(arg=None, lineno=66)
         362	LOAD_CONST(arg=3, lineno=66)
         364	BINARY_ADD(arg=None, lineno=66)
         366	BINARY_SUBSCR(arg=None, lineno=66)
         368	BINARY_MULTIPLY(arg=None, lineno=66)
         370	INPLACE_ADD(arg=None, lineno=66)
         372	ROT_THREE(arg=None, lineno=66)
         374	STORE_SUBSCR(arg=None, lineno=66)
         376	JUMP_ABSOLUTE(arg=304, lineno=66)
>        380	JUMP_ABSOLUTE(arg=80, lineno=66)
>        382	LOAD_CONST(arg=0, lineno=66)
         384	RETURN_VALUE(arg=None, lineno=66)
2025-05-02 21:04:43,154 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-02 21:04:43,154 - DEBUG - stack: []
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=9)
2025-05-02 21:04:43,154 - DEBUG - stack []
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=9)
2025-05-02 21:04:43,154 - DEBUG - stack []
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=5, lineno=9)
2025-05-02 21:04:43,154 - DEBUG - stack ['$2load_global.0']
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=4, lineno=9)
2025-05-02 21:04:43,154 - DEBUG - stack ['$2load_global.0', '$scale4.1']
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=9)
2025-05-02 21:04:43,154 - DEBUG - stack ['$2load_global.0', '$scale4.1', '$num_table6.2']
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=9)
2025-05-02 21:04:43,154 - DEBUG - stack ['$2load_global.0', '$8binary_multiply.3']
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=12, inst=STORE_FAST(arg=7, lineno=9)
2025-05-02 21:04:43,154 - DEBUG - stack ['$10call_function.4']
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=10)
2025-05-02 21:04:43,154 - DEBUG - stack []
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=8, lineno=10)
2025-05-02 21:04:43,154 - DEBUG - stack ['$const14.5']
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=12)
2025-05-02 21:04:43,154 - DEBUG - stack []
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=20, inst=STORE_FAST(arg=9, lineno=12)
2025-05-02 21:04:43,154 - DEBUG - stack ['$const18.6']
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=13)
2025-05-02 21:04:43,154 - DEBUG - stack []
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=24, inst=STORE_FAST(arg=10, lineno=13)
2025-05-02 21:04:43,154 - DEBUG - stack ['$const22.7']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=26, inst=LOAD_CONST(arg=1, lineno=14)
2025-05-02 21:04:43,155 - DEBUG - stack []
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=28, inst=STORE_FAST(arg=11, lineno=14)
2025-05-02 21:04:43,155 - DEBUG - stack ['$const26.8']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=15)
2025-05-02 21:04:43,155 - DEBUG - stack []
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=32, inst=STORE_FAST(arg=12, lineno=15)
2025-05-02 21:04:43,155 - DEBUG - stack ['$const30.9']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=16)
2025-05-02 21:04:43,155 - DEBUG - stack []
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=36, inst=STORE_FAST(arg=13, lineno=16)
2025-05-02 21:04:43,155 - DEBUG - stack ['$const34.10']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=17)
2025-05-02 21:04:43,155 - DEBUG - stack []
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=40, inst=STORE_FAST(arg=14, lineno=17)
2025-05-02 21:04:43,155 - DEBUG - stack ['$const38.11']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=42, inst=LOAD_FAST(arg=2, lineno=19)
2025-05-02 21:04:43,155 - DEBUG - stack []
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=44, inst=LOAD_ATTR(arg=1, lineno=19)
2025-05-02 21:04:43,155 - DEBUG - stack ['$interp_win42.12']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=46, inst=LOAD_CONST(arg=2, lineno=19)
2025-05-02 21:04:43,155 - DEBUG - stack ['$44load_attr.13']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=19)
2025-05-02 21:04:43,155 - DEBUG - stack ['$44load_attr.13', '$const46.14']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=50, inst=STORE_FAST(arg=15, lineno=19)
2025-05-02 21:04:43,155 - DEBUG - stack ['$48binary_subscr.15']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=20)
2025-05-02 21:04:43,155 - DEBUG - stack []
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=54, inst=LOAD_ATTR(arg=1, lineno=20)
2025-05-02 21:04:43,155 - DEBUG - stack ['$x52.16']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=56, inst=LOAD_CONST(arg=2, lineno=20)
2025-05-02 21:04:43,155 - DEBUG - stack ['$54load_attr.17']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=20)
2025-05-02 21:04:43,155 - DEBUG - stack ['$54load_attr.17', '$const56.18']
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=60, inst=STORE_FAST(arg=16, lineno=20)
2025-05-02 21:04:43,156 - DEBUG - stack ['$58binary_subscr.19']
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=21)
2025-05-02 21:04:43,156 - DEBUG - stack []
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=64, inst=LOAD_ATTR(arg=1, lineno=21)
2025-05-02 21:04:43,156 - DEBUG - stack ['$t_out62.20']
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=21)
2025-05-02 21:04:43,156 - DEBUG - stack ['$64load_attr.21']
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=21)
2025-05-02 21:04:43,156 - DEBUG - stack ['$64load_attr.21', '$const66.22']
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=70, inst=STORE_FAST(arg=17, lineno=21)
2025-05-02 21:04:43,156 - DEBUG - stack ['$68binary_subscr.23']
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=72, inst=LOAD_GLOBAL(arg=2, lineno=23)
2025-05-02 21:04:43,156 - DEBUG - stack []
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=17, lineno=23)
2025-05-02 21:04:43,156 - DEBUG - stack ['$72load_global.24']
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=23)
2025-05-02 21:04:43,156 - DEBUG - stack ['$72load_global.24', '$n_out74.25']
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=23)
2025-05-02 21:04:43,156 - DEBUG - stack ['$76call_function.26']
2025-05-02 21:04:43,156 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.27',), blockstack=(), npush=0)]
2025-05-02 21:04:43,156 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-05-02 21:04:43,156 - DEBUG - stack: ['$phi80.0']
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=298, lineno=23)
2025-05-02 21:04:43,156 - DEBUG - stack ['$phi80.0']
2025-05-02 21:04:43,156 - DEBUG - end state. edges=[Edge(pc=382, stack=(), blockstack=(), npush=0), Edge(pc=84, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-05-02 21:04:43,156 - DEBUG - pending: deque([State(pc_initial=382 nstack_initial=0), State(pc_initial=84 nstack_initial=2)])
2025-05-02 21:04:43,156 - DEBUG - stack: []
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=382, inst=LOAD_CONST(arg=0, lineno=66)
2025-05-02 21:04:43,157 - DEBUG - stack []
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=384, inst=RETURN_VALUE(arg=None, lineno=66)
2025-05-02 21:04:43,157 - DEBUG - stack ['$const382.0']
2025-05-02 21:04:43,157 - DEBUG - end state. edges=[]
2025-05-02 21:04:43,157 - DEBUG - pending: deque([State(pc_initial=84 nstack_initial=2)])
2025-05-02 21:04:43,157 - DEBUG - stack: ['$phi84.0', '$phi84.1']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=84, inst=STORE_FAST(arg=18, lineno=23)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0', '$phi84.1']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=24)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=88, inst=LOAD_FAST(arg=18, lineno=24)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0', '$t_out86.2']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=24)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0', '$t_out86.2', '$t88.3']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=92, inst=STORE_FAST(arg=8, lineno=24)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0', '$90binary_subscr.4']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=94, inst=LOAD_GLOBAL(arg=0, lineno=27)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=96, inst=LOAD_FAST(arg=8, lineno=27)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0', '$94load_global.5']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=98, inst=CALL_FUNCTION(arg=1, lineno=27)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0', '$94load_global.5', '$time_register96.6']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=100, inst=STORE_FAST(arg=9, lineno=27)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0', '$98call_function.7']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=102, inst=LOAD_FAST(arg=5, lineno=30)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=104, inst=LOAD_FAST(arg=8, lineno=30)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0', '$scale102.8']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=9, lineno=30)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0', '$scale102.8', '$time_register104.9']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=30)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$scale102.8', '$time_register104.9', '$n106.10']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=110, inst=BINARY_MULTIPLY(arg=None, lineno=30)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$scale102.8', '$108binary_subtract.11']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=112, inst=STORE_FAST(arg=10, lineno=30)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$110binary_multiply.12']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=10, lineno=33)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=4, lineno=33)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$frac114.13']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=118, inst=BINARY_MULTIPLY(arg=None, lineno=33)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$frac114.13', '$num_table116.14']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=120, inst=STORE_FAST(arg=11, lineno=33)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$118binary_multiply.15']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=122, inst=LOAD_GLOBAL(arg=0, lineno=34)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=124, inst=LOAD_FAST(arg=11, lineno=34)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$122load_global.16']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=126, inst=CALL_FUNCTION(arg=1, lineno=34)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$122load_global.16', '$index_frac124.17']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=128, inst=STORE_FAST(arg=12, lineno=34)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$126call_function.18']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=130, inst=LOAD_FAST(arg=11, lineno=37)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=12, lineno=37)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$index_frac130.19']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=134, inst=BINARY_SUBTRACT(arg=None, lineno=37)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$index_frac130.19', '$offset132.20']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=136, inst=STORE_FAST(arg=13, lineno=37)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$134binary_subtract.21']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=138, inst=LOAD_GLOBAL(arg=3, lineno=40)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=140, inst=LOAD_FAST(arg=9, lineno=40)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$138load_global.22']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=142, inst=LOAD_CONST(arg=3, lineno=40)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$n140.23']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=144, inst=BINARY_ADD(arg=None, lineno=40)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$n140.23', '$const142.24']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=146, inst=LOAD_FAST(arg=15, lineno=40)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=148, inst=LOAD_FAST(arg=12, lineno=40)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$nwin146.26']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=150, inst=BINARY_SUBTRACT(arg=None, lineno=40)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$nwin146.26', '$offset148.27']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=7, lineno=40)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$150binary_subtract.28']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=154, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$150binary_subtract.28', '$index_step152.29']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=156, inst=CALL_FUNCTION(arg=2, lineno=40)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$154binary_floor_divide.30']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=158, inst=STORE_FAST(arg=19, lineno=40)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$156call_function.31']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=160, inst=LOAD_GLOBAL(arg=4, lineno=41)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=162, inst=LOAD_FAST(arg=19, lineno=41)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$160load_global.32']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=41)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$160load_global.32', '$i_max162.33']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=166, inst=GET_ITER(arg=None, lineno=41)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$164call_function.34']
2025-05-02 21:04:43,159 - DEBUG - end state. edges=[Edge(pc=168, stack=('$phi84.0', '$166get_iter.35'), blockstack=(), npush=0)]
2025-05-02 21:04:43,159 - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=2)])
2025-05-02 21:04:43,159 - DEBUG - stack: ['$phi168.0', '$phi168.1']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=168, inst=FOR_ITER(arg=68, lineno=41)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi168.0', '$phi168.1']
2025-05-02 21:04:43,160 - DEBUG - end state. edges=[Edge(pc=238, stack=('$phi168.0',), blockstack=(), npush=0), Edge(pc=170, stack=('$phi168.0', '$phi168.1', '$168for_iter.3'), blockstack=(), npush=0)]
2025-05-02 21:04:43,160 - DEBUG - pending: deque([State(pc_initial=238 nstack_initial=1), State(pc_initial=170 nstack_initial=3)])
2025-05-02 21:04:43,160 - DEBUG - stack: ['$phi238.0']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=238, inst=LOAD_FAST(arg=5, lineno=50)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=10, lineno=50)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0', '$scale238.1']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=242, inst=BINARY_SUBTRACT(arg=None, lineno=50)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0', '$scale238.1', '$frac240.2']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=244, inst=STORE_FAST(arg=10, lineno=50)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0', '$242binary_subtract.3']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=10, lineno=53)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=248, inst=LOAD_FAST(arg=4, lineno=53)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0', '$frac246.4']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=250, inst=BINARY_MULTIPLY(arg=None, lineno=53)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0', '$frac246.4', '$num_table248.5']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=252, inst=STORE_FAST(arg=11, lineno=53)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0', '$250binary_multiply.6']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=254, inst=LOAD_GLOBAL(arg=0, lineno=54)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=11, lineno=54)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0', '$254load_global.7']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=258, inst=CALL_FUNCTION(arg=1, lineno=54)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0', '$254load_global.7', '$index_frac256.8']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=260, inst=STORE_FAST(arg=12, lineno=54)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0', '$258call_function.9']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=262, inst=LOAD_FAST(arg=11, lineno=57)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=264, inst=LOAD_FAST(arg=12, lineno=57)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$index_frac262.10']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=266, inst=BINARY_SUBTRACT(arg=None, lineno=57)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$index_frac262.10', '$offset264.11']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=268, inst=STORE_FAST(arg=13, lineno=57)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$266binary_subtract.12']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=270, inst=LOAD_GLOBAL(arg=3, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=272, inst=LOAD_FAST(arg=16, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=274, inst=LOAD_FAST(arg=9, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$n_orig272.14']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=276, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$n_orig272.14', '$n274.15']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=278, inst=LOAD_CONST(arg=3, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$276binary_subtract.16']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=280, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$276binary_subtract.16', '$const278.17']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=282, inst=LOAD_FAST(arg=15, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=284, inst=LOAD_FAST(arg=12, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$nwin282.19']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=286, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$nwin282.19', '$offset284.20']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=288, inst=LOAD_FAST(arg=7, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$286binary_subtract.21']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=290, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$286binary_subtract.21', '$index_step288.22']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=292, inst=CALL_FUNCTION(arg=2, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$290binary_floor_divide.23']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=294, inst=STORE_FAST(arg=21, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$292call_function.24']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=296, inst=LOAD_GLOBAL(arg=4, lineno=61)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=298, inst=LOAD_FAST(arg=21, lineno=61)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$296load_global.25']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=300, inst=CALL_FUNCTION(arg=1, lineno=61)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi238.0', '$296load_global.25', '$k_max298.26']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=302, inst=GET_ITER(arg=None, lineno=61)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi238.0', '$300call_function.27']
2025-05-02 21:04:43,163 - DEBUG - end state. edges=[Edge(pc=304, stack=('$phi238.0', '$302get_iter.28'), blockstack=(), npush=0)]
2025-05-02 21:04:43,163 - DEBUG - pending: deque([State(pc_initial=170 nstack_initial=3), State(pc_initial=304 nstack_initial=2)])
2025-05-02 21:04:43,163 - DEBUG - stack: ['$phi170.0', '$phi170.1', '$phi170.2']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=170, inst=STORE_FAST(arg=20, lineno=41)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$phi170.2']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=172, inst=LOAD_FAST(arg=2, lineno=44)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=12, lineno=44)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=176, inst=LOAD_FAST(arg=20, lineno=44)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=178, inst=LOAD_FAST(arg=7, lineno=44)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$i176.5']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=44)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$i176.5', '$index_step178.6']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=44)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$180binary_multiply.7']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=44)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$182binary_add.8']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=186, inst=LOAD_FAST(arg=13, lineno=45)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=188, inst=LOAD_FAST(arg=3, lineno=45)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=12, lineno=45)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=192, inst=LOAD_FAST(arg=20, lineno=45)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=45)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$i192.13']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=196, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$i192.13', '$index_step194.14']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=198, inst=BINARY_ADD(arg=None, lineno=45)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$196binary_multiply.15']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=200, inst=BINARY_SUBSCR(arg=None, lineno=45)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$198binary_add.16']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=202, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$200binary_subscr.17']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=204, inst=BINARY_ADD(arg=None, lineno=44)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$202binary_multiply.18']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=206, inst=STORE_FAST(arg=14, lineno=43)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$204binary_add.19']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=208, inst=LOAD_FAST(arg=6, lineno=47)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=210, inst=LOAD_FAST(arg=18, lineno=47)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=212, inst=DUP_TOP_TWO(arg=None, lineno=47)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=214, inst=BINARY_SUBSCR(arg=None, lineno=47)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$212dup_top_two.22', '$212dup_top_two.23']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=216, inst=LOAD_FAST(arg=14, lineno=47)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=47)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=220, inst=LOAD_FAST(arg=9, lineno=47)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=222, inst=LOAD_FAST(arg=20, lineno=47)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$n220.27']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=224, inst=BINARY_SUBTRACT(arg=None, lineno=47)
2025-05-02 21:04:43,165 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$n220.27', '$i222.28']
2025-05-02 21:04:43,165 - DEBUG - dispatch pc=226, inst=BINARY_SUBSCR(arg=None, lineno=47)
2025-05-02 21:04:43,165 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$224binary_subtract.29']
2025-05-02 21:04:43,165 - DEBUG - dispatch pc=228, inst=BINARY_MULTIPLY(arg=None, lineno=47)
2025-05-02 21:04:43,165 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$226binary_subscr.30']
2025-05-02 21:04:43,165 - DEBUG - dispatch pc=230, inst=INPLACE_ADD(arg=None, lineno=47)
2025-05-02 21:04:43,165 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$228binary_multiply.31']
2025-05-02 21:04:43,165 - DEBUG - dispatch pc=232, inst=ROT_THREE(arg=None, lineno=47)
2025-05-02 21:04:43,165 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$230inplace_add.32']
2025-05-02 21:04:43,165 - DEBUG - dispatch pc=234, inst=STORE_SUBSCR(arg=None, lineno=47)
2025-05-02 21:04:43,165 - DEBUG - stack ['$phi170.0', '$phi170.1', '$230inplace_add.32', '$y208.20', '$t210.21']
2025-05-02 21:04:43,165 - DEBUG - dispatch pc=236, inst=JUMP_ABSOLUTE(arg=168, lineno=47)
2025-05-02 21:04:43,165 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 21:04:43,165 - DEBUG - end state. edges=[Edge(pc=168, stack=('$phi170.0', '$phi170.1'), blockstack=(), npush=0)]
2025-05-02 21:04:43,165 - DEBUG - pending: deque([State(pc_initial=304 nstack_initial=2), State(pc_initial=168 nstack_initial=2)])
2025-05-02 21:04:43,165 - DEBUG - stack: ['$phi304.0', '$phi304.1']
2025-05-02 21:04:43,165 - DEBUG - dispatch pc=304, inst=FOR_ITER(arg=74, lineno=61)
2025-05-02 21:04:43,165 - DEBUG - stack ['$phi304.0', '$phi304.1']
2025-05-02 21:04:43,165 - DEBUG - end state. edges=[Edge(pc=380, stack=('$phi304.0',), blockstack=(), npush=0), Edge(pc=306, stack=('$phi304.0', '$phi304.1', '$304for_iter.3'), blockstack=(), npush=0)]
2025-05-02 21:04:43,165 - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=2), State(pc_initial=380 nstack_initial=1), State(pc_initial=306 nstack_initial=3)])
2025-05-02 21:04:43,165 - DEBUG - pending: deque([State(pc_initial=380 nstack_initial=1), State(pc_initial=306 nstack_initial=3)])
2025-05-02 21:04:43,165 - DEBUG - stack: ['$phi380.0']
2025-05-02 21:04:43,165 - DEBUG - dispatch pc=380, inst=JUMP_ABSOLUTE(arg=80, lineno=66)
2025-05-02 21:04:43,165 - DEBUG - stack ['$phi380.0']
2025-05-02 21:04:43,165 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi380.0',), blockstack=(), npush=0)]
2025-05-02 21:04:43,165 - DEBUG - pending: deque([State(pc_initial=306 nstack_initial=3), State(pc_initial=80 nstack_initial=1)])
2025-05-02 21:04:43,165 - DEBUG - stack: ['$phi306.0', '$phi306.1', '$phi306.2']
2025-05-02 21:04:43,165 - DEBUG - dispatch pc=306, inst=STORE_FAST(arg=22, lineno=61)
2025-05-02 21:04:43,165 - DEBUG - stack ['$phi306.0', '$phi306.1', '$phi306.2']
2025-05-02 21:04:43,165 - DEBUG - dispatch pc=308, inst=LOAD_FAST(arg=2, lineno=63)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=310, inst=LOAD_FAST(arg=12, lineno=63)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=312, inst=LOAD_FAST(arg=22, lineno=63)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=314, inst=LOAD_FAST(arg=7, lineno=63)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$k312.5']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=316, inst=BINARY_MULTIPLY(arg=None, lineno=63)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$k312.5', '$index_step314.6']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=318, inst=BINARY_ADD(arg=None, lineno=63)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$316binary_multiply.7']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=320, inst=BINARY_SUBSCR(arg=None, lineno=63)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$318binary_add.8']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=322, inst=LOAD_FAST(arg=13, lineno=64)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=324, inst=LOAD_FAST(arg=3, lineno=64)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=326, inst=LOAD_FAST(arg=12, lineno=64)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=328, inst=LOAD_FAST(arg=22, lineno=64)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=330, inst=LOAD_FAST(arg=7, lineno=64)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$k328.13']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=332, inst=BINARY_MULTIPLY(arg=None, lineno=64)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$k328.13', '$index_step330.14']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=334, inst=BINARY_ADD(arg=None, lineno=64)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$332binary_multiply.15']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=336, inst=BINARY_SUBSCR(arg=None, lineno=64)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$334binary_add.16']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=338, inst=BINARY_MULTIPLY(arg=None, lineno=64)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$336binary_subscr.17']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=340, inst=BINARY_ADD(arg=None, lineno=63)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$338binary_multiply.18']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=342, inst=STORE_FAST(arg=14, lineno=62)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$340binary_add.19']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=344, inst=LOAD_FAST(arg=6, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=346, inst=LOAD_FAST(arg=18, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=348, inst=DUP_TOP_TWO(arg=None, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=350, inst=BINARY_SUBSCR(arg=None, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$348dup_top_two.22', '$348dup_top_two.23']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=352, inst=LOAD_FAST(arg=14, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=354, inst=LOAD_FAST(arg=0, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=356, inst=LOAD_FAST(arg=9, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=358, inst=LOAD_FAST(arg=22, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$n356.27']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=360, inst=BINARY_ADD(arg=None, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$n356.27', '$k358.28']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=362, inst=LOAD_CONST(arg=3, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$360binary_add.29']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=364, inst=BINARY_ADD(arg=None, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$360binary_add.29', '$const362.30']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=366, inst=BINARY_SUBSCR(arg=None, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$364binary_add.31']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=368, inst=BINARY_MULTIPLY(arg=None, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$366binary_subscr.32']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=370, inst=INPLACE_ADD(arg=None, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$368binary_multiply.33']
2025-05-02 21:04:43,168 - DEBUG - dispatch pc=372, inst=ROT_THREE(arg=None, lineno=66)
2025-05-02 21:04:43,168 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$370inplace_add.34']
2025-05-02 21:04:43,168 - DEBUG - dispatch pc=374, inst=STORE_SUBSCR(arg=None, lineno=66)
2025-05-02 21:04:43,168 - DEBUG - stack ['$phi306.0', '$phi306.1', '$370inplace_add.34', '$y344.20', '$t346.21']
2025-05-02 21:04:43,168 - DEBUG - dispatch pc=376, inst=JUMP_ABSOLUTE(arg=304, lineno=66)
2025-05-02 21:04:43,168 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 21:04:43,168 - DEBUG - end state. edges=[Edge(pc=304, stack=('$phi306.0', '$phi306.1'), blockstack=(), npush=0)]
2025-05-02 21:04:43,168 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=304 nstack_initial=2)])
2025-05-02 21:04:43,168 - DEBUG - pending: deque([State(pc_initial=304 nstack_initial=2)])
2025-05-02 21:04:43,168 - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-02 21:04:43,168 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=84 nstack_initial=2): {'$phi84.1'},
             State(pc_initial=168 nstack_initial=2): {'$phi168.1'},
             State(pc_initial=170 nstack_initial=3): {'$phi170.2'},
             State(pc_initial=238 nstack_initial=1): set(),
             State(pc_initial=304 nstack_initial=2): {'$phi304.1'},
             State(pc_initial=306 nstack_initial=3): {'$phi306.2'},
             State(pc_initial=380 nstack_initial=1): set(),
             State(pc_initial=382 nstack_initial=0): set()})
2025-05-02 21:04:43,168 - DEBUG - defmap: {'$phi168.1': State(pc_initial=84 nstack_initial=2),
 '$phi170.2': State(pc_initial=168 nstack_initial=2),
 '$phi304.1': State(pc_initial=238 nstack_initial=1),
 '$phi306.2': State(pc_initial=304 nstack_initial=2),
 '$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi84.1': State(pc_initial=80 nstack_initial=1)}
2025-05-02 21:04:43,168 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi170.0',
                            State(pc_initial=170 nstack_initial=3)),
                           ('$phi84.0', State(pc_initial=84 nstack_initial=2))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2)),
                           ('$phi170.1',
                            State(pc_initial=170 nstack_initial=3))},
             '$phi170.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.1': {('$phi168.1',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi304.0': {('$phi238.0',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi306.0',
                            State(pc_initial=306 nstack_initial=3))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi306.1',
                            State(pc_initial=306 nstack_initial=3))},
             '$phi306.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.1': {('$phi304.1',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi380.0',
                           State(pc_initial=380 nstack_initial=1))},
             '$phi84.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:04:43,169 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2)),
                           ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2)),
                           ('$phi168.1',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi304.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2)),
                           ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi304.1',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:04:43,169 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:04:43,169 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:04:43,170 - DEBUG - keep phismap: {'$phi168.1': {('$166get_iter.35', State(pc_initial=84 nstack_initial=2))},
 '$phi170.2': {('$168for_iter.3', State(pc_initial=168 nstack_initial=2))},
 '$phi304.1': {('$302get_iter.28', State(pc_initial=238 nstack_initial=1))},
 '$phi306.2': {('$304for_iter.3', State(pc_initial=304 nstack_initial=2))},
 '$phi80.0': {('$78get_iter.27', State(pc_initial=0 nstack_initial=0))},
 '$phi84.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-05-02 21:04:43,170 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.27'},
             State(pc_initial=80 nstack_initial=1): {'$phi84.1': '$80for_iter.2'},
             State(pc_initial=84 nstack_initial=2): {'$phi168.1': '$166get_iter.35'},
             State(pc_initial=168 nstack_initial=2): {'$phi170.2': '$168for_iter.3'},
             State(pc_initial=238 nstack_initial=1): {'$phi304.1': '$302get_iter.28'},
             State(pc_initial=304 nstack_initial=2): {'$phi306.2': '$304for_iter.3'}})
2025-05-02 21:04:43,170 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-02 21:04:43,170 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$scale4.1'}), (6, {'res': '$num_table6.2'}), (8, {'lhs': '$scale4.1', 'rhs': '$num_table6.2', 'res': '$8binary_multiply.3'}), (10, {'func': '$2load_global.0', 'args': ['$8binary_multiply.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4'}), (14, {'res': '$const14.5'}), (16, {'value': '$const14.5'}), (18, {'res': '$const18.6'}), (20, {'value': '$const18.6'}), (22, {'res': '$const22.7'}), (24, {'value': '$const22.7'}), (26, {'res': '$const26.8'}), (28, {'value': '$const26.8'}), (30, {'res': '$const30.9'}), (32, {'value': '$const30.9'}), (34, {'res': '$const34.10'}), (36, {'value': '$const34.10'}), (38, {'res': '$const38.11'}), (40, {'value': '$const38.11'}), (42, {'res': '$interp_win42.12'}), (44, {'item': '$interp_win42.12', 'res': '$44load_attr.13'}), (46, {'res': '$const46.14'}), (48, {'index': '$const46.14', 'target': '$44load_attr.13', 'res': '$48binary_subscr.15'}), (50, {'value': '$48binary_subscr.15'}), (52, {'res': '$x52.16'}), (54, {'item': '$x52.16', 'res': '$54load_attr.17'}), (56, {'res': '$const56.18'}), (58, {'index': '$const56.18', 'target': '$54load_attr.17', 'res': '$58binary_subscr.19'}), (60, {'value': '$58binary_subscr.19'}), (62, {'res': '$t_out62.20'}), (64, {'item': '$t_out62.20', 'res': '$64load_attr.21'}), (66, {'res': '$const66.22'}), (68, {'index': '$const66.22', 'target': '$64load_attr.21', 'res': '$68binary_subscr.23'}), (70, {'value': '$68binary_subscr.23'}), (72, {'res': '$72load_global.24'}), (74, {'res': '$n_out74.25'}), (76, {'func': '$72load_global.24', 'args': ['$n_out74.25'], 'res': '$76call_function.26'}), (78, {'value': '$76call_function.26', 'res': '$78get_iter.27'})), outgoing_phis={'$phi80.0': '$78get_iter.27'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.27',)})
2025-05-02 21:04:43,170 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi84.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={382: (), 84: ('$phi80.0', '$80for_iter.2')})
2025-05-02 21:04:43,170 - DEBUG - block_infos State(pc_initial=84 nstack_initial=2):
AdaptBlockInfo(insts=((84, {'value': '$phi84.1'}), (86, {'res': '$t_out86.2'}), (88, {'res': '$t88.3'}), (90, {'index': '$t88.3', 'target': '$t_out86.2', 'res': '$90binary_subscr.4'}), (92, {'value': '$90binary_subscr.4'}), (94, {'res': '$94load_global.5'}), (96, {'res': '$time_register96.6'}), (98, {'func': '$94load_global.5', 'args': ['$time_register96.6'], 'res': '$98call_function.7'}), (100, {'value': '$98call_function.7'}), (102, {'res': '$scale102.8'}), (104, {'res': '$time_register104.9'}), (106, {'res': '$n106.10'}), (108, {'lhs': '$time_register104.9', 'rhs': '$n106.10', 'res': '$108binary_subtract.11'}), (110, {'lhs': '$scale102.8', 'rhs': '$108binary_subtract.11', 'res': '$110binary_multiply.12'}), (112, {'value': '$110binary_multiply.12'}), (114, {'res': '$frac114.13'}), (116, {'res': '$num_table116.14'}), (118, {'lhs': '$frac114.13', 'rhs': '$num_table116.14', 'res': '$118binary_multiply.15'}), (120, {'value': '$118binary_multiply.15'}), (122, {'res': '$122load_global.16'}), (124, {'res': '$index_frac124.17'}), (126, {'func': '$122load_global.16', 'args': ['$index_frac124.17'], 'res': '$126call_function.18'}), (128, {'value': '$126call_function.18'}), (130, {'res': '$index_frac130.19'}), (132, {'res': '$offset132.20'}), (134, {'lhs': '$index_frac130.19', 'rhs': '$offset132.20', 'res': '$134binary_subtract.21'}), (136, {'value': '$134binary_subtract.21'}), (138, {'res': '$138load_global.22'}), (140, {'res': '$n140.23'}), (142, {'res': '$const142.24'}), (144, {'lhs': '$n140.23', 'rhs': '$const142.24', 'res': '$144binary_add.25'}), (146, {'res': '$nwin146.26'}), (148, {'res': '$offset148.27'}), (150, {'lhs': '$nwin146.26', 'rhs': '$offset148.27', 'res': '$150binary_subtract.28'}), (152, {'res': '$index_step152.29'}), (154, {'lhs': '$150binary_subtract.28', 'rhs': '$index_step152.29', 'res': '$154binary_floor_divide.30'}), (156, {'func': '$138load_global.22', 'args': ['$144binary_add.25', '$154binary_floor_divide.30'], 'res': '$156call_function.31'}), (158, {'value': '$156call_function.31'}), (160, {'res': '$160load_global.32'}), (162, {'res': '$i_max162.33'}), (164, {'func': '$160load_global.32', 'args': ['$i_max162.33'], 'res': '$164call_function.34'}), (166, {'value': '$164call_function.34', 'res': '$166get_iter.35'})), outgoing_phis={'$phi168.1': '$166get_iter.35'}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi84.0', '$166get_iter.35')})
2025-05-02 21:04:43,170 - DEBUG - block_infos State(pc_initial=168 nstack_initial=2):
AdaptBlockInfo(insts=((168, {'iterator': '$phi168.1', 'pair': '$168for_iter.2', 'indval': '$168for_iter.3', 'pred': '$168for_iter.4'}),), outgoing_phis={'$phi170.2': '$168for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={238: ('$phi168.0',), 170: ('$phi168.0', '$phi168.1', '$168for_iter.3')})
2025-05-02 21:04:43,171 - DEBUG - block_infos State(pc_initial=170 nstack_initial=3):
AdaptBlockInfo(insts=((170, {'value': '$phi170.2'}), (172, {'res': '$interp_win172.3'}), (174, {'res': '$offset174.4'}), (176, {'res': '$i176.5'}), (178, {'res': '$index_step178.6'}), (180, {'lhs': '$i176.5', 'rhs': '$index_step178.6', 'res': '$180binary_multiply.7'}), (182, {'lhs': '$offset174.4', 'rhs': '$180binary_multiply.7', 'res': '$182binary_add.8'}), (184, {'index': '$182binary_add.8', 'target': '$interp_win172.3', 'res': '$184binary_subscr.9'}), (186, {'res': '$eta186.10'}), (188, {'res': '$interp_delta188.11'}), (190, {'res': '$offset190.12'}), (192, {'res': '$i192.13'}), (194, {'res': '$index_step194.14'}), (196, {'lhs': '$i192.13', 'rhs': '$index_step194.14', 'res': '$196binary_multiply.15'}), (198, {'lhs': '$offset190.12', 'rhs': '$196binary_multiply.15', 'res': '$198binary_add.16'}), (200, {'index': '$198binary_add.16', 'target': '$interp_delta188.11', 'res': '$200binary_subscr.17'}), (202, {'lhs': '$eta186.10', 'rhs': '$200binary_subscr.17', 'res': '$202binary_multiply.18'}), (204, {'lhs': '$184binary_subscr.9', 'rhs': '$202binary_multiply.18', 'res': '$204binary_add.19'}), (206, {'value': '$204binary_add.19'}), (208, {'res': '$y208.20'}), (210, {'res': '$t210.21'}), (212, {'orig': ['$y208.20', '$t210.21'], 'duped': ['$212dup_top_two.22', '$212dup_top_two.23']}), (214, {'index': '$212dup_top_two.23', 'target': '$212dup_top_two.22', 'res': '$214binary_subscr.24'}), (216, {'res': '$weight216.25'}), (218, {'res': '$x218.26'}), (220, {'res': '$n220.27'}), (222, {'res': '$i222.28'}), (224, {'lhs': '$n220.27', 'rhs': '$i222.28', 'res': '$224binary_subtract.29'}), (226, {'index': '$224binary_subtract.29', 'target': '$x218.26', 'res': '$226binary_subscr.30'}), (228, {'lhs': '$weight216.25', 'rhs': '$226binary_subscr.30', 'res': '$228binary_multiply.31'}), (230, {'lhs': '$214binary_subscr.24', 'rhs': '$228binary_multiply.31', 'res': '$230inplace_add.32'}), (234, {'target': '$y208.20', 'index': '$t210.21', 'value': '$230inplace_add.32'}), (236, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi170.0', '$phi170.1')})
2025-05-02 21:04:43,171 - DEBUG - block_infos State(pc_initial=238 nstack_initial=1):
AdaptBlockInfo(insts=((238, {'res': '$scale238.1'}), (240, {'res': '$frac240.2'}), (242, {'lhs': '$scale238.1', 'rhs': '$frac240.2', 'res': '$242binary_subtract.3'}), (244, {'value': '$242binary_subtract.3'}), (246, {'res': '$frac246.4'}), (248, {'res': '$num_table248.5'}), (250, {'lhs': '$frac246.4', 'rhs': '$num_table248.5', 'res': '$250binary_multiply.6'}), (252, {'value': '$250binary_multiply.6'}), (254, {'res': '$254load_global.7'}), (256, {'res': '$index_frac256.8'}), (258, {'func': '$254load_global.7', 'args': ['$index_frac256.8'], 'res': '$258call_function.9'}), (260, {'value': '$258call_function.9'}), (262, {'res': '$index_frac262.10'}), (264, {'res': '$offset264.11'}), (266, {'lhs': '$index_frac262.10', 'rhs': '$offset264.11', 'res': '$266binary_subtract.12'}), (268, {'value': '$266binary_subtract.12'}), (270, {'res': '$270load_global.13'}), (272, {'res': '$n_orig272.14'}), (274, {'res': '$n274.15'}), (276, {'lhs': '$n_orig272.14', 'rhs': '$n274.15', 'res': '$276binary_subtract.16'}), (278, {'res': '$const278.17'}), (280, {'lhs': '$276binary_subtract.16', 'rhs': '$const278.17', 'res': '$280binary_subtract.18'}), (282, {'res': '$nwin282.19'}), (284, {'res': '$offset284.20'}), (286, {'lhs': '$nwin282.19', 'rhs': '$offset284.20', 'res': '$286binary_subtract.21'}), (288, {'res': '$index_step288.22'}), (290, {'lhs': '$286binary_subtract.21', 'rhs': '$index_step288.22', 'res': '$290binary_floor_divide.23'}), (292, {'func': '$270load_global.13', 'args': ['$280binary_subtract.18', '$290binary_floor_divide.23'], 'res': '$292call_function.24'}), (294, {'value': '$292call_function.24'}), (296, {'res': '$296load_global.25'}), (298, {'res': '$k_max298.26'}), (300, {'func': '$296load_global.25', 'args': ['$k_max298.26'], 'res': '$300call_function.27'}), (302, {'value': '$300call_function.27', 'res': '$302get_iter.28'})), outgoing_phis={'$phi304.1': '$302get_iter.28'}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: ('$phi238.0', '$302get_iter.28')})
2025-05-02 21:04:43,171 - DEBUG - block_infos State(pc_initial=304 nstack_initial=2):
AdaptBlockInfo(insts=((304, {'iterator': '$phi304.1', 'pair': '$304for_iter.2', 'indval': '$304for_iter.3', 'pred': '$304for_iter.4'}),), outgoing_phis={'$phi306.2': '$304for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={380: ('$phi304.0',), 306: ('$phi304.0', '$phi304.1', '$304for_iter.3')})
2025-05-02 21:04:43,171 - DEBUG - block_infos State(pc_initial=306 nstack_initial=3):
AdaptBlockInfo(insts=((306, {'value': '$phi306.2'}), (308, {'res': '$interp_win308.3'}), (310, {'res': '$offset310.4'}), (312, {'res': '$k312.5'}), (314, {'res': '$index_step314.6'}), (316, {'lhs': '$k312.5', 'rhs': '$index_step314.6', 'res': '$316binary_multiply.7'}), (318, {'lhs': '$offset310.4', 'rhs': '$316binary_multiply.7', 'res': '$318binary_add.8'}), (320, {'index': '$318binary_add.8', 'target': '$interp_win308.3', 'res': '$320binary_subscr.9'}), (322, {'res': '$eta322.10'}), (324, {'res': '$interp_delta324.11'}), (326, {'res': '$offset326.12'}), (328, {'res': '$k328.13'}), (330, {'res': '$index_step330.14'}), (332, {'lhs': '$k328.13', 'rhs': '$index_step330.14', 'res': '$332binary_multiply.15'}), (334, {'lhs': '$offset326.12', 'rhs': '$332binary_multiply.15', 'res': '$334binary_add.16'}), (336, {'index': '$334binary_add.16', 'target': '$interp_delta324.11', 'res': '$336binary_subscr.17'}), (338, {'lhs': '$eta322.10', 'rhs': '$336binary_subscr.17', 'res': '$338binary_multiply.18'}), (340, {'lhs': '$320binary_subscr.9', 'rhs': '$338binary_multiply.18', 'res': '$340binary_add.19'}), (342, {'value': '$340binary_add.19'}), (344, {'res': '$y344.20'}), (346, {'res': '$t346.21'}), (348, {'orig': ['$y344.20', '$t346.21'], 'duped': ['$348dup_top_two.22', '$348dup_top_two.23']}), (350, {'index': '$348dup_top_two.23', 'target': '$348dup_top_two.22', 'res': '$350binary_subscr.24'}), (352, {'res': '$weight352.25'}), (354, {'res': '$x354.26'}), (356, {'res': '$n356.27'}), (358, {'res': '$k358.28'}), (360, {'lhs': '$n356.27', 'rhs': '$k358.28', 'res': '$360binary_add.29'}), (362, {'res': '$const362.30'}), (364, {'lhs': '$360binary_add.29', 'rhs': '$const362.30', 'res': '$364binary_add.31'}), (366, {'index': '$364binary_add.31', 'target': '$x354.26', 'res': '$366binary_subscr.32'}), (368, {'lhs': '$weight352.25', 'rhs': '$366binary_subscr.32', 'res': '$368binary_multiply.33'}), (370, {'lhs': '$350binary_subscr.24', 'rhs': '$368binary_multiply.33', 'res': '$370inplace_add.34'}), (374, {'target': '$y344.20', 'index': '$t346.21', 'value': '$370inplace_add.34'}), (376, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: ('$phi306.0', '$phi306.1')})
2025-05-02 21:04:43,171 - DEBUG - block_infos State(pc_initial=380 nstack_initial=1):
AdaptBlockInfo(insts=((380, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi380.0',)})
2025-05-02 21:04:43,171 - DEBUG - block_infos State(pc_initial=382 nstack_initial=0):
AdaptBlockInfo(insts=((382, {'res': '$const382.0'}), (384, {'retval': '$const382.0', 'castval': '$384return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-02 21:04:43,173 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    t_out = arg(1, name=t_out)               ['t_out']
    interp_win = arg(2, name=interp_win)     ['interp_win']
    interp_delta = arg(3, name=interp_delta) ['interp_delta']
    num_table = arg(4, name=num_table)       ['num_table']
    scale = arg(5, name=scale)               ['scale']
    y = arg(6, name=y)                       ['y']
    $2load_global.0 = global(int: <class 'int'>) ['$2load_global.0']
    $8binary_multiply.3 = scale * num_table  ['$8binary_multiply.3', 'num_table', 'scale']
    index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8binary_multiply.3', 'index_step']
    time_register = const(float, 0.0)        ['time_register']
    n = const(int, 0)                        ['n']
    frac = const(float, 0.0)                 ['frac']
    index_frac = const(float, 0.0)           ['index_frac']
    offset = const(int, 0)                   ['offset']
    eta = const(float, 0.0)                  ['eta']
    weight = const(float, 0.0)               ['weight']
    $44load_attr.13 = getattr(value=interp_win, attr=shape) ['$44load_attr.13', 'interp_win']
    $const46.14 = const(int, 0)              ['$const46.14']
    nwin = getitem(value=$44load_attr.13, index=$const46.14, fn=<built-in function getitem>) ['$44load_attr.13', '$const46.14', 'nwin']
    $54load_attr.17 = getattr(value=x, attr=shape) ['$54load_attr.17', 'x']
    $const56.18 = const(int, 0)              ['$const56.18']
    n_orig = getitem(value=$54load_attr.17, index=$const56.18, fn=<built-in function getitem>) ['$54load_attr.17', '$const56.18', 'n_orig']
    $64load_attr.21 = getattr(value=t_out, attr=shape) ['$64load_attr.21', 't_out']
    $const66.22 = const(int, 0)              ['$const66.22']
    n_out = getitem(value=$64load_attr.21, index=$const66.22, fn=<built-in function getitem>) ['$64load_attr.21', '$const66.22', 'n_out']
    $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>) ['$72load_global.24']
    $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.24', '$76call_function.26', 'n_out']
    $78get_iter.27 = getiter(value=$76call_function.26) ['$76call_function.26', '$78get_iter.27']
    $phi80.0 = $78get_iter.27                ['$78get_iter.27', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi84.1 = $80for_iter.2                 ['$80for_iter.2', '$phi84.1']
    branch $80for_iter.3, 84, 382            ['$80for_iter.3']
label 84:
    t = $phi84.1                             ['$phi84.1', 't']
    time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>) ['t', 't_out', 'time_register']
    $94load_global.5 = global(int: <class 'int'>) ['$94load_global.5']
    n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None) ['$94load_global.5', 'n', 'time_register']
    $108binary_subtract.11 = time_register - n ['$108binary_subtract.11', 'n', 'time_register']
    frac = scale * $108binary_subtract.11    ['$108binary_subtract.11', 'frac', 'scale']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $122load_global.16 = global(int: <class 'int'>) ['$122load_global.16']
    offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.16', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $138load_global.22 = global(min: <built-in function min>) ['$138load_global.22']
    $const142.24 = const(int, 1)             ['$const142.24']
    $144binary_add.25 = n + $const142.24     ['$144binary_add.25', '$const142.24', 'n']
    $150binary_subtract.28 = nwin - offset   ['$150binary_subtract.28', 'nwin', 'offset']
    $154binary_floor_divide.30 = $150binary_subtract.28 // index_step ['$150binary_subtract.28', '$154binary_floor_divide.30', 'index_step']
    i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None) ['$138load_global.22', '$144binary_add.25', '$154binary_floor_divide.30', 'i_max']
    $160load_global.32 = global(range: <class 'range'>) ['$160load_global.32']
    $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None) ['$160load_global.32', '$164call_function.34', 'i_max']
    $166get_iter.35 = getiter(value=$164call_function.34) ['$164call_function.34', '$166get_iter.35']
    $phi168.1 = $166get_iter.35              ['$166get_iter.35', '$phi168.1']
    jump 168                                 []
label 168:
    $168for_iter.2 = iternext(value=$phi168.1) ['$168for_iter.2', '$phi168.1']
    $168for_iter.3 = pair_first(value=$168for_iter.2) ['$168for_iter.2', '$168for_iter.3']
    $168for_iter.4 = pair_second(value=$168for_iter.2) ['$168for_iter.2', '$168for_iter.4']
    $phi170.2 = $168for_iter.3               ['$168for_iter.3', '$phi170.2']
    branch $168for_iter.4, 170, 238          ['$168for_iter.4']
label 170:
    i = $phi170.2                            ['$phi170.2', 'i']
    $180binary_multiply.7 = i * index_step   ['$180binary_multiply.7', 'i', 'index_step']
    $182binary_add.8 = offset + $180binary_multiply.7 ['$180binary_multiply.7', '$182binary_add.8', 'offset']
    $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>) ['$182binary_add.8', '$184binary_subscr.9', 'interp_win']
    $196binary_multiply.15 = i * index_step  ['$196binary_multiply.15', 'i', 'index_step']
    $198binary_add.16 = offset + $196binary_multiply.15 ['$196binary_multiply.15', '$198binary_add.16', 'offset']
    $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>) ['$198binary_add.16', '$200binary_subscr.17', 'interp_delta']
    $202binary_multiply.18 = eta * $200binary_subscr.17 ['$200binary_subscr.17', '$202binary_multiply.18', 'eta']
    weight = $184binary_subscr.9 + $202binary_multiply.18 ['$184binary_subscr.9', '$202binary_multiply.18', 'weight']
    $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>) ['$214binary_subscr.24', 't', 'y']
    $224binary_subtract.29 = n - i           ['$224binary_subtract.29', 'i', 'n']
    $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>) ['$224binary_subtract.29', '$226binary_subscr.30', 'x']
    $228binary_multiply.31 = weight * $226binary_subscr.30 ['$226binary_subscr.30', '$228binary_multiply.31', 'weight']
    $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined) ['$214binary_subscr.24', '$228binary_multiply.31', '$230inplace_add.32']
    y[t] = $230inplace_add.32                ['$230inplace_add.32', 't', 'y']
    jump 168                                 []
label 238:
    $242binary_subtract.3 = scale - frac     ['$242binary_subtract.3', 'frac', 'scale']
    frac = $242binary_subtract.3             ['$242binary_subtract.3', 'frac']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $254load_global.7 = global(int: <class 'int'>) ['$254load_global.7']
    offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None) ['$254load_global.7', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $270load_global.13 = global(min: <built-in function min>) ['$270load_global.13']
    $276binary_subtract.16 = n_orig - n      ['$276binary_subtract.16', 'n', 'n_orig']
    $const278.17 = const(int, 1)             ['$const278.17']
    $280binary_subtract.18 = $276binary_subtract.16 - $const278.17 ['$276binary_subtract.16', '$280binary_subtract.18', '$const278.17']
    $286binary_subtract.21 = nwin - offset   ['$286binary_subtract.21', 'nwin', 'offset']
    $290binary_floor_divide.23 = $286binary_subtract.21 // index_step ['$286binary_subtract.21', '$290binary_floor_divide.23', 'index_step']
    k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None) ['$270load_global.13', '$280binary_subtract.18', '$290binary_floor_divide.23', 'k_max']
    $296load_global.25 = global(range: <class 'range'>) ['$296load_global.25']
    $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None) ['$296load_global.25', '$300call_function.27', 'k_max']
    $302get_iter.28 = getiter(value=$300call_function.27) ['$300call_function.27', '$302get_iter.28']
    $phi304.1 = $302get_iter.28              ['$302get_iter.28', '$phi304.1']
    jump 304                                 []
label 304:
    $304for_iter.2 = iternext(value=$phi304.1) ['$304for_iter.2', '$phi304.1']
    $304for_iter.3 = pair_first(value=$304for_iter.2) ['$304for_iter.2', '$304for_iter.3']
    $304for_iter.4 = pair_second(value=$304for_iter.2) ['$304for_iter.2', '$304for_iter.4']
    $phi306.2 = $304for_iter.3               ['$304for_iter.3', '$phi306.2']
    branch $304for_iter.4, 306, 380          ['$304for_iter.4']
label 306:
    k = $phi306.2                            ['$phi306.2', 'k']
    $316binary_multiply.7 = k * index_step   ['$316binary_multiply.7', 'index_step', 'k']
    $318binary_add.8 = offset + $316binary_multiply.7 ['$316binary_multiply.7', '$318binary_add.8', 'offset']
    $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>) ['$318binary_add.8', '$320binary_subscr.9', 'interp_win']
    $332binary_multiply.15 = k * index_step  ['$332binary_multiply.15', 'index_step', 'k']
    $334binary_add.16 = offset + $332binary_multiply.15 ['$332binary_multiply.15', '$334binary_add.16', 'offset']
    $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>) ['$334binary_add.16', '$336binary_subscr.17', 'interp_delta']
    $338binary_multiply.18 = eta * $336binary_subscr.17 ['$336binary_subscr.17', '$338binary_multiply.18', 'eta']
    weight = $320binary_subscr.9 + $338binary_multiply.18 ['$320binary_subscr.9', '$338binary_multiply.18', 'weight']
    $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>) ['$350binary_subscr.24', 't', 'y']
    $360binary_add.29 = n + k                ['$360binary_add.29', 'k', 'n']
    $const362.30 = const(int, 1)             ['$const362.30']
    $364binary_add.31 = $360binary_add.29 + $const362.30 ['$360binary_add.29', '$364binary_add.31', '$const362.30']
    $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>) ['$364binary_add.31', '$366binary_subscr.32', 'x']
    $368binary_multiply.33 = weight * $366binary_subscr.32 ['$366binary_subscr.32', '$368binary_multiply.33', 'weight']
    $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined) ['$350binary_subscr.24', '$368binary_multiply.33', '$370inplace_add.34']
    y[t] = $370inplace_add.34                ['$370inplace_add.34', 't', 'y']
    jump 304                                 []
label 380:
    jump 80                                  []
label 382:
    $const382.0 = const(NoneType, None)      ['$const382.0']
    $384return_value.1 = cast(value=$const382.0) ['$384return_value.1', '$const382.0']
    return $384return_value.1                ['$384return_value.1']

2025-05-02 21:04:43,190 - DEBUG - ==== SSA block analysis pass on 0
2025-05-02 21:04:43,190 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA008A14F0>
2025-05-02 21:04:43,190 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,191 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,191 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,191 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,191 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,191 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,191 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,191 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,191 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,191 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,191 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,191 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,191 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,191 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,191 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,191 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,191 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,191 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,191 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,192 - DEBUG - ==== SSA block analysis pass on 80
2025-05-02 21:04:43,192 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA008A14F0>
2025-05-02 21:04:43,192 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,192 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,192 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,192 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,192 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,192 - DEBUG - ==== SSA block analysis pass on 84
2025-05-02 21:04:43,192 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA008A14F0>
2025-05-02 21:04:43,192 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,192 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,192 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,192 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,192 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:04:43,192 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:04:43,192 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,192 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,192 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,192 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:04:43,192 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,192 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,192 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:04:43,192 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:04:43,192 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,192 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,192 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,193 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,193 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,193 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,193 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,193 - DEBUG - ==== SSA block analysis pass on 168
2025-05-02 21:04:43,193 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA008A14F0>
2025-05-02 21:04:43,193 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,193 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,193 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,193 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,193 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,193 - DEBUG - ==== SSA block analysis pass on 170
2025-05-02 21:04:43,193 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA008A14F0>
2025-05-02 21:04:43,193 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,193 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,193 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:04:43,193 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,193 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,193 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:04:43,193 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,193 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:04:43,193 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,193 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,193 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:04:43,193 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,193 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,193 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,193 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,194 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,194 - DEBUG - ==== SSA block analysis pass on 238
2025-05-02 21:04:43,194 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA008A14F0>
2025-05-02 21:04:43,194 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,194 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:04:43,194 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,194 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,194 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,194 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:04:43,194 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,194 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:04:43,194 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,194 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,194 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:04:43,194 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,194 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,194 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,194 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,194 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,194 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,194 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,194 - DEBUG - ==== SSA block analysis pass on 304
2025-05-02 21:04:43,194 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA008A14F0>
2025-05-02 21:04:43,194 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,194 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,194 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,194 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,195 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,195 - DEBUG - ==== SSA block analysis pass on 306
2025-05-02 21:04:43,195 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA008A14F0>
2025-05-02 21:04:43,195 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,195 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,195 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:04:43,195 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,195 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,195 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:04:43,195 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,195 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:04:43,195 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,195 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,195 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:04:43,195 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,195 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,195 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,195 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,195 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,195 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,195 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,195 - DEBUG - ==== SSA block analysis pass on 380
2025-05-02 21:04:43,195 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA008A14F0>
2025-05-02 21:04:43,195 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,195 - DEBUG - ==== SSA block analysis pass on 382
2025-05-02 21:04:43,195 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA008A14F0>
2025-05-02 21:04:43,195 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,195 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,195 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,196 - DEBUG - defs defaultdict(<class 'list'>,
            {'$108binary_subtract.11': [<numba.core.ir.Assign object at 0x000001EA0088D4F0>],
             '$122load_global.16': [<numba.core.ir.Assign object at 0x000001EA0088DD00>],
             '$138load_global.22': [<numba.core.ir.Assign object at 0x000001EA008906A0>],
             '$144binary_add.25': [<numba.core.ir.Assign object at 0x000001EA00890AF0>],
             '$150binary_subtract.28': [<numba.core.ir.Assign object at 0x000001EA00890EB0>],
             '$154binary_floor_divide.30': [<numba.core.ir.Assign object at 0x000001EA00893190>],
             '$160load_global.32': [<numba.core.ir.Assign object at 0x000001EA00893580>],
             '$164call_function.34': [<numba.core.ir.Assign object at 0x000001EA00893880>],
             '$166get_iter.35': [<numba.core.ir.Assign object at 0x000001EA008939A0>],
             '$168for_iter.2': [<numba.core.ir.Assign object at 0x000001EA0088D2B0>],
             '$168for_iter.3': [<numba.core.ir.Assign object at 0x000001EA0088D6D0>],
             '$168for_iter.4': [<numba.core.ir.Assign object at 0x000001EA0088DC10>],
             '$180binary_multiply.7': [<numba.core.ir.Assign object at 0x000001EA00893D90>],
             '$182binary_add.8': [<numba.core.ir.Assign object at 0x000001EA00893F10>],
             '$184binary_subscr.9': [<numba.core.ir.Assign object at 0x000001EA008960D0>],
             '$196binary_multiply.15': [<numba.core.ir.Assign object at 0x000001EA008967F0>],
             '$198binary_add.16': [<numba.core.ir.Assign object at 0x000001EA00896970>],
             '$200binary_subscr.17': [<numba.core.ir.Assign object at 0x000001EA00896AF0>],
             '$202binary_multiply.18': [<numba.core.ir.Assign object at 0x000001EA00896C70>],
             '$214binary_subscr.24': [<numba.core.ir.Assign object at 0x000001EA00898490>],
             '$224binary_subtract.29': [<numba.core.ir.Assign object at 0x000001EA00898A90>],
             '$226binary_subscr.30': [<numba.core.ir.Assign object at 0x000001EA00898C10>],
             '$228binary_multiply.31': [<numba.core.ir.Assign object at 0x000001EA00898D90>],
             '$230inplace_add.32': [<numba.core.ir.Assign object at 0x000001EA00898F10>],
             '$242binary_subtract.3': [<numba.core.ir.Assign object at 0x000001EA00898070>],
             '$254load_global.7': [<numba.core.ir.Assign object at 0x000001EA0089A4C0>],
             '$270load_global.13': [<numba.core.ir.Assign object at 0x000001EA0089AE20>],
             '$276binary_subtract.16': [<numba.core.ir.Assign object at 0x000001EA0089B250>],
             '$280binary_subtract.18': [<numba.core.ir.Assign object at 0x000001EA0089B550>],
             '$286binary_subtract.21': [<numba.core.ir.Assign object at 0x000001EA0089B910>],
             '$290binary_floor_divide.23': [<numba.core.ir.Assign object at 0x000001EA0089BBB0>],
             '$296load_global.25': [<numba.core.ir.Assign object at 0x000001EA0089BFA0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001EA008810A0>],
             '$300call_function.27': [<numba.core.ir.Assign object at 0x000001EA0089D2E0>],
             '$302get_iter.28': [<numba.core.ir.Assign object at 0x000001EA0089D400>],
             '$304for_iter.2': [<numba.core.ir.Assign object at 0x000001EA0089A700>],
             '$304for_iter.3': [<numba.core.ir.Assign object at 0x000001EA0089AD30>],
             '$304for_iter.4': [<numba.core.ir.Assign object at 0x000001EA0089B130>],
             '$316binary_multiply.7': [<numba.core.ir.Assign object at 0x000001EA0089DB50>],
             '$318binary_add.8': [<numba.core.ir.Assign object at 0x000001EA0089DCD0>],
             '$320binary_subscr.9': [<numba.core.ir.Assign object at 0x000001EA0089DE50>],
             '$332binary_multiply.15': [<numba.core.ir.Assign object at 0x000001EA0089F5B0>],
             '$334binary_add.16': [<numba.core.ir.Assign object at 0x000001EA0089F730>],
             '$336binary_subscr.17': [<numba.core.ir.Assign object at 0x000001EA0089F8B0>],
             '$338binary_multiply.18': [<numba.core.ir.Assign object at 0x000001EA0089FA30>],
             '$350binary_subscr.24': [<numba.core.ir.Assign object at 0x000001EA008A1250>],
             '$360binary_add.29': [<numba.core.ir.Assign object at 0x000001EA008A1850>],
             '$364binary_add.31': [<numba.core.ir.Assign object at 0x000001EA008A1B50>],
             '$366binary_subscr.32': [<numba.core.ir.Assign object at 0x000001EA008A1CD0>],
             '$368binary_multiply.33': [<numba.core.ir.Assign object at 0x000001EA008A1E50>],
             '$370inplace_add.34': [<numba.core.ir.Assign object at 0x000001EA008A1FD0>],
             '$384return_value.1': [<numba.core.ir.Assign object at 0x000001EA008A1040>],
             '$44load_attr.13': [<numba.core.ir.Assign object at 0x000001EA00886C40>],
             '$54load_attr.17': [<numba.core.ir.Assign object at 0x000001EA00888340>],
             '$64load_attr.21': [<numba.core.ir.Assign object at 0x000001EA00888A00>],
             '$72load_global.24': [<numba.core.ir.Assign object at 0x000001EA00888FA0>],
             '$76call_function.26': [<numba.core.ir.Assign object at 0x000001EA0088A2E0>],
             '$78get_iter.27': [<numba.core.ir.Assign object at 0x000001EA0088A400>],
             '$80for_iter.1': [<numba.core.ir.Assign object at 0x000001EA00886A30>],
             '$80for_iter.2': [<numba.core.ir.Assign object at 0x000001EA00888250>],
             '$80for_iter.3': [<numba.core.ir.Assign object at 0x000001EA00888EB0>],
             '$8binary_multiply.3': [<numba.core.ir.Assign object at 0x000001EA00881490>],
             '$94load_global.5': [<numba.core.ir.Assign object at 0x000001EA0088AC40>],
             '$const142.24': [<numba.core.ir.Assign object at 0x000001EA00890940>],
             '$const278.17': [<numba.core.ir.Assign object at 0x000001EA0089B3A0>],
             '$const362.30': [<numba.core.ir.Assign object at 0x000001EA008A19A0>],
             '$const382.0': [<numba.core.ir.Assign object at 0x000001EA0089FC70>],
             '$const46.14': [<numba.core.ir.Assign object at 0x000001EA00886DC0>],
             '$const56.18': [<numba.core.ir.Assign object at 0x000001EA008884C0>],
             '$const66.22': [<numba.core.ir.Assign object at 0x000001EA00888B80>],
             '$phi168.1': [<numba.core.ir.Assign object at 0x000001EA0088A7F0>],
             '$phi170.2': [<numba.core.ir.Assign object at 0x000001EA0088D070>],
             '$phi304.1': [<numba.core.ir.Assign object at 0x000001EA00896370>],
             '$phi306.2': [<numba.core.ir.Assign object at 0x000001EA0089A670>],
             '$phi80.0': [<numba.core.ir.Assign object at 0x000001EA00881250>],
             '$phi84.1': [<numba.core.ir.Assign object at 0x000001EA008864F0>],
             'eta': [<numba.core.ir.Assign object at 0x000001EA008865E0>,
                     <numba.core.ir.Assign object at 0x000001EA00890490>,
                     <numba.core.ir.Assign object at 0x000001EA0089AC10>],
             'frac': [<numba.core.ir.Assign object at 0x000001EA00881DC0>,
                      <numba.core.ir.Assign object at 0x000001EA0088D670>,
                      <numba.core.ir.Assign object at 0x000001EA00898310>],
             'i': [<numba.core.ir.Assign object at 0x000001EA008903D0>],
             'i_max': [<numba.core.ir.Assign object at 0x000001EA00893340>],
             'index_frac': [<numba.core.ir.Assign object at 0x000001EA008860A0>,
                            <numba.core.ir.Assign object at 0x000001EA0088DAF0>,
                            <numba.core.ir.Assign object at 0x000001EA0089A2B0>],
             'index_step': [<numba.core.ir.Assign object at 0x000001EA00881640>],
             'interp_delta': [<numba.core.ir.Assign object at 0x000001EA008641C0>],
             'interp_win': [<numba.core.ir.Assign object at 0x000001EA00864280>],
             'k': [<numba.core.ir.Assign object at 0x000001EA0089D520>],
             'k_max': [<numba.core.ir.Assign object at 0x000001EA0089BD60>],
             'n': [<numba.core.ir.Assign object at 0x000001EA00881B20>,
                   <numba.core.ir.Assign object at 0x000001EA0088AF40>],
             'n_orig': [<numba.core.ir.Assign object at 0x000001EA008AEC10>],
             'n_out': [<numba.core.ir.Assign object at 0x000001EA008AECD0>],
             'num_table': [<numba.core.ir.Assign object at 0x000001EA008644C0>],
             'nwin': [<numba.core.ir.Assign object at 0x000001EA008AE070>],
             'offset': [<numba.core.ir.Assign object at 0x000001EA00886340>,
                        <numba.core.ir.Assign object at 0x000001EA00890040>,
                        <numba.core.ir.Assign object at 0x000001EA0089A7C0>],
             'scale': [<numba.core.ir.Assign object at 0x000001EA00864DC0>],
             't': [<numba.core.ir.Assign object at 0x000001EA0088A640>],
             't_out': [<numba.core.ir.Assign object at 0x000001EA00864700>],
             'time_register': [<numba.core.ir.Assign object at 0x000001EA00881880>,
                               <numba.core.ir.Assign object at 0x000001EA0088AA30>],
             'weight': [<numba.core.ir.Assign object at 0x000001EA00886880>,
                        <numba.core.ir.Assign object at 0x000001EA00896DF0>,
                        <numba.core.ir.Assign object at 0x000001EA0089FBB0>],
             'x': [<numba.core.ir.Assign object at 0x000001EA00864640>],
             'y': [<numba.core.ir.Assign object at 0x000001EA00864EE0>]})
2025-05-02 21:04:43,196 - DEBUG - SSA violators {'offset', 'n', 'index_frac', 'eta', 'frac', 'time_register', 'weight'}
2025-05-02 21:04:43,196 - DEBUG - Fix SSA violator on var offset
2025-05-02 21:04:43,196 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,196 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,197 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,197 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,197 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,197 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,197 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,197 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,197 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,197 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,197 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,197 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,197 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,197 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,197 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,197 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,197 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,197 - DEBUG - first assign: offset
2025-05-02 21:04:43,197 - DEBUG - replaced with: offset = const(int, 0)
2025-05-02 21:04:43,197 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,197 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,197 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,197 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,197 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,197 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,197 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,197 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,197 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,197 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,198 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,198 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,198 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,198 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,198 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,198 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,198 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,198 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,198 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,198 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,198 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,198 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,198 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,198 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,198 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,198 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,198 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,198 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,198 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,198 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:04:43,198 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:04:43,198 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,198 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,198 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,198 - DEBUG - replaced with: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,198 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:04:43,199 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:04:43,199 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:04:43,199 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,199 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,199 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,199 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,199 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,199 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,199 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,199 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,199 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,199 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,199 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,199 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:04:43,199 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,199 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:04:43,199 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:04:43,200 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,200 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,200 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:04:43,200 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,200 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,200 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,200 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,200 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,200 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,200 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,200 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,200 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:04:43,200 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,200 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,200 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,200 - DEBUG - replaced with: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,200 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:04:43,200 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,200 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:04:43,200 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,200 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,200 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:04:43,200 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,200 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,200 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,200 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,201 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,201 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,201 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,201 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,201 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,201 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,201 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,201 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,201 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,201 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,201 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,201 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,201 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,201 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,201 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:04:43,201 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,201 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,201 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:04:43,201 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,201 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:04:43,201 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,201 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,201 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:04:43,201 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,201 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,201 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,201 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,201 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,201 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,202 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,202 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,202 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,202 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,202 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,202 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,202 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,202 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,202 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,202 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001EA008AE400>],
             84: [<numba.core.ir.Assign object at 0x000001EA008AEEB0>],
             238: [<numba.core.ir.Assign object at 0x000001EA008AE7C0>]})
2025-05-02 21:04:43,202 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,202 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008A16A0>
2025-05-02 21:04:43,202 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,202 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,202 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,202 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,202 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,202 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,202 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,202 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,202 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,202 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,202 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,202 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,202 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,202 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,203 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,203 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,203 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,203 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,203 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,203 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,203 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,203 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,203 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008A16A0>
2025-05-02 21:04:43,203 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,203 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,203 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,203 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008A16A0>
2025-05-02 21:04:43,203 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,203 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,204 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,204 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,204 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:04:43,204 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:04:43,204 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,204 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,204 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,204 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:04:43,204 - DEBUG - find_def var='offset' stmt=eta = index_frac - offset
2025-05-02 21:04:43,204 - DEBUG - replaced with: eta = index_frac - offset.1
2025-05-02 21:04:43,204 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,204 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,204 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:04:43,204 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:04:43,204 - DEBUG - find_def var='offset' stmt=$150binary_subtract.28 = nwin - offset
2025-05-02 21:04:43,204 - DEBUG - replaced with: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,204 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,204 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,204 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,204 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,204 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,204 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,205 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,205 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,205 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008A16A0>
2025-05-02 21:04:43,205 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,205 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,205 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,205 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,205 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,205 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,205 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008A16A0>
2025-05-02 21:04:43,205 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,205 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,205 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:04:43,205 - DEBUG - find_def var='offset' stmt=$182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:04:43,205 - DEBUG - find_def_from_top label 170
2025-05-02 21:04:43,205 - DEBUG - idom 168 from label 170
2025-05-02 21:04:43,205 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:04:43,205 - DEBUG - find_def_from_top label 168
2025-05-02 21:04:43,205 - DEBUG - idom 84 from label 168
2025-05-02 21:04:43,205 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:04:43,205 - DEBUG - replaced with: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,205 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,205 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,205 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:04:43,205 - DEBUG - find_def var='offset' stmt=$198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:04:43,205 - DEBUG - find_def_from_top label 170
2025-05-02 21:04:43,205 - DEBUG - idom 168 from label 170
2025-05-02 21:04:43,205 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:04:43,205 - DEBUG - find_def_from_top label 168
2025-05-02 21:04:43,206 - DEBUG - idom 84 from label 168
2025-05-02 21:04:43,206 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:04:43,206 - DEBUG - replaced with: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,206 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,206 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:04:43,206 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,206 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,206 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:04:43,206 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,206 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,206 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,206 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,206 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,206 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,206 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008A16A0>
2025-05-02 21:04:43,206 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,206 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:04:43,206 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,206 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,206 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,206 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:04:43,206 - DEBUG - find_def var='offset' stmt=eta = index_frac - offset
2025-05-02 21:04:43,206 - DEBUG - replaced with: eta = index_frac - offset.2
2025-05-02 21:04:43,206 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,206 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:04:43,206 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,206 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,207 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:04:43,207 - DEBUG - find_def var='offset' stmt=$286binary_subtract.21 = nwin - offset
2025-05-02 21:04:43,207 - DEBUG - replaced with: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,207 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,207 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,207 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,207 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,207 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,207 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,207 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,207 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,207 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008A16A0>
2025-05-02 21:04:43,207 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,207 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,207 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,207 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,207 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,207 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,207 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008A16A0>
2025-05-02 21:04:43,207 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,207 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,207 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:04:43,207 - DEBUG - find_def var='offset' stmt=$318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:04:43,207 - DEBUG - find_def_from_top label 306
2025-05-02 21:04:43,207 - DEBUG - idom 304 from label 306
2025-05-02 21:04:43,207 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:04:43,207 - DEBUG - find_def_from_top label 304
2025-05-02 21:04:43,207 - DEBUG - idom 238 from label 304
2025-05-02 21:04:43,208 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:04:43,208 - DEBUG - replaced with: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,208 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,208 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,208 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:04:43,208 - DEBUG - find_def var='offset' stmt=$334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:04:43,208 - DEBUG - find_def_from_top label 306
2025-05-02 21:04:43,208 - DEBUG - idom 304 from label 306
2025-05-02 21:04:43,208 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:04:43,208 - DEBUG - find_def_from_top label 304
2025-05-02 21:04:43,208 - DEBUG - idom 238 from label 304
2025-05-02 21:04:43,208 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:04:43,208 - DEBUG - replaced with: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,208 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,208 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:04:43,208 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,208 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,208 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:04:43,208 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,208 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,208 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,208 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,208 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,208 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,208 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,208 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,208 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008A16A0>
2025-05-02 21:04:43,209 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,209 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,209 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008A16A0>
2025-05-02 21:04:43,209 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,209 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,209 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,209 - DEBUG - Fix SSA violator on var n
2025-05-02 21:04:43,209 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,209 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,209 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,209 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,209 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,209 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,209 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,209 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,209 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,209 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,209 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,209 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,209 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,209 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,209 - DEBUG - first assign: n
2025-05-02 21:04:43,209 - DEBUG - replaced with: n = const(int, 0)
2025-05-02 21:04:43,209 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,209 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,209 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,209 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,209 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,209 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,209 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,210 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,210 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,210 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,210 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,210 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,210 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,210 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,210 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,210 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,210 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,210 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,210 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,210 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,210 - DEBUG - replaced with: n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:04:43,210 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:04:43,210 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,210 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,211 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,211 - DEBUG - on stmt: eta = index_frac - offset.1
2025-05-02 21:04:43,211 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:04:43,211 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,211 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,211 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,211 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,211 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,211 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,211 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,211 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,211 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,211 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,211 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,211 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,211 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,211 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,211 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,211 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:04:43,212 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,212 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,212 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:04:43,212 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,212 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,212 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,212 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,212 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,212 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,212 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,212 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,212 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:04:43,212 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,212 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,212 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,212 - DEBUG - on stmt: eta = index_frac - offset.2
2025-05-02 21:04:43,212 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,212 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:04:43,212 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,212 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,212 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,212 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,212 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,212 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,212 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,212 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,212 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,212 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,212 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,212 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,212 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,212 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,212 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,213 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,213 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,213 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,213 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,213 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,213 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,213 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,213 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,213 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,213 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,213 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,213 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:04:43,213 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,213 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,213 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:04:43,213 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,213 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,213 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,213 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,213 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,213 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,213 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,213 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,213 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,213 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,213 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,213 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,213 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,213 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,213 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,214 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001EA008AE1F0>],
             84: [<numba.core.ir.Assign object at 0x000001EA008AE8E0>]})
2025-05-02 21:04:43,214 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,214 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AEDF0>
2025-05-02 21:04:43,214 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,214 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,214 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,214 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,214 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,214 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,214 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,214 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,214 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,214 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,214 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,214 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,214 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,214 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,214 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,214 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,214 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,214 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,214 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,214 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,214 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,214 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,214 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,214 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,214 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,214 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,214 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,215 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,215 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,215 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,215 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,215 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,215 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AEDF0>
2025-05-02 21:04:43,215 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,215 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,215 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,215 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,215 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,215 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,215 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AEDF0>
2025-05-02 21:04:43,215 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,215 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,215 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,215 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,215 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:04:43,215 - DEBUG - find_def var='n' stmt=$108binary_subtract.11 = time_register - n
2025-05-02 21:04:43,215 - DEBUG - replaced with: $108binary_subtract.11 = time_register - n.1
2025-05-02 21:04:43,215 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:04:43,215 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,215 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,215 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,215 - DEBUG - on stmt: eta = index_frac - offset.1
2025-05-02 21:04:43,215 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,215 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,216 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:04:43,216 - DEBUG - find_def var='n' stmt=$144binary_add.25 = n + $const142.24
2025-05-02 21:04:43,216 - DEBUG - replaced with: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,216 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,216 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,216 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,216 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,216 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,216 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,216 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,216 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,216 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,216 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AEDF0>
2025-05-02 21:04:43,216 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,216 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,216 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,216 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,216 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,216 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,216 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AEDF0>
2025-05-02 21:04:43,216 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,216 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,216 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,216 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,216 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,216 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,216 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,216 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:04:43,217 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,217 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,217 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:04:43,217 - DEBUG - find_def var='n' stmt=$224binary_subtract.29 = n - i
2025-05-02 21:04:43,217 - DEBUG - find_def_from_top label 170
2025-05-02 21:04:43,217 - DEBUG - idom 168 from label 170
2025-05-02 21:04:43,217 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:04:43,217 - DEBUG - find_def_from_top label 168
2025-05-02 21:04:43,217 - DEBUG - idom 84 from label 168
2025-05-02 21:04:43,217 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:04:43,217 - DEBUG - replaced with: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,217 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,217 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,217 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,217 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,217 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,217 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,217 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AEDF0>
2025-05-02 21:04:43,217 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,217 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:04:43,217 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,217 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,217 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,217 - DEBUG - on stmt: eta = index_frac - offset.2
2025-05-02 21:04:43,217 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,217 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:04:43,217 - DEBUG - find_def var='n' stmt=$276binary_subtract.16 = n_orig - n
2025-05-02 21:04:43,217 - DEBUG - find_def_from_top label 238
2025-05-02 21:04:43,217 - DEBUG - idom 168 from label 238
2025-05-02 21:04:43,217 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:04:43,218 - DEBUG - find_def_from_top label 168
2025-05-02 21:04:43,218 - DEBUG - idom 84 from label 168
2025-05-02 21:04:43,218 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:04:43,218 - DEBUG - replaced with: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,218 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,218 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,218 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,218 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,218 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,218 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,218 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,218 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,218 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,218 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,218 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,218 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AEDF0>
2025-05-02 21:04:43,218 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,218 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,218 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,218 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,218 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,218 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,218 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AEDF0>
2025-05-02 21:04:43,218 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,218 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,218 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,218 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,218 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,219 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,219 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,219 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:04:43,219 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,219 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,219 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:04:43,219 - DEBUG - find_def var='n' stmt=$360binary_add.29 = n + k
2025-05-02 21:04:43,219 - DEBUG - find_def_from_top label 306
2025-05-02 21:04:43,219 - DEBUG - idom 304 from label 306
2025-05-02 21:04:43,219 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:04:43,219 - DEBUG - find_def_from_top label 304
2025-05-02 21:04:43,219 - DEBUG - idom 238 from label 304
2025-05-02 21:04:43,219 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:04:43,219 - DEBUG - find_def_from_top label 238
2025-05-02 21:04:43,219 - DEBUG - idom 168 from label 238
2025-05-02 21:04:43,219 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:04:43,219 - DEBUG - find_def_from_top label 168
2025-05-02 21:04:43,219 - DEBUG - idom 84 from label 168
2025-05-02 21:04:43,219 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:04:43,219 - DEBUG - replaced with: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,219 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,219 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,219 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,219 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,219 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,220 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,220 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,220 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,220 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AEDF0>
2025-05-02 21:04:43,220 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,220 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,220 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AEDF0>
2025-05-02 21:04:43,220 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,220 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,220 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,220 - DEBUG - Fix SSA violator on var index_frac
2025-05-02 21:04:43,220 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,220 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AFE20>
2025-05-02 21:04:43,220 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,220 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,220 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,220 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,220 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,220 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,220 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,220 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,220 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,220 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,220 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,220 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,220 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,220 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,220 - DEBUG - first assign: index_frac
2025-05-02 21:04:43,220 - DEBUG - replaced with: index_frac = const(float, 0.0)
2025-05-02 21:04:43,220 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,220 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,220 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,220 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,221 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,221 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,221 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,221 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,221 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,221 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AFE20>
2025-05-02 21:04:43,221 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,221 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,221 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,221 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AFE20>
2025-05-02 21:04:43,221 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,221 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,221 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n.1
2025-05-02 21:04:43,221 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:04:43,221 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,221 - DEBUG - replaced with: index_frac.1 = frac * num_table
2025-05-02 21:04:43,221 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,222 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,222 - DEBUG - on stmt: eta = index_frac - offset.1
2025-05-02 21:04:43,222 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,222 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,222 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,222 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,222 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,222 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,222 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AFE20>
2025-05-02 21:04:43,222 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,222 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,222 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,222 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AFE20>
2025-05-02 21:04:43,222 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,222 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,222 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,222 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,222 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,222 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:04:43,222 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,222 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,222 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,222 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,223 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,223 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,223 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,223 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AFE20>
2025-05-02 21:04:43,223 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,223 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:04:43,223 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,223 - DEBUG - replaced with: index_frac.2 = frac * num_table
2025-05-02 21:04:43,223 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,223 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,223 - DEBUG - on stmt: eta = index_frac - offset.2
2025-05-02 21:04:43,223 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,223 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,223 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,223 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,223 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,223 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,223 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,223 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,223 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,223 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,223 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,223 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,223 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,223 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AFE20>
2025-05-02 21:04:43,223 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,223 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,223 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,223 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,223 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,224 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,224 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AFE20>
2025-05-02 21:04:43,224 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,224 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,224 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,224 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,224 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,224 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,224 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,224 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:04:43,224 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,224 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,224 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,224 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,224 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,224 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,224 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,224 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,224 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,224 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,224 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,224 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AFE20>
2025-05-02 21:04:43,224 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,224 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,224 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AFE20>
2025-05-02 21:04:43,224 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,224 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,224 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,224 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001EA008AF7C0>],
             84: [<numba.core.ir.Assign object at 0x000001EA008AE5E0>],
             238: [<numba.core.ir.Assign object at 0x000001EA008AE130>]})
2025-05-02 21:04:43,224 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,224 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE760>
2025-05-02 21:04:43,225 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,225 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,225 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,225 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,225 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,225 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,225 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,225 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,225 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,225 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,225 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,225 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,225 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,225 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,225 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,225 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,225 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,225 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,226 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,226 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,226 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE760>
2025-05-02 21:04:43,226 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,226 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,226 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,226 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,226 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,226 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,226 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE760>
2025-05-02 21:04:43,226 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,226 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,226 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,226 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,226 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n.1
2025-05-02 21:04:43,226 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:04:43,226 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 21:04:43,226 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,226 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,226 - DEBUG - find_def var='index_frac' stmt=offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,226 - DEBUG - replaced with: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,226 - DEBUG - on stmt: eta = index_frac - offset.1
2025-05-02 21:04:43,226 - DEBUG - find_def var='index_frac' stmt=eta = index_frac - offset.1
2025-05-02 21:04:43,226 - DEBUG - replaced with: eta = index_frac.1 - offset.1
2025-05-02 21:04:43,226 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,226 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,226 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,227 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,227 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,227 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,227 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,227 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,227 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,227 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,227 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,227 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,227 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE760>
2025-05-02 21:04:43,227 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,227 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,227 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,227 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,227 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,227 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,227 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE760>
2025-05-02 21:04:43,227 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,227 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,227 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,227 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,227 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,227 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,227 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,227 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:04:43,227 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,227 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,228 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,228 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,228 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,228 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,228 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,228 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,228 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,228 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE760>
2025-05-02 21:04:43,228 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,228 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:04:43,228 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 21:04:43,228 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,228 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,228 - DEBUG - find_def var='index_frac' stmt=offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,228 - DEBUG - replaced with: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,228 - DEBUG - on stmt: eta = index_frac - offset.2
2025-05-02 21:04:43,228 - DEBUG - find_def var='index_frac' stmt=eta = index_frac - offset.2
2025-05-02 21:04:43,228 - DEBUG - replaced with: eta = index_frac.2 - offset.2
2025-05-02 21:04:43,228 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,228 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,228 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,228 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,228 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,228 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,228 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,228 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,229 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,229 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,229 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE760>
2025-05-02 21:04:43,229 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,229 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,229 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,229 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE760>
2025-05-02 21:04:43,229 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,229 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,229 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,229 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,229 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,229 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:04:43,229 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,229 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,229 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,229 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,229 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,230 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,230 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,230 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,230 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE760>
2025-05-02 21:04:43,230 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,230 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,230 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE760>
2025-05-02 21:04:43,230 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,230 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,230 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,230 - DEBUG - Fix SSA violator on var eta
2025-05-02 21:04:43,230 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,230 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA00852A90>
2025-05-02 21:04:43,230 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,230 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,230 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,230 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,230 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,230 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,230 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,230 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,230 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,230 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,230 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,230 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,230 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,230 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,230 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,230 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,230 - DEBUG - first assign: eta
2025-05-02 21:04:43,230 - DEBUG - replaced with: eta = const(float, 0.0)
2025-05-02 21:04:43,230 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,230 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,231 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,231 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,231 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,231 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,231 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,231 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA00852A90>
2025-05-02 21:04:43,231 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,231 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,231 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,231 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA00852A90>
2025-05-02 21:04:43,231 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,231 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,231 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n.1
2025-05-02 21:04:43,231 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:04:43,231 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 21:04:43,231 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,231 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,232 - DEBUG - on stmt: eta = index_frac.1 - offset.1
2025-05-02 21:04:43,232 - DEBUG - replaced with: eta.1 = index_frac.1 - offset.1
2025-05-02 21:04:43,232 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,232 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,232 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,232 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,232 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,232 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,232 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA00852A90>
2025-05-02 21:04:43,232 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,232 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,232 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,232 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA00852A90>
2025-05-02 21:04:43,232 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,232 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,232 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,232 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,232 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,232 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:04:43,232 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,233 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,233 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,233 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,233 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,233 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,233 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,233 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,233 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,233 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA00852A90>
2025-05-02 21:04:43,233 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,233 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:04:43,233 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 21:04:43,233 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,233 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,233 - DEBUG - on stmt: eta = index_frac.2 - offset.2
2025-05-02 21:04:43,233 - DEBUG - replaced with: eta.2 = index_frac.2 - offset.2
2025-05-02 21:04:43,233 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,233 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,233 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,233 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,233 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,233 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,233 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,233 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,233 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,233 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,233 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,233 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,233 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,234 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA00852A90>
2025-05-02 21:04:43,234 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,234 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,234 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,234 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,234 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,234 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,234 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA00852A90>
2025-05-02 21:04:43,234 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,234 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,234 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,234 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,234 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,234 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,234 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,234 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:04:43,234 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,234 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,234 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,234 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,234 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,234 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,234 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,234 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,234 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,234 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,234 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,235 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA00852A90>
2025-05-02 21:04:43,235 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,235 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,235 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA00852A90>
2025-05-02 21:04:43,235 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,235 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,235 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,235 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001EA00852C10>],
             84: [<numba.core.ir.Assign object at 0x000001EA008AFE50>],
             238: [<numba.core.ir.Assign object at 0x000001EA008AEB20>]})
2025-05-02 21:04:43,235 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,235 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,235 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,235 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,235 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,235 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,235 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,235 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,235 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,235 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,235 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,235 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,235 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,235 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,235 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,235 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,235 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,235 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,235 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,235 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,235 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,235 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,235 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,236 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,236 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,236 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,236 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,236 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,236 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,236 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,236 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,236 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,236 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,236 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,236 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n.1
2025-05-02 21:04:43,236 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:04:43,236 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 21:04:43,236 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,236 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,237 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 21:04:43,237 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,237 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,237 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,237 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,237 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,237 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,237 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,237 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,237 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,237 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,237 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,237 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,237 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,237 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,237 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,237 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,237 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:04:43,238 - DEBUG - find_def var='eta' stmt=$202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:04:43,238 - DEBUG - find_def_from_top label 170
2025-05-02 21:04:43,238 - DEBUG - idom 168 from label 170
2025-05-02 21:04:43,238 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:04:43,238 - DEBUG - find_def_from_top label 168
2025-05-02 21:04:43,238 - DEBUG - idom 84 from label 168
2025-05-02 21:04:43,238 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:04:43,238 - DEBUG - replaced with: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:04:43,238 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,238 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,238 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,238 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,238 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,238 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,238 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,238 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,238 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,238 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,238 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,238 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:04:43,238 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 21:04:43,238 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,238 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,238 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 21:04:43,238 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,238 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,238 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,238 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,238 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,238 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,238 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,239 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,239 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,239 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,239 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,239 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,239 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,239 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,239 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,239 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,239 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,239 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,239 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,239 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,239 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,239 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,239 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,239 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,239 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,239 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,239 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,239 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,239 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:04:43,239 - DEBUG - find_def var='eta' stmt=$338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:04:43,239 - DEBUG - find_def_from_top label 306
2025-05-02 21:04:43,239 - DEBUG - idom 304 from label 306
2025-05-02 21:04:43,239 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:04:43,239 - DEBUG - find_def_from_top label 304
2025-05-02 21:04:43,239 - DEBUG - idom 238 from label 304
2025-05-02 21:04:43,239 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:04:43,239 - DEBUG - replaced with: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:04:43,240 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,240 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,240 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,240 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,240 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,240 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,240 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,240 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,240 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,240 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,240 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,240 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,240 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,240 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,240 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,240 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,240 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,240 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,240 - DEBUG - Fix SSA violator on var frac
2025-05-02 21:04:43,240 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,240 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AE5B0>
2025-05-02 21:04:43,240 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,240 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,240 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,240 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,240 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,240 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,240 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,240 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,240 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,240 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,240 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,241 - DEBUG - first assign: frac
2025-05-02 21:04:43,241 - DEBUG - replaced with: frac = const(float, 0.0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,241 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,241 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,241 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AE5B0>
2025-05-02 21:04:43,241 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,241 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,241 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,241 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AE5B0>
2025-05-02 21:04:43,242 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,242 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,242 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n.1
2025-05-02 21:04:43,242 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:04:43,242 - DEBUG - replaced with: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:04:43,242 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 21:04:43,242 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,242 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,242 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 21:04:43,242 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,242 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,242 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,242 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,242 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,242 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,242 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AE5B0>
2025-05-02 21:04:43,242 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,242 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,243 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,243 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AE5B0>
2025-05-02 21:04:43,243 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,243 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,243 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,243 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,243 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,243 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,243 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,243 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:04:43,243 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,243 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,243 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,243 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,243 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,243 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,243 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,243 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,243 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,243 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AE5B0>
2025-05-02 21:04:43,243 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,243 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:04:43,243 - DEBUG - replaced with: frac.2 = $242binary_subtract.3
2025-05-02 21:04:43,243 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 21:04:43,243 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,243 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,243 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 21:04:43,243 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,243 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,243 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,243 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,244 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,244 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,244 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,244 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,244 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,244 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AE5B0>
2025-05-02 21:04:43,244 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,244 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,244 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,244 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AE5B0>
2025-05-02 21:04:43,244 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,244 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,244 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,244 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,244 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,244 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:04:43,244 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,244 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,244 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,244 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,245 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,245 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,245 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,245 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,245 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,245 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AE5B0>
2025-05-02 21:04:43,245 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,245 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,245 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AE5B0>
2025-05-02 21:04:43,245 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,245 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,245 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,245 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001EA008AE2E0>],
             84: [<numba.core.ir.Assign object at 0x000001EA008AE610>],
             238: [<numba.core.ir.Assign object at 0x000001EA008A3CD0>]})
2025-05-02 21:04:43,245 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,245 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008529A0>
2025-05-02 21:04:43,245 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,245 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,245 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,245 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,245 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,245 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,245 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,245 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,245 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,245 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,245 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,245 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,245 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,245 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,245 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,246 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,246 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,246 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,246 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,246 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,246 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,246 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,246 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008529A0>
2025-05-02 21:04:43,246 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,246 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,246 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,246 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008529A0>
2025-05-02 21:04:43,246 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,246 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,246 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n.1
2025-05-02 21:04:43,246 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:04:43,247 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 21:04:43,247 - DEBUG - find_def var='frac' stmt=index_frac.1 = frac * num_table
2025-05-02 21:04:43,247 - DEBUG - replaced with: index_frac.1 = frac.1 * num_table
2025-05-02 21:04:43,247 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,247 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,247 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 21:04:43,247 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,247 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,247 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,247 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,247 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,247 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,247 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,247 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,247 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,247 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,247 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,247 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,247 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008529A0>
2025-05-02 21:04:43,247 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,247 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,247 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,247 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,247 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,247 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,247 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008529A0>
2025-05-02 21:04:43,247 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,247 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,247 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,248 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,248 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,248 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,248 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,248 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:04:43,248 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,248 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,248 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,248 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,248 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,248 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,248 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,248 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,248 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,248 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008529A0>
2025-05-02 21:04:43,248 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,248 - DEBUG - find_def var='frac' stmt=$242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,248 - DEBUG - find_def_from_top label 238
2025-05-02 21:04:43,248 - DEBUG - idom 168 from label 238
2025-05-02 21:04:43,248 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:04:43,248 - DEBUG - find_def_from_top label 168
2025-05-02 21:04:43,248 - DEBUG - idom 84 from label 168
2025-05-02 21:04:43,248 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:04:43,248 - DEBUG - replaced with: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:04:43,248 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:04:43,248 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 21:04:43,248 - DEBUG - find_def var='frac' stmt=index_frac.2 = frac * num_table
2025-05-02 21:04:43,248 - DEBUG - replaced with: index_frac.2 = frac.2 * num_table
2025-05-02 21:04:43,248 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,248 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,249 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 21:04:43,249 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,249 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,249 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,249 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,249 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,249 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,249 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,249 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,249 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,249 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,249 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,249 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,249 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,249 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008529A0>
2025-05-02 21:04:43,249 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,249 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,249 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,249 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,249 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,249 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,249 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008529A0>
2025-05-02 21:04:43,249 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,249 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,249 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,249 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,249 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,249 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,249 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,250 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:04:43,250 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,250 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,250 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,250 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,250 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,250 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,250 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,250 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,250 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,250 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,250 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,250 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008529A0>
2025-05-02 21:04:43,250 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,250 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,250 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008529A0>
2025-05-02 21:04:43,250 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,250 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,250 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,250 - DEBUG - Fix SSA violator on var time_register
2025-05-02 21:04:43,250 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,250 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,250 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,250 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,250 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,250 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,250 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,250 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,250 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,251 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,251 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,251 - DEBUG - first assign: time_register
2025-05-02 21:04:43,251 - DEBUG - replaced with: time_register = const(float, 0.0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,251 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,251 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,251 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,251 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,252 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,252 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,252 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,252 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,252 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,252 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,252 - DEBUG - replaced with: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,252 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,252 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,252 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n.1
2025-05-02 21:04:43,252 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:04:43,252 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 21:04:43,252 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,252 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,252 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 21:04:43,252 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,252 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,252 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,252 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,252 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,252 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,252 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,252 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,252 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,252 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,252 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,252 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,252 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,252 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,253 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,253 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,253 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,253 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,253 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,253 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,253 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,253 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,253 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,253 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,253 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,253 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,253 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,253 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:04:43,253 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,253 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,253 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,253 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,253 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,253 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,253 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,253 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,253 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,253 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,253 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:04:43,253 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:04:43,253 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 21:04:43,253 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,253 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,253 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 21:04:43,253 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,254 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,254 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,254 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,254 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,254 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,254 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,254 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,254 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,254 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,254 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,254 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,254 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,254 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,254 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,254 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,254 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,254 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:04:43,254 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,254 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,255 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,255 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,255 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,255 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,255 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,255 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,255 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,255 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,255 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,255 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,255 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,255 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,255 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,255 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,255 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,255 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,255 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001EA008AE130>],
             84: [<numba.core.ir.Assign object at 0x000001EA008AE6A0>]})
2025-05-02 21:04:43,255 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,255 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE4F0>
2025-05-02 21:04:43,255 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,255 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,255 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,255 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,255 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,255 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,255 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,255 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,255 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,255 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,255 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,256 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,256 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,256 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE4F0>
2025-05-02 21:04:43,256 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,256 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,256 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,256 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE4F0>
2025-05-02 21:04:43,256 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,257 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,257 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,257 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,257 - DEBUG - find_def var='time_register' stmt=n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,257 - DEBUG - replaced with: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,257 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n.1
2025-05-02 21:04:43,257 - DEBUG - find_def var='time_register' stmt=$108binary_subtract.11 = time_register - n.1
2025-05-02 21:04:43,257 - DEBUG - replaced with: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:04:43,257 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:04:43,257 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 21:04:43,257 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,257 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,257 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 21:04:43,257 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,257 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,257 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,257 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,257 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,257 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,257 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,257 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,257 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,258 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,258 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,258 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,258 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE4F0>
2025-05-02 21:04:43,258 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,258 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,258 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,258 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,258 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,258 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,258 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE4F0>
2025-05-02 21:04:43,258 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,258 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,258 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,258 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,258 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,258 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,258 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,258 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:04:43,258 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,258 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,258 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,258 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,258 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,258 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,258 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,258 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,258 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,258 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE4F0>
2025-05-02 21:04:43,259 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:04:43,259 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:04:43,259 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 21:04:43,259 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,259 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,259 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 21:04:43,259 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,259 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,259 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,259 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,259 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,259 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,259 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,259 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,259 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,259 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,259 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,259 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,259 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,259 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE4F0>
2025-05-02 21:04:43,259 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,259 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,259 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,259 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,259 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,259 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,260 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE4F0>
2025-05-02 21:04:43,260 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,260 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,260 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,260 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,260 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,260 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,260 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,260 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:04:43,260 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,260 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,260 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,260 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,260 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,260 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,260 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,260 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,260 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,260 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,260 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,260 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE4F0>
2025-05-02 21:04:43,260 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,260 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,260 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE4F0>
2025-05-02 21:04:43,260 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,260 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,260 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,260 - DEBUG - Fix SSA violator on var weight
2025-05-02 21:04:43,261 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,261 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,261 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,261 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,261 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,261 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,261 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,261 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,261 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,261 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,261 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,261 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,261 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,261 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,261 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,261 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,261 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,261 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,261 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,261 - DEBUG - first assign: weight
2025-05-02 21:04:43,261 - DEBUG - replaced with: weight = const(float, 0.0)
2025-05-02 21:04:43,261 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,261 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,261 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,261 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,261 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,261 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,261 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,261 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,261 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,262 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,262 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,262 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,262 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,262 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,262 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,262 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,262 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,262 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,262 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:04:43,262 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:04:43,262 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 21:04:43,262 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,262 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,262 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 21:04:43,262 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,262 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,263 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,263 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,263 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,263 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,263 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,263 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,263 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,263 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,263 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,263 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,263 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,263 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,263 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,263 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,263 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,263 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,263 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,263 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,263 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,263 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,263 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,263 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,263 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,263 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:04:43,263 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,263 - DEBUG - replaced with: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,263 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,264 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,264 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,264 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,264 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,264 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,264 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,264 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,264 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,264 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:04:43,264 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:04:43,264 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 21:04:43,264 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,264 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,264 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 21:04:43,264 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,264 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,264 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,264 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,264 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,264 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,264 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,264 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,264 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,264 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,264 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,265 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,265 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,265 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,265 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,265 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,265 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,265 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,265 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,265 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,265 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,265 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,265 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,265 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,265 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,265 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,265 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,265 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,265 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:04:43,265 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,265 - DEBUG - replaced with: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,265 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,265 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,266 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,266 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,266 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,266 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,266 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,266 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,266 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,266 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,266 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,266 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,266 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,266 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,266 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,266 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,266 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,266 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001EA008AFA60>],
             170: [<numba.core.ir.Assign object at 0x000001EA00852820>],
             306: [<numba.core.ir.Assign object at 0x000001EA008A3BE0>]})
2025-05-02 21:04:43,266 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,266 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF970>
2025-05-02 21:04:43,266 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,266 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,266 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,266 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,266 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,266 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,266 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,266 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,266 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,266 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,266 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,266 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,266 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,266 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,267 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,267 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,267 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,267 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,267 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,267 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,267 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,267 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,267 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF970>
2025-05-02 21:04:43,267 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,267 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,267 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,267 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF970>
2025-05-02 21:04:43,267 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,267 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,267 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:04:43,268 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:04:43,268 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 21:04:43,268 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,268 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,268 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 21:04:43,268 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,268 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,268 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,268 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,268 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,268 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,268 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,268 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,268 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,268 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,268 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,268 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,268 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF970>
2025-05-02 21:04:43,268 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,268 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,268 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,268 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,268 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,268 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,268 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF970>
2025-05-02 21:04:43,268 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,268 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,268 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,268 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,268 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,268 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,269 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,269 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:04:43,269 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,269 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,269 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,269 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,269 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,269 - DEBUG - find_def var='weight' stmt=$228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,269 - DEBUG - replaced with: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:04:43,269 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,269 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,269 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,269 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,269 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF970>
2025-05-02 21:04:43,269 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:04:43,269 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:04:43,269 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 21:04:43,269 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,269 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,269 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 21:04:43,269 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,269 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,269 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,269 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,269 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,269 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,269 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,269 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,269 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,270 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,270 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,270 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,270 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,270 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF970>
2025-05-02 21:04:43,270 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,270 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,270 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,270 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,270 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,270 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,270 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF970>
2025-05-02 21:04:43,270 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,270 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,270 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,270 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,270 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,270 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,270 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,270 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:04:43,270 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,270 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,270 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,270 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,270 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,270 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,270 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,270 - DEBUG - find_def var='weight' stmt=$368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,270 - DEBUG - replaced with: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:04:43,270 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,270 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,271 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,271 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,271 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF970>
2025-05-02 21:04:43,271 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,271 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,271 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF970>
2025-05-02 21:04:43,271 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,271 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,271 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:59,479 - DEBUG - Audio loaded: shape=(2, 7385280), sample_rate=44100
2025-05-02 21:04:59,480 - DEBUG - Demixing audio: samples=7385280, margin=44100, chunk_size=441000
2025-05-02 21:04:59,496 - DEBUG - Created 17 chunks for demixing

  0%|          | 0/17 [00:00<?, ?it/s]
Processing:   0%|          | 0/17 [00:00<?, ?it/s]2025-05-02 21:04:59,504 - DEBUG - Processing chunk: 1 waves
2025-05-02 21:04:59,515 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 512 Expected: 256
 Please fix either the inputs/outputs or the model.
Traceback (most recent call last):
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 258, in <module>
    main()
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 242, in main
    vocals, no_vocals, sampling_rate = predictor.predict(file_path)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 210, in predict
    sources = self.demix(mix.T)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 131, in demix
    sources = self.demix_base(segmented_mix, margin_size=margin)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 165, in demix_base
    -_ort.run(None, {"input": -spek.cpu().numpy()})[0] * 0.5
  File "C:\temp\s2S\installs\UVR\uvr_env\lib\site-packages\onnxruntime\capi\onnxruntime_inference_collection.py", line 220, in run
    return self._sess.run(output_names, input_feed, run_options)
onnxruntime.capi.onnxruntime_pybind11_state.InvalidArgument: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 512 Expected: 256
 Please fix either the inputs/outputs or the model.

Processing:   0%|          | 0/17 [00:00<?, ?it/s]

2025-05-02 21:05:00 - ERROR - Python error occurred: 2025-05-02 21:04:42,512 - DEBUG - Logging initialized
2025-05-02 21:04:42,514 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song10.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 10, 'n_fft': 4096, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 21:04:42,514 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 21:04:42,514 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac
2025-05-02 21:04:42,516 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=512, n_fft=4096, hop=1024
2025-05-02 21:04:42,516 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song10.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 10, 'n_fft': 4096, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 21:04:42,517 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_other.onnx
2025-05-02 21:04:42,592 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac
2025-05-02 21:04:43,086 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=86)
           2	LOAD_GLOBAL(arg=0, lineno=86)
           4	LOAD_FAST(arg=0, lineno=86)
           6	LOAD_FAST(arg=1, lineno=86)
           8	LOAD_FAST(arg=2, lineno=86)
          10	LOAD_FAST(arg=3, lineno=86)
          12	LOAD_FAST(arg=4, lineno=86)
          14	LOAD_FAST(arg=5, lineno=86)
          16	LOAD_FAST(arg=6, lineno=86)
          18	CALL_FUNCTION(arg=7, lineno=86)
          20	POP_TOP(arg=None, lineno=86)
          22	LOAD_CONST(arg=0, lineno=86)
          24	RETURN_VALUE(arg=None, lineno=86)
2025-05-02 21:04:43,087 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-02 21:04:43,087 - DEBUG - stack: []
2025-05-02 21:04:43,087 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=86)
2025-05-02 21:04:43,087 - DEBUG - stack []
2025-05-02 21:04:43,087 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=86)
2025-05-02 21:04:43,087 - DEBUG - stack []
2025-05-02 21:04:43,087 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=86)
2025-05-02 21:04:43,087 - DEBUG - stack ['$2load_global.0']
2025-05-02 21:04:43,087 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=86)
2025-05-02 21:04:43,087 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-05-02 21:04:43,087 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=86)
2025-05-02 21:04:43,087 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2']
2025-05-02 21:04:43,087 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=86)
2025-05-02 21:04:43,087 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3']
2025-05-02 21:04:43,087 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=4, lineno=86)
2025-05-02 21:04:43,087 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4']
2025-05-02 21:04:43,087 - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=5, lineno=86)
2025-05-02 21:04:43,087 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5']
2025-05-02 21:04:43,087 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=6, lineno=86)
2025-05-02 21:04:43,087 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6']
2025-05-02 21:04:43,088 - DEBUG - dispatch pc=18, inst=CALL_FUNCTION(arg=7, lineno=86)
2025-05-02 21:04:43,088 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6', '$y16.7']
2025-05-02 21:04:43,088 - DEBUG - dispatch pc=20, inst=POP_TOP(arg=None, lineno=86)
2025-05-02 21:04:43,088 - DEBUG - stack ['$18call_function.8']
2025-05-02 21:04:43,088 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=0, lineno=86)
2025-05-02 21:04:43,088 - DEBUG - stack []
2025-05-02 21:04:43,088 - DEBUG - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=86)
2025-05-02 21:04:43,088 - DEBUG - stack ['$const22.9']
2025-05-02 21:04:43,088 - DEBUG - end state. edges=[]
2025-05-02 21:04:43,088 - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-02 21:04:43,088 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-02 21:04:43,088 - DEBUG - defmap: {}
2025-05-02 21:04:43,088 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-02 21:04:43,088 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-02 21:04:43,088 - DEBUG - keep phismap: {}
2025-05-02 21:04:43,088 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-02 21:04:43,088 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-02 21:04:43,088 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'res': '$t_out6.2'}), (8, {'res': '$interp_win8.3'}), (10, {'res': '$interp_delta10.4'}), (12, {'res': '$num_table12.5'}), (14, {'res': '$scale14.6'}), (16, {'res': '$y16.7'}), (18, {'func': '$2load_global.0', 'args': ['$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6', '$y16.7'], 'res': '$18call_function.8'}), (22, {'res': '$const22.9'}), (24, {'retval': '$const22.9', 'castval': '$24return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-02 21:04:43,145 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    t_out = arg(1, name=t_out)               ['t_out']
    interp_win = arg(2, name=interp_win)     ['interp_win']
    interp_delta = arg(3, name=interp_delta) ['interp_delta']
    num_table = arg(4, name=num_table)       ['num_table']
    scale = arg(5, name=scale)               ['scale']
    y = arg(6, name=y)                       ['y']
    $2load_global.0 = global(_resample_loop_s: CPUDispatcher(<function _resample_loop at 0x000001EA6E1F8F70>)) ['$2load_global.0']
    $18call_function.8 = call $2load_global.0(x, t_out, interp_win, interp_delta, num_table, scale, y, func=$2load_global.0, args=[Var(x, interpn.py:86), Var(t_out, interpn.py:86), Var(interp_win, interpn.py:86), Var(interp_delta, interpn.py:86), Var(num_table, interpn.py:86), Var(scale, interpn.py:86), Var(y, interpn.py:86)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call_function.8', '$2load_global.0', 'interp_delta', 'interp_win', 'num_table', 'scale', 't_out', 'x', 'y']
    $const22.9 = const(NoneType, None)       ['$const22.9']
    $24return_value.10 = cast(value=$const22.9) ['$24return_value.10', '$const22.9']
    return $24return_value.10                ['$24return_value.10']

2025-05-02 21:04:43,149 - DEBUG - ==== SSA block analysis pass on 0
2025-05-02 21:04:43,149 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA007F7A00>
2025-05-02 21:04:43,150 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,150 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,150 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,150 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,150 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,150 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,150 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,150 - DEBUG - on stmt: $2load_global.0 = global(_resample_loop_s: CPUDispatcher(<function _resample_loop at 0x000001EA6E1F8F70>))
2025-05-02 21:04:43,150 - DEBUG - on stmt: $18call_function.8 = call $2load_global.0(x, t_out, interp_win, interp_delta, num_table, scale, y, func=$2load_global.0, args=[Var(x, interpn.py:86), Var(t_out, interpn.py:86), Var(interp_win, interpn.py:86), Var(interp_delta, interpn.py:86), Var(num_table, interpn.py:86), Var(scale, interpn.py:86), Var(y, interpn.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,150 - DEBUG - on stmt: $const22.9 = const(NoneType, None)
2025-05-02 21:04:43,150 - DEBUG - on stmt: $24return_value.10 = cast(value=$const22.9)
2025-05-02 21:04:43,150 - DEBUG - on stmt: return $24return_value.10
2025-05-02 21:04:43,150 - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call_function.8': [<numba.core.ir.Assign object at 0x000001EA00810D90>],
             '$24return_value.10': [<numba.core.ir.Assign object at 0x000001EA007F78B0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001EA008103D0>],
             '$const22.9': [<numba.core.ir.Assign object at 0x000001EA007F7130>],
             'interp_delta': [<numba.core.ir.Assign object at 0x000001EA007F7EB0>],
             'interp_win': [<numba.core.ir.Assign object at 0x000001EA007F7D90>],
             'num_table': [<numba.core.ir.Assign object at 0x000001EA007F7FD0>],
             'scale': [<numba.core.ir.Assign object at 0x000001EA00810130>],
             't_out': [<numba.core.ir.Assign object at 0x000001EA007F7C70>],
             'x': [<numba.core.ir.Assign object at 0x000001EA007F71F0>],
             'y': [<numba.core.ir.Assign object at 0x000001EA00810250>]})
2025-05-02 21:04:43,150 - DEBUG - SSA violators set()
2025-05-02 21:04:43,153 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=9)
           2	LOAD_GLOBAL(arg=0, lineno=9)
           4	LOAD_FAST(arg=5, lineno=9)
           6	LOAD_FAST(arg=4, lineno=9)
           8	BINARY_MULTIPLY(arg=None, lineno=9)
          10	CALL_FUNCTION(arg=1, lineno=9)
          12	STORE_FAST(arg=7, lineno=9)
          14	LOAD_CONST(arg=1, lineno=10)
          16	STORE_FAST(arg=8, lineno=10)
          18	LOAD_CONST(arg=2, lineno=12)
          20	STORE_FAST(arg=9, lineno=12)
          22	LOAD_CONST(arg=1, lineno=13)
          24	STORE_FAST(arg=10, lineno=13)
          26	LOAD_CONST(arg=1, lineno=14)
          28	STORE_FAST(arg=11, lineno=14)
          30	LOAD_CONST(arg=2, lineno=15)
          32	STORE_FAST(arg=12, lineno=15)
          34	LOAD_CONST(arg=1, lineno=16)
          36	STORE_FAST(arg=13, lineno=16)
          38	LOAD_CONST(arg=1, lineno=17)
          40	STORE_FAST(arg=14, lineno=17)
          42	LOAD_FAST(arg=2, lineno=19)
          44	LOAD_ATTR(arg=1, lineno=19)
          46	LOAD_CONST(arg=2, lineno=19)
          48	BINARY_SUBSCR(arg=None, lineno=19)
          50	STORE_FAST(arg=15, lineno=19)
          52	LOAD_FAST(arg=0, lineno=20)
          54	LOAD_ATTR(arg=1, lineno=20)
          56	LOAD_CONST(arg=2, lineno=20)
          58	BINARY_SUBSCR(arg=None, lineno=20)
          60	STORE_FAST(arg=16, lineno=20)
          62	LOAD_FAST(arg=1, lineno=21)
          64	LOAD_ATTR(arg=1, lineno=21)
          66	LOAD_CONST(arg=2, lineno=21)
          68	BINARY_SUBSCR(arg=None, lineno=21)
          70	STORE_FAST(arg=17, lineno=21)
          72	LOAD_GLOBAL(arg=2, lineno=23)
          74	LOAD_FAST(arg=17, lineno=23)
          76	CALL_FUNCTION(arg=1, lineno=23)
          78	GET_ITER(arg=None, lineno=23)
>         80	FOR_ITER(arg=298, lineno=23)
          84	STORE_FAST(arg=18, lineno=23)
          86	LOAD_FAST(arg=1, lineno=24)
          88	LOAD_FAST(arg=18, lineno=24)
          90	BINARY_SUBSCR(arg=None, lineno=24)
          92	STORE_FAST(arg=8, lineno=24)
          94	LOAD_GLOBAL(arg=0, lineno=27)
          96	LOAD_FAST(arg=8, lineno=27)
          98	CALL_FUNCTION(arg=1, lineno=27)
         100	STORE_FAST(arg=9, lineno=27)
         102	LOAD_FAST(arg=5, lineno=30)
         104	LOAD_FAST(arg=8, lineno=30)
         106	LOAD_FAST(arg=9, lineno=30)
         108	BINARY_SUBTRACT(arg=None, lineno=30)
         110	BINARY_MULTIPLY(arg=None, lineno=30)
         112	STORE_FAST(arg=10, lineno=30)
         114	LOAD_FAST(arg=10, lineno=33)
         116	LOAD_FAST(arg=4, lineno=33)
         118	BINARY_MULTIPLY(arg=None, lineno=33)
         120	STORE_FAST(arg=11, lineno=33)
         122	LOAD_GLOBAL(arg=0, lineno=34)
         124	LOAD_FAST(arg=11, lineno=34)
         126	CALL_FUNCTION(arg=1, lineno=34)
         128	STORE_FAST(arg=12, lineno=34)
         130	LOAD_FAST(arg=11, lineno=37)
         132	LOAD_FAST(arg=12, lineno=37)
         134	BINARY_SUBTRACT(arg=None, lineno=37)
         136	STORE_FAST(arg=13, lineno=37)
         138	LOAD_GLOBAL(arg=3, lineno=40)
         140	LOAD_FAST(arg=9, lineno=40)
         142	LOAD_CONST(arg=3, lineno=40)
         144	BINARY_ADD(arg=None, lineno=40)
         146	LOAD_FAST(arg=15, lineno=40)
         148	LOAD_FAST(arg=12, lineno=40)
         150	BINARY_SUBTRACT(arg=None, lineno=40)
         152	LOAD_FAST(arg=7, lineno=40)
         154	BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
         156	CALL_FUNCTION(arg=2, lineno=40)
         158	STORE_FAST(arg=19, lineno=40)
         160	LOAD_GLOBAL(arg=4, lineno=41)
         162	LOAD_FAST(arg=19, lineno=41)
         164	CALL_FUNCTION(arg=1, lineno=41)
         166	GET_ITER(arg=None, lineno=41)
>        168	FOR_ITER(arg=68, lineno=41)
         170	STORE_FAST(arg=20, lineno=41)
         172	LOAD_FAST(arg=2, lineno=44)
         174	LOAD_FAST(arg=12, lineno=44)
         176	LOAD_FAST(arg=20, lineno=44)
         178	LOAD_FAST(arg=7, lineno=44)
         180	BINARY_MULTIPLY(arg=None, lineno=44)
         182	BINARY_ADD(arg=None, lineno=44)
         184	BINARY_SUBSCR(arg=None, lineno=44)
         186	LOAD_FAST(arg=13, lineno=45)
         188	LOAD_FAST(arg=3, lineno=45)
         190	LOAD_FAST(arg=12, lineno=45)
         192	LOAD_FAST(arg=20, lineno=45)
         194	LOAD_FAST(arg=7, lineno=45)
         196	BINARY_MULTIPLY(arg=None, lineno=45)
         198	BINARY_ADD(arg=None, lineno=45)
         200	BINARY_SUBSCR(arg=None, lineno=45)
         202	BINARY_MULTIPLY(arg=None, lineno=45)
         204	BINARY_ADD(arg=None, lineno=44)
         206	STORE_FAST(arg=14, lineno=43)
         208	LOAD_FAST(arg=6, lineno=47)
         210	LOAD_FAST(arg=18, lineno=47)
         212	DUP_TOP_TWO(arg=None, lineno=47)
         214	BINARY_SUBSCR(arg=None, lineno=47)
         216	LOAD_FAST(arg=14, lineno=47)
         218	LOAD_FAST(arg=0, lineno=47)
         220	LOAD_FAST(arg=9, lineno=47)
         222	LOAD_FAST(arg=20, lineno=47)
         224	BINARY_SUBTRACT(arg=None, lineno=47)
         226	BINARY_SUBSCR(arg=None, lineno=47)
         228	BINARY_MULTIPLY(arg=None, lineno=47)
         230	INPLACE_ADD(arg=None, lineno=47)
         232	ROT_THREE(arg=None, lineno=47)
         234	STORE_SUBSCR(arg=None, lineno=47)
         236	JUMP_ABSOLUTE(arg=168, lineno=47)
>        238	LOAD_FAST(arg=5, lineno=50)
         240	LOAD_FAST(arg=10, lineno=50)
         242	BINARY_SUBTRACT(arg=None, lineno=50)
         244	STORE_FAST(arg=10, lineno=50)
         246	LOAD_FAST(arg=10, lineno=53)
         248	LOAD_FAST(arg=4, lineno=53)
         250	BINARY_MULTIPLY(arg=None, lineno=53)
         252	STORE_FAST(arg=11, lineno=53)
         254	LOAD_GLOBAL(arg=0, lineno=54)
         256	LOAD_FAST(arg=11, lineno=54)
         258	CALL_FUNCTION(arg=1, lineno=54)
         260	STORE_FAST(arg=12, lineno=54)
         262	LOAD_FAST(arg=11, lineno=57)
         264	LOAD_FAST(arg=12, lineno=57)
         266	BINARY_SUBTRACT(arg=None, lineno=57)
         268	STORE_FAST(arg=13, lineno=57)
         270	LOAD_GLOBAL(arg=3, lineno=60)
         272	LOAD_FAST(arg=16, lineno=60)
         274	LOAD_FAST(arg=9, lineno=60)
         276	BINARY_SUBTRACT(arg=None, lineno=60)
         278	LOAD_CONST(arg=3, lineno=60)
         280	BINARY_SUBTRACT(arg=None, lineno=60)
         282	LOAD_FAST(arg=15, lineno=60)
         284	LOAD_FAST(arg=12, lineno=60)
         286	BINARY_SUBTRACT(arg=None, lineno=60)
         288	LOAD_FAST(arg=7, lineno=60)
         290	BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
         292	CALL_FUNCTION(arg=2, lineno=60)
         294	STORE_FAST(arg=21, lineno=60)
         296	LOAD_GLOBAL(arg=4, lineno=61)
         298	LOAD_FAST(arg=21, lineno=61)
         300	CALL_FUNCTION(arg=1, lineno=61)
         302	GET_ITER(arg=None, lineno=61)
>        304	FOR_ITER(arg=74, lineno=61)
         306	STORE_FAST(arg=22, lineno=61)
         308	LOAD_FAST(arg=2, lineno=63)
         310	LOAD_FAST(arg=12, lineno=63)
         312	LOAD_FAST(arg=22, lineno=63)
         314	LOAD_FAST(arg=7, lineno=63)
         316	BINARY_MULTIPLY(arg=None, lineno=63)
         318	BINARY_ADD(arg=None, lineno=63)
         320	BINARY_SUBSCR(arg=None, lineno=63)
         322	LOAD_FAST(arg=13, lineno=64)
         324	LOAD_FAST(arg=3, lineno=64)
         326	LOAD_FAST(arg=12, lineno=64)
         328	LOAD_FAST(arg=22, lineno=64)
         330	LOAD_FAST(arg=7, lineno=64)
         332	BINARY_MULTIPLY(arg=None, lineno=64)
         334	BINARY_ADD(arg=None, lineno=64)
         336	BINARY_SUBSCR(arg=None, lineno=64)
         338	BINARY_MULTIPLY(arg=None, lineno=64)
         340	BINARY_ADD(arg=None, lineno=63)
         342	STORE_FAST(arg=14, lineno=62)
         344	LOAD_FAST(arg=6, lineno=66)
         346	LOAD_FAST(arg=18, lineno=66)
         348	DUP_TOP_TWO(arg=None, lineno=66)
         350	BINARY_SUBSCR(arg=None, lineno=66)
         352	LOAD_FAST(arg=14, lineno=66)
         354	LOAD_FAST(arg=0, lineno=66)
         356	LOAD_FAST(arg=9, lineno=66)
         358	LOAD_FAST(arg=22, lineno=66)
         360	BINARY_ADD(arg=None, lineno=66)
         362	LOAD_CONST(arg=3, lineno=66)
         364	BINARY_ADD(arg=None, lineno=66)
         366	BINARY_SUBSCR(arg=None, lineno=66)
         368	BINARY_MULTIPLY(arg=None, lineno=66)
         370	INPLACE_ADD(arg=None, lineno=66)
         372	ROT_THREE(arg=None, lineno=66)
         374	STORE_SUBSCR(arg=None, lineno=66)
         376	JUMP_ABSOLUTE(arg=304, lineno=66)
>        380	JUMP_ABSOLUTE(arg=80, lineno=66)
>        382	LOAD_CONST(arg=0, lineno=66)
         384	RETURN_VALUE(arg=None, lineno=66)
2025-05-02 21:04:43,154 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-02 21:04:43,154 - DEBUG - stack: []
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=9)
2025-05-02 21:04:43,154 - DEBUG - stack []
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=9)
2025-05-02 21:04:43,154 - DEBUG - stack []
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=5, lineno=9)
2025-05-02 21:04:43,154 - DEBUG - stack ['$2load_global.0']
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=4, lineno=9)
2025-05-02 21:04:43,154 - DEBUG - stack ['$2load_global.0', '$scale4.1']
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=9)
2025-05-02 21:04:43,154 - DEBUG - stack ['$2load_global.0', '$scale4.1', '$num_table6.2']
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=9)
2025-05-02 21:04:43,154 - DEBUG - stack ['$2load_global.0', '$8binary_multiply.3']
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=12, inst=STORE_FAST(arg=7, lineno=9)
2025-05-02 21:04:43,154 - DEBUG - stack ['$10call_function.4']
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=10)
2025-05-02 21:04:43,154 - DEBUG - stack []
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=8, lineno=10)
2025-05-02 21:04:43,154 - DEBUG - stack ['$const14.5']
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=12)
2025-05-02 21:04:43,154 - DEBUG - stack []
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=20, inst=STORE_FAST(arg=9, lineno=12)
2025-05-02 21:04:43,154 - DEBUG - stack ['$const18.6']
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=13)
2025-05-02 21:04:43,154 - DEBUG - stack []
2025-05-02 21:04:43,154 - DEBUG - dispatch pc=24, inst=STORE_FAST(arg=10, lineno=13)
2025-05-02 21:04:43,154 - DEBUG - stack ['$const22.7']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=26, inst=LOAD_CONST(arg=1, lineno=14)
2025-05-02 21:04:43,155 - DEBUG - stack []
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=28, inst=STORE_FAST(arg=11, lineno=14)
2025-05-02 21:04:43,155 - DEBUG - stack ['$const26.8']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=15)
2025-05-02 21:04:43,155 - DEBUG - stack []
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=32, inst=STORE_FAST(arg=12, lineno=15)
2025-05-02 21:04:43,155 - DEBUG - stack ['$const30.9']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=16)
2025-05-02 21:04:43,155 - DEBUG - stack []
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=36, inst=STORE_FAST(arg=13, lineno=16)
2025-05-02 21:04:43,155 - DEBUG - stack ['$const34.10']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=17)
2025-05-02 21:04:43,155 - DEBUG - stack []
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=40, inst=STORE_FAST(arg=14, lineno=17)
2025-05-02 21:04:43,155 - DEBUG - stack ['$const38.11']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=42, inst=LOAD_FAST(arg=2, lineno=19)
2025-05-02 21:04:43,155 - DEBUG - stack []
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=44, inst=LOAD_ATTR(arg=1, lineno=19)
2025-05-02 21:04:43,155 - DEBUG - stack ['$interp_win42.12']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=46, inst=LOAD_CONST(arg=2, lineno=19)
2025-05-02 21:04:43,155 - DEBUG - stack ['$44load_attr.13']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=19)
2025-05-02 21:04:43,155 - DEBUG - stack ['$44load_attr.13', '$const46.14']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=50, inst=STORE_FAST(arg=15, lineno=19)
2025-05-02 21:04:43,155 - DEBUG - stack ['$48binary_subscr.15']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=20)
2025-05-02 21:04:43,155 - DEBUG - stack []
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=54, inst=LOAD_ATTR(arg=1, lineno=20)
2025-05-02 21:04:43,155 - DEBUG - stack ['$x52.16']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=56, inst=LOAD_CONST(arg=2, lineno=20)
2025-05-02 21:04:43,155 - DEBUG - stack ['$54load_attr.17']
2025-05-02 21:04:43,155 - DEBUG - dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=20)
2025-05-02 21:04:43,155 - DEBUG - stack ['$54load_attr.17', '$const56.18']
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=60, inst=STORE_FAST(arg=16, lineno=20)
2025-05-02 21:04:43,156 - DEBUG - stack ['$58binary_subscr.19']
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=21)
2025-05-02 21:04:43,156 - DEBUG - stack []
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=64, inst=LOAD_ATTR(arg=1, lineno=21)
2025-05-02 21:04:43,156 - DEBUG - stack ['$t_out62.20']
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=21)
2025-05-02 21:04:43,156 - DEBUG - stack ['$64load_attr.21']
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=21)
2025-05-02 21:04:43,156 - DEBUG - stack ['$64load_attr.21', '$const66.22']
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=70, inst=STORE_FAST(arg=17, lineno=21)
2025-05-02 21:04:43,156 - DEBUG - stack ['$68binary_subscr.23']
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=72, inst=LOAD_GLOBAL(arg=2, lineno=23)
2025-05-02 21:04:43,156 - DEBUG - stack []
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=17, lineno=23)
2025-05-02 21:04:43,156 - DEBUG - stack ['$72load_global.24']
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=23)
2025-05-02 21:04:43,156 - DEBUG - stack ['$72load_global.24', '$n_out74.25']
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=23)
2025-05-02 21:04:43,156 - DEBUG - stack ['$76call_function.26']
2025-05-02 21:04:43,156 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.27',), blockstack=(), npush=0)]
2025-05-02 21:04:43,156 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-05-02 21:04:43,156 - DEBUG - stack: ['$phi80.0']
2025-05-02 21:04:43,156 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=298, lineno=23)
2025-05-02 21:04:43,156 - DEBUG - stack ['$phi80.0']
2025-05-02 21:04:43,156 - DEBUG - end state. edges=[Edge(pc=382, stack=(), blockstack=(), npush=0), Edge(pc=84, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-05-02 21:04:43,156 - DEBUG - pending: deque([State(pc_initial=382 nstack_initial=0), State(pc_initial=84 nstack_initial=2)])
2025-05-02 21:04:43,156 - DEBUG - stack: []
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=382, inst=LOAD_CONST(arg=0, lineno=66)
2025-05-02 21:04:43,157 - DEBUG - stack []
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=384, inst=RETURN_VALUE(arg=None, lineno=66)
2025-05-02 21:04:43,157 - DEBUG - stack ['$const382.0']
2025-05-02 21:04:43,157 - DEBUG - end state. edges=[]
2025-05-02 21:04:43,157 - DEBUG - pending: deque([State(pc_initial=84 nstack_initial=2)])
2025-05-02 21:04:43,157 - DEBUG - stack: ['$phi84.0', '$phi84.1']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=84, inst=STORE_FAST(arg=18, lineno=23)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0', '$phi84.1']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=24)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=88, inst=LOAD_FAST(arg=18, lineno=24)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0', '$t_out86.2']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=24)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0', '$t_out86.2', '$t88.3']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=92, inst=STORE_FAST(arg=8, lineno=24)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0', '$90binary_subscr.4']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=94, inst=LOAD_GLOBAL(arg=0, lineno=27)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=96, inst=LOAD_FAST(arg=8, lineno=27)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0', '$94load_global.5']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=98, inst=CALL_FUNCTION(arg=1, lineno=27)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0', '$94load_global.5', '$time_register96.6']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=100, inst=STORE_FAST(arg=9, lineno=27)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0', '$98call_function.7']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=102, inst=LOAD_FAST(arg=5, lineno=30)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=104, inst=LOAD_FAST(arg=8, lineno=30)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0', '$scale102.8']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=9, lineno=30)
2025-05-02 21:04:43,157 - DEBUG - stack ['$phi84.0', '$scale102.8', '$time_register104.9']
2025-05-02 21:04:43,157 - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=30)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$scale102.8', '$time_register104.9', '$n106.10']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=110, inst=BINARY_MULTIPLY(arg=None, lineno=30)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$scale102.8', '$108binary_subtract.11']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=112, inst=STORE_FAST(arg=10, lineno=30)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$110binary_multiply.12']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=10, lineno=33)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=4, lineno=33)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$frac114.13']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=118, inst=BINARY_MULTIPLY(arg=None, lineno=33)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$frac114.13', '$num_table116.14']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=120, inst=STORE_FAST(arg=11, lineno=33)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$118binary_multiply.15']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=122, inst=LOAD_GLOBAL(arg=0, lineno=34)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=124, inst=LOAD_FAST(arg=11, lineno=34)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$122load_global.16']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=126, inst=CALL_FUNCTION(arg=1, lineno=34)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$122load_global.16', '$index_frac124.17']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=128, inst=STORE_FAST(arg=12, lineno=34)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$126call_function.18']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=130, inst=LOAD_FAST(arg=11, lineno=37)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=12, lineno=37)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$index_frac130.19']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=134, inst=BINARY_SUBTRACT(arg=None, lineno=37)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$index_frac130.19', '$offset132.20']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=136, inst=STORE_FAST(arg=13, lineno=37)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0', '$134binary_subtract.21']
2025-05-02 21:04:43,158 - DEBUG - dispatch pc=138, inst=LOAD_GLOBAL(arg=3, lineno=40)
2025-05-02 21:04:43,158 - DEBUG - stack ['$phi84.0']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=140, inst=LOAD_FAST(arg=9, lineno=40)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$138load_global.22']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=142, inst=LOAD_CONST(arg=3, lineno=40)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$n140.23']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=144, inst=BINARY_ADD(arg=None, lineno=40)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$n140.23', '$const142.24']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=146, inst=LOAD_FAST(arg=15, lineno=40)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=148, inst=LOAD_FAST(arg=12, lineno=40)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$nwin146.26']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=150, inst=BINARY_SUBTRACT(arg=None, lineno=40)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$nwin146.26', '$offset148.27']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=7, lineno=40)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$150binary_subtract.28']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=154, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$150binary_subtract.28', '$index_step152.29']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=156, inst=CALL_FUNCTION(arg=2, lineno=40)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$154binary_floor_divide.30']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=158, inst=STORE_FAST(arg=19, lineno=40)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$156call_function.31']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=160, inst=LOAD_GLOBAL(arg=4, lineno=41)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=162, inst=LOAD_FAST(arg=19, lineno=41)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$160load_global.32']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=41)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$160load_global.32', '$i_max162.33']
2025-05-02 21:04:43,159 - DEBUG - dispatch pc=166, inst=GET_ITER(arg=None, lineno=41)
2025-05-02 21:04:43,159 - DEBUG - stack ['$phi84.0', '$164call_function.34']
2025-05-02 21:04:43,159 - DEBUG - end state. edges=[Edge(pc=168, stack=('$phi84.0', '$166get_iter.35'), blockstack=(), npush=0)]
2025-05-02 21:04:43,159 - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=2)])
2025-05-02 21:04:43,159 - DEBUG - stack: ['$phi168.0', '$phi168.1']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=168, inst=FOR_ITER(arg=68, lineno=41)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi168.0', '$phi168.1']
2025-05-02 21:04:43,160 - DEBUG - end state. edges=[Edge(pc=238, stack=('$phi168.0',), blockstack=(), npush=0), Edge(pc=170, stack=('$phi168.0', '$phi168.1', '$168for_iter.3'), blockstack=(), npush=0)]
2025-05-02 21:04:43,160 - DEBUG - pending: deque([State(pc_initial=238 nstack_initial=1), State(pc_initial=170 nstack_initial=3)])
2025-05-02 21:04:43,160 - DEBUG - stack: ['$phi238.0']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=238, inst=LOAD_FAST(arg=5, lineno=50)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=10, lineno=50)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0', '$scale238.1']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=242, inst=BINARY_SUBTRACT(arg=None, lineno=50)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0', '$scale238.1', '$frac240.2']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=244, inst=STORE_FAST(arg=10, lineno=50)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0', '$242binary_subtract.3']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=10, lineno=53)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=248, inst=LOAD_FAST(arg=4, lineno=53)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0', '$frac246.4']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=250, inst=BINARY_MULTIPLY(arg=None, lineno=53)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0', '$frac246.4', '$num_table248.5']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=252, inst=STORE_FAST(arg=11, lineno=53)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0', '$250binary_multiply.6']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=254, inst=LOAD_GLOBAL(arg=0, lineno=54)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=11, lineno=54)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0', '$254load_global.7']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=258, inst=CALL_FUNCTION(arg=1, lineno=54)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0', '$254load_global.7', '$index_frac256.8']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=260, inst=STORE_FAST(arg=12, lineno=54)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0', '$258call_function.9']
2025-05-02 21:04:43,160 - DEBUG - dispatch pc=262, inst=LOAD_FAST(arg=11, lineno=57)
2025-05-02 21:04:43,160 - DEBUG - stack ['$phi238.0']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=264, inst=LOAD_FAST(arg=12, lineno=57)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$index_frac262.10']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=266, inst=BINARY_SUBTRACT(arg=None, lineno=57)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$index_frac262.10', '$offset264.11']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=268, inst=STORE_FAST(arg=13, lineno=57)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$266binary_subtract.12']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=270, inst=LOAD_GLOBAL(arg=3, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=272, inst=LOAD_FAST(arg=16, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=274, inst=LOAD_FAST(arg=9, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$n_orig272.14']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=276, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$n_orig272.14', '$n274.15']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=278, inst=LOAD_CONST(arg=3, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$276binary_subtract.16']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=280, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$276binary_subtract.16', '$const278.17']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=282, inst=LOAD_FAST(arg=15, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=284, inst=LOAD_FAST(arg=12, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$nwin282.19']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=286, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$nwin282.19', '$offset284.20']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=288, inst=LOAD_FAST(arg=7, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$286binary_subtract.21']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=290, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$286binary_subtract.21', '$index_step288.22']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=292, inst=CALL_FUNCTION(arg=2, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$290binary_floor_divide.23']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=294, inst=STORE_FAST(arg=21, lineno=60)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$292call_function.24']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=296, inst=LOAD_GLOBAL(arg=4, lineno=61)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0']
2025-05-02 21:04:43,161 - DEBUG - dispatch pc=298, inst=LOAD_FAST(arg=21, lineno=61)
2025-05-02 21:04:43,161 - DEBUG - stack ['$phi238.0', '$296load_global.25']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=300, inst=CALL_FUNCTION(arg=1, lineno=61)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi238.0', '$296load_global.25', '$k_max298.26']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=302, inst=GET_ITER(arg=None, lineno=61)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi238.0', '$300call_function.27']
2025-05-02 21:04:43,163 - DEBUG - end state. edges=[Edge(pc=304, stack=('$phi238.0', '$302get_iter.28'), blockstack=(), npush=0)]
2025-05-02 21:04:43,163 - DEBUG - pending: deque([State(pc_initial=170 nstack_initial=3), State(pc_initial=304 nstack_initial=2)])
2025-05-02 21:04:43,163 - DEBUG - stack: ['$phi170.0', '$phi170.1', '$phi170.2']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=170, inst=STORE_FAST(arg=20, lineno=41)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$phi170.2']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=172, inst=LOAD_FAST(arg=2, lineno=44)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=12, lineno=44)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=176, inst=LOAD_FAST(arg=20, lineno=44)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=178, inst=LOAD_FAST(arg=7, lineno=44)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$i176.5']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=44)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$i176.5', '$index_step178.6']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=44)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$180binary_multiply.7']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=44)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$182binary_add.8']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=186, inst=LOAD_FAST(arg=13, lineno=45)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=188, inst=LOAD_FAST(arg=3, lineno=45)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=12, lineno=45)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11']
2025-05-02 21:04:43,163 - DEBUG - dispatch pc=192, inst=LOAD_FAST(arg=20, lineno=45)
2025-05-02 21:04:43,163 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=45)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$i192.13']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=196, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$i192.13', '$index_step194.14']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=198, inst=BINARY_ADD(arg=None, lineno=45)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$196binary_multiply.15']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=200, inst=BINARY_SUBSCR(arg=None, lineno=45)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$198binary_add.16']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=202, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$200binary_subscr.17']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=204, inst=BINARY_ADD(arg=None, lineno=44)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$202binary_multiply.18']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=206, inst=STORE_FAST(arg=14, lineno=43)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$204binary_add.19']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=208, inst=LOAD_FAST(arg=6, lineno=47)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=210, inst=LOAD_FAST(arg=18, lineno=47)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=212, inst=DUP_TOP_TWO(arg=None, lineno=47)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=214, inst=BINARY_SUBSCR(arg=None, lineno=47)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$212dup_top_two.22', '$212dup_top_two.23']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=216, inst=LOAD_FAST(arg=14, lineno=47)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=47)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=220, inst=LOAD_FAST(arg=9, lineno=47)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=222, inst=LOAD_FAST(arg=20, lineno=47)
2025-05-02 21:04:43,164 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$n220.27']
2025-05-02 21:04:43,164 - DEBUG - dispatch pc=224, inst=BINARY_SUBTRACT(arg=None, lineno=47)
2025-05-02 21:04:43,165 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$n220.27', '$i222.28']
2025-05-02 21:04:43,165 - DEBUG - dispatch pc=226, inst=BINARY_SUBSCR(arg=None, lineno=47)
2025-05-02 21:04:43,165 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$224binary_subtract.29']
2025-05-02 21:04:43,165 - DEBUG - dispatch pc=228, inst=BINARY_MULTIPLY(arg=None, lineno=47)
2025-05-02 21:04:43,165 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$226binary_subscr.30']
2025-05-02 21:04:43,165 - DEBUG - dispatch pc=230, inst=INPLACE_ADD(arg=None, lineno=47)
2025-05-02 21:04:43,165 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$228binary_multiply.31']
2025-05-02 21:04:43,165 - DEBUG - dispatch pc=232, inst=ROT_THREE(arg=None, lineno=47)
2025-05-02 21:04:43,165 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$230inplace_add.32']
2025-05-02 21:04:43,165 - DEBUG - dispatch pc=234, inst=STORE_SUBSCR(arg=None, lineno=47)
2025-05-02 21:04:43,165 - DEBUG - stack ['$phi170.0', '$phi170.1', '$230inplace_add.32', '$y208.20', '$t210.21']
2025-05-02 21:04:43,165 - DEBUG - dispatch pc=236, inst=JUMP_ABSOLUTE(arg=168, lineno=47)
2025-05-02 21:04:43,165 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 21:04:43,165 - DEBUG - end state. edges=[Edge(pc=168, stack=('$phi170.0', '$phi170.1'), blockstack=(), npush=0)]
2025-05-02 21:04:43,165 - DEBUG - pending: deque([State(pc_initial=304 nstack_initial=2), State(pc_initial=168 nstack_initial=2)])
2025-05-02 21:04:43,165 - DEBUG - stack: ['$phi304.0', '$phi304.1']
2025-05-02 21:04:43,165 - DEBUG - dispatch pc=304, inst=FOR_ITER(arg=74, lineno=61)
2025-05-02 21:04:43,165 - DEBUG - stack ['$phi304.0', '$phi304.1']
2025-05-02 21:04:43,165 - DEBUG - end state. edges=[Edge(pc=380, stack=('$phi304.0',), blockstack=(), npush=0), Edge(pc=306, stack=('$phi304.0', '$phi304.1', '$304for_iter.3'), blockstack=(), npush=0)]
2025-05-02 21:04:43,165 - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=2), State(pc_initial=380 nstack_initial=1), State(pc_initial=306 nstack_initial=3)])
2025-05-02 21:04:43,165 - DEBUG - pending: deque([State(pc_initial=380 nstack_initial=1), State(pc_initial=306 nstack_initial=3)])
2025-05-02 21:04:43,165 - DEBUG - stack: ['$phi380.0']
2025-05-02 21:04:43,165 - DEBUG - dispatch pc=380, inst=JUMP_ABSOLUTE(arg=80, lineno=66)
2025-05-02 21:04:43,165 - DEBUG - stack ['$phi380.0']
2025-05-02 21:04:43,165 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi380.0',), blockstack=(), npush=0)]
2025-05-02 21:04:43,165 - DEBUG - pending: deque([State(pc_initial=306 nstack_initial=3), State(pc_initial=80 nstack_initial=1)])
2025-05-02 21:04:43,165 - DEBUG - stack: ['$phi306.0', '$phi306.1', '$phi306.2']
2025-05-02 21:04:43,165 - DEBUG - dispatch pc=306, inst=STORE_FAST(arg=22, lineno=61)
2025-05-02 21:04:43,165 - DEBUG - stack ['$phi306.0', '$phi306.1', '$phi306.2']
2025-05-02 21:04:43,165 - DEBUG - dispatch pc=308, inst=LOAD_FAST(arg=2, lineno=63)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=310, inst=LOAD_FAST(arg=12, lineno=63)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=312, inst=LOAD_FAST(arg=22, lineno=63)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=314, inst=LOAD_FAST(arg=7, lineno=63)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$k312.5']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=316, inst=BINARY_MULTIPLY(arg=None, lineno=63)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$k312.5', '$index_step314.6']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=318, inst=BINARY_ADD(arg=None, lineno=63)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$316binary_multiply.7']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=320, inst=BINARY_SUBSCR(arg=None, lineno=63)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$318binary_add.8']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=322, inst=LOAD_FAST(arg=13, lineno=64)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=324, inst=LOAD_FAST(arg=3, lineno=64)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=326, inst=LOAD_FAST(arg=12, lineno=64)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=328, inst=LOAD_FAST(arg=22, lineno=64)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=330, inst=LOAD_FAST(arg=7, lineno=64)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$k328.13']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=332, inst=BINARY_MULTIPLY(arg=None, lineno=64)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$k328.13', '$index_step330.14']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=334, inst=BINARY_ADD(arg=None, lineno=64)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$332binary_multiply.15']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=336, inst=BINARY_SUBSCR(arg=None, lineno=64)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$334binary_add.16']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=338, inst=BINARY_MULTIPLY(arg=None, lineno=64)
2025-05-02 21:04:43,166 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$336binary_subscr.17']
2025-05-02 21:04:43,166 - DEBUG - dispatch pc=340, inst=BINARY_ADD(arg=None, lineno=63)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$338binary_multiply.18']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=342, inst=STORE_FAST(arg=14, lineno=62)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$340binary_add.19']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=344, inst=LOAD_FAST(arg=6, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=346, inst=LOAD_FAST(arg=18, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=348, inst=DUP_TOP_TWO(arg=None, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=350, inst=BINARY_SUBSCR(arg=None, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$348dup_top_two.22', '$348dup_top_two.23']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=352, inst=LOAD_FAST(arg=14, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=354, inst=LOAD_FAST(arg=0, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=356, inst=LOAD_FAST(arg=9, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=358, inst=LOAD_FAST(arg=22, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$n356.27']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=360, inst=BINARY_ADD(arg=None, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$n356.27', '$k358.28']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=362, inst=LOAD_CONST(arg=3, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$360binary_add.29']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=364, inst=BINARY_ADD(arg=None, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$360binary_add.29', '$const362.30']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=366, inst=BINARY_SUBSCR(arg=None, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$364binary_add.31']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=368, inst=BINARY_MULTIPLY(arg=None, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$366binary_subscr.32']
2025-05-02 21:04:43,167 - DEBUG - dispatch pc=370, inst=INPLACE_ADD(arg=None, lineno=66)
2025-05-02 21:04:43,167 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$368binary_multiply.33']
2025-05-02 21:04:43,168 - DEBUG - dispatch pc=372, inst=ROT_THREE(arg=None, lineno=66)
2025-05-02 21:04:43,168 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$370inplace_add.34']
2025-05-02 21:04:43,168 - DEBUG - dispatch pc=374, inst=STORE_SUBSCR(arg=None, lineno=66)
2025-05-02 21:04:43,168 - DEBUG - stack ['$phi306.0', '$phi306.1', '$370inplace_add.34', '$y344.20', '$t346.21']
2025-05-02 21:04:43,168 - DEBUG - dispatch pc=376, inst=JUMP_ABSOLUTE(arg=304, lineno=66)
2025-05-02 21:04:43,168 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 21:04:43,168 - DEBUG - end state. edges=[Edge(pc=304, stack=('$phi306.0', '$phi306.1'), blockstack=(), npush=0)]
2025-05-02 21:04:43,168 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=304 nstack_initial=2)])
2025-05-02 21:04:43,168 - DEBUG - pending: deque([State(pc_initial=304 nstack_initial=2)])
2025-05-02 21:04:43,168 - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-02 21:04:43,168 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=84 nstack_initial=2): {'$phi84.1'},
             State(pc_initial=168 nstack_initial=2): {'$phi168.1'},
             State(pc_initial=170 nstack_initial=3): {'$phi170.2'},
             State(pc_initial=238 nstack_initial=1): set(),
             State(pc_initial=304 nstack_initial=2): {'$phi304.1'},
             State(pc_initial=306 nstack_initial=3): {'$phi306.2'},
             State(pc_initial=380 nstack_initial=1): set(),
             State(pc_initial=382 nstack_initial=0): set()})
2025-05-02 21:04:43,168 - DEBUG - defmap: {'$phi168.1': State(pc_initial=84 nstack_initial=2),
 '$phi170.2': State(pc_initial=168 nstack_initial=2),
 '$phi304.1': State(pc_initial=238 nstack_initial=1),
 '$phi306.2': State(pc_initial=304 nstack_initial=2),
 '$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi84.1': State(pc_initial=80 nstack_initial=1)}
2025-05-02 21:04:43,168 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi170.0',
                            State(pc_initial=170 nstack_initial=3)),
                           ('$phi84.0', State(pc_initial=84 nstack_initial=2))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2)),
                           ('$phi170.1',
                            State(pc_initial=170 nstack_initial=3))},
             '$phi170.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.1': {('$phi168.1',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi304.0': {('$phi238.0',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi306.0',
                            State(pc_initial=306 nstack_initial=3))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi306.1',
                            State(pc_initial=306 nstack_initial=3))},
             '$phi306.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.1': {('$phi304.1',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi380.0',
                           State(pc_initial=380 nstack_initial=1))},
             '$phi84.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:04:43,169 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2)),
                           ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2)),
                           ('$phi168.1',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi304.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2)),
                           ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi304.1',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:04:43,169 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:04:43,169 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:04:43,170 - DEBUG - keep phismap: {'$phi168.1': {('$166get_iter.35', State(pc_initial=84 nstack_initial=2))},
 '$phi170.2': {('$168for_iter.3', State(pc_initial=168 nstack_initial=2))},
 '$phi304.1': {('$302get_iter.28', State(pc_initial=238 nstack_initial=1))},
 '$phi306.2': {('$304for_iter.3', State(pc_initial=304 nstack_initial=2))},
 '$phi80.0': {('$78get_iter.27', State(pc_initial=0 nstack_initial=0))},
 '$phi84.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-05-02 21:04:43,170 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.27'},
             State(pc_initial=80 nstack_initial=1): {'$phi84.1': '$80for_iter.2'},
             State(pc_initial=84 nstack_initial=2): {'$phi168.1': '$166get_iter.35'},
             State(pc_initial=168 nstack_initial=2): {'$phi170.2': '$168for_iter.3'},
             State(pc_initial=238 nstack_initial=1): {'$phi304.1': '$302get_iter.28'},
             State(pc_initial=304 nstack_initial=2): {'$phi306.2': '$304for_iter.3'}})
2025-05-02 21:04:43,170 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-02 21:04:43,170 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$scale4.1'}), (6, {'res': '$num_table6.2'}), (8, {'lhs': '$scale4.1', 'rhs': '$num_table6.2', 'res': '$8binary_multiply.3'}), (10, {'func': '$2load_global.0', 'args': ['$8binary_multiply.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4'}), (14, {'res': '$const14.5'}), (16, {'value': '$const14.5'}), (18, {'res': '$const18.6'}), (20, {'value': '$const18.6'}), (22, {'res': '$const22.7'}), (24, {'value': '$const22.7'}), (26, {'res': '$const26.8'}), (28, {'value': '$const26.8'}), (30, {'res': '$const30.9'}), (32, {'value': '$const30.9'}), (34, {'res': '$const34.10'}), (36, {'value': '$const34.10'}), (38, {'res': '$const38.11'}), (40, {'value': '$const38.11'}), (42, {'res': '$interp_win42.12'}), (44, {'item': '$interp_win42.12', 'res': '$44load_attr.13'}), (46, {'res': '$const46.14'}), (48, {'index': '$const46.14', 'target': '$44load_attr.13', 'res': '$48binary_subscr.15'}), (50, {'value': '$48binary_subscr.15'}), (52, {'res': '$x52.16'}), (54, {'item': '$x52.16', 'res': '$54load_attr.17'}), (56, {'res': '$const56.18'}), (58, {'index': '$const56.18', 'target': '$54load_attr.17', 'res': '$58binary_subscr.19'}), (60, {'value': '$58binary_subscr.19'}), (62, {'res': '$t_out62.20'}), (64, {'item': '$t_out62.20', 'res': '$64load_attr.21'}), (66, {'res': '$const66.22'}), (68, {'index': '$const66.22', 'target': '$64load_attr.21', 'res': '$68binary_subscr.23'}), (70, {'value': '$68binary_subscr.23'}), (72, {'res': '$72load_global.24'}), (74, {'res': '$n_out74.25'}), (76, {'func': '$72load_global.24', 'args': ['$n_out74.25'], 'res': '$76call_function.26'}), (78, {'value': '$76call_function.26', 'res': '$78get_iter.27'})), outgoing_phis={'$phi80.0': '$78get_iter.27'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.27',)})
2025-05-02 21:04:43,170 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi84.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={382: (), 84: ('$phi80.0', '$80for_iter.2')})
2025-05-02 21:04:43,170 - DEBUG - block_infos State(pc_initial=84 nstack_initial=2):
AdaptBlockInfo(insts=((84, {'value': '$phi84.1'}), (86, {'res': '$t_out86.2'}), (88, {'res': '$t88.3'}), (90, {'index': '$t88.3', 'target': '$t_out86.2', 'res': '$90binary_subscr.4'}), (92, {'value': '$90binary_subscr.4'}), (94, {'res': '$94load_global.5'}), (96, {'res': '$time_register96.6'}), (98, {'func': '$94load_global.5', 'args': ['$time_register96.6'], 'res': '$98call_function.7'}), (100, {'value': '$98call_function.7'}), (102, {'res': '$scale102.8'}), (104, {'res': '$time_register104.9'}), (106, {'res': '$n106.10'}), (108, {'lhs': '$time_register104.9', 'rhs': '$n106.10', 'res': '$108binary_subtract.11'}), (110, {'lhs': '$scale102.8', 'rhs': '$108binary_subtract.11', 'res': '$110binary_multiply.12'}), (112, {'value': '$110binary_multiply.12'}), (114, {'res': '$frac114.13'}), (116, {'res': '$num_table116.14'}), (118, {'lhs': '$frac114.13', 'rhs': '$num_table116.14', 'res': '$118binary_multiply.15'}), (120, {'value': '$118binary_multiply.15'}), (122, {'res': '$122load_global.16'}), (124, {'res': '$index_frac124.17'}), (126, {'func': '$122load_global.16', 'args': ['$index_frac124.17'], 'res': '$126call_function.18'}), (128, {'value': '$126call_function.18'}), (130, {'res': '$index_frac130.19'}), (132, {'res': '$offset132.20'}), (134, {'lhs': '$index_frac130.19', 'rhs': '$offset132.20', 'res': '$134binary_subtract.21'}), (136, {'value': '$134binary_subtract.21'}), (138, {'res': '$138load_global.22'}), (140, {'res': '$n140.23'}), (142, {'res': '$const142.24'}), (144, {'lhs': '$n140.23', 'rhs': '$const142.24', 'res': '$144binary_add.25'}), (146, {'res': '$nwin146.26'}), (148, {'res': '$offset148.27'}), (150, {'lhs': '$nwin146.26', 'rhs': '$offset148.27', 'res': '$150binary_subtract.28'}), (152, {'res': '$index_step152.29'}), (154, {'lhs': '$150binary_subtract.28', 'rhs': '$index_step152.29', 'res': '$154binary_floor_divide.30'}), (156, {'func': '$138load_global.22', 'args': ['$144binary_add.25', '$154binary_floor_divide.30'], 'res': '$156call_function.31'}), (158, {'value': '$156call_function.31'}), (160, {'res': '$160load_global.32'}), (162, {'res': '$i_max162.33'}), (164, {'func': '$160load_global.32', 'args': ['$i_max162.33'], 'res': '$164call_function.34'}), (166, {'value': '$164call_function.34', 'res': '$166get_iter.35'})), outgoing_phis={'$phi168.1': '$166get_iter.35'}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi84.0', '$166get_iter.35')})
2025-05-02 21:04:43,170 - DEBUG - block_infos State(pc_initial=168 nstack_initial=2):
AdaptBlockInfo(insts=((168, {'iterator': '$phi168.1', 'pair': '$168for_iter.2', 'indval': '$168for_iter.3', 'pred': '$168for_iter.4'}),), outgoing_phis={'$phi170.2': '$168for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={238: ('$phi168.0',), 170: ('$phi168.0', '$phi168.1', '$168for_iter.3')})
2025-05-02 21:04:43,171 - DEBUG - block_infos State(pc_initial=170 nstack_initial=3):
AdaptBlockInfo(insts=((170, {'value': '$phi170.2'}), (172, {'res': '$interp_win172.3'}), (174, {'res': '$offset174.4'}), (176, {'res': '$i176.5'}), (178, {'res': '$index_step178.6'}), (180, {'lhs': '$i176.5', 'rhs': '$index_step178.6', 'res': '$180binary_multiply.7'}), (182, {'lhs': '$offset174.4', 'rhs': '$180binary_multiply.7', 'res': '$182binary_add.8'}), (184, {'index': '$182binary_add.8', 'target': '$interp_win172.3', 'res': '$184binary_subscr.9'}), (186, {'res': '$eta186.10'}), (188, {'res': '$interp_delta188.11'}), (190, {'res': '$offset190.12'}), (192, {'res': '$i192.13'}), (194, {'res': '$index_step194.14'}), (196, {'lhs': '$i192.13', 'rhs': '$index_step194.14', 'res': '$196binary_multiply.15'}), (198, {'lhs': '$offset190.12', 'rhs': '$196binary_multiply.15', 'res': '$198binary_add.16'}), (200, {'index': '$198binary_add.16', 'target': '$interp_delta188.11', 'res': '$200binary_subscr.17'}), (202, {'lhs': '$eta186.10', 'rhs': '$200binary_subscr.17', 'res': '$202binary_multiply.18'}), (204, {'lhs': '$184binary_subscr.9', 'rhs': '$202binary_multiply.18', 'res': '$204binary_add.19'}), (206, {'value': '$204binary_add.19'}), (208, {'res': '$y208.20'}), (210, {'res': '$t210.21'}), (212, {'orig': ['$y208.20', '$t210.21'], 'duped': ['$212dup_top_two.22', '$212dup_top_two.23']}), (214, {'index': '$212dup_top_two.23', 'target': '$212dup_top_two.22', 'res': '$214binary_subscr.24'}), (216, {'res': '$weight216.25'}), (218, {'res': '$x218.26'}), (220, {'res': '$n220.27'}), (222, {'res': '$i222.28'}), (224, {'lhs': '$n220.27', 'rhs': '$i222.28', 'res': '$224binary_subtract.29'}), (226, {'index': '$224binary_subtract.29', 'target': '$x218.26', 'res': '$226binary_subscr.30'}), (228, {'lhs': '$weight216.25', 'rhs': '$226binary_subscr.30', 'res': '$228binary_multiply.31'}), (230, {'lhs': '$214binary_subscr.24', 'rhs': '$228binary_multiply.31', 'res': '$230inplace_add.32'}), (234, {'target': '$y208.20', 'index': '$t210.21', 'value': '$230inplace_add.32'}), (236, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi170.0', '$phi170.1')})
2025-05-02 21:04:43,171 - DEBUG - block_infos State(pc_initial=238 nstack_initial=1):
AdaptBlockInfo(insts=((238, {'res': '$scale238.1'}), (240, {'res': '$frac240.2'}), (242, {'lhs': '$scale238.1', 'rhs': '$frac240.2', 'res': '$242binary_subtract.3'}), (244, {'value': '$242binary_subtract.3'}), (246, {'res': '$frac246.4'}), (248, {'res': '$num_table248.5'}), (250, {'lhs': '$frac246.4', 'rhs': '$num_table248.5', 'res': '$250binary_multiply.6'}), (252, {'value': '$250binary_multiply.6'}), (254, {'res': '$254load_global.7'}), (256, {'res': '$index_frac256.8'}), (258, {'func': '$254load_global.7', 'args': ['$index_frac256.8'], 'res': '$258call_function.9'}), (260, {'value': '$258call_function.9'}), (262, {'res': '$index_frac262.10'}), (264, {'res': '$offset264.11'}), (266, {'lhs': '$index_frac262.10', 'rhs': '$offset264.11', 'res': '$266binary_subtract.12'}), (268, {'value': '$266binary_subtract.12'}), (270, {'res': '$270load_global.13'}), (272, {'res': '$n_orig272.14'}), (274, {'res': '$n274.15'}), (276, {'lhs': '$n_orig272.14', 'rhs': '$n274.15', 'res': '$276binary_subtract.16'}), (278, {'res': '$const278.17'}), (280, {'lhs': '$276binary_subtract.16', 'rhs': '$const278.17', 'res': '$280binary_subtract.18'}), (282, {'res': '$nwin282.19'}), (284, {'res': '$offset284.20'}), (286, {'lhs': '$nwin282.19', 'rhs': '$offset284.20', 'res': '$286binary_subtract.21'}), (288, {'res': '$index_step288.22'}), (290, {'lhs': '$286binary_subtract.21', 'rhs': '$index_step288.22', 'res': '$290binary_floor_divide.23'}), (292, {'func': '$270load_global.13', 'args': ['$280binary_subtract.18', '$290binary_floor_divide.23'], 'res': '$292call_function.24'}), (294, {'value': '$292call_function.24'}), (296, {'res': '$296load_global.25'}), (298, {'res': '$k_max298.26'}), (300, {'func': '$296load_global.25', 'args': ['$k_max298.26'], 'res': '$300call_function.27'}), (302, {'value': '$300call_function.27', 'res': '$302get_iter.28'})), outgoing_phis={'$phi304.1': '$302get_iter.28'}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: ('$phi238.0', '$302get_iter.28')})
2025-05-02 21:04:43,171 - DEBUG - block_infos State(pc_initial=304 nstack_initial=2):
AdaptBlockInfo(insts=((304, {'iterator': '$phi304.1', 'pair': '$304for_iter.2', 'indval': '$304for_iter.3', 'pred': '$304for_iter.4'}),), outgoing_phis={'$phi306.2': '$304for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={380: ('$phi304.0',), 306: ('$phi304.0', '$phi304.1', '$304for_iter.3')})
2025-05-02 21:04:43,171 - DEBUG - block_infos State(pc_initial=306 nstack_initial=3):
AdaptBlockInfo(insts=((306, {'value': '$phi306.2'}), (308, {'res': '$interp_win308.3'}), (310, {'res': '$offset310.4'}), (312, {'res': '$k312.5'}), (314, {'res': '$index_step314.6'}), (316, {'lhs': '$k312.5', 'rhs': '$index_step314.6', 'res': '$316binary_multiply.7'}), (318, {'lhs': '$offset310.4', 'rhs': '$316binary_multiply.7', 'res': '$318binary_add.8'}), (320, {'index': '$318binary_add.8', 'target': '$interp_win308.3', 'res': '$320binary_subscr.9'}), (322, {'res': '$eta322.10'}), (324, {'res': '$interp_delta324.11'}), (326, {'res': '$offset326.12'}), (328, {'res': '$k328.13'}), (330, {'res': '$index_step330.14'}), (332, {'lhs': '$k328.13', 'rhs': '$index_step330.14', 'res': '$332binary_multiply.15'}), (334, {'lhs': '$offset326.12', 'rhs': '$332binary_multiply.15', 'res': '$334binary_add.16'}), (336, {'index': '$334binary_add.16', 'target': '$interp_delta324.11', 'res': '$336binary_subscr.17'}), (338, {'lhs': '$eta322.10', 'rhs': '$336binary_subscr.17', 'res': '$338binary_multiply.18'}), (340, {'lhs': '$320binary_subscr.9', 'rhs': '$338binary_multiply.18', 'res': '$340binary_add.19'}), (342, {'value': '$340binary_add.19'}), (344, {'res': '$y344.20'}), (346, {'res': '$t346.21'}), (348, {'orig': ['$y344.20', '$t346.21'], 'duped': ['$348dup_top_two.22', '$348dup_top_two.23']}), (350, {'index': '$348dup_top_two.23', 'target': '$348dup_top_two.22', 'res': '$350binary_subscr.24'}), (352, {'res': '$weight352.25'}), (354, {'res': '$x354.26'}), (356, {'res': '$n356.27'}), (358, {'res': '$k358.28'}), (360, {'lhs': '$n356.27', 'rhs': '$k358.28', 'res': '$360binary_add.29'}), (362, {'res': '$const362.30'}), (364, {'lhs': '$360binary_add.29', 'rhs': '$const362.30', 'res': '$364binary_add.31'}), (366, {'index': '$364binary_add.31', 'target': '$x354.26', 'res': '$366binary_subscr.32'}), (368, {'lhs': '$weight352.25', 'rhs': '$366binary_subscr.32', 'res': '$368binary_multiply.33'}), (370, {'lhs': '$350binary_subscr.24', 'rhs': '$368binary_multiply.33', 'res': '$370inplace_add.34'}), (374, {'target': '$y344.20', 'index': '$t346.21', 'value': '$370inplace_add.34'}), (376, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: ('$phi306.0', '$phi306.1')})
2025-05-02 21:04:43,171 - DEBUG - block_infos State(pc_initial=380 nstack_initial=1):
AdaptBlockInfo(insts=((380, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi380.0',)})
2025-05-02 21:04:43,171 - DEBUG - block_infos State(pc_initial=382 nstack_initial=0):
AdaptBlockInfo(insts=((382, {'res': '$const382.0'}), (384, {'retval': '$const382.0', 'castval': '$384return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-02 21:04:43,173 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    t_out = arg(1, name=t_out)               ['t_out']
    interp_win = arg(2, name=interp_win)     ['interp_win']
    interp_delta = arg(3, name=interp_delta) ['interp_delta']
    num_table = arg(4, name=num_table)       ['num_table']
    scale = arg(5, name=scale)               ['scale']
    y = arg(6, name=y)                       ['y']
    $2load_global.0 = global(int: <class 'int'>) ['$2load_global.0']
    $8binary_multiply.3 = scale * num_table  ['$8binary_multiply.3', 'num_table', 'scale']
    index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8binary_multiply.3', 'index_step']
    time_register = const(float, 0.0)        ['time_register']
    n = const(int, 0)                        ['n']
    frac = const(float, 0.0)                 ['frac']
    index_frac = const(float, 0.0)           ['index_frac']
    offset = const(int, 0)                   ['offset']
    eta = const(float, 0.0)                  ['eta']
    weight = const(float, 0.0)               ['weight']
    $44load_attr.13 = getattr(value=interp_win, attr=shape) ['$44load_attr.13', 'interp_win']
    $const46.14 = const(int, 0)              ['$const46.14']
    nwin = getitem(value=$44load_attr.13, index=$const46.14, fn=<built-in function getitem>) ['$44load_attr.13', '$const46.14', 'nwin']
    $54load_attr.17 = getattr(value=x, attr=shape) ['$54load_attr.17', 'x']
    $const56.18 = const(int, 0)              ['$const56.18']
    n_orig = getitem(value=$54load_attr.17, index=$const56.18, fn=<built-in function getitem>) ['$54load_attr.17', '$const56.18', 'n_orig']
    $64load_attr.21 = getattr(value=t_out, attr=shape) ['$64load_attr.21', 't_out']
    $const66.22 = const(int, 0)              ['$const66.22']
    n_out = getitem(value=$64load_attr.21, index=$const66.22, fn=<built-in function getitem>) ['$64load_attr.21', '$const66.22', 'n_out']
    $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>) ['$72load_global.24']
    $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.24', '$76call_function.26', 'n_out']
    $78get_iter.27 = getiter(value=$76call_function.26) ['$76call_function.26', '$78get_iter.27']
    $phi80.0 = $78get_iter.27                ['$78get_iter.27', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi84.1 = $80for_iter.2                 ['$80for_iter.2', '$phi84.1']
    branch $80for_iter.3, 84, 382            ['$80for_iter.3']
label 84:
    t = $phi84.1                             ['$phi84.1', 't']
    time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>) ['t', 't_out', 'time_register']
    $94load_global.5 = global(int: <class 'int'>) ['$94load_global.5']
    n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None) ['$94load_global.5', 'n', 'time_register']
    $108binary_subtract.11 = time_register - n ['$108binary_subtract.11', 'n', 'time_register']
    frac = scale * $108binary_subtract.11    ['$108binary_subtract.11', 'frac', 'scale']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $122load_global.16 = global(int: <class 'int'>) ['$122load_global.16']
    offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.16', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $138load_global.22 = global(min: <built-in function min>) ['$138load_global.22']
    $const142.24 = const(int, 1)             ['$const142.24']
    $144binary_add.25 = n + $const142.24     ['$144binary_add.25', '$const142.24', 'n']
    $150binary_subtract.28 = nwin - offset   ['$150binary_subtract.28', 'nwin', 'offset']
    $154binary_floor_divide.30 = $150binary_subtract.28 // index_step ['$150binary_subtract.28', '$154binary_floor_divide.30', 'index_step']
    i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None) ['$138load_global.22', '$144binary_add.25', '$154binary_floor_divide.30', 'i_max']
    $160load_global.32 = global(range: <class 'range'>) ['$160load_global.32']
    $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None) ['$160load_global.32', '$164call_function.34', 'i_max']
    $166get_iter.35 = getiter(value=$164call_function.34) ['$164call_function.34', '$166get_iter.35']
    $phi168.1 = $166get_iter.35              ['$166get_iter.35', '$phi168.1']
    jump 168                                 []
label 168:
    $168for_iter.2 = iternext(value=$phi168.1) ['$168for_iter.2', '$phi168.1']
    $168for_iter.3 = pair_first(value=$168for_iter.2) ['$168for_iter.2', '$168for_iter.3']
    $168for_iter.4 = pair_second(value=$168for_iter.2) ['$168for_iter.2', '$168for_iter.4']
    $phi170.2 = $168for_iter.3               ['$168for_iter.3', '$phi170.2']
    branch $168for_iter.4, 170, 238          ['$168for_iter.4']
label 170:
    i = $phi170.2                            ['$phi170.2', 'i']
    $180binary_multiply.7 = i * index_step   ['$180binary_multiply.7', 'i', 'index_step']
    $182binary_add.8 = offset + $180binary_multiply.7 ['$180binary_multiply.7', '$182binary_add.8', 'offset']
    $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>) ['$182binary_add.8', '$184binary_subscr.9', 'interp_win']
    $196binary_multiply.15 = i * index_step  ['$196binary_multiply.15', 'i', 'index_step']
    $198binary_add.16 = offset + $196binary_multiply.15 ['$196binary_multiply.15', '$198binary_add.16', 'offset']
    $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>) ['$198binary_add.16', '$200binary_subscr.17', 'interp_delta']
    $202binary_multiply.18 = eta * $200binary_subscr.17 ['$200binary_subscr.17', '$202binary_multiply.18', 'eta']
    weight = $184binary_subscr.9 + $202binary_multiply.18 ['$184binary_subscr.9', '$202binary_multiply.18', 'weight']
    $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>) ['$214binary_subscr.24', 't', 'y']
    $224binary_subtract.29 = n - i           ['$224binary_subtract.29', 'i', 'n']
    $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>) ['$224binary_subtract.29', '$226binary_subscr.30', 'x']
    $228binary_multiply.31 = weight * $226binary_subscr.30 ['$226binary_subscr.30', '$228binary_multiply.31', 'weight']
    $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined) ['$214binary_subscr.24', '$228binary_multiply.31', '$230inplace_add.32']
    y[t] = $230inplace_add.32                ['$230inplace_add.32', 't', 'y']
    jump 168                                 []
label 238:
    $242binary_subtract.3 = scale - frac     ['$242binary_subtract.3', 'frac', 'scale']
    frac = $242binary_subtract.3             ['$242binary_subtract.3', 'frac']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $254load_global.7 = global(int: <class 'int'>) ['$254load_global.7']
    offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None) ['$254load_global.7', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $270load_global.13 = global(min: <built-in function min>) ['$270load_global.13']
    $276binary_subtract.16 = n_orig - n      ['$276binary_subtract.16', 'n', 'n_orig']
    $const278.17 = const(int, 1)             ['$const278.17']
    $280binary_subtract.18 = $276binary_subtract.16 - $const278.17 ['$276binary_subtract.16', '$280binary_subtract.18', '$const278.17']
    $286binary_subtract.21 = nwin - offset   ['$286binary_subtract.21', 'nwin', 'offset']
    $290binary_floor_divide.23 = $286binary_subtract.21 // index_step ['$286binary_subtract.21', '$290binary_floor_divide.23', 'index_step']
    k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None) ['$270load_global.13', '$280binary_subtract.18', '$290binary_floor_divide.23', 'k_max']
    $296load_global.25 = global(range: <class 'range'>) ['$296load_global.25']
    $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None) ['$296load_global.25', '$300call_function.27', 'k_max']
    $302get_iter.28 = getiter(value=$300call_function.27) ['$300call_function.27', '$302get_iter.28']
    $phi304.1 = $302get_iter.28              ['$302get_iter.28', '$phi304.1']
    jump 304                                 []
label 304:
    $304for_iter.2 = iternext(value=$phi304.1) ['$304for_iter.2', '$phi304.1']
    $304for_iter.3 = pair_first(value=$304for_iter.2) ['$304for_iter.2', '$304for_iter.3']
    $304for_iter.4 = pair_second(value=$304for_iter.2) ['$304for_iter.2', '$304for_iter.4']
    $phi306.2 = $304for_iter.3               ['$304for_iter.3', '$phi306.2']
    branch $304for_iter.4, 306, 380          ['$304for_iter.4']
label 306:
    k = $phi306.2                            ['$phi306.2', 'k']
    $316binary_multiply.7 = k * index_step   ['$316binary_multiply.7', 'index_step', 'k']
    $318binary_add.8 = offset + $316binary_multiply.7 ['$316binary_multiply.7', '$318binary_add.8', 'offset']
    $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>) ['$318binary_add.8', '$320binary_subscr.9', 'interp_win']
    $332binary_multiply.15 = k * index_step  ['$332binary_multiply.15', 'index_step', 'k']
    $334binary_add.16 = offset + $332binary_multiply.15 ['$332binary_multiply.15', '$334binary_add.16', 'offset']
    $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>) ['$334binary_add.16', '$336binary_subscr.17', 'interp_delta']
    $338binary_multiply.18 = eta * $336binary_subscr.17 ['$336binary_subscr.17', '$338binary_multiply.18', 'eta']
    weight = $320binary_subscr.9 + $338binary_multiply.18 ['$320binary_subscr.9', '$338binary_multiply.18', 'weight']
    $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>) ['$350binary_subscr.24', 't', 'y']
    $360binary_add.29 = n + k                ['$360binary_add.29', 'k', 'n']
    $const362.30 = const(int, 1)             ['$const362.30']
    $364binary_add.31 = $360binary_add.29 + $const362.30 ['$360binary_add.29', '$364binary_add.31', '$const362.30']
    $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>) ['$364binary_add.31', '$366binary_subscr.32', 'x']
    $368binary_multiply.33 = weight * $366binary_subscr.32 ['$366binary_subscr.32', '$368binary_multiply.33', 'weight']
    $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined) ['$350binary_subscr.24', '$368binary_multiply.33', '$370inplace_add.34']
    y[t] = $370inplace_add.34                ['$370inplace_add.34', 't', 'y']
    jump 304                                 []
label 380:
    jump 80                                  []
label 382:
    $const382.0 = const(NoneType, None)      ['$const382.0']
    $384return_value.1 = cast(value=$const382.0) ['$384return_value.1', '$const382.0']
    return $384return_value.1                ['$384return_value.1']

2025-05-02 21:04:43,190 - DEBUG - ==== SSA block analysis pass on 0
2025-05-02 21:04:43,190 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA008A14F0>
2025-05-02 21:04:43,190 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,191 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,191 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,191 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,191 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,191 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,191 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,191 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,191 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,191 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,191 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,191 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,191 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,191 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,191 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,191 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,191 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,191 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,191 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,191 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,192 - DEBUG - ==== SSA block analysis pass on 80
2025-05-02 21:04:43,192 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA008A14F0>
2025-05-02 21:04:43,192 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,192 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,192 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,192 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,192 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,192 - DEBUG - ==== SSA block analysis pass on 84
2025-05-02 21:04:43,192 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA008A14F0>
2025-05-02 21:04:43,192 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,192 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,192 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,192 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,192 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:04:43,192 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:04:43,192 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,192 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,192 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,192 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:04:43,192 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,192 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,192 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:04:43,192 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:04:43,192 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,192 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,192 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,193 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,193 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,193 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,193 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,193 - DEBUG - ==== SSA block analysis pass on 168
2025-05-02 21:04:43,193 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA008A14F0>
2025-05-02 21:04:43,193 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,193 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,193 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,193 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,193 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,193 - DEBUG - ==== SSA block analysis pass on 170
2025-05-02 21:04:43,193 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA008A14F0>
2025-05-02 21:04:43,193 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,193 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,193 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:04:43,193 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,193 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,193 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:04:43,193 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,193 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:04:43,193 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,193 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,193 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:04:43,193 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,193 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,193 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,193 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,194 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,194 - DEBUG - ==== SSA block analysis pass on 238
2025-05-02 21:04:43,194 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA008A14F0>
2025-05-02 21:04:43,194 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,194 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:04:43,194 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,194 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,194 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,194 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:04:43,194 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,194 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:04:43,194 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,194 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,194 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:04:43,194 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,194 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,194 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,194 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,194 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,194 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,194 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,194 - DEBUG - ==== SSA block analysis pass on 304
2025-05-02 21:04:43,194 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA008A14F0>
2025-05-02 21:04:43,194 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,194 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,194 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,194 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,195 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,195 - DEBUG - ==== SSA block analysis pass on 306
2025-05-02 21:04:43,195 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA008A14F0>
2025-05-02 21:04:43,195 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,195 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,195 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:04:43,195 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,195 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,195 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:04:43,195 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,195 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:04:43,195 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,195 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,195 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:04:43,195 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,195 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,195 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,195 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,195 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,195 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,195 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,195 - DEBUG - ==== SSA block analysis pass on 380
2025-05-02 21:04:43,195 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA008A14F0>
2025-05-02 21:04:43,195 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,195 - DEBUG - ==== SSA block analysis pass on 382
2025-05-02 21:04:43,195 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001EA008A14F0>
2025-05-02 21:04:43,195 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,195 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,195 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,196 - DEBUG - defs defaultdict(<class 'list'>,
            {'$108binary_subtract.11': [<numba.core.ir.Assign object at 0x000001EA0088D4F0>],
             '$122load_global.16': [<numba.core.ir.Assign object at 0x000001EA0088DD00>],
             '$138load_global.22': [<numba.core.ir.Assign object at 0x000001EA008906A0>],
             '$144binary_add.25': [<numba.core.ir.Assign object at 0x000001EA00890AF0>],
             '$150binary_subtract.28': [<numba.core.ir.Assign object at 0x000001EA00890EB0>],
             '$154binary_floor_divide.30': [<numba.core.ir.Assign object at 0x000001EA00893190>],
             '$160load_global.32': [<numba.core.ir.Assign object at 0x000001EA00893580>],
             '$164call_function.34': [<numba.core.ir.Assign object at 0x000001EA00893880>],
             '$166get_iter.35': [<numba.core.ir.Assign object at 0x000001EA008939A0>],
             '$168for_iter.2': [<numba.core.ir.Assign object at 0x000001EA0088D2B0>],
             '$168for_iter.3': [<numba.core.ir.Assign object at 0x000001EA0088D6D0>],
             '$168for_iter.4': [<numba.core.ir.Assign object at 0x000001EA0088DC10>],
             '$180binary_multiply.7': [<numba.core.ir.Assign object at 0x000001EA00893D90>],
             '$182binary_add.8': [<numba.core.ir.Assign object at 0x000001EA00893F10>],
             '$184binary_subscr.9': [<numba.core.ir.Assign object at 0x000001EA008960D0>],
             '$196binary_multiply.15': [<numba.core.ir.Assign object at 0x000001EA008967F0>],
             '$198binary_add.16': [<numba.core.ir.Assign object at 0x000001EA00896970>],
             '$200binary_subscr.17': [<numba.core.ir.Assign object at 0x000001EA00896AF0>],
             '$202binary_multiply.18': [<numba.core.ir.Assign object at 0x000001EA00896C70>],
             '$214binary_subscr.24': [<numba.core.ir.Assign object at 0x000001EA00898490>],
             '$224binary_subtract.29': [<numba.core.ir.Assign object at 0x000001EA00898A90>],
             '$226binary_subscr.30': [<numba.core.ir.Assign object at 0x000001EA00898C10>],
             '$228binary_multiply.31': [<numba.core.ir.Assign object at 0x000001EA00898D90>],
             '$230inplace_add.32': [<numba.core.ir.Assign object at 0x000001EA00898F10>],
             '$242binary_subtract.3': [<numba.core.ir.Assign object at 0x000001EA00898070>],
             '$254load_global.7': [<numba.core.ir.Assign object at 0x000001EA0089A4C0>],
             '$270load_global.13': [<numba.core.ir.Assign object at 0x000001EA0089AE20>],
             '$276binary_subtract.16': [<numba.core.ir.Assign object at 0x000001EA0089B250>],
             '$280binary_subtract.18': [<numba.core.ir.Assign object at 0x000001EA0089B550>],
             '$286binary_subtract.21': [<numba.core.ir.Assign object at 0x000001EA0089B910>],
             '$290binary_floor_divide.23': [<numba.core.ir.Assign object at 0x000001EA0089BBB0>],
             '$296load_global.25': [<numba.core.ir.Assign object at 0x000001EA0089BFA0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001EA008810A0>],
             '$300call_function.27': [<numba.core.ir.Assign object at 0x000001EA0089D2E0>],
             '$302get_iter.28': [<numba.core.ir.Assign object at 0x000001EA0089D400>],
             '$304for_iter.2': [<numba.core.ir.Assign object at 0x000001EA0089A700>],
             '$304for_iter.3': [<numba.core.ir.Assign object at 0x000001EA0089AD30>],
             '$304for_iter.4': [<numba.core.ir.Assign object at 0x000001EA0089B130>],
             '$316binary_multiply.7': [<numba.core.ir.Assign object at 0x000001EA0089DB50>],
             '$318binary_add.8': [<numba.core.ir.Assign object at 0x000001EA0089DCD0>],
             '$320binary_subscr.9': [<numba.core.ir.Assign object at 0x000001EA0089DE50>],
             '$332binary_multiply.15': [<numba.core.ir.Assign object at 0x000001EA0089F5B0>],
             '$334binary_add.16': [<numba.core.ir.Assign object at 0x000001EA0089F730>],
             '$336binary_subscr.17': [<numba.core.ir.Assign object at 0x000001EA0089F8B0>],
             '$338binary_multiply.18': [<numba.core.ir.Assign object at 0x000001EA0089FA30>],
             '$350binary_subscr.24': [<numba.core.ir.Assign object at 0x000001EA008A1250>],
             '$360binary_add.29': [<numba.core.ir.Assign object at 0x000001EA008A1850>],
             '$364binary_add.31': [<numba.core.ir.Assign object at 0x000001EA008A1B50>],
             '$366binary_subscr.32': [<numba.core.ir.Assign object at 0x000001EA008A1CD0>],
             '$368binary_multiply.33': [<numba.core.ir.Assign object at 0x000001EA008A1E50>],
             '$370inplace_add.34': [<numba.core.ir.Assign object at 0x000001EA008A1FD0>],
             '$384return_value.1': [<numba.core.ir.Assign object at 0x000001EA008A1040>],
             '$44load_attr.13': [<numba.core.ir.Assign object at 0x000001EA00886C40>],
             '$54load_attr.17': [<numba.core.ir.Assign object at 0x000001EA00888340>],
             '$64load_attr.21': [<numba.core.ir.Assign object at 0x000001EA00888A00>],
             '$72load_global.24': [<numba.core.ir.Assign object at 0x000001EA00888FA0>],
             '$76call_function.26': [<numba.core.ir.Assign object at 0x000001EA0088A2E0>],
             '$78get_iter.27': [<numba.core.ir.Assign object at 0x000001EA0088A400>],
             '$80for_iter.1': [<numba.core.ir.Assign object at 0x000001EA00886A30>],
             '$80for_iter.2': [<numba.core.ir.Assign object at 0x000001EA00888250>],
             '$80for_iter.3': [<numba.core.ir.Assign object at 0x000001EA00888EB0>],
             '$8binary_multiply.3': [<numba.core.ir.Assign object at 0x000001EA00881490>],
             '$94load_global.5': [<numba.core.ir.Assign object at 0x000001EA0088AC40>],
             '$const142.24': [<numba.core.ir.Assign object at 0x000001EA00890940>],
             '$const278.17': [<numba.core.ir.Assign object at 0x000001EA0089B3A0>],
             '$const362.30': [<numba.core.ir.Assign object at 0x000001EA008A19A0>],
             '$const382.0': [<numba.core.ir.Assign object at 0x000001EA0089FC70>],
             '$const46.14': [<numba.core.ir.Assign object at 0x000001EA00886DC0>],
             '$const56.18': [<numba.core.ir.Assign object at 0x000001EA008884C0>],
             '$const66.22': [<numba.core.ir.Assign object at 0x000001EA00888B80>],
             '$phi168.1': [<numba.core.ir.Assign object at 0x000001EA0088A7F0>],
             '$phi170.2': [<numba.core.ir.Assign object at 0x000001EA0088D070>],
             '$phi304.1': [<numba.core.ir.Assign object at 0x000001EA00896370>],
             '$phi306.2': [<numba.core.ir.Assign object at 0x000001EA0089A670>],
             '$phi80.0': [<numba.core.ir.Assign object at 0x000001EA00881250>],
             '$phi84.1': [<numba.core.ir.Assign object at 0x000001EA008864F0>],
             'eta': [<numba.core.ir.Assign object at 0x000001EA008865E0>,
                     <numba.core.ir.Assign object at 0x000001EA00890490>,
                     <numba.core.ir.Assign object at 0x000001EA0089AC10>],
             'frac': [<numba.core.ir.Assign object at 0x000001EA00881DC0>,
                      <numba.core.ir.Assign object at 0x000001EA0088D670>,
                      <numba.core.ir.Assign object at 0x000001EA00898310>],
             'i': [<numba.core.ir.Assign object at 0x000001EA008903D0>],
             'i_max': [<numba.core.ir.Assign object at 0x000001EA00893340>],
             'index_frac': [<numba.core.ir.Assign object at 0x000001EA008860A0>,
                            <numba.core.ir.Assign object at 0x000001EA0088DAF0>,
                            <numba.core.ir.Assign object at 0x000001EA0089A2B0>],
             'index_step': [<numba.core.ir.Assign object at 0x000001EA00881640>],
             'interp_delta': [<numba.core.ir.Assign object at 0x000001EA008641C0>],
             'interp_win': [<numba.core.ir.Assign object at 0x000001EA00864280>],
             'k': [<numba.core.ir.Assign object at 0x000001EA0089D520>],
             'k_max': [<numba.core.ir.Assign object at 0x000001EA0089BD60>],
             'n': [<numba.core.ir.Assign object at 0x000001EA00881B20>,
                   <numba.core.ir.Assign object at 0x000001EA0088AF40>],
             'n_orig': [<numba.core.ir.Assign object at 0x000001EA008AEC10>],
             'n_out': [<numba.core.ir.Assign object at 0x000001EA008AECD0>],
             'num_table': [<numba.core.ir.Assign object at 0x000001EA008644C0>],
             'nwin': [<numba.core.ir.Assign object at 0x000001EA008AE070>],
             'offset': [<numba.core.ir.Assign object at 0x000001EA00886340>,
                        <numba.core.ir.Assign object at 0x000001EA00890040>,
                        <numba.core.ir.Assign object at 0x000001EA0089A7C0>],
             'scale': [<numba.core.ir.Assign object at 0x000001EA00864DC0>],
             't': [<numba.core.ir.Assign object at 0x000001EA0088A640>],
             't_out': [<numba.core.ir.Assign object at 0x000001EA00864700>],
             'time_register': [<numba.core.ir.Assign object at 0x000001EA00881880>,
                               <numba.core.ir.Assign object at 0x000001EA0088AA30>],
             'weight': [<numba.core.ir.Assign object at 0x000001EA00886880>,
                        <numba.core.ir.Assign object at 0x000001EA00896DF0>,
                        <numba.core.ir.Assign object at 0x000001EA0089FBB0>],
             'x': [<numba.core.ir.Assign object at 0x000001EA00864640>],
             'y': [<numba.core.ir.Assign object at 0x000001EA00864EE0>]})
2025-05-02 21:04:43,196 - DEBUG - SSA violators {'offset', 'n', 'index_frac', 'eta', 'frac', 'time_register', 'weight'}
2025-05-02 21:04:43,196 - DEBUG - Fix SSA violator on var offset
2025-05-02 21:04:43,196 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,196 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,197 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,197 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,197 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,197 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,197 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,197 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,197 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,197 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,197 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,197 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,197 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,197 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,197 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,197 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,197 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,197 - DEBUG - first assign: offset
2025-05-02 21:04:43,197 - DEBUG - replaced with: offset = const(int, 0)
2025-05-02 21:04:43,197 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,197 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,197 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,197 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,197 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,197 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,197 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,197 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,197 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,197 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,198 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,198 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,198 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,198 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,198 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,198 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,198 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,198 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,198 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,198 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,198 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,198 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,198 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,198 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,198 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,198 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,198 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,198 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,198 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,198 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:04:43,198 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:04:43,198 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,198 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,198 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,198 - DEBUG - replaced with: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,198 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:04:43,199 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:04:43,199 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:04:43,199 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,199 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,199 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,199 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,199 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,199 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,199 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,199 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,199 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,199 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,199 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,199 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:04:43,199 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,199 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:04:43,199 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,199 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:04:43,200 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,200 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,200 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:04:43,200 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,200 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,200 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,200 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,200 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,200 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,200 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,200 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,200 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:04:43,200 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,200 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,200 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,200 - DEBUG - replaced with: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,200 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:04:43,200 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,200 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:04:43,200 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,200 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,200 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:04:43,200 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,200 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,200 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,200 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,201 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,201 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,201 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,201 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,201 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,201 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,201 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,201 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,201 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,201 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,201 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,201 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,201 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,201 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,201 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:04:43,201 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,201 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,201 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:04:43,201 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,201 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:04:43,201 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,201 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,201 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:04:43,201 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,201 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,201 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,201 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,201 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,201 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,202 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,202 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,202 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,202 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,202 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,202 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,202 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,202 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,202 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,202 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001EA008AE400>],
             84: [<numba.core.ir.Assign object at 0x000001EA008AEEB0>],
             238: [<numba.core.ir.Assign object at 0x000001EA008AE7C0>]})
2025-05-02 21:04:43,202 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,202 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008A16A0>
2025-05-02 21:04:43,202 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,202 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,202 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,202 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,202 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,202 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,202 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,202 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,202 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,202 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,202 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,202 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,202 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,202 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,203 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,203 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,203 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,203 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,203 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,203 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,203 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,203 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,203 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008A16A0>
2025-05-02 21:04:43,203 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,203 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,203 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,203 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,203 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008A16A0>
2025-05-02 21:04:43,203 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,203 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,204 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,204 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,204 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:04:43,204 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:04:43,204 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,204 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,204 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,204 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:04:43,204 - DEBUG - find_def var='offset' stmt=eta = index_frac - offset
2025-05-02 21:04:43,204 - DEBUG - replaced with: eta = index_frac - offset.1
2025-05-02 21:04:43,204 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,204 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,204 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:04:43,204 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:04:43,204 - DEBUG - find_def var='offset' stmt=$150binary_subtract.28 = nwin - offset
2025-05-02 21:04:43,204 - DEBUG - replaced with: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,204 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,204 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,204 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,204 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,204 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,204 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,205 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,205 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,205 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008A16A0>
2025-05-02 21:04:43,205 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,205 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,205 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,205 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,205 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,205 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,205 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008A16A0>
2025-05-02 21:04:43,205 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,205 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,205 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:04:43,205 - DEBUG - find_def var='offset' stmt=$182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:04:43,205 - DEBUG - find_def_from_top label 170
2025-05-02 21:04:43,205 - DEBUG - idom 168 from label 170
2025-05-02 21:04:43,205 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:04:43,205 - DEBUG - find_def_from_top label 168
2025-05-02 21:04:43,205 - DEBUG - idom 84 from label 168
2025-05-02 21:04:43,205 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:04:43,205 - DEBUG - replaced with: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,205 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,205 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,205 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:04:43,205 - DEBUG - find_def var='offset' stmt=$198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:04:43,205 - DEBUG - find_def_from_top label 170
2025-05-02 21:04:43,205 - DEBUG - idom 168 from label 170
2025-05-02 21:04:43,205 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:04:43,205 - DEBUG - find_def_from_top label 168
2025-05-02 21:04:43,206 - DEBUG - idom 84 from label 168
2025-05-02 21:04:43,206 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:04:43,206 - DEBUG - replaced with: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,206 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,206 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:04:43,206 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,206 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,206 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:04:43,206 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,206 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,206 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,206 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,206 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,206 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,206 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008A16A0>
2025-05-02 21:04:43,206 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,206 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:04:43,206 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,206 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,206 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,206 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:04:43,206 - DEBUG - find_def var='offset' stmt=eta = index_frac - offset
2025-05-02 21:04:43,206 - DEBUG - replaced with: eta = index_frac - offset.2
2025-05-02 21:04:43,206 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,206 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:04:43,206 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,206 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,207 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:04:43,207 - DEBUG - find_def var='offset' stmt=$286binary_subtract.21 = nwin - offset
2025-05-02 21:04:43,207 - DEBUG - replaced with: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,207 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,207 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,207 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,207 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,207 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,207 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,207 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,207 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,207 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008A16A0>
2025-05-02 21:04:43,207 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,207 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,207 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,207 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,207 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,207 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,207 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008A16A0>
2025-05-02 21:04:43,207 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,207 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,207 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:04:43,207 - DEBUG - find_def var='offset' stmt=$318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:04:43,207 - DEBUG - find_def_from_top label 306
2025-05-02 21:04:43,207 - DEBUG - idom 304 from label 306
2025-05-02 21:04:43,207 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:04:43,207 - DEBUG - find_def_from_top label 304
2025-05-02 21:04:43,207 - DEBUG - idom 238 from label 304
2025-05-02 21:04:43,208 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:04:43,208 - DEBUG - replaced with: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,208 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,208 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,208 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:04:43,208 - DEBUG - find_def var='offset' stmt=$334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:04:43,208 - DEBUG - find_def_from_top label 306
2025-05-02 21:04:43,208 - DEBUG - idom 304 from label 306
2025-05-02 21:04:43,208 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:04:43,208 - DEBUG - find_def_from_top label 304
2025-05-02 21:04:43,208 - DEBUG - idom 238 from label 304
2025-05-02 21:04:43,208 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:04:43,208 - DEBUG - replaced with: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,208 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,208 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:04:43,208 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,208 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,208 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:04:43,208 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,208 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,208 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,208 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,208 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,208 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,208 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,208 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,208 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008A16A0>
2025-05-02 21:04:43,209 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,209 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,209 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008A16A0>
2025-05-02 21:04:43,209 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,209 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,209 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,209 - DEBUG - Fix SSA violator on var n
2025-05-02 21:04:43,209 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,209 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,209 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,209 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,209 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,209 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,209 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,209 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,209 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,209 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,209 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,209 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,209 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,209 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,209 - DEBUG - first assign: n
2025-05-02 21:04:43,209 - DEBUG - replaced with: n = const(int, 0)
2025-05-02 21:04:43,209 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,209 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,209 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,209 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,209 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,209 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,209 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,210 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,210 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,210 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,210 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,210 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,210 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,210 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,210 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,210 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,210 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,210 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,210 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,210 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,210 - DEBUG - replaced with: n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,210 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:04:43,210 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:04:43,210 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,210 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,211 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,211 - DEBUG - on stmt: eta = index_frac - offset.1
2025-05-02 21:04:43,211 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:04:43,211 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,211 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,211 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,211 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,211 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,211 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,211 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,211 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,211 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,211 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,211 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,211 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,211 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,211 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,211 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,211 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,211 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:04:43,212 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,212 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,212 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:04:43,212 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,212 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,212 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,212 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,212 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,212 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,212 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,212 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,212 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:04:43,212 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,212 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,212 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,212 - DEBUG - on stmt: eta = index_frac - offset.2
2025-05-02 21:04:43,212 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,212 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:04:43,212 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,212 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,212 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,212 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,212 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,212 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,212 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,212 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,212 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,212 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,212 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,212 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,212 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,212 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,212 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,213 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,213 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,213 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,213 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,213 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,213 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,213 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,213 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,213 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,213 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,213 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,213 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:04:43,213 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,213 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,213 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:04:43,213 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,213 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,213 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,213 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,213 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,213 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,213 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,213 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,213 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,213 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,213 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,213 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,213 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,213 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,213 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,214 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001EA008AE1F0>],
             84: [<numba.core.ir.Assign object at 0x000001EA008AE8E0>]})
2025-05-02 21:04:43,214 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,214 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AEDF0>
2025-05-02 21:04:43,214 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,214 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,214 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,214 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,214 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,214 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,214 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,214 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,214 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,214 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,214 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,214 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,214 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,214 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,214 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,214 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,214 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,214 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,214 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,214 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,214 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,214 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,214 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,214 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,214 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,214 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,214 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,215 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,215 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,215 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,215 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,215 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,215 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AEDF0>
2025-05-02 21:04:43,215 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,215 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,215 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,215 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,215 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,215 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,215 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AEDF0>
2025-05-02 21:04:43,215 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,215 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,215 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,215 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,215 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:04:43,215 - DEBUG - find_def var='n' stmt=$108binary_subtract.11 = time_register - n
2025-05-02 21:04:43,215 - DEBUG - replaced with: $108binary_subtract.11 = time_register - n.1
2025-05-02 21:04:43,215 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:04:43,215 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,215 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,215 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,215 - DEBUG - on stmt: eta = index_frac - offset.1
2025-05-02 21:04:43,215 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,215 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,216 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:04:43,216 - DEBUG - find_def var='n' stmt=$144binary_add.25 = n + $const142.24
2025-05-02 21:04:43,216 - DEBUG - replaced with: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,216 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,216 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,216 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,216 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,216 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,216 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,216 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,216 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,216 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,216 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AEDF0>
2025-05-02 21:04:43,216 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,216 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,216 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,216 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,216 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,216 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,216 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AEDF0>
2025-05-02 21:04:43,216 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,216 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,216 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,216 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,216 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,216 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,216 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,216 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:04:43,217 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,217 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,217 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:04:43,217 - DEBUG - find_def var='n' stmt=$224binary_subtract.29 = n - i
2025-05-02 21:04:43,217 - DEBUG - find_def_from_top label 170
2025-05-02 21:04:43,217 - DEBUG - idom 168 from label 170
2025-05-02 21:04:43,217 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:04:43,217 - DEBUG - find_def_from_top label 168
2025-05-02 21:04:43,217 - DEBUG - idom 84 from label 168
2025-05-02 21:04:43,217 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:04:43,217 - DEBUG - replaced with: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,217 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,217 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,217 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,217 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,217 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,217 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,217 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AEDF0>
2025-05-02 21:04:43,217 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,217 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:04:43,217 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,217 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,217 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,217 - DEBUG - on stmt: eta = index_frac - offset.2
2025-05-02 21:04:43,217 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,217 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:04:43,217 - DEBUG - find_def var='n' stmt=$276binary_subtract.16 = n_orig - n
2025-05-02 21:04:43,217 - DEBUG - find_def_from_top label 238
2025-05-02 21:04:43,217 - DEBUG - idom 168 from label 238
2025-05-02 21:04:43,217 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:04:43,218 - DEBUG - find_def_from_top label 168
2025-05-02 21:04:43,218 - DEBUG - idom 84 from label 168
2025-05-02 21:04:43,218 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:04:43,218 - DEBUG - replaced with: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,218 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,218 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,218 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,218 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,218 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,218 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,218 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,218 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,218 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,218 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,218 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,218 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AEDF0>
2025-05-02 21:04:43,218 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,218 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,218 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,218 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,218 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,218 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,218 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AEDF0>
2025-05-02 21:04:43,218 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,218 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,218 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,218 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,218 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,219 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,219 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,219 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:04:43,219 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,219 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,219 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:04:43,219 - DEBUG - find_def var='n' stmt=$360binary_add.29 = n + k
2025-05-02 21:04:43,219 - DEBUG - find_def_from_top label 306
2025-05-02 21:04:43,219 - DEBUG - idom 304 from label 306
2025-05-02 21:04:43,219 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:04:43,219 - DEBUG - find_def_from_top label 304
2025-05-02 21:04:43,219 - DEBUG - idom 238 from label 304
2025-05-02 21:04:43,219 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:04:43,219 - DEBUG - find_def_from_top label 238
2025-05-02 21:04:43,219 - DEBUG - idom 168 from label 238
2025-05-02 21:04:43,219 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:04:43,219 - DEBUG - find_def_from_top label 168
2025-05-02 21:04:43,219 - DEBUG - idom 84 from label 168
2025-05-02 21:04:43,219 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:04:43,219 - DEBUG - replaced with: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,219 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,219 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,219 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,219 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,219 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,220 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,220 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,220 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,220 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AEDF0>
2025-05-02 21:04:43,220 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,220 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,220 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AEDF0>
2025-05-02 21:04:43,220 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,220 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,220 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,220 - DEBUG - Fix SSA violator on var index_frac
2025-05-02 21:04:43,220 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,220 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AFE20>
2025-05-02 21:04:43,220 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,220 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,220 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,220 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,220 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,220 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,220 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,220 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,220 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,220 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,220 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,220 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,220 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,220 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,220 - DEBUG - first assign: index_frac
2025-05-02 21:04:43,220 - DEBUG - replaced with: index_frac = const(float, 0.0)
2025-05-02 21:04:43,220 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,220 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,220 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,220 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,221 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,221 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,221 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,221 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,221 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,221 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AFE20>
2025-05-02 21:04:43,221 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,221 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,221 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,221 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AFE20>
2025-05-02 21:04:43,221 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,221 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,221 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,221 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n.1
2025-05-02 21:04:43,221 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:04:43,221 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,221 - DEBUG - replaced with: index_frac.1 = frac * num_table
2025-05-02 21:04:43,221 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,222 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,222 - DEBUG - on stmt: eta = index_frac - offset.1
2025-05-02 21:04:43,222 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,222 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,222 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,222 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,222 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,222 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,222 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AFE20>
2025-05-02 21:04:43,222 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,222 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,222 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,222 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AFE20>
2025-05-02 21:04:43,222 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,222 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,222 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,222 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,222 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,222 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:04:43,222 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,222 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,222 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,222 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,222 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,223 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,223 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,223 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,223 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AFE20>
2025-05-02 21:04:43,223 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,223 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:04:43,223 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:04:43,223 - DEBUG - replaced with: index_frac.2 = frac * num_table
2025-05-02 21:04:43,223 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,223 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,223 - DEBUG - on stmt: eta = index_frac - offset.2
2025-05-02 21:04:43,223 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,223 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,223 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,223 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,223 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,223 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,223 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,223 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,223 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,223 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,223 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,223 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,223 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,223 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AFE20>
2025-05-02 21:04:43,223 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,223 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,223 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,223 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,223 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,224 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,224 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AFE20>
2025-05-02 21:04:43,224 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,224 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,224 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,224 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,224 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,224 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,224 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,224 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:04:43,224 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,224 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,224 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,224 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,224 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,224 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,224 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,224 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,224 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,224 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,224 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,224 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AFE20>
2025-05-02 21:04:43,224 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,224 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,224 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AFE20>
2025-05-02 21:04:43,224 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,224 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,224 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,224 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001EA008AF7C0>],
             84: [<numba.core.ir.Assign object at 0x000001EA008AE5E0>],
             238: [<numba.core.ir.Assign object at 0x000001EA008AE130>]})
2025-05-02 21:04:43,224 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,224 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE760>
2025-05-02 21:04:43,225 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,225 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,225 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,225 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,225 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,225 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,225 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,225 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,225 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,225 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,225 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,225 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,225 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,225 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,225 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,225 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,225 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,225 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,225 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,226 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,226 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,226 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE760>
2025-05-02 21:04:43,226 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,226 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,226 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,226 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,226 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,226 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,226 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE760>
2025-05-02 21:04:43,226 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,226 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,226 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,226 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,226 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n.1
2025-05-02 21:04:43,226 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:04:43,226 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 21:04:43,226 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,226 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,226 - DEBUG - find_def var='index_frac' stmt=offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,226 - DEBUG - replaced with: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,226 - DEBUG - on stmt: eta = index_frac - offset.1
2025-05-02 21:04:43,226 - DEBUG - find_def var='index_frac' stmt=eta = index_frac - offset.1
2025-05-02 21:04:43,226 - DEBUG - replaced with: eta = index_frac.1 - offset.1
2025-05-02 21:04:43,226 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,226 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,226 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,227 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,227 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,227 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,227 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,227 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,227 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,227 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,227 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,227 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,227 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE760>
2025-05-02 21:04:43,227 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,227 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,227 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,227 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,227 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,227 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,227 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE760>
2025-05-02 21:04:43,227 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,227 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,227 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,227 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,227 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,227 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,227 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,227 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:04:43,227 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,227 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,228 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,228 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,228 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,228 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,228 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,228 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,228 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,228 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE760>
2025-05-02 21:04:43,228 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,228 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:04:43,228 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 21:04:43,228 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,228 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,228 - DEBUG - find_def var='index_frac' stmt=offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,228 - DEBUG - replaced with: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,228 - DEBUG - on stmt: eta = index_frac - offset.2
2025-05-02 21:04:43,228 - DEBUG - find_def var='index_frac' stmt=eta = index_frac - offset.2
2025-05-02 21:04:43,228 - DEBUG - replaced with: eta = index_frac.2 - offset.2
2025-05-02 21:04:43,228 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,228 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,228 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,228 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,228 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,228 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,228 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,228 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,229 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,229 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,229 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE760>
2025-05-02 21:04:43,229 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,229 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,229 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,229 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE760>
2025-05-02 21:04:43,229 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,229 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,229 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,229 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,229 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,229 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:04:43,229 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,229 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,229 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,229 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,229 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,229 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,230 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,230 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,230 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,230 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE760>
2025-05-02 21:04:43,230 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,230 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,230 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE760>
2025-05-02 21:04:43,230 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,230 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,230 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,230 - DEBUG - Fix SSA violator on var eta
2025-05-02 21:04:43,230 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,230 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA00852A90>
2025-05-02 21:04:43,230 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,230 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,230 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,230 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,230 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,230 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,230 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,230 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,230 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,230 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,230 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,230 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,230 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,230 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,230 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,230 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,230 - DEBUG - first assign: eta
2025-05-02 21:04:43,230 - DEBUG - replaced with: eta = const(float, 0.0)
2025-05-02 21:04:43,230 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,230 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,231 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,231 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,231 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,231 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,231 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,231 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA00852A90>
2025-05-02 21:04:43,231 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,231 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,231 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,231 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA00852A90>
2025-05-02 21:04:43,231 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,231 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,231 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,231 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n.1
2025-05-02 21:04:43,231 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:04:43,231 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 21:04:43,231 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,231 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,232 - DEBUG - on stmt: eta = index_frac.1 - offset.1
2025-05-02 21:04:43,232 - DEBUG - replaced with: eta.1 = index_frac.1 - offset.1
2025-05-02 21:04:43,232 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,232 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,232 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,232 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,232 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,232 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,232 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA00852A90>
2025-05-02 21:04:43,232 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,232 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,232 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,232 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA00852A90>
2025-05-02 21:04:43,232 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,232 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,232 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,232 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,232 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,232 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,232 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:04:43,232 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,233 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,233 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,233 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,233 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,233 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,233 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,233 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,233 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,233 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA00852A90>
2025-05-02 21:04:43,233 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,233 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:04:43,233 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 21:04:43,233 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,233 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,233 - DEBUG - on stmt: eta = index_frac.2 - offset.2
2025-05-02 21:04:43,233 - DEBUG - replaced with: eta.2 = index_frac.2 - offset.2
2025-05-02 21:04:43,233 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,233 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,233 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,233 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,233 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,233 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,233 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,233 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,233 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,233 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,233 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,233 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,233 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,234 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA00852A90>
2025-05-02 21:04:43,234 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,234 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,234 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,234 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,234 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,234 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,234 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA00852A90>
2025-05-02 21:04:43,234 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,234 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,234 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,234 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,234 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,234 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,234 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,234 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:04:43,234 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,234 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,234 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,234 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,234 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,234 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,234 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,234 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,234 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,234 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,234 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,235 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA00852A90>
2025-05-02 21:04:43,235 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,235 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,235 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA00852A90>
2025-05-02 21:04:43,235 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,235 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,235 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,235 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001EA00852C10>],
             84: [<numba.core.ir.Assign object at 0x000001EA008AFE50>],
             238: [<numba.core.ir.Assign object at 0x000001EA008AEB20>]})
2025-05-02 21:04:43,235 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,235 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,235 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,235 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,235 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,235 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,235 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,235 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,235 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,235 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,235 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,235 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,235 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,235 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,235 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,235 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,235 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,235 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,235 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,235 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,235 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,235 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,235 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,236 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,236 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,236 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,236 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,236 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,236 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,236 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,236 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,236 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,236 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,236 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,236 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,236 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n.1
2025-05-02 21:04:43,236 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:04:43,236 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 21:04:43,236 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,236 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,237 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 21:04:43,237 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,237 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,237 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,237 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,237 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,237 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,237 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,237 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,237 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,237 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,237 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,237 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,237 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,237 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,237 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,237 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,237 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,237 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:04:43,238 - DEBUG - find_def var='eta' stmt=$202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:04:43,238 - DEBUG - find_def_from_top label 170
2025-05-02 21:04:43,238 - DEBUG - idom 168 from label 170
2025-05-02 21:04:43,238 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:04:43,238 - DEBUG - find_def_from_top label 168
2025-05-02 21:04:43,238 - DEBUG - idom 84 from label 168
2025-05-02 21:04:43,238 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:04:43,238 - DEBUG - replaced with: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:04:43,238 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,238 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,238 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,238 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,238 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,238 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,238 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,238 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,238 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,238 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,238 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,238 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:04:43,238 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 21:04:43,238 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,238 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,238 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 21:04:43,238 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,238 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,238 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,238 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,238 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,238 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,238 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,239 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,239 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,239 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,239 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,239 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,239 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,239 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,239 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,239 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,239 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,239 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,239 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,239 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,239 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,239 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,239 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,239 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,239 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,239 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,239 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,239 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,239 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:04:43,239 - DEBUG - find_def var='eta' stmt=$338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:04:43,239 - DEBUG - find_def_from_top label 306
2025-05-02 21:04:43,239 - DEBUG - idom 304 from label 306
2025-05-02 21:04:43,239 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:04:43,239 - DEBUG - find_def_from_top label 304
2025-05-02 21:04:43,239 - DEBUG - idom 238 from label 304
2025-05-02 21:04:43,239 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:04:43,239 - DEBUG - replaced with: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:04:43,240 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,240 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,240 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,240 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,240 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,240 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,240 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,240 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,240 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,240 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,240 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,240 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,240 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,240 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,240 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,240 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,240 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,240 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,240 - DEBUG - Fix SSA violator on var frac
2025-05-02 21:04:43,240 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,240 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AE5B0>
2025-05-02 21:04:43,240 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,240 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,240 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,240 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,240 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,240 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,240 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,240 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,240 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,240 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,240 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,241 - DEBUG - first assign: frac
2025-05-02 21:04:43,241 - DEBUG - replaced with: frac = const(float, 0.0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,241 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,241 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,241 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AE5B0>
2025-05-02 21:04:43,241 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,241 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,241 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,241 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,241 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AE5B0>
2025-05-02 21:04:43,242 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,242 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,242 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n.1
2025-05-02 21:04:43,242 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:04:43,242 - DEBUG - replaced with: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:04:43,242 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 21:04:43,242 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,242 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,242 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 21:04:43,242 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,242 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,242 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,242 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,242 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,242 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,242 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AE5B0>
2025-05-02 21:04:43,242 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,242 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,242 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,243 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,243 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AE5B0>
2025-05-02 21:04:43,243 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,243 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,243 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,243 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,243 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,243 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,243 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,243 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:04:43,243 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,243 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,243 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,243 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,243 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,243 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,243 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,243 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,243 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,243 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AE5B0>
2025-05-02 21:04:43,243 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,243 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:04:43,243 - DEBUG - replaced with: frac.2 = $242binary_subtract.3
2025-05-02 21:04:43,243 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 21:04:43,243 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,243 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,243 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 21:04:43,243 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,243 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,243 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,243 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,244 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,244 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,244 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,244 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,244 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,244 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AE5B0>
2025-05-02 21:04:43,244 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,244 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,244 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,244 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AE5B0>
2025-05-02 21:04:43,244 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,244 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,244 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,244 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,244 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,244 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:04:43,244 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,244 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,244 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,244 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,244 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,245 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,245 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,245 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,245 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,245 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,245 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AE5B0>
2025-05-02 21:04:43,245 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,245 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,245 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AE5B0>
2025-05-02 21:04:43,245 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,245 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,245 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,245 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001EA008AE2E0>],
             84: [<numba.core.ir.Assign object at 0x000001EA008AE610>],
             238: [<numba.core.ir.Assign object at 0x000001EA008A3CD0>]})
2025-05-02 21:04:43,245 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,245 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008529A0>
2025-05-02 21:04:43,245 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,245 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,245 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,245 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,245 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,245 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,245 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,245 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,245 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,245 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,245 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,245 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,245 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,245 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,245 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,246 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,246 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,246 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,246 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,246 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,246 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,246 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,246 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008529A0>
2025-05-02 21:04:43,246 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,246 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,246 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,246 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008529A0>
2025-05-02 21:04:43,246 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,246 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,246 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,246 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n.1
2025-05-02 21:04:43,246 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:04:43,247 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 21:04:43,247 - DEBUG - find_def var='frac' stmt=index_frac.1 = frac * num_table
2025-05-02 21:04:43,247 - DEBUG - replaced with: index_frac.1 = frac.1 * num_table
2025-05-02 21:04:43,247 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,247 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,247 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 21:04:43,247 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,247 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,247 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,247 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,247 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,247 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,247 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,247 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,247 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,247 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,247 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,247 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,247 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008529A0>
2025-05-02 21:04:43,247 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,247 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,247 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,247 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,247 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,247 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,247 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008529A0>
2025-05-02 21:04:43,247 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,247 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,247 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,248 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,248 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,248 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,248 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,248 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:04:43,248 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,248 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,248 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,248 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,248 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,248 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,248 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,248 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,248 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,248 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008529A0>
2025-05-02 21:04:43,248 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,248 - DEBUG - find_def var='frac' stmt=$242binary_subtract.3 = scale - frac
2025-05-02 21:04:43,248 - DEBUG - find_def_from_top label 238
2025-05-02 21:04:43,248 - DEBUG - idom 168 from label 238
2025-05-02 21:04:43,248 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:04:43,248 - DEBUG - find_def_from_top label 168
2025-05-02 21:04:43,248 - DEBUG - idom 84 from label 168
2025-05-02 21:04:43,248 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:04:43,248 - DEBUG - replaced with: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:04:43,248 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:04:43,248 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 21:04:43,248 - DEBUG - find_def var='frac' stmt=index_frac.2 = frac * num_table
2025-05-02 21:04:43,248 - DEBUG - replaced with: index_frac.2 = frac.2 * num_table
2025-05-02 21:04:43,248 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,248 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,249 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 21:04:43,249 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,249 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,249 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,249 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,249 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,249 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,249 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,249 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,249 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,249 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,249 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,249 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,249 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,249 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008529A0>
2025-05-02 21:04:43,249 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,249 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,249 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,249 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,249 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,249 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,249 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008529A0>
2025-05-02 21:04:43,249 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,249 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,249 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,249 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,249 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,249 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,249 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,250 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:04:43,250 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,250 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,250 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,250 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,250 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,250 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,250 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,250 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,250 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,250 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,250 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,250 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008529A0>
2025-05-02 21:04:43,250 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,250 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,250 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008529A0>
2025-05-02 21:04:43,250 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,250 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,250 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,250 - DEBUG - Fix SSA violator on var time_register
2025-05-02 21:04:43,250 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,250 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,250 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,250 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,250 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,250 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,250 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,250 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,250 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,251 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,251 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,251 - DEBUG - first assign: time_register
2025-05-02 21:04:43,251 - DEBUG - replaced with: time_register = const(float, 0.0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,251 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,251 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,251 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,251 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,251 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,252 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,252 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,252 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,252 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,252 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,252 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,252 - DEBUG - replaced with: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,252 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,252 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,252 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n.1
2025-05-02 21:04:43,252 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:04:43,252 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 21:04:43,252 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,252 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,252 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 21:04:43,252 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,252 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,252 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,252 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,252 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,252 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,252 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,252 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,252 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,252 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,252 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,252 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,252 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,252 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,253 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,253 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,253 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,253 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,253 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,253 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,253 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,253 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,253 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,253 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,253 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,253 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,253 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,253 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:04:43,253 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,253 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,253 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,253 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,253 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,253 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,253 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,253 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,253 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,253 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,253 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:04:43,253 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:04:43,253 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 21:04:43,253 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,253 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,253 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 21:04:43,253 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,254 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,254 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,254 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,254 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,254 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,254 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,254 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,254 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,254 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,254 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,254 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,254 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,254 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,254 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,254 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,254 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,254 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,254 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:04:43,254 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,254 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,255 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,255 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,255 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,255 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,255 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,255 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,255 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,255 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,255 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,255 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,255 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,255 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,255 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008AF0D0>
2025-05-02 21:04:43,255 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,255 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,255 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,255 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001EA008AE130>],
             84: [<numba.core.ir.Assign object at 0x000001EA008AE6A0>]})
2025-05-02 21:04:43,255 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,255 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE4F0>
2025-05-02 21:04:43,255 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,255 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,255 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,255 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,255 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,255 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,255 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,255 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,255 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,255 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,255 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,256 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,256 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,256 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE4F0>
2025-05-02 21:04:43,256 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,256 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,256 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,256 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,256 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE4F0>
2025-05-02 21:04:43,256 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,257 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,257 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,257 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,257 - DEBUG - find_def var='time_register' stmt=n.1 = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,257 - DEBUG - replaced with: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,257 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n.1
2025-05-02 21:04:43,257 - DEBUG - find_def var='time_register' stmt=$108binary_subtract.11 = time_register - n.1
2025-05-02 21:04:43,257 - DEBUG - replaced with: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:04:43,257 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:04:43,257 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 21:04:43,257 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,257 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,257 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 21:04:43,257 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,257 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,257 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,257 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,257 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,257 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,257 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,257 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,257 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,258 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,258 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,258 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,258 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE4F0>
2025-05-02 21:04:43,258 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,258 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,258 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,258 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,258 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,258 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,258 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE4F0>
2025-05-02 21:04:43,258 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,258 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,258 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,258 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,258 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,258 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,258 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,258 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:04:43,258 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,258 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,258 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,258 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,258 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,258 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,258 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,258 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,258 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,258 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE4F0>
2025-05-02 21:04:43,259 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:04:43,259 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:04:43,259 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 21:04:43,259 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,259 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,259 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 21:04:43,259 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,259 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,259 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,259 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,259 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,259 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,259 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,259 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,259 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,259 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,259 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,259 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,259 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,259 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE4F0>
2025-05-02 21:04:43,259 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,259 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,259 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,259 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,259 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,259 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,260 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE4F0>
2025-05-02 21:04:43,260 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,260 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,260 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,260 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,260 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,260 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,260 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,260 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:04:43,260 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,260 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,260 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,260 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,260 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,260 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,260 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,260 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,260 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,260 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,260 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,260 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE4F0>
2025-05-02 21:04:43,260 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,260 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,260 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AE4F0>
2025-05-02 21:04:43,260 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,260 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,260 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,260 - DEBUG - Fix SSA violator on var weight
2025-05-02 21:04:43,261 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,261 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,261 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,261 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,261 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,261 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,261 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,261 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,261 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,261 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,261 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,261 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,261 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,261 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,261 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,261 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,261 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,261 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,261 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,261 - DEBUG - first assign: weight
2025-05-02 21:04:43,261 - DEBUG - replaced with: weight = const(float, 0.0)
2025-05-02 21:04:43,261 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,261 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,261 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,261 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,261 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,261 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,261 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,261 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,261 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,262 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,262 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,262 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,262 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,262 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,262 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,262 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,262 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,262 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,262 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:04:43,262 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:04:43,262 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 21:04:43,262 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,262 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,262 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 21:04:43,262 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,262 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,262 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,263 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,263 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,263 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,263 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,263 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,263 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,263 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,263 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,263 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,263 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,263 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,263 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,263 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,263 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,263 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,263 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,263 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,263 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,263 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,263 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,263 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,263 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,263 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,263 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:04:43,263 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,263 - DEBUG - replaced with: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,263 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,264 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,264 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,264 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,264 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,264 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,264 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,264 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,264 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,264 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:04:43,264 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:04:43,264 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 21:04:43,264 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,264 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,264 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 21:04:43,264 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,264 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,264 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,264 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,264 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,264 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,264 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,264 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,264 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,264 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,264 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,265 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,265 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,265 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,265 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,265 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,265 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,265 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,265 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,265 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,265 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,265 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,265 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,265 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,265 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,265 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,265 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,265 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,265 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:04:43,265 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,265 - DEBUG - replaced with: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,265 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,265 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,266 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,266 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,266 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,266 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,266 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,266 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,266 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,266 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,266 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,266 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,266 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,266 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001EA008A16A0>
2025-05-02 21:04:43,266 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,266 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,266 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:43,266 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001EA008AFA60>],
             170: [<numba.core.ir.Assign object at 0x000001EA00852820>],
             306: [<numba.core.ir.Assign object at 0x000001EkuielabBE0>]})
2025-05-02 21:04:43,266 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:04:43,266 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF970>
2025-05-02 21:04:43,266 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:04:43,266 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:04:43,266 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:04:43,266 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:04:43,266 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:04:43,266 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:04:43,266 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:04:43,266 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:04:43,266 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:04:43,266 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,266 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:04:43,266 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:04:43,266 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:04:43,266 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:04:43,267 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:04:43,267 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:04:43,267 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:04:43,267 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:04:43,267 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:04:43,267 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:04:43,267 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,267 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:04:43,267 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF970>
2025-05-02 21:04:43,267 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:04:43,267 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:04:43,267 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:04:43,267 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF970>
2025-05-02 21:04:43,267 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:04:43,267 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:04:43,267 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,267 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:04:43,268 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:04:43,268 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 21:04:43,268 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:04:43,268 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,268 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 21:04:43,268 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:04:43,268 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:04:43,268 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:04:43,268 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:04:43,268 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:04:43,268 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,268 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:04:43,268 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,268 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:04:43,268 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:04:43,268 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,268 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:04:43,268 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF970>
2025-05-02 21:04:43,268 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:04:43,268 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:04:43,268 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:04:43,268 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:04:43,268 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:04:43,268 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:04:43,268 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF970>
2025-05-02 21:04:43,268 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:04:43,268 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:04:43,268 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:04:43,268 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,268 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:04:43,268 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:04:43,269 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,269 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:04:43,269 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:04:43,269 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,269 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:04:43,269 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:04:43,269 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,269 - DEBUG - find_def var='weight' stmt=$228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:04:43,269 - DEBUG - replaced with: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:04:43,269 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,269 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:04:43,269 - DEBUG - on stmt: jump 168
2025-05-02 21:04:43,269 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:04:43,269 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF970>
2025-05-02 21:04:43,269 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:04:43,269 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:04:43,269 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 21:04:43,269 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:04:43,269 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,269 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 21:04:43,269 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:04:43,269 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:04:43,269 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:04:43,269 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:04:43,269 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:04:43,269 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:04:43,269 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,269 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:04:43,269 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:04:43,270 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:04:43,270 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:04:43,270 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,270 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:04:43,270 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF970>
2025-05-02 21:04:43,270 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:04:43,270 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:04:43,270 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:04:43,270 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:04:43,270 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:04:43,270 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:04:43,270 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF970>
2025-05-02 21:04:43,270 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:04:43,270 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:04:43,270 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:04:43,270 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:04:43,270 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:04:43,270 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:04:43,270 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:04:43,270 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:04:43,270 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:04:43,270 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:04:43,270 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:04:43,270 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:04:43,270 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:04:43,270 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:04:43,270 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,270 - DEBUG - find_def var='weight' stmt=$368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:04:43,270 - DEBUG - replaced with: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:04:43,270 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:04:43,270 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:04:43,271 - DEBUG - on stmt: jump 304
2025-05-02 21:04:43,271 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:04:43,271 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF970>
2025-05-02 21:04:43,271 - DEBUG - on stmt: jump 80
2025-05-02 21:04:43,271 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:04:43,271 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001EA008AF970>
2025-05-02 21:04:43,271 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:04:43,271 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:04:43,271 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:04:59,479 - DEBUG - Audio loaded: shape=(2, 7385280), sample_rate=44100
2025-05-02 21:04:59,480 - DEBUG - Demixing audio: samples=7385280, margin=44100, chunk_size=441000
2025-05-02 21:04:59,496 - DEBUG - Created 17 chunks for demixing

  0%|          | 0/17 [00:00<?, ?it/s]
Processing:   0%|          | 0/17 [00:00<?, ?it/s]2025-05-02 21:04:59,504 - DEBUG - Processing chunk: 1 waves
2025-05-02 21:04:59,515 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 512 Expected: 256
 Please fix either the inputs/outputs or the model.
Traceback (most recent call last):
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 258, in <module>
    main()
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 242, in main
    vocals, no_vocals, sampling_rate = predictor.predict(file_path)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 210, in predict
    sources = self.demix(mix.T)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 131, in demix
    sources = self.demix_base(segmented_mix, margin_size=margin)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 165, in demix_base
    -_ort.run(None, {"input": -spek.cpu().numpy()})[0] * 0.5
  File "C:\temp\s2S\installs\UVR\uvr_env\lib\site-packages\onnxruntime\capi\onnxruntime_inference_collection.py", line 220, in run
    return self._sess.run(output_names, input_feed, run_options)
onnxruntime.capi.onnxruntime_pybind11_state.InvalidArgument: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 512 Expected: 256
 Please fix either the inputs/outputs or the model.

Processing:   0%|          | 0/17 [00:00<?, ?it/s]

2025-05-02 21:05:35 - INFO - Starting separation for model: kuelab_b_other, Quality: Balanced, Input: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac, Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems, SegmentSize: 30, Overlap: 44100, Denoise: True, NFFT: 4096, DimF: 2048, DimT: 8
2025-05-02 21:05:35 - DEBUG - Original command: cmd /c "cd @EnvPath@ && activate.bat && cd @ScriptDir@ && python @PythonScript@ "@SongPath@" -m "@Path@" -o "@OutputDir@" --chunks @SegmentSize@ --margin @Overlap@ --n_fft @NFFT@ --dim_f @DimF@ --dim_t @DimT@ && deactivate"
2025-05-02 21:05:35 - INFO - Resolved command: cmd /c "cd C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\UVR\uvr_env\Scripts && activate.bat && cd C:\Git\3DAudioStudio\scripts\autoit\1.3 && python separate.py "C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac" -m "C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_other.onnx" -o "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems" --chunks 30 --margin 44100 --n_fft 4096 --dim_f 2048 --dim_t 8 && deactivate"
2025-05-02 21:07:10 - INFO - Separation output: 2025-05-02 21:05:37,731 - DEBUG - Logging initialized
2025-05-02 21:05:37,732 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song10.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 30, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 21:05:37,732 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 21:05:37,732 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac
2025-05-02 21:05:37,734 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=4096, hop=1024
2025-05-02 21:05:37,734 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song10.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 30, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 21:05:37,734 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_other.onnx
2025-05-02 21:05:37,800 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac
2025-05-02 21:05:38,241 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=86)
           2	LOAD_GLOBAL(arg=0, lineno=86)
           4	LOAD_FAST(arg=0, lineno=86)
           6	LOAD_FAST(arg=1, lineno=86)
           8	LOAD_FAST(arg=2, lineno=86)
          10	LOAD_FAST(arg=3, lineno=86)
          12	LOAD_FAST(arg=4, lineno=86)
          14	LOAD_FAST(arg=5, lineno=86)
          16	LOAD_FAST(arg=6, lineno=86)
          18	CALL_FUNCTION(arg=7, lineno=86)
          20	POP_TOP(arg=None, lineno=86)
          22	LOAD_CONST(arg=0, lineno=86)
          24	RETURN_VALUE(arg=None, lineno=86)
2025-05-02 21:05:38,241 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-02 21:05:38,241 - DEBUG - stack: []
2025-05-02 21:05:38,241 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=86)
2025-05-02 21:05:38,241 - DEBUG - stack []
2025-05-02 21:05:38,241 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=86)
2025-05-02 21:05:38,241 - DEBUG - stack []
2025-05-02 21:05:38,241 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=86)
2025-05-02 21:05:38,241 - DEBUG - stack ['$2load_global.0']
2025-05-02 21:05:38,241 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=86)
2025-05-02 21:05:38,242 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-05-02 21:05:38,242 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=86)
2025-05-02 21:05:38,242 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2']
2025-05-02 21:05:38,242 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=86)
2025-05-02 21:05:38,242 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3']
2025-05-02 21:05:38,242 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=4, lineno=86)
2025-05-02 21:05:38,242 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4']
2025-05-02 21:05:38,242 - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=5, lineno=86)
2025-05-02 21:05:38,242 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5']
2025-05-02 21:05:38,242 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=6, lineno=86)
2025-05-02 21:05:38,242 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6']
2025-05-02 21:05:38,242 - DEBUG - dispatch pc=18, inst=CALL_FUNCTION(arg=7, lineno=86)
2025-05-02 21:05:38,242 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6', '$y16.7']
2025-05-02 21:05:38,242 - DEBUG - dispatch pc=20, inst=POP_TOP(arg=None, lineno=86)
2025-05-02 21:05:38,242 - DEBUG - stack ['$18call_function.8']
2025-05-02 21:05:38,242 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=0, lineno=86)
2025-05-02 21:05:38,242 - DEBUG - stack []
2025-05-02 21:05:38,242 - DEBUG - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=86)
2025-05-02 21:05:38,242 - DEBUG - stack ['$const22.9']
2025-05-02 21:05:38,242 - DEBUG - end state. edges=[]
2025-05-02 21:05:38,242 - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-02 21:05:38,242 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-02 21:05:38,242 - DEBUG - defmap: {}
2025-05-02 21:05:38,242 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-02 21:05:38,242 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-02 21:05:38,242 - DEBUG - keep phismap: {}
2025-05-02 21:05:38,242 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-02 21:05:38,242 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-02 21:05:38,242 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'res': '$t_out6.2'}), (8, {'res': '$interp_win8.3'}), (10, {'res': '$interp_delta10.4'}), (12, {'res': '$num_table12.5'}), (14, {'res': '$scale14.6'}), (16, {'res': '$y16.7'}), (18, {'func': '$2load_global.0', 'args': ['$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6', '$y16.7'], 'res': '$18call_function.8'}), (22, {'res': '$const22.9'}), (24, {'retval': '$const22.9', 'castval': '$24return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-02 21:05:38,303 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    t_out = arg(1, name=t_out)               ['t_out']
    interp_win = arg(2, name=interp_win)     ['interp_win']
    interp_delta = arg(3, name=interp_delta) ['interp_delta']
    num_table = arg(4, name=num_table)       ['num_table']
    scale = arg(5, name=scale)               ['scale']
    y = arg(6, name=y)                       ['y']
    $2load_global.0 = global(_resample_loop_s: CPUDispatcher(<function _resample_loop at 0x00000247E9618F70>)) ['$2load_global.0']
    $18call_function.8 = call $2load_global.0(x, t_out, interp_win, interp_delta, num_table, scale, y, func=$2load_global.0, args=[Var(x, interpn.py:86), Var(t_out, interpn.py:86), Var(interp_win, interpn.py:86), Var(interp_delta, interpn.py:86), Var(num_table, interpn.py:86), Var(scale, interpn.py:86), Var(y, interpn.py:86)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call_function.8', '$2load_global.0', 'interp_delta', 'interp_win', 'num_table', 'scale', 't_out', 'x', 'y']
    $const22.9 = const(NoneType, None)       ['$const22.9']
    $24return_value.10 = cast(value=$const22.9) ['$24return_value.10', '$const22.9']
    return $24return_value.10                ['$24return_value.10']

2025-05-02 21:05:38,307 - DEBUG - ==== SSA block analysis pass on 0
2025-05-02 21:05:38,307 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB0F8A00>
2025-05-02 21:05:38,307 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,307 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,307 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,307 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,307 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,307 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,307 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,307 - DEBUG - on stmt: $2load_global.0 = global(_resample_loop_s: CPUDispatcher(<function _resample_loop at 0x00000247E9618F70>))
2025-05-02 21:05:38,308 - DEBUG - on stmt: $18call_function.8 = call $2load_global.0(x, t_out, interp_win, interp_delta, num_table, scale, y, func=$2load_global.0, args=[Var(x, interpn.py:86), Var(t_out, interpn.py:86), Var(interp_win, interpn.py:86), Var(interp_delta, interpn.py:86), Var(num_table, interpn.py:86), Var(scale, interpn.py:86), Var(y, interpn.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,308 - DEBUG - on stmt: $const22.9 = const(NoneType, None)
2025-05-02 21:05:38,308 - DEBUG - on stmt: $24return_value.10 = cast(value=$const22.9)
2025-05-02 21:05:38,308 - DEBUG - on stmt: return $24return_value.10
2025-05-02 21:05:38,308 - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call_function.8': [<numba.core.ir.Assign object at 0x00000247FB110D90>],
             '$24return_value.10': [<numba.core.ir.Assign object at 0x00000247FB0F88B0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x00000247FB1103D0>],
             '$const22.9': [<numba.core.ir.Assign object at 0x00000247FB0F8130>],
             'interp_delta': [<numba.core.ir.Assign object at 0x00000247FB0F8EB0>],
             'interp_win': [<numba.core.ir.Assign object at 0x00000247FB0F8D90>],
             'num_table': [<numba.core.ir.Assign object at 0x00000247FB0F8FD0>],
             'scale': [<numba.core.ir.Assign object at 0x00000247FB110130>],
             't_out': [<numba.core.ir.Assign object at 0x00000247FB0F8C70>],
             'x': [<numba.core.ir.Assign object at 0x00000247FB0F81F0>],
             'y': [<numba.core.ir.Assign object at 0x00000247FB110250>]})
2025-05-02 21:05:38,308 - DEBUG - SSA violators set()
2025-05-02 21:05:38,311 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=9)
           2	LOAD_GLOBAL(arg=0, lineno=9)
           4	LOAD_FAST(arg=5, lineno=9)
           6	LOAD_FAST(arg=4, lineno=9)
           8	BINARY_MULTIPLY(arg=None, lineno=9)
          10	CALL_FUNCTION(arg=1, lineno=9)
          12	STORE_FAST(arg=7, lineno=9)
          14	LOAD_CONST(arg=1, lineno=10)
          16	STORE_FAST(arg=8, lineno=10)
          18	LOAD_CONST(arg=2, lineno=12)
          20	STORE_FAST(arg=9, lineno=12)
          22	LOAD_CONST(arg=1, lineno=13)
          24	STORE_FAST(arg=10, lineno=13)
          26	LOAD_CONST(arg=1, lineno=14)
          28	STORE_FAST(arg=11, lineno=14)
          30	LOAD_CONST(arg=2, lineno=15)
          32	STORE_FAST(arg=12, lineno=15)
          34	LOAD_CONST(arg=1, lineno=16)
          36	STORE_FAST(arg=13, lineno=16)
          38	LOAD_CONST(arg=1, lineno=17)
          40	STORE_FAST(arg=14, lineno=17)
          42	LOAD_FAST(arg=2, lineno=19)
          44	LOAD_ATTR(arg=1, lineno=19)
          46	LOAD_CONST(arg=2, lineno=19)
          48	BINARY_SUBSCR(arg=None, lineno=19)
          50	STORE_FAST(arg=15, lineno=19)
          52	LOAD_FAST(arg=0, lineno=20)
          54	LOAD_ATTR(arg=1, lineno=20)
          56	LOAD_CONST(arg=2, lineno=20)
          58	BINARY_SUBSCR(arg=None, lineno=20)
          60	STORE_FAST(arg=16, lineno=20)
          62	LOAD_FAST(arg=1, lineno=21)
          64	LOAD_ATTR(arg=1, lineno=21)
          66	LOAD_CONST(arg=2, lineno=21)
          68	BINARY_SUBSCR(arg=None, lineno=21)
          70	STORE_FAST(arg=17, lineno=21)
          72	LOAD_GLOBAL(arg=2, lineno=23)
          74	LOAD_FAST(arg=17, lineno=23)
          76	CALL_FUNCTION(arg=1, lineno=23)
          78	GET_ITER(arg=None, lineno=23)
>         80	FOR_ITER(arg=298, lineno=23)
          84	STORE_FAST(arg=18, lineno=23)
          86	LOAD_FAST(arg=1, lineno=24)
          88	LOAD_FAST(arg=18, lineno=24)
          90	BINARY_SUBSCR(arg=None, lineno=24)
          92	STORE_FAST(arg=8, lineno=24)
          94	LOAD_GLOBAL(arg=0, lineno=27)
          96	LOAD_FAST(arg=8, lineno=27)
          98	CALL_FUNCTION(arg=1, lineno=27)
         100	STORE_FAST(arg=9, lineno=27)
         102	LOAD_FAST(arg=5, lineno=30)
         104	LOAD_FAST(arg=8, lineno=30)
         106	LOAD_FAST(arg=9, lineno=30)
         108	BINARY_SUBTRACT(arg=None, lineno=30)
         110	BINARY_MULTIPLY(arg=None, lineno=30)
         112	STORE_FAST(arg=10, lineno=30)
         114	LOAD_FAST(arg=10, lineno=33)
         116	LOAD_FAST(arg=4, lineno=33)
         118	BINARY_MULTIPLY(arg=None, lineno=33)
         120	STORE_FAST(arg=11, lineno=33)
         122	LOAD_GLOBAL(arg=0, lineno=34)
         124	LOAD_FAST(arg=11, lineno=34)
         126	CALL_FUNCTION(arg=1, lineno=34)
         128	STORE_FAST(arg=12, lineno=34)
         130	LOAD_FAST(arg=11, lineno=37)
         132	LOAD_FAST(arg=12, lineno=37)
         134	BINARY_SUBTRACT(arg=None, lineno=37)
         136	STORE_FAST(arg=13, lineno=37)
         138	LOAD_GLOBAL(arg=3, lineno=40)
         140	LOAD_FAST(arg=9, lineno=40)
         142	LOAD_CONST(arg=3, lineno=40)
         144	BINARY_ADD(arg=None, lineno=40)
         146	LOAD_FAST(arg=15, lineno=40)
         148	LOAD_FAST(arg=12, lineno=40)
         150	BINARY_SUBTRACT(arg=None, lineno=40)
         152	LOAD_FAST(arg=7, lineno=40)
         154	BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
         156	CALL_FUNCTION(arg=2, lineno=40)
         158	STORE_FAST(arg=19, lineno=40)
         160	LOAD_GLOBAL(arg=4, lineno=41)
         162	LOAD_FAST(arg=19, lineno=41)
         164	CALL_FUNCTION(arg=1, lineno=41)
         166	GET_ITER(arg=None, lineno=41)
>        168	FOR_ITER(arg=68, lineno=41)
         170	STORE_FAST(arg=20, lineno=41)
         172	LOAD_FAST(arg=2, lineno=44)
         174	LOAD_FAST(arg=12, lineno=44)
         176	LOAD_FAST(arg=20, lineno=44)
         178	LOAD_FAST(arg=7, lineno=44)
         180	BINARY_MULTIPLY(arg=None, lineno=44)
         182	BINARY_ADD(arg=None, lineno=44)
         184	BINARY_SUBSCR(arg=None, lineno=44)
         186	LOAD_FAST(arg=13, lineno=45)
         188	LOAD_FAST(arg=3, lineno=45)
         190	LOAD_FAST(arg=12, lineno=45)
         192	LOAD_FAST(arg=20, lineno=45)
         194	LOAD_FAST(arg=7, lineno=45)
         196	BINARY_MULTIPLY(arg=None, lineno=45)
         198	BINARY_ADD(arg=None, lineno=45)
         200	BINARY_SUBSCR(arg=None, lineno=45)
         202	BINARY_MULTIPLY(arg=None, lineno=45)
         204	BINARY_ADD(arg=None, lineno=44)
         206	STORE_FAST(arg=14, lineno=43)
         208	LOAD_FAST(arg=6, lineno=47)
         210	LOAD_FAST(arg=18, lineno=47)
         212	DUP_TOP_TWO(arg=None, lineno=47)
         214	BINARY_SUBSCR(arg=None, lineno=47)
         216	LOAD_FAST(arg=14, lineno=47)
         218	LOAD_FAST(arg=0, lineno=47)
         220	LOAD_FAST(arg=9, lineno=47)
         222	LOAD_FAST(arg=20, lineno=47)
         224	BINARY_SUBTRACT(arg=None, lineno=47)
         226	BINARY_SUBSCR(arg=None, lineno=47)
         228	BINARY_MULTIPLY(arg=None, lineno=47)
         230	INPLACE_ADD(arg=None, lineno=47)
         232	ROT_THREE(arg=None, lineno=47)
         234	STORE_SUBSCR(arg=None, lineno=47)
         236	JUMP_ABSOLUTE(arg=168, lineno=47)
>        238	LOAD_FAST(arg=5, lineno=50)
         240	LOAD_FAST(arg=10, lineno=50)
         242	BINARY_SUBTRACT(arg=None, lineno=50)
         244	STORE_FAST(arg=10, lineno=50)
         246	LOAD_FAST(arg=10, lineno=53)
         248	LOAD_FAST(arg=4, lineno=53)
         250	BINARY_MULTIPLY(arg=None, lineno=53)
         252	STORE_FAST(arg=11, lineno=53)
         254	LOAD_GLOBAL(arg=0, lineno=54)
         256	LOAD_FAST(arg=11, lineno=54)
         258	CALL_FUNCTION(arg=1, lineno=54)
         260	STORE_FAST(arg=12, lineno=54)
         262	LOAD_FAST(arg=11, lineno=57)
         264	LOAD_FAST(arg=12, lineno=57)
         266	BINARY_SUBTRACT(arg=None, lineno=57)
         268	STORE_FAST(arg=13, lineno=57)
         270	LOAD_GLOBAL(arg=3, lineno=60)
         272	LOAD_FAST(arg=16, lineno=60)
         274	LOAD_FAST(arg=9, lineno=60)
         276	BINARY_SUBTRACT(arg=None, lineno=60)
         278	LOAD_CONST(arg=3, lineno=60)
         280	BINARY_SUBTRACT(arg=None, lineno=60)
         282	LOAD_FAST(arg=15, lineno=60)
         284	LOAD_FAST(arg=12, lineno=60)
         286	BINARY_SUBTRACT(arg=None, lineno=60)
         288	LOAD_FAST(arg=7, lineno=60)
         290	BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
         292	CALL_FUNCTION(arg=2, lineno=60)
         294	STORE_FAST(arg=21, lineno=60)
         296	LOAD_GLOBAL(arg=4, lineno=61)
         298	LOAD_FAST(arg=21, lineno=61)
         300	CALL_FUNCTION(arg=1, lineno=61)
         302	GET_ITER(arg=None, lineno=61)
>        304	FOR_ITER(arg=74, lineno=61)
         306	STORE_FAST(arg=22, lineno=61)
         308	LOAD_FAST(arg=2, lineno=63)
         310	LOAD_FAST(arg=12, lineno=63)
         312	LOAD_FAST(arg=22, lineno=63)
         314	LOAD_FAST(arg=7, lineno=63)
         316	BINARY_MULTIPLY(arg=None, lineno=63)
         318	BINARY_ADD(arg=None, lineno=63)
         320	BINARY_SUBSCR(arg=None, lineno=63)
         322	LOAD_FAST(arg=13, lineno=64)
         324	LOAD_FAST(arg=3, lineno=64)
         326	LOAD_FAST(arg=12, lineno=64)
         328	LOAD_FAST(arg=22, lineno=64)
         330	LOAD_FAST(arg=7, lineno=64)
         332	BINARY_MULTIPLY(arg=None, lineno=64)
         334	BINARY_ADD(arg=None, lineno=64)
         336	BINARY_SUBSCR(arg=None, lineno=64)
         338	BINARY_MULTIPLY(arg=None, lineno=64)
         340	BINARY_ADD(arg=None, lineno=63)
         342	STORE_FAST(arg=14, lineno=62)
         344	LOAD_FAST(arg=6, lineno=66)
         346	LOAD_FAST(arg=18, lineno=66)
         348	DUP_TOP_TWO(arg=None, lineno=66)
         350	BINARY_SUBSCR(arg=None, lineno=66)
         352	LOAD_FAST(arg=14, lineno=66)
         354	LOAD_FAST(arg=0, lineno=66)
         356	LOAD_FAST(arg=9, lineno=66)
         358	LOAD_FAST(arg=22, lineno=66)
         360	BINARY_ADD(arg=None, lineno=66)
         362	LOAD_CONST(arg=3, lineno=66)
         364	BINARY_ADD(arg=None, lineno=66)
         366	BINARY_SUBSCR(arg=None, lineno=66)
         368	BINARY_MULTIPLY(arg=None, lineno=66)
         370	INPLACE_ADD(arg=None, lineno=66)
         372	ROT_THREE(arg=None, lineno=66)
         374	STORE_SUBSCR(arg=None, lineno=66)
         376	JUMP_ABSOLUTE(arg=304, lineno=66)
>        380	JUMP_ABSOLUTE(arg=80, lineno=66)
>        382	LOAD_CONST(arg=0, lineno=66)
         384	RETURN_VALUE(arg=None, lineno=66)
2025-05-02 21:05:38,311 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-02 21:05:38,311 - DEBUG - stack: []
2025-05-02 21:05:38,311 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=9)
2025-05-02 21:05:38,311 - DEBUG - stack []
2025-05-02 21:05:38,311 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=9)
2025-05-02 21:05:38,311 - DEBUG - stack []
2025-05-02 21:05:38,311 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=5, lineno=9)
2025-05-02 21:05:38,311 - DEBUG - stack ['$2load_global.0']
2025-05-02 21:05:38,311 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=4, lineno=9)
2025-05-02 21:05:38,311 - DEBUG - stack ['$2load_global.0', '$scale4.1']
2025-05-02 21:05:38,311 - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=9)
2025-05-02 21:05:38,311 - DEBUG - stack ['$2load_global.0', '$scale4.1', '$num_table6.2']
2025-05-02 21:05:38,311 - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=9)
2025-05-02 21:05:38,311 - DEBUG - stack ['$2load_global.0', '$8binary_multiply.3']
2025-05-02 21:05:38,311 - DEBUG - dispatch pc=12, inst=STORE_FAST(arg=7, lineno=9)
2025-05-02 21:05:38,311 - DEBUG - stack ['$10call_function.4']
2025-05-02 21:05:38,311 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=10)
2025-05-02 21:05:38,311 - DEBUG - stack []
2025-05-02 21:05:38,311 - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=8, lineno=10)
2025-05-02 21:05:38,311 - DEBUG - stack ['$const14.5']
2025-05-02 21:05:38,311 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=12)
2025-05-02 21:05:38,312 - DEBUG - stack []
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=20, inst=STORE_FAST(arg=9, lineno=12)
2025-05-02 21:05:38,312 - DEBUG - stack ['$const18.6']
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=13)
2025-05-02 21:05:38,312 - DEBUG - stack []
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=24, inst=STORE_FAST(arg=10, lineno=13)
2025-05-02 21:05:38,312 - DEBUG - stack ['$const22.7']
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=26, inst=LOAD_CONST(arg=1, lineno=14)
2025-05-02 21:05:38,312 - DEBUG - stack []
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=28, inst=STORE_FAST(arg=11, lineno=14)
2025-05-02 21:05:38,312 - DEBUG - stack ['$const26.8']
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=15)
2025-05-02 21:05:38,312 - DEBUG - stack []
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=32, inst=STORE_FAST(arg=12, lineno=15)
2025-05-02 21:05:38,312 - DEBUG - stack ['$const30.9']
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=16)
2025-05-02 21:05:38,312 - DEBUG - stack []
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=36, inst=STORE_FAST(arg=13, lineno=16)
2025-05-02 21:05:38,312 - DEBUG - stack ['$const34.10']
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=17)
2025-05-02 21:05:38,312 - DEBUG - stack []
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=40, inst=STORE_FAST(arg=14, lineno=17)
2025-05-02 21:05:38,312 - DEBUG - stack ['$const38.11']
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=42, inst=LOAD_FAST(arg=2, lineno=19)
2025-05-02 21:05:38,312 - DEBUG - stack []
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=44, inst=LOAD_ATTR(arg=1, lineno=19)
2025-05-02 21:05:38,312 - DEBUG - stack ['$interp_win42.12']
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=46, inst=LOAD_CONST(arg=2, lineno=19)
2025-05-02 21:05:38,312 - DEBUG - stack ['$44load_attr.13']
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=19)
2025-05-02 21:05:38,312 - DEBUG - stack ['$44load_attr.13', '$const46.14']
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=50, inst=STORE_FAST(arg=15, lineno=19)
2025-05-02 21:05:38,312 - DEBUG - stack ['$48binary_subscr.15']
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=20)
2025-05-02 21:05:38,312 - DEBUG - stack []
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=54, inst=LOAD_ATTR(arg=1, lineno=20)
2025-05-02 21:05:38,313 - DEBUG - stack ['$x52.16']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=56, inst=LOAD_CONST(arg=2, lineno=20)
2025-05-02 21:05:38,313 - DEBUG - stack ['$54load_attr.17']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=20)
2025-05-02 21:05:38,313 - DEBUG - stack ['$54load_attr.17', '$const56.18']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=60, inst=STORE_FAST(arg=16, lineno=20)
2025-05-02 21:05:38,313 - DEBUG - stack ['$58binary_subscr.19']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=21)
2025-05-02 21:05:38,313 - DEBUG - stack []
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=64, inst=LOAD_ATTR(arg=1, lineno=21)
2025-05-02 21:05:38,313 - DEBUG - stack ['$t_out62.20']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=21)
2025-05-02 21:05:38,313 - DEBUG - stack ['$64load_attr.21']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=21)
2025-05-02 21:05:38,313 - DEBUG - stack ['$64load_attr.21', '$const66.22']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=70, inst=STORE_FAST(arg=17, lineno=21)
2025-05-02 21:05:38,313 - DEBUG - stack ['$68binary_subscr.23']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=72, inst=LOAD_GLOBAL(arg=2, lineno=23)
2025-05-02 21:05:38,313 - DEBUG - stack []
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=17, lineno=23)
2025-05-02 21:05:38,313 - DEBUG - stack ['$72load_global.24']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=23)
2025-05-02 21:05:38,313 - DEBUG - stack ['$72load_global.24', '$n_out74.25']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=23)
2025-05-02 21:05:38,313 - DEBUG - stack ['$76call_function.26']
2025-05-02 21:05:38,313 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.27',), blockstack=(), npush=0)]
2025-05-02 21:05:38,313 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-05-02 21:05:38,313 - DEBUG - stack: ['$phi80.0']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=298, lineno=23)
2025-05-02 21:05:38,313 - DEBUG - stack ['$phi80.0']
2025-05-02 21:05:38,313 - DEBUG - end state. edges=[Edge(pc=382, stack=(), blockstack=(), npush=0), Edge(pc=84, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-05-02 21:05:38,313 - DEBUG - pending: deque([State(pc_initial=382 nstack_initial=0), State(pc_initial=84 nstack_initial=2)])
2025-05-02 21:05:38,314 - DEBUG - stack: []
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=382, inst=LOAD_CONST(arg=0, lineno=66)
2025-05-02 21:05:38,314 - DEBUG - stack []
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=384, inst=RETURN_VALUE(arg=None, lineno=66)
2025-05-02 21:05:38,314 - DEBUG - stack ['$const382.0']
2025-05-02 21:05:38,314 - DEBUG - end state. edges=[]
2025-05-02 21:05:38,314 - DEBUG - pending: deque([State(pc_initial=84 nstack_initial=2)])
2025-05-02 21:05:38,314 - DEBUG - stack: ['$phi84.0', '$phi84.1']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=84, inst=STORE_FAST(arg=18, lineno=23)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0', '$phi84.1']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=24)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=88, inst=LOAD_FAST(arg=18, lineno=24)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0', '$t_out86.2']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=24)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0', '$t_out86.2', '$t88.3']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=92, inst=STORE_FAST(arg=8, lineno=24)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0', '$90binary_subscr.4']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=94, inst=LOAD_GLOBAL(arg=0, lineno=27)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=96, inst=LOAD_FAST(arg=8, lineno=27)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0', '$94load_global.5']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=98, inst=CALL_FUNCTION(arg=1, lineno=27)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0', '$94load_global.5', '$time_register96.6']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=100, inst=STORE_FAST(arg=9, lineno=27)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0', '$98call_function.7']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=102, inst=LOAD_FAST(arg=5, lineno=30)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=104, inst=LOAD_FAST(arg=8, lineno=30)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0', '$scale102.8']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=9, lineno=30)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0', '$scale102.8', '$time_register104.9']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=30)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0', '$scale102.8', '$time_register104.9', '$n106.10']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=110, inst=BINARY_MULTIPLY(arg=None, lineno=30)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$scale102.8', '$108binary_subtract.11']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=112, inst=STORE_FAST(arg=10, lineno=30)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$110binary_multiply.12']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=10, lineno=33)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=4, lineno=33)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$frac114.13']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=118, inst=BINARY_MULTIPLY(arg=None, lineno=33)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$frac114.13', '$num_table116.14']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=120, inst=STORE_FAST(arg=11, lineno=33)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$118binary_multiply.15']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=122, inst=LOAD_GLOBAL(arg=0, lineno=34)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=124, inst=LOAD_FAST(arg=11, lineno=34)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$122load_global.16']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=126, inst=CALL_FUNCTION(arg=1, lineno=34)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$122load_global.16', '$index_frac124.17']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=128, inst=STORE_FAST(arg=12, lineno=34)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$126call_function.18']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=130, inst=LOAD_FAST(arg=11, lineno=37)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=12, lineno=37)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$index_frac130.19']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=134, inst=BINARY_SUBTRACT(arg=None, lineno=37)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$index_frac130.19', '$offset132.20']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=136, inst=STORE_FAST(arg=13, lineno=37)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$134binary_subtract.21']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=138, inst=LOAD_GLOBAL(arg=3, lineno=40)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=140, inst=LOAD_FAST(arg=9, lineno=40)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$138load_global.22']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=142, inst=LOAD_CONST(arg=3, lineno=40)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$n140.23']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=144, inst=BINARY_ADD(arg=None, lineno=40)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$n140.23', '$const142.24']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=146, inst=LOAD_FAST(arg=15, lineno=40)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=148, inst=LOAD_FAST(arg=12, lineno=40)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$nwin146.26']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=150, inst=BINARY_SUBTRACT(arg=None, lineno=40)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$nwin146.26', '$offset148.27']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=7, lineno=40)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$150binary_subtract.28']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=154, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$150binary_subtract.28', '$index_step152.29']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=156, inst=CALL_FUNCTION(arg=2, lineno=40)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$154binary_floor_divide.30']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=158, inst=STORE_FAST(arg=19, lineno=40)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$156call_function.31']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=160, inst=LOAD_GLOBAL(arg=4, lineno=41)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=162, inst=LOAD_FAST(arg=19, lineno=41)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$160load_global.32']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=41)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$160load_global.32', '$i_max162.33']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=166, inst=GET_ITER(arg=None, lineno=41)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$164call_function.34']
2025-05-02 21:05:38,316 - DEBUG - end state. edges=[Edge(pc=168, stack=('$phi84.0', '$166get_iter.35'), blockstack=(), npush=0)]
2025-05-02 21:05:38,316 - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=2)])
2025-05-02 21:05:38,316 - DEBUG - stack: ['$phi168.0', '$phi168.1']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=168, inst=FOR_ITER(arg=68, lineno=41)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi168.0', '$phi168.1']
2025-05-02 21:05:38,316 - DEBUG - end state. edges=[Edge(pc=238, stack=('$phi168.0',), blockstack=(), npush=0), Edge(pc=170, stack=('$phi168.0', '$phi168.1', '$168for_iter.3'), blockstack=(), npush=0)]
2025-05-02 21:05:38,317 - DEBUG - pending: deque([State(pc_initial=238 nstack_initial=1), State(pc_initial=170 nstack_initial=3)])
2025-05-02 21:05:38,317 - DEBUG - stack: ['$phi238.0']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=238, inst=LOAD_FAST(arg=5, lineno=50)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=10, lineno=50)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$scale238.1']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=242, inst=BINARY_SUBTRACT(arg=None, lineno=50)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$scale238.1', '$frac240.2']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=244, inst=STORE_FAST(arg=10, lineno=50)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$242binary_subtract.3']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=10, lineno=53)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=248, inst=LOAD_FAST(arg=4, lineno=53)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$frac246.4']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=250, inst=BINARY_MULTIPLY(arg=None, lineno=53)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$frac246.4', '$num_table248.5']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=252, inst=STORE_FAST(arg=11, lineno=53)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$250binary_multiply.6']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=254, inst=LOAD_GLOBAL(arg=0, lineno=54)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=11, lineno=54)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$254load_global.7']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=258, inst=CALL_FUNCTION(arg=1, lineno=54)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$254load_global.7', '$index_frac256.8']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=260, inst=STORE_FAST(arg=12, lineno=54)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$258call_function.9']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=262, inst=LOAD_FAST(arg=11, lineno=57)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=264, inst=LOAD_FAST(arg=12, lineno=57)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$index_frac262.10']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=266, inst=BINARY_SUBTRACT(arg=None, lineno=57)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$index_frac262.10', '$offset264.11']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=268, inst=STORE_FAST(arg=13, lineno=57)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$266binary_subtract.12']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=270, inst=LOAD_GLOBAL(arg=3, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=272, inst=LOAD_FAST(arg=16, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=274, inst=LOAD_FAST(arg=9, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$n_orig272.14']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=276, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$n_orig272.14', '$n274.15']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=278, inst=LOAD_CONST(arg=3, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$276binary_subtract.16']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=280, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$276binary_subtract.16', '$const278.17']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=282, inst=LOAD_FAST(arg=15, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=284, inst=LOAD_FAST(arg=12, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$nwin282.19']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=286, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$nwin282.19', '$offset284.20']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=288, inst=LOAD_FAST(arg=7, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$286binary_subtract.21']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=290, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$286binary_subtract.21', '$index_step288.22']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=292, inst=CALL_FUNCTION(arg=2, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$290binary_floor_divide.23']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=294, inst=STORE_FAST(arg=21, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$292call_function.24']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=296, inst=LOAD_GLOBAL(arg=4, lineno=61)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=298, inst=LOAD_FAST(arg=21, lineno=61)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$296load_global.25']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=300, inst=CALL_FUNCTION(arg=1, lineno=61)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$296load_global.25', '$k_max298.26']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=302, inst=GET_ITER(arg=None, lineno=61)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi238.0', '$300call_function.27']
2025-05-02 21:05:38,319 - DEBUG - end state. edges=[Edge(pc=304, stack=('$phi238.0', '$302get_iter.28'), blockstack=(), npush=0)]
2025-05-02 21:05:38,319 - DEBUG - pending: deque([State(pc_initial=170 nstack_initial=3), State(pc_initial=304 nstack_initial=2)])
2025-05-02 21:05:38,319 - DEBUG - stack: ['$phi170.0', '$phi170.1', '$phi170.2']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=170, inst=STORE_FAST(arg=20, lineno=41)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$phi170.2']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=172, inst=LOAD_FAST(arg=2, lineno=44)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=12, lineno=44)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=176, inst=LOAD_FAST(arg=20, lineno=44)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=178, inst=LOAD_FAST(arg=7, lineno=44)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$i176.5']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=44)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$i176.5', '$index_step178.6']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=44)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$180binary_multiply.7']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=44)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$182binary_add.8']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=186, inst=LOAD_FAST(arg=13, lineno=45)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=188, inst=LOAD_FAST(arg=3, lineno=45)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=12, lineno=45)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=192, inst=LOAD_FAST(arg=20, lineno=45)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=45)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$i192.13']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=196, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$i192.13', '$index_step194.14']
2025-05-02 21:05:38,320 - DEBUG - dispatch pc=198, inst=BINARY_ADD(arg=None, lineno=45)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$196binary_multiply.15']
2025-05-02 21:05:38,320 - DEBUG - dispatch pc=200, inst=BINARY_SUBSCR(arg=None, lineno=45)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$198binary_add.16']
2025-05-02 21:05:38,320 - DEBUG - dispatch pc=202, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$200binary_subscr.17']
2025-05-02 21:05:38,320 - DEBUG - dispatch pc=204, inst=BINARY_ADD(arg=None, lineno=44)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$202binary_multiply.18']
2025-05-02 21:05:38,320 - DEBUG - dispatch pc=206, inst=STORE_FAST(arg=14, lineno=43)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1', '$204binary_add.19']
2025-05-02 21:05:38,320 - DEBUG - dispatch pc=208, inst=LOAD_FAST(arg=6, lineno=47)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 21:05:38,320 - DEBUG - dispatch pc=210, inst=LOAD_FAST(arg=18, lineno=47)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20']
2025-05-02 21:05:38,320 - DEBUG - dispatch pc=212, inst=DUP_TOP_TWO(arg=None, lineno=47)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21']
2025-05-02 21:05:38,320 - DEBUG - dispatch pc=214, inst=BINARY_SUBSCR(arg=None, lineno=47)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$212dup_top_two.22', '$212dup_top_two.23']
2025-05-02 21:05:38,320 - DEBUG - dispatch pc=216, inst=LOAD_FAST(arg=14, lineno=47)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24']
2025-05-02 21:05:38,339 - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=47)
2025-05-02 21:05:38,339 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25']
2025-05-02 21:05:38,339 - DEBUG - dispatch pc=220, inst=LOAD_FAST(arg=9, lineno=47)
2025-05-02 21:05:38,339 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26']
2025-05-02 21:05:38,339 - DEBUG - dispatch pc=222, inst=LOAD_FAST(arg=20, lineno=47)
2025-05-02 21:05:38,339 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$n220.27']
2025-05-02 21:05:38,339 - DEBUG - dispatch pc=224, inst=BINARY_SUBTRACT(arg=None, lineno=47)
2025-05-02 21:05:38,339 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$n220.27', '$i222.28']
2025-05-02 21:05:38,339 - DEBUG - dispatch pc=226, inst=BINARY_SUBSCR(arg=None, lineno=47)
2025-05-02 21:05:38,339 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$224binary_subtract.29']
2025-05-02 21:05:38,339 - DEBUG - dispatch pc=228, inst=BINARY_MULTIPLY(arg=None, lineno=47)
2025-05-02 21:05:38,339 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$226binary_subscr.30']
2025-05-02 21:05:38,339 - DEBUG - dispatch pc=230, inst=INPLACE_ADD(arg=None, lineno=47)
2025-05-02 21:05:38,339 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$228binary_multiply.31']
2025-05-02 21:05:38,339 - DEBUG - dispatch pc=232, inst=ROT_THREE(arg=None, lineno=47)
2025-05-02 21:05:38,339 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$230inplace_add.32']
2025-05-02 21:05:38,339 - DEBUG - dispatch pc=234, inst=STORE_SUBSCR(arg=None, lineno=47)
2025-05-02 21:05:38,339 - DEBUG - stack ['$phi170.0', '$phi170.1', '$230inplace_add.32', '$y208.20', '$t210.21']
2025-05-02 21:05:38,339 - DEBUG - dispatch pc=236, inst=JUMP_ABSOLUTE(arg=168, lineno=47)
2025-05-02 21:05:38,340 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 21:05:38,340 - DEBUG - end state. edges=[Edge(pc=168, stack=('$phi170.0', '$phi170.1'), blockstack=(), npush=0)]
2025-05-02 21:05:38,340 - DEBUG - pending: deque([State(pc_initial=304 nstack_initial=2), State(pc_initial=168 nstack_initial=2)])
2025-05-02 21:05:38,340 - DEBUG - stack: ['$phi304.0', '$phi304.1']
2025-05-02 21:05:38,340 - DEBUG - dispatch pc=304, inst=FOR_ITER(arg=74, lineno=61)
2025-05-02 21:05:38,340 - DEBUG - stack ['$phi304.0', '$phi304.1']
2025-05-02 21:05:38,340 - DEBUG - end state. edges=[Edge(pc=380, stack=('$phi304.0',), blockstack=(), npush=0), Edge(pc=306, stack=('$phi304.0', '$phi304.1', '$304for_iter.3'), blockstack=(), npush=0)]
2025-05-02 21:05:38,340 - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=2), State(pc_initial=380 nstack_initial=1), State(pc_initial=306 nstack_initial=3)])
2025-05-02 21:05:38,340 - DEBUG - pending: deque([State(pc_initial=380 nstack_initial=1), State(pc_initial=306 nstack_initial=3)])
2025-05-02 21:05:38,340 - DEBUG - stack: ['$phi380.0']
2025-05-02 21:05:38,340 - DEBUG - dispatch pc=380, inst=JUMP_ABSOLUTE(arg=80, lineno=66)
2025-05-02 21:05:38,340 - DEBUG - stack ['$phi380.0']
2025-05-02 21:05:38,340 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi380.0',), blockstack=(), npush=0)]
2025-05-02 21:05:38,340 - DEBUG - pending: deque([State(pc_initial=306 nstack_initial=3), State(pc_initial=80 nstack_initial=1)])
2025-05-02 21:05:38,340 - DEBUG - stack: ['$phi306.0', '$phi306.1', '$phi306.2']
2025-05-02 21:05:38,340 - DEBUG - dispatch pc=306, inst=STORE_FAST(arg=22, lineno=61)
2025-05-02 21:05:38,340 - DEBUG - stack ['$phi306.0', '$phi306.1', '$phi306.2']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=308, inst=LOAD_FAST(arg=2, lineno=63)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=310, inst=LOAD_FAST(arg=12, lineno=63)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=312, inst=LOAD_FAST(arg=22, lineno=63)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=314, inst=LOAD_FAST(arg=7, lineno=63)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$k312.5']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=316, inst=BINARY_MULTIPLY(arg=None, lineno=63)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$k312.5', '$index_step314.6']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=318, inst=BINARY_ADD(arg=None, lineno=63)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$316binary_multiply.7']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=320, inst=BINARY_SUBSCR(arg=None, lineno=63)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$318binary_add.8']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=322, inst=LOAD_FAST(arg=13, lineno=64)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=324, inst=LOAD_FAST(arg=3, lineno=64)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=326, inst=LOAD_FAST(arg=12, lineno=64)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=328, inst=LOAD_FAST(arg=22, lineno=64)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=330, inst=LOAD_FAST(arg=7, lineno=64)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$k328.13']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=332, inst=BINARY_MULTIPLY(arg=None, lineno=64)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$k328.13', '$index_step330.14']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=334, inst=BINARY_ADD(arg=None, lineno=64)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$332binary_multiply.15']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=336, inst=BINARY_SUBSCR(arg=None, lineno=64)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$334binary_add.16']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=338, inst=BINARY_MULTIPLY(arg=None, lineno=64)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$336binary_subscr.17']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=340, inst=BINARY_ADD(arg=None, lineno=63)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$338binary_multiply.18']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=342, inst=STORE_FAST(arg=14, lineno=62)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$340binary_add.19']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=344, inst=LOAD_FAST(arg=6, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=346, inst=LOAD_FAST(arg=18, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=348, inst=DUP_TOP_TWO(arg=None, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=350, inst=BINARY_SUBSCR(arg=None, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$348dup_top_two.22', '$348dup_top_two.23']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=352, inst=LOAD_FAST(arg=14, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=354, inst=LOAD_FAST(arg=0, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=356, inst=LOAD_FAST(arg=9, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=358, inst=LOAD_FAST(arg=22, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$n356.27']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=360, inst=BINARY_ADD(arg=None, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$n356.27', '$k358.28']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=362, inst=LOAD_CONST(arg=3, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$360binary_add.29']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=364, inst=BINARY_ADD(arg=None, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$360binary_add.29', '$const362.30']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=366, inst=BINARY_SUBSCR(arg=None, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$364binary_add.31']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=368, inst=BINARY_MULTIPLY(arg=None, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$366binary_subscr.32']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=370, inst=INPLACE_ADD(arg=None, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$368binary_multiply.33']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=372, inst=ROT_THREE(arg=None, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$370inplace_add.34']
2025-05-02 21:05:38,343 - DEBUG - dispatch pc=374, inst=STORE_SUBSCR(arg=None, lineno=66)
2025-05-02 21:05:38,343 - DEBUG - stack ['$phi306.0', '$phi306.1', '$370inplace_add.34', '$y344.20', '$t346.21']
2025-05-02 21:05:38,343 - DEBUG - dispatch pc=376, inst=JUMP_ABSOLUTE(arg=304, lineno=66)
2025-05-02 21:05:38,343 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 21:05:38,343 - DEBUG - end state. edges=[Edge(pc=304, stack=('$phi306.0', '$phi306.1'), blockstack=(), npush=0)]
2025-05-02 21:05:38,343 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=304 nstack_initial=2)])
2025-05-02 21:05:38,343 - DEBUG - pending: deque([State(pc_initial=304 nstack_initial=2)])
2025-05-02 21:05:38,343 - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-02 21:05:38,343 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=84 nstack_initial=2): {'$phi84.1'},
             State(pc_initial=168 nstack_initial=2): {'$phi168.1'},
             State(pc_initial=170 nstack_initial=3): {'$phi170.2'},
             State(pc_initial=238 nstack_initial=1): set(),
             State(pc_initial=304 nstack_initial=2): {'$phi304.1'},
             State(pc_initial=306 nstack_initial=3): {'$phi306.2'},
             State(pc_initial=380 nstack_initial=1): set(),
             State(pc_initial=382 nstack_initial=0): set()})
2025-05-02 21:05:38,343 - DEBUG - defmap: {'$phi168.1': State(pc_initial=84 nstack_initial=2),
 '$phi170.2': State(pc_initial=168 nstack_initial=2),
 '$phi304.1': State(pc_initial=238 nstack_initial=1),
 '$phi306.2': State(pc_initial=304 nstack_initial=2),
 '$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi84.1': State(pc_initial=80 nstack_initial=1)}
2025-05-02 21:05:38,343 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi170.0',
                            State(pc_initial=170 nstack_initial=3)),
                           ('$phi84.0', State(pc_initial=84 nstack_initial=2))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2)),
                           ('$phi170.1',
                            State(pc_initial=170 nstack_initial=3))},
             '$phi170.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.1': {('$phi168.1',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi304.0': {('$phi238.0',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi306.0',
                            State(pc_initial=306 nstack_initial=3))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi306.1',
                            State(pc_initial=306 nstack_initial=3))},
             '$phi306.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.1': {('$phi304.1',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi380.0',
                           State(pc_initial=380 nstack_initial=1))},
             '$phi84.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:05:38,343 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2)),
                           ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2)),
                           ('$phi168.1',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi304.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2)),
                           ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi304.1',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:05:38,344 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:05:38,344 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:05:38,344 - DEBUG - keep phismap: {'$phi168.1': {('$166get_iter.35', State(pc_initial=84 nstack_initial=2))},
 '$phi170.2': {('$168for_iter.3', State(pc_initial=168 nstack_initial=2))},
 '$phi304.1': {('$302get_iter.28', State(pc_initial=238 nstack_initial=1))},
 '$phi306.2': {('$304for_iter.3', State(pc_initial=304 nstack_initial=2))},
 '$phi80.0': {('$78get_iter.27', State(pc_initial=0 nstack_initial=0))},
 '$phi84.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-05-02 21:05:38,344 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.27'},
             State(pc_initial=80 nstack_initial=1): {'$phi84.1': '$80for_iter.2'},
             State(pc_initial=84 nstack_initial=2): {'$phi168.1': '$166get_iter.35'},
             State(pc_initial=168 nstack_initial=2): {'$phi170.2': '$168for_iter.3'},
             State(pc_initial=238 nstack_initial=1): {'$phi304.1': '$302get_iter.28'},
             State(pc_initial=304 nstack_initial=2): {'$phi306.2': '$304for_iter.3'}})
2025-05-02 21:05:38,345 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-02 21:05:38,345 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$scale4.1'}), (6, {'res': '$num_table6.2'}), (8, {'lhs': '$scale4.1', 'rhs': '$num_table6.2', 'res': '$8binary_multiply.3'}), (10, {'func': '$2load_global.0', 'args': ['$8binary_multiply.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4'}), (14, {'res': '$const14.5'}), (16, {'value': '$const14.5'}), (18, {'res': '$const18.6'}), (20, {'value': '$const18.6'}), (22, {'res': '$const22.7'}), (24, {'value': '$const22.7'}), (26, {'res': '$const26.8'}), (28, {'value': '$const26.8'}), (30, {'res': '$const30.9'}), (32, {'value': '$const30.9'}), (34, {'res': '$const34.10'}), (36, {'value': '$const34.10'}), (38, {'res': '$const38.11'}), (40, {'value': '$const38.11'}), (42, {'res': '$interp_win42.12'}), (44, {'item': '$interp_win42.12', 'res': '$44load_attr.13'}), (46, {'res': '$const46.14'}), (48, {'index': '$const46.14', 'target': '$44load_attr.13', 'res': '$48binary_subscr.15'}), (50, {'value': '$48binary_subscr.15'}), (52, {'res': '$x52.16'}), (54, {'item': '$x52.16', 'res': '$54load_attr.17'}), (56, {'res': '$const56.18'}), (58, {'index': '$const56.18', 'target': '$54load_attr.17', 'res': '$58binary_subscr.19'}), (60, {'value': '$58binary_subscr.19'}), (62, {'res': '$t_out62.20'}), (64, {'item': '$t_out62.20', 'res': '$64load_attr.21'}), (66, {'res': '$const66.22'}), (68, {'index': '$const66.22', 'target': '$64load_attr.21', 'res': '$68binary_subscr.23'}), (70, {'value': '$68binary_subscr.23'}), (72, {'res': '$72load_global.24'}), (74, {'res': '$n_out74.25'}), (76, {'func': '$72load_global.24', 'args': ['$n_out74.25'], 'res': '$76call_function.26'}), (78, {'value': '$76call_function.26', 'res': '$78get_iter.27'})), outgoing_phis={'$phi80.0': '$78get_iter.27'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.27',)})
2025-05-02 21:05:38,345 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi84.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={382: (), 84: ('$phi80.0', '$80for_iter.2')})
2025-05-02 21:05:38,345 - DEBUG - block_infos State(pc_initial=84 nstack_initial=2):
AdaptBlockInfo(insts=((84, {'value': '$phi84.1'}), (86, {'res': '$t_out86.2'}), (88, {'res': '$t88.3'}), (90, {'index': '$t88.3', 'target': '$t_out86.2', 'res': '$90binary_subscr.4'}), (92, {'value': '$90binary_subscr.4'}), (94, {'res': '$94load_global.5'}), (96, {'res': '$time_register96.6'}), (98, {'func': '$94load_global.5', 'args': ['$time_register96.6'], 'res': '$98call_function.7'}), (100, {'value': '$98call_function.7'}), (102, {'res': '$scale102.8'}), (104, {'res': '$time_register104.9'}), (106, {'res': '$n106.10'}), (108, {'lhs': '$time_register104.9', 'rhs': '$n106.10', 'res': '$108binary_subtract.11'}), (110, {'lhs': '$scale102.8', 'rhs': '$108binary_subtract.11', 'res': '$110binary_multiply.12'}), (112, {'value': '$110binary_multiply.12'}), (114, {'res': '$frac114.13'}), (116, {'res': '$num_table116.14'}), (118, {'lhs': '$frac114.13', 'rhs': '$num_table116.14', 'res': '$118binary_multiply.15'}), (120, {'value': '$118binary_multiply.15'}), (122, {'res': '$122load_global.16'}), (124, {'res': '$index_frac124.17'}), (126, {'func': '$122load_global.16', 'args': ['$index_frac124.17'], 'res': '$126call_function.18'}), (128, {'value': '$126call_function.18'}), (130, {'res': '$index_frac130.19'}), (132, {'res': '$offset132.20'}), (134, {'lhs': '$index_frac130.19', 'rhs': '$offset132.20', 'res': '$134binary_subtract.21'}), (136, {'value': '$134binary_subtract.21'}), (138, {'res': '$138load_global.22'}), (140, {'res': '$n140.23'}), (142, {'res': '$const142.24'}), (144, {'lhs': '$n140.23', 'rhs': '$const142.24', 'res': '$144binary_add.25'}), (146, {'res': '$nwin146.26'}), (148, {'res': '$offset148.27'}), (150, {'lhs': '$nwin146.26', 'rhs': '$offset148.27', 'res': '$150binary_subtract.28'}), (152, {'res': '$index_step152.29'}), (154, {'lhs': '$150binary_subtract.28', 'rhs': '$index_step152.29', 'res': '$154binary_floor_divide.30'}), (156, {'func': '$138load_global.22', 'args': ['$144binary_add.25', '$154binary_floor_divide.30'], 'res': '$156call_function.31'}), (158, {'value': '$156call_function.31'}), (160, {'res': '$160load_global.32'}), (162, {'res': '$i_max162.33'}), (164, {'func': '$160load_global.32', 'args': ['$i_max162.33'], 'res': '$164call_function.34'}), (166, {'value': '$164call_function.34', 'res': '$166get_iter.35'})), outgoing_phis={'$phi168.1': '$166get_iter.35'}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi84.0', '$166get_iter.35')})
2025-05-02 21:05:38,345 - DEBUG - block_infos State(pc_initial=168 nstack_initial=2):
AdaptBlockInfo(insts=((168, {'iterator': '$phi168.1', 'pair': '$168for_iter.2', 'indval': '$168for_iter.3', 'pred': '$168for_iter.4'}),), outgoing_phis={'$phi170.2': '$168for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={238: ('$phi168.0',), 170: ('$phi168.0', '$phi168.1', '$168for_iter.3')})
2025-05-02 21:05:38,345 - DEBUG - block_infos State(pc_initial=170 nstack_initial=3):
AdaptBlockInfo(insts=((170, {'value': '$phi170.2'}), (172, {'res': '$interp_win172.3'}), (174, {'res': '$offset174.4'}), (176, {'res': '$i176.5'}), (178, {'res': '$index_step178.6'}), (180, {'lhs': '$i176.5', 'rhs': '$index_step178.6', 'res': '$180binary_multiply.7'}), (182, {'lhs': '$offset174.4', 'rhs': '$180binary_multiply.7', 'res': '$182binary_add.8'}), (184, {'index': '$182binary_add.8', 'target': '$interp_win172.3', 'res': '$184binary_subscr.9'}), (186, {'res': '$eta186.10'}), (188, {'res': '$interp_delta188.11'}), (190, {'res': '$offset190.12'}), (192, {'res': '$i192.13'}), (194, {'res': '$index_step194.14'}), (196, {'lhs': '$i192.13', 'rhs': '$index_step194.14', 'res': '$196binary_multiply.15'}), (198, {'lhs': '$offset190.12', 'rhs': '$196binary_multiply.15', 'res': '$198binary_add.16'}), (200, {'index': '$198binary_add.16', 'target': '$interp_delta188.11', 'res': '$200binary_subscr.17'}), (202, {'lhs': '$eta186.10', 'rhs': '$200binary_subscr.17', 'res': '$202binary_multiply.18'}), (204, {'lhs': '$184binary_subscr.9', 'rhs': '$202binary_multiply.18', 'res': '$204binary_add.19'}), (206, {'value': '$204binary_add.19'}), (208, {'res': '$y208.20'}), (210, {'res': '$t210.21'}), (212, {'orig': ['$y208.20', '$t210.21'], 'duped': ['$212dup_top_two.22', '$212dup_top_two.23']}), (214, {'index': '$212dup_top_two.23', 'target': '$212dup_top_two.22', 'res': '$214binary_subscr.24'}), (216, {'res': '$weight216.25'}), (218, {'res': '$x218.26'}), (220, {'res': '$n220.27'}), (222, {'res': '$i222.28'}), (224, {'lhs': '$n220.27', 'rhs': '$i222.28', 'res': '$224binary_subtract.29'}), (226, {'index': '$224binary_subtract.29', 'target': '$x218.26', 'res': '$226binary_subscr.30'}), (228, {'lhs': '$weight216.25', 'rhs': '$226binary_subscr.30', 'res': '$228binary_multiply.31'}), (230, {'lhs': '$214binary_subscr.24', 'rhs': '$228binary_multiply.31', 'res': '$230inplace_add.32'}), (234, {'target': '$y208.20', 'index': '$t210.21', 'value': '$230inplace_add.32'}), (236, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi170.0', '$phi170.1')})
2025-05-02 21:05:38,345 - DEBUG - block_infos State(pc_initial=238 nstack_initial=1):
AdaptBlockInfo(insts=((238, {'res': '$scale238.1'}), (240, {'res': '$frac240.2'}), (242, {'lhs': '$scale238.1', 'rhs': '$frac240.2', 'res': '$242binary_subtract.3'}), (244, {'value': '$242binary_subtract.3'}), (246, {'res': '$frac246.4'}), (248, {'res': '$num_table248.5'}), (250, {'lhs': '$frac246.4', 'rhs': '$num_table248.5', 'res': '$250binary_multiply.6'}), (252, {'value': '$250binary_multiply.6'}), (254, {'res': '$254load_global.7'}), (256, {'res': '$index_frac256.8'}), (258, {'func': '$254load_global.7', 'args': ['$index_frac256.8'], 'res': '$258call_function.9'}), (260, {'value': '$258call_function.9'}), (262, {'res': '$index_frac262.10'}), (264, {'res': '$offset264.11'}), (266, {'lhs': '$index_frac262.10', 'rhs': '$offset264.11', 'res': '$266binary_subtract.12'}), (268, {'value': '$266binary_subtract.12'}), (270, {'res': '$270load_global.13'}), (272, {'res': '$n_orig272.14'}), (274, {'res': '$n274.15'}), (276, {'lhs': '$n_orig272.14', 'rhs': '$n274.15', 'res': '$276binary_subtract.16'}), (278, {'res': '$const278.17'}), (280, {'lhs': '$276binary_subtract.16', 'rhs': '$const278.17', 'res': '$280binary_subtract.18'}), (282, {'res': '$nwin282.19'}), (284, {'res': '$offset284.20'}), (286, {'lhs': '$nwin282.19', 'rhs': '$offset284.20', 'res': '$286binary_subtract.21'}), (288, {'res': '$index_step288.22'}), (290, {'lhs': '$286binary_subtract.21', 'rhs': '$index_step288.22', 'res': '$290binary_floor_divide.23'}), (292, {'func': '$270load_global.13', 'args': ['$280binary_subtract.18', '$290binary_floor_divide.23'], 'res': '$292call_function.24'}), (294, {'value': '$292call_function.24'}), (296, {'res': '$296load_global.25'}), (298, {'res': '$k_max298.26'}), (300, {'func': '$296load_global.25', 'args': ['$k_max298.26'], 'res': '$300call_function.27'}), (302, {'value': '$300call_function.27', 'res': '$302get_iter.28'})), outgoing_phis={'$phi304.1': '$302get_iter.28'}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: ('$phi238.0', '$302get_iter.28')})
2025-05-02 21:05:38,345 - DEBUG - block_infos State(pc_initial=304 nstack_initial=2):
AdaptBlockInfo(insts=((304, {'iterator': '$phi304.1', 'pair': '$304for_iter.2', 'indval': '$304for_iter.3', 'pred': '$304for_iter.4'}),), outgoing_phis={'$phi306.2': '$304for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={380: ('$phi304.0',), 306: ('$phi304.0', '$phi304.1', '$304for_iter.3')})
2025-05-02 21:05:38,345 - DEBUG - block_infos State(pc_initial=306 nstack_initial=3):
AdaptBlockInfo(insts=((306, {'value': '$phi306.2'}), (308, {'res': '$interp_win308.3'}), (310, {'res': '$offset310.4'}), (312, {'res': '$k312.5'}), (314, {'res': '$index_step314.6'}), (316, {'lhs': '$k312.5', 'rhs': '$index_step314.6', 'res': '$316binary_multiply.7'}), (318, {'lhs': '$offset310.4', 'rhs': '$316binary_multiply.7', 'res': '$318binary_add.8'}), (320, {'index': '$318binary_add.8', 'target': '$interp_win308.3', 'res': '$320binary_subscr.9'}), (322, {'res': '$eta322.10'}), (324, {'res': '$interp_delta324.11'}), (326, {'res': '$offset326.12'}), (328, {'res': '$k328.13'}), (330, {'res': '$index_step330.14'}), (332, {'lhs': '$k328.13', 'rhs': '$index_step330.14', 'res': '$332binary_multiply.15'}), (334, {'lhs': '$offset326.12', 'rhs': '$332binary_multiply.15', 'res': '$334binary_add.16'}), (336, {'index': '$334binary_add.16', 'target': '$interp_delta324.11', 'res': '$336binary_subscr.17'}), (338, {'lhs': '$eta322.10', 'rhs': '$336binary_subscr.17', 'res': '$338binary_multiply.18'}), (340, {'lhs': '$320binary_subscr.9', 'rhs': '$338binary_multiply.18', 'res': '$340binary_add.19'}), (342, {'value': '$340binary_add.19'}), (344, {'res': '$y344.20'}), (346, {'res': '$t346.21'}), (348, {'orig': ['$y344.20', '$t346.21'], 'duped': ['$348dup_top_two.22', '$348dup_top_two.23']}), (350, {'index': '$348dup_top_two.23', 'target': '$348dup_top_two.22', 'res': '$350binary_subscr.24'}), (352, {'res': '$weight352.25'}), (354, {'res': '$x354.26'}), (356, {'res': '$n356.27'}), (358, {'res': '$k358.28'}), (360, {'lhs': '$n356.27', 'rhs': '$k358.28', 'res': '$360binary_add.29'}), (362, {'res': '$const362.30'}), (364, {'lhs': '$360binary_add.29', 'rhs': '$const362.30', 'res': '$364binary_add.31'}), (366, {'index': '$364binary_add.31', 'target': '$x354.26', 'res': '$366binary_subscr.32'}), (368, {'lhs': '$weight352.25', 'rhs': '$366binary_subscr.32', 'res': '$368binary_multiply.33'}), (370, {'lhs': '$350binary_subscr.24', 'rhs': '$368binary_multiply.33', 'res': '$370inplace_add.34'}), (374, {'target': '$y344.20', 'index': '$t346.21', 'value': '$370inplace_add.34'}), (376, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: ('$phi306.0', '$phi306.1')})
2025-05-02 21:05:38,345 - DEBUG - block_infos State(pc_initial=380 nstack_initial=1):
AdaptBlockInfo(insts=((380, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi380.0',)})
2025-05-02 21:05:38,345 - DEBUG - block_infos State(pc_initial=382 nstack_initial=0):
AdaptBlockInfo(insts=((382, {'res': '$const382.0'}), (384, {'retval': '$const382.0', 'castval': '$384return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-02 21:05:38,347 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    t_out = arg(1, name=t_out)               ['t_out']
    interp_win = arg(2, name=interp_win)     ['interp_win']
    interp_delta = arg(3, name=interp_delta) ['interp_delta']
    num_table = arg(4, name=num_table)       ['num_table']
    scale = arg(5, name=scale)               ['scale']
    y = arg(6, name=y)                       ['y']
    $2load_global.0 = global(int: <class 'int'>) ['$2load_global.0']
    $8binary_multiply.3 = scale * num_table  ['$8binary_multiply.3', 'num_table', 'scale']
    index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8binary_multiply.3', 'index_step']
    time_register = const(float, 0.0)        ['time_register']
    n = const(int, 0)                        ['n']
    frac = const(float, 0.0)                 ['frac']
    index_frac = const(float, 0.0)           ['index_frac']
    offset = const(int, 0)                   ['offset']
    eta = const(float, 0.0)                  ['eta']
    weight = const(float, 0.0)               ['weight']
    $44load_attr.13 = getattr(value=interp_win, attr=shape) ['$44load_attr.13', 'interp_win']
    $const46.14 = const(int, 0)              ['$const46.14']
    nwin = getitem(value=$44load_attr.13, index=$const46.14, fn=<built-in function getitem>) ['$44load_attr.13', '$const46.14', 'nwin']
    $54load_attr.17 = getattr(value=x, attr=shape) ['$54load_attr.17', 'x']
    $const56.18 = const(int, 0)              ['$const56.18']
    n_orig = getitem(value=$54load_attr.17, index=$const56.18, fn=<built-in function getitem>) ['$54load_attr.17', '$const56.18', 'n_orig']
    $64load_attr.21 = getattr(value=t_out, attr=shape) ['$64load_attr.21', 't_out']
    $const66.22 = const(int, 0)              ['$const66.22']
    n_out = getitem(value=$64load_attr.21, index=$const66.22, fn=<built-in function getitem>) ['$64load_attr.21', '$const66.22', 'n_out']
    $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>) ['$72load_global.24']
    $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.24', '$76call_function.26', 'n_out']
    $78get_iter.27 = getiter(value=$76call_function.26) ['$76call_function.26', '$78get_iter.27']
    $phi80.0 = $78get_iter.27                ['$78get_iter.27', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi84.1 = $80for_iter.2                 ['$80for_iter.2', '$phi84.1']
    branch $80for_iter.3, 84, 382            ['$80for_iter.3']
label 84:
    t = $phi84.1                             ['$phi84.1', 't']
    time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>) ['t', 't_out', 'time_register']
    $94load_global.5 = global(int: <class 'int'>) ['$94load_global.5']
    n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None) ['$94load_global.5', 'n', 'time_register']
    $108binary_subtract.11 = time_register - n ['$108binary_subtract.11', 'n', 'time_register']
    frac = scale * $108binary_subtract.11    ['$108binary_subtract.11', 'frac', 'scale']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $122load_global.16 = global(int: <class 'int'>) ['$122load_global.16']
    offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.16', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $138load_global.22 = global(min: <built-in function min>) ['$138load_global.22']
    $const142.24 = const(int, 1)             ['$const142.24']
    $144binary_add.25 = n + $const142.24     ['$144binary_add.25', '$const142.24', 'n']
    $150binary_subtract.28 = nwin - offset   ['$150binary_subtract.28', 'nwin', 'offset']
    $154binary_floor_divide.30 = $150binary_subtract.28 // index_step ['$150binary_subtract.28', '$154binary_floor_divide.30', 'index_step']
    i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None) ['$138load_global.22', '$144binary_add.25', '$154binary_floor_divide.30', 'i_max']
    $160load_global.32 = global(range: <class 'range'>) ['$160load_global.32']
    $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None) ['$160load_global.32', '$164call_function.34', 'i_max']
    $166get_iter.35 = getiter(value=$164call_function.34) ['$164call_function.34', '$166get_iter.35']
    $phi168.1 = $166get_iter.35              ['$166get_iter.35', '$phi168.1']
    jump 168                                 []
label 168:
    $168for_iter.2 = iternext(value=$phi168.1) ['$168for_iter.2', '$phi168.1']
    $168for_iter.3 = pair_first(value=$168for_iter.2) ['$168for_iter.2', '$168for_iter.3']
    $168for_iter.4 = pair_second(value=$168for_iter.2) ['$168for_iter.2', '$168for_iter.4']
    $phi170.2 = $168for_iter.3               ['$168for_iter.3', '$phi170.2']
    branch $168for_iter.4, 170, 238          ['$168for_iter.4']
label 170:
    i = $phi170.2                            ['$phi170.2', 'i']
    $180binary_multiply.7 = i * index_step   ['$180binary_multiply.7', 'i', 'index_step']
    $182binary_add.8 = offset + $180binary_multiply.7 ['$180binary_multiply.7', '$182binary_add.8', 'offset']
    $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>) ['$182binary_add.8', '$184binary_subscr.9', 'interp_win']
    $196binary_multiply.15 = i * index_step  ['$196binary_multiply.15', 'i', 'index_step']
    $198binary_add.16 = offset + $196binary_multiply.15 ['$196binary_multiply.15', '$198binary_add.16', 'offset']
    $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>) ['$198binary_add.16', '$200binary_subscr.17', 'interp_delta']
    $202binary_multiply.18 = eta * $200binary_subscr.17 ['$200binary_subscr.17', '$202binary_multiply.18', 'eta']
    weight = $184binary_subscr.9 + $202binary_multiply.18 ['$184binary_subscr.9', '$202binary_multiply.18', 'weight']
    $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>) ['$214binary_subscr.24', 't', 'y']
    $224binary_subtract.29 = n - i           ['$224binary_subtract.29', 'i', 'n']
    $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>) ['$224binary_subtract.29', '$226binary_subscr.30', 'x']
    $228binary_multiply.31 = weight * $226binary_subscr.30 ['$226binary_subscr.30', '$228binary_multiply.31', 'weight']
    $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined) ['$214binary_subscr.24', '$228binary_multiply.31', '$230inplace_add.32']
    y[t] = $230inplace_add.32                ['$230inplace_add.32', 't', 'y']
    jump 168                                 []
label 238:
    $242binary_subtract.3 = scale - frac     ['$242binary_subtract.3', 'frac', 'scale']
    frac = $242binary_subtract.3             ['$242binary_subtract.3', 'frac']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $254load_global.7 = global(int: <class 'int'>) ['$254load_global.7']
    offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None) ['$254load_global.7', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $270load_global.13 = global(min: <built-in function min>) ['$270load_global.13']
    $276binary_subtract.16 = n_orig - n      ['$276binary_subtract.16', 'n', 'n_orig']
    $const278.17 = const(int, 1)             ['$const278.17']
    $280binary_subtract.18 = $276binary_subtract.16 - $const278.17 ['$276binary_subtract.16', '$280binary_subtract.18', '$const278.17']
    $286binary_subtract.21 = nwin - offset   ['$286binary_subtract.21', 'nwin', 'offset']
    $290binary_floor_divide.23 = $286binary_subtract.21 // index_step ['$286binary_subtract.21', '$290binary_floor_divide.23', 'index_step']
    k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None) ['$270load_global.13', '$280binary_subtract.18', '$290binary_floor_divide.23', 'k_max']
    $296load_global.25 = global(range: <class 'range'>) ['$296load_global.25']
    $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None) ['$296load_global.25', '$300call_function.27', 'k_max']
    $302get_iter.28 = getiter(value=$300call_function.27) ['$300call_function.27', '$302get_iter.28']
    $phi304.1 = $302get_iter.28              ['$302get_iter.28', '$phi304.1']
    jump 304                                 []
label 304:
    $304for_iter.2 = iternext(value=$phi304.1) ['$304for_iter.2', '$phi304.1']
    $304for_iter.3 = pair_first(value=$304for_iter.2) ['$304for_iter.2', '$304for_iter.3']
    $304for_iter.4 = pair_second(value=$304for_iter.2) ['$304for_iter.2', '$304for_iter.4']
    $phi306.2 = $304for_iter.3               ['$304for_iter.3', '$phi306.2']
    branch $304for_iter.4, 306, 380          ['$304for_iter.4']
label 306:
    k = $phi306.2                            ['$phi306.2', 'k']
    $316binary_multiply.7 = k * index_step   ['$316binary_multiply.7', 'index_step', 'k']
    $318binary_add.8 = offset + $316binary_multiply.7 ['$316binary_multiply.7', '$318binary_add.8', 'offset']
    $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>) ['$318binary_add.8', '$320binary_subscr.9', 'interp_win']
    $332binary_multiply.15 = k * index_step  ['$332binary_multiply.15', 'index_step', 'k']
    $334binary_add.16 = offset + $332binary_multiply.15 ['$332binary_multiply.15', '$334binary_add.16', 'offset']
    $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>) ['$334binary_add.16', '$336binary_subscr.17', 'interp_delta']
    $338binary_multiply.18 = eta * $336binary_subscr.17 ['$336binary_subscr.17', '$338binary_multiply.18', 'eta']
    weight = $320binary_subscr.9 + $338binary_multiply.18 ['$320binary_subscr.9', '$338binary_multiply.18', 'weight']
    $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>) ['$350binary_subscr.24', 't', 'y']
    $360binary_add.29 = n + k                ['$360binary_add.29', 'k', 'n']
    $const362.30 = const(int, 1)             ['$const362.30']
    $364binary_add.31 = $360binary_add.29 + $const362.30 ['$360binary_add.29', '$364binary_add.31', '$const362.30']
    $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>) ['$364binary_add.31', '$366binary_subscr.32', 'x']
    $368binary_multiply.33 = weight * $366binary_subscr.32 ['$366binary_subscr.32', '$368binary_multiply.33', 'weight']
    $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined) ['$350binary_subscr.24', '$368binary_multiply.33', '$370inplace_add.34']
    y[t] = $370inplace_add.34                ['$370inplace_add.34', 't', 'y']
    jump 304                                 []
label 380:
    jump 80                                  []
label 382:
    $const382.0 = const(NoneType, None)      ['$const382.0']
    $384return_value.1 = cast(value=$const382.0) ['$384return_value.1', '$const382.0']
    return $384return_value.1                ['$384return_value.1']

2025-05-02 21:05:38,356 - DEBUG - ==== SSA block analysis pass on 0
2025-05-02 21:05:38,356 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB1A24F0>
2025-05-02 21:05:38,356 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,356 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,356 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,356 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,356 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,356 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,356 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,356 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,356 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,356 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,357 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,357 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,357 - DEBUG - ==== SSA block analysis pass on 80
2025-05-02 21:05:38,357 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB1A24F0>
2025-05-02 21:05:38,357 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,357 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,358 - DEBUG - ==== SSA block analysis pass on 84
2025-05-02 21:05:38,358 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB1A24F0>
2025-05-02 21:05:38,358 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,358 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,358 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,358 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,358 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:05:38,358 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,358 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,358 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,358 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,358 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:05:38,358 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,358 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,358 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,358 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:05:38,358 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,358 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,358 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,358 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,358 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,358 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,358 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,358 - DEBUG - ==== SSA block analysis pass on 168
2025-05-02 21:05:38,358 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB1A24F0>
2025-05-02 21:05:38,358 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,358 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,358 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,359 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,359 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,359 - DEBUG - ==== SSA block analysis pass on 170
2025-05-02 21:05:38,359 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB1A24F0>
2025-05-02 21:05:38,359 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,359 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,359 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:05:38,359 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,359 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,359 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:05:38,359 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,359 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:05:38,359 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,359 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,359 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,359 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,359 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:05:38,359 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,359 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,359 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,359 - DEBUG - ==== SSA block analysis pass on 238
2025-05-02 21:05:38,359 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB1A24F0>
2025-05-02 21:05:38,359 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,359 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,359 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,359 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,359 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,359 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:05:38,359 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,359 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,359 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,360 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:05:38,360 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,360 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,360 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,360 - DEBUG - ==== SSA block analysis pass on 304
2025-05-02 21:05:38,360 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB1A24F0>
2025-05-02 21:05:38,360 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,360 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,360 - DEBUG - ==== SSA block analysis pass on 306
2025-05-02 21:05:38,360 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB1A24F0>
2025-05-02 21:05:38,360 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,360 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,360 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:05:38,360 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,360 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:05:38,360 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:05:38,360 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,360 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,360 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,361 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,361 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,361 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:05:38,361 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,361 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,361 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,361 - DEBUG - ==== SSA block analysis pass on 380
2025-05-02 21:05:38,361 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB1A24F0>
2025-05-02 21:05:38,361 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,361 - DEBUG - ==== SSA block analysis pass on 382
2025-05-02 21:05:38,361 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB1A24F0>
2025-05-02 21:05:38,361 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,361 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,361 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,362 - DEBUG - defs defaultdict(<class 'list'>,
            {'$108binary_subtract.11': [<numba.core.ir.Assign object at 0x00000247FB18D4F0>],
             '$122load_global.16': [<numba.core.ir.Assign object at 0x00000247FB18DD00>],
             '$138load_global.22': [<numba.core.ir.Assign object at 0x00000247FB1906A0>],
             '$144binary_add.25': [<numba.core.ir.Assign object at 0x00000247FB190AF0>],
             '$150binary_subtract.28': [<numba.core.ir.Assign object at 0x00000247FB190EB0>],
             '$154binary_floor_divide.30': [<numba.core.ir.Assign object at 0x00000247FB193190>],
             '$160load_global.32': [<numba.core.ir.Assign object at 0x00000247FB193580>],
             '$164call_function.34': [<numba.core.ir.Assign object at 0x00000247FB193880>],
             '$166get_iter.35': [<numba.core.ir.Assign object at 0x00000247FB1939A0>],
             '$168for_iter.2': [<numba.core.ir.Assign object at 0x00000247FB18D2B0>],
             '$168for_iter.3': [<numba.core.ir.Assign object at 0x00000247FB18D6D0>],
             '$168for_iter.4': [<numba.core.ir.Assign object at 0x00000247FB18DC10>],
             '$180binary_multiply.7': [<numba.core.ir.Assign object at 0x00000247FB193D90>],
             '$182binary_add.8': [<numba.core.ir.Assign object at 0x00000247FB193F10>],
             '$184binary_subscr.9': [<numba.core.ir.Assign object at 0x00000247FB1960D0>],
             '$196binary_multiply.15': [<numba.core.ir.Assign object at 0x00000247FB1967F0>],
             '$198binary_add.16': [<numba.core.ir.Assign object at 0x00000247FB196970>],
             '$200binary_subscr.17': [<numba.core.ir.Assign object at 0x00000247FB196AF0>],
             '$202binary_multiply.18': [<numba.core.ir.Assign object at 0x00000247FB196C70>],
             '$214binary_subscr.24': [<numba.core.ir.Assign object at 0x00000247FB198490>],
             '$224binary_subtract.29': [<numba.core.ir.Assign object at 0x00000247FB198A90>],
             '$226binary_subscr.30': [<numba.core.ir.Assign object at 0x00000247FB198C10>],
             '$228binary_multiply.31': [<numba.core.ir.Assign object at 0x00000247FB198D90>],
             '$230inplace_add.32': [<numba.core.ir.Assign object at 0x00000247FB198F10>],
             '$242binary_subtract.3': [<numba.core.ir.Assign object at 0x00000247FB198070>],
             '$254load_global.7': [<numba.core.ir.Assign object at 0x00000247FB19A4C0>],
             '$270load_global.13': [<numba.core.ir.Assign object at 0x00000247FB19AE20>],
             '$276binary_subtract.16': [<numba.core.ir.Assign object at 0x00000247FB19C250>],
             '$280binary_subtract.18': [<numba.core.ir.Assign object at 0x00000247FB19C550>],
             '$286binary_subtract.21': [<numba.core.ir.Assign object at 0x00000247FB19C910>],
             '$290binary_floor_divide.23': [<numba.core.ir.Assign object at 0x00000247FB19CBB0>],
             '$296load_global.25': [<numba.core.ir.Assign object at 0x00000247FB19CFA0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x00000247FB1810A0>],
             '$300call_function.27': [<numba.core.ir.Assign object at 0x00000247FB19E2E0>],
             '$302get_iter.28': [<numba.core.ir.Assign object at 0x00000247FB19E400>],
             '$304for_iter.2': [<numba.core.ir.Assign object at 0x00000247FB19A700>],
             '$304for_iter.3': [<numba.core.ir.Assign object at 0x00000247FB19AD30>],
             '$304for_iter.4': [<numba.core.ir.Assign object at 0x00000247FB19C130>],
             '$316binary_multiply.7': [<numba.core.ir.Assign object at 0x00000247FB19EB50>],
             '$318binary_add.8': [<numba.core.ir.Assign object at 0x00000247FB19ECD0>],
             '$320binary_subscr.9': [<numba.core.ir.Assign object at 0x00000247FB19EE50>],
             '$332binary_multiply.15': [<numba.core.ir.Assign object at 0x00000247FB1A05B0>],
             '$334binary_add.16': [<numba.core.ir.Assign object at 0x00000247FB1A0730>],
             '$336binary_subscr.17': [<numba.core.ir.Assign object at 0x00000247FB1A08B0>],
             '$338binary_multiply.18': [<numba.core.ir.Assign object at 0x00000247FB1A0A30>],
             '$350binary_subscr.24': [<numba.core.ir.Assign object at 0x00000247FB1A2250>],
             '$360binary_add.29': [<numba.core.ir.Assign object at 0x00000247FB1A2850>],
             '$364binary_add.31': [<numba.core.ir.Assign object at 0x00000247FB1A2B50>],
             '$366binary_subscr.32': [<numba.core.ir.Assign object at 0x00000247FB1A2CD0>],
             '$368binary_multiply.33': [<numba.core.ir.Assign object at 0x00000247FB1A2E50>],
             '$370inplace_add.34': [<numba.core.ir.Assign object at 0x00000247FB1A2FD0>],
             '$384return_value.1': [<numba.core.ir.Assign object at 0x00000247FB1A2040>],
             '$44load_attr.13': [<numba.core.ir.Assign object at 0x00000247FB186C40>],
             '$54load_attr.17': [<numba.core.ir.Assign object at 0x00000247FB188340>],
             '$64load_attr.21': [<numba.core.ir.Assign object at 0x00000247FB188A00>],
             '$72load_global.24': [<numba.core.ir.Assign object at 0x00000247FB188FA0>],
             '$76call_function.26': [<numba.core.ir.Assign object at 0x00000247FB18A2E0>],
             '$78get_iter.27': [<numba.core.ir.Assign object at 0x00000247FB18A400>],
             '$80for_iter.1': [<numba.core.ir.Assign object at 0x00000247FB186A30>],
             '$80for_iter.2': [<numba.core.ir.Assign object at 0x00000247FB188250>],
             '$80for_iter.3': [<numba.core.ir.Assign object at 0x00000247FB188EB0>],
             '$8binary_multiply.3': [<numba.core.ir.Assign object at 0x00000247FB181490>],
             '$94load_global.5': [<numba.core.ir.Assign object at 0x00000247FB18AC40>],
             '$const142.24': [<numba.core.ir.Assign object at 0x00000247FB190940>],
             '$const278.17': [<numba.core.ir.Assign object at 0x00000247FB19C3A0>],
             '$const362.30': [<numba.core.ir.Assign object at 0x00000247FB1A29A0>],
             '$const382.0': [<numba.core.ir.Assign object at 0x00000247FB1A0C70>],
             '$const46.14': [<numba.core.ir.Assign object at 0x00000247FB186DC0>],
             '$const56.18': [<numba.core.ir.Assign object at 0x00000247FB1884C0>],
             '$const66.22': [<numba.core.ir.Assign object at 0x00000247FB188B80>],
             '$phi168.1': [<numba.core.ir.Assign object at 0x00000247FB18A7F0>],
             '$phi170.2': [<numba.core.ir.Assign object at 0x00000247FB18D070>],
             '$phi304.1': [<numba.core.ir.Assign object at 0x00000247FB196370>],
             '$phi306.2': [<numba.core.ir.Assign object at 0x00000247FB19A670>],
             '$phi80.0': [<numba.core.ir.Assign object at 0x00000247FB181250>],
             '$phi84.1': [<numba.core.ir.Assign object at 0x00000247FB1864F0>],
             'eta': [<numba.core.ir.Assign object at 0x00000247FB1865E0>,
                     <numba.core.ir.Assign object at 0x00000247FB190490>,
                     <numba.core.ir.Assign object at 0x00000247FB19AC10>],
             'frac': [<numba.core.ir.Assign object at 0x00000247FB181DC0>,
                      <numba.core.ir.Assign object at 0x00000247FB18D670>,
                      <numba.core.ir.Assign object at 0x00000247FB198310>],
             'i': [<numba.core.ir.Assign object at 0x00000247FB1903D0>],
             'i_max': [<numba.core.ir.Assign object at 0x00000247FB193340>],
             'index_frac': [<numba.core.ir.Assign object at 0x00000247FB1860A0>,
                            <numba.core.ir.Assign object at 0x00000247FB18DAF0>,
                            <numba.core.ir.Assign object at 0x00000247FB19A2B0>],
             'index_step': [<numba.core.ir.Assign object at 0x00000247FB181640>],
             'interp_delta': [<numba.core.ir.Assign object at 0x00000247FB1641C0>],
             'interp_win': [<numba.core.ir.Assign object at 0x00000247FB164280>],
             'k': [<numba.core.ir.Assign object at 0x00000247FB19E520>],
             'k_max': [<numba.core.ir.Assign object at 0x00000247FB19CD60>],
             'n': [<numba.core.ir.Assign object at 0x00000247FB181B20>,
                   <numba.core.ir.Assign object at 0x00000247FB18AF40>],
             'n_orig': [<numba.core.ir.Assign object at 0x00000247FB1ACC10>],
             'n_out': [<numba.core.ir.Assign object at 0x00000247FB1ACCD0>],
             'num_table': [<numba.core.ir.Assign object at 0x00000247FB1644C0>],
             'nwin': [<numba.core.ir.Assign object at 0x00000247FB1AC070>],
             'offset': [<numba.core.ir.Assign object at 0x00000247FB186340>,
                        <numba.core.ir.Assign object at 0x00000247FB190040>,
                        <numba.core.ir.Assign object at 0x00000247FB19A7C0>],
             'scale': [<numba.core.ir.Assign object at 0x00000247FB164DC0>],
             't': [<numba.core.ir.Assign object at 0x00000247FB18A640>],
             't_out': [<numba.core.ir.Assign object at 0x00000247FB164700>],
             'time_register': [<numba.core.ir.Assign object at 0x00000247FB181880>,
                               <numba.core.ir.Assign object at 0x00000247FB18AA30>],
             'weight': [<numba.core.ir.Assign object at 0x00000247FB186880>,
                        <numba.core.ir.Assign object at 0x00000247FB196DF0>,
                        <numba.core.ir.Assign object at 0x00000247FB1A0BB0>],
             'x': [<numba.core.ir.Assign object at 0x00000247FB164640>],
             'y': [<numba.core.ir.Assign object at 0x00000247FB164EE0>]})
2025-05-02 21:05:38,362 - DEBUG - SSA violators {'eta', 'offset', 'weight', 'time_register', 'n', 'frac', 'index_frac'}
2025-05-02 21:05:38,362 - DEBUG - Fix SSA violator on var eta
2025-05-02 21:05:38,362 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,362 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,362 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,362 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,362 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,362 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,362 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,362 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,362 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,362 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,362 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,362 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,362 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,362 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,362 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,362 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,362 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,362 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,362 - DEBUG - first assign: eta
2025-05-02 21:05:38,362 - DEBUG - replaced with: eta = const(float, 0.0)
2025-05-02 21:05:38,362 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,362 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,362 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,362 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,363 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,363 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,363 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,363 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,363 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,363 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,363 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,363 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,363 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,363 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,363 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,363 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:05:38,363 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,363 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,363 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,363 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,364 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:05:38,364 - DEBUG - replaced with: eta.1 = index_frac - offset
2025-05-02 21:05:38,364 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,364 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,364 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,364 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:05:38,364 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,364 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,364 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,364 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,364 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,364 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,364 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,364 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,364 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,364 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,364 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,364 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,364 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,364 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,364 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,364 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,364 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,364 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,364 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:05:38,364 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,364 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,364 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:05:38,365 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,365 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:05:38,365 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,365 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,365 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,365 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,365 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:05:38,365 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,365 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,365 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,365 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,365 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,365 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,365 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,365 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,365 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,365 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,365 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:05:38,365 - DEBUG - replaced with: eta.2 = index_frac - offset
2025-05-02 21:05:38,365 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,365 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,365 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,365 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,365 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:05:38,365 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,365 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,365 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,365 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,366 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,366 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,366 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,366 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,366 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,366 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,366 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,366 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,366 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,366 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,366 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,366 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,366 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,366 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,366 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:05:38,366 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,366 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,366 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:05:38,366 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,366 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:05:38,366 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,366 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,366 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,366 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,366 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,366 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,366 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:05:38,366 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,366 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,366 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,366 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,367 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,367 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,367 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,367 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,367 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,367 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,367 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,367 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000247FB1AC400>],
             84: [<numba.core.ir.Assign object at 0x00000247FB1ACEB0>],
             238: [<numba.core.ir.Assign object at 0x00000247FB1AC7C0>]})
2025-05-02 21:05:38,367 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,367 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,367 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,367 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,367 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,367 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,367 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,367 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,367 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,367 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,367 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,367 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,367 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,367 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,367 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,367 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,367 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,367 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,367 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,367 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,367 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,368 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,368 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,368 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,368 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,368 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,368 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,368 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,368 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,368 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,368 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,368 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,368 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,368 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:05:38,368 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,368 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,369 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,369 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,369 - DEBUG - on stmt: eta.1 = index_frac - offset
2025-05-02 21:05:38,369 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,369 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,369 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,369 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:05:38,369 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,369 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,369 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,369 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,369 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,369 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,369 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,369 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,369 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,369 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,369 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,369 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,369 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,369 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,369 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,369 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,369 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,369 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,369 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:05:38,369 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,369 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,370 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:05:38,370 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,370 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:05:38,370 - DEBUG - find_def var='eta' stmt=$202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:05:38,370 - DEBUG - find_def_from_top label 170
2025-05-02 21:05:38,370 - DEBUG - idom 168 from label 170
2025-05-02 21:05:38,370 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:05:38,370 - DEBUG - find_def_from_top label 168
2025-05-02 21:05:38,370 - DEBUG - idom 84 from label 168
2025-05-02 21:05:38,370 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:05:38,370 - DEBUG - replaced with: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,370 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,370 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,370 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,370 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,370 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:05:38,370 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,370 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,370 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,370 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,370 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,370 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,370 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,370 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,371 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,371 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,371 - DEBUG - on stmt: eta.2 = index_frac - offset
2025-05-02 21:05:38,371 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,371 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,371 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,371 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,371 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:05:38,371 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,371 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,371 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,371 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,371 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,371 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,371 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,371 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,371 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,371 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,371 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,371 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,371 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,371 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,373 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,373 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,373 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,373 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,373 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:05:38,373 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,373 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,373 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:05:38,373 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,373 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:05:38,373 - DEBUG - find_def var='eta' stmt=$338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:05:38,373 - DEBUG - find_def_from_top label 306
2025-05-02 21:05:38,373 - DEBUG - idom 304 from label 306
2025-05-02 21:05:38,373 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:05:38,373 - DEBUG - find_def_from_top label 304
2025-05-02 21:05:38,373 - DEBUG - idom 238 from label 304
2025-05-02 21:05:38,373 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:05:38,373 - DEBUG - replaced with: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,373 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,373 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,373 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,373 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,373 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,373 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,373 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:05:38,374 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,374 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,374 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,374 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,374 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,374 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,374 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,374 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,374 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,374 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,374 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,374 - DEBUG - Fix SSA violator on var offset
2025-05-02 21:05:38,374 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,374 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,374 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,374 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,374 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,374 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,374 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,374 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,374 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,374 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,374 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,374 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,374 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,374 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,374 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,375 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,375 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,375 - DEBUG - first assign: offset
2025-05-02 21:05:38,375 - DEBUG - replaced with: offset = const(int, 0)
2025-05-02 21:05:38,375 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,375 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,375 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,375 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,375 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,375 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,375 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,375 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,375 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,375 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,375 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,375 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,376 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,376 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,376 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,376 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,376 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:05:38,376 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,376 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,376 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,376 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,376 - DEBUG - replaced with: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,376 - DEBUG - on stmt: eta.1 = index_frac - offset
2025-05-02 21:05:38,376 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,376 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,376 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,376 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:05:38,376 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,376 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,376 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,376 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,376 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,376 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,376 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,376 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,376 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,376 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,377 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,377 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,377 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,377 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,377 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,377 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,377 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,377 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,377 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:05:38,377 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,377 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,377 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:05:38,377 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,377 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,377 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,377 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,377 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,377 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,377 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:05:38,377 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,377 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,377 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,377 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,377 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,377 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,377 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,377 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,377 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,377 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,377 - DEBUG - replaced with: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,378 - DEBUG - on stmt: eta.2 = index_frac - offset
2025-05-02 21:05:38,378 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,378 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,378 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,378 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,378 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:05:38,378 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,378 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,378 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,378 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,378 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,378 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,378 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,378 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,378 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,378 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,378 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,378 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,378 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,378 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,378 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,378 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,378 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,378 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,378 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:05:38,378 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,378 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,379 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:05:38,379 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,379 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,379 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,379 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,379 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,379 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,379 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,379 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,379 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:05:38,379 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,379 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,379 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,379 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,379 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,379 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,379 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,379 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,379 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,379 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,379 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,379 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000247FB1AC1F0>],
             84: [<numba.core.ir.Assign object at 0x00000247FB1AC9D0>],
             238: [<numba.core.ir.Assign object at 0x00000247FB1AFDC0>]})
2025-05-02 21:05:38,379 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,379 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1ACDF0>
2025-05-02 21:05:38,379 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,379 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,379 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,379 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,380 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,380 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,380 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,380 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,380 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,380 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,380 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,380 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,380 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,380 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,380 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,380 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,380 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,380 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,380 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,380 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,380 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1ACDF0>
2025-05-02 21:05:38,381 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,381 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,381 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,381 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,381 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,381 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,381 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1ACDF0>
2025-05-02 21:05:38,381 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,381 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,381 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,381 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,381 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:05:38,381 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,381 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,381 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,381 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,381 - DEBUG - on stmt: eta.1 = index_frac - offset
2025-05-02 21:05:38,381 - DEBUG - find_def var='offset' stmt=eta.1 = index_frac - offset
2025-05-02 21:05:38,381 - DEBUG - replaced with: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,381 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,381 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,381 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,381 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:05:38,381 - DEBUG - find_def var='offset' stmt=$150binary_subtract.28 = nwin - offset
2025-05-02 21:05:38,381 - DEBUG - replaced with: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,381 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,381 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,382 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,382 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,382 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,382 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,382 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,382 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,382 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1ACDF0>
2025-05-02 21:05:38,382 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,382 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,382 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,382 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,382 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,382 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,382 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1ACDF0>
2025-05-02 21:05:38,382 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,382 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,382 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:05:38,382 - DEBUG - find_def var='offset' stmt=$182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:05:38,382 - DEBUG - find_def_from_top label 170
2025-05-02 21:05:38,382 - DEBUG - idom 168 from label 170
2025-05-02 21:05:38,382 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:05:38,382 - DEBUG - find_def_from_top label 168
2025-05-02 21:05:38,382 - DEBUG - idom 84 from label 168
2025-05-02 21:05:38,382 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:05:38,382 - DEBUG - replaced with: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,382 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,382 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,382 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:05:38,383 - DEBUG - find_def var='offset' stmt=$198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:05:38,383 - DEBUG - find_def_from_top label 170
2025-05-02 21:05:38,383 - DEBUG - idom 168 from label 170
2025-05-02 21:05:38,383 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:05:38,383 - DEBUG - find_def_from_top label 168
2025-05-02 21:05:38,383 - DEBUG - idom 84 from label 168
2025-05-02 21:05:38,383 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:05:38,383 - DEBUG - replaced with: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,383 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,383 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,383 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,383 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,383 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,383 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,383 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:05:38,383 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,383 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,383 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,383 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,383 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1ACDF0>
2025-05-02 21:05:38,383 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,383 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,383 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,383 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,383 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,383 - DEBUG - on stmt: eta.2 = index_frac - offset
2025-05-02 21:05:38,383 - DEBUG - find_def var='offset' stmt=eta.2 = index_frac - offset
2025-05-02 21:05:38,383 - DEBUG - replaced with: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,384 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,384 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,384 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,384 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,384 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:05:38,384 - DEBUG - find_def var='offset' stmt=$286binary_subtract.21 = nwin - offset
2025-05-02 21:05:38,384 - DEBUG - replaced with: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,384 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,384 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,384 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,384 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,384 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,384 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,384 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,384 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,384 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1ACDF0>
2025-05-02 21:05:38,384 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,384 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,384 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,384 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,384 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,384 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,384 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1ACDF0>
2025-05-02 21:05:38,384 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,384 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,384 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:05:38,384 - DEBUG - find_def var='offset' stmt=$318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:05:38,384 - DEBUG - find_def_from_top label 306
2025-05-02 21:05:38,384 - DEBUG - idom 304 from label 306
2025-05-02 21:05:38,385 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:05:38,385 - DEBUG - find_def_from_top label 304
2025-05-02 21:05:38,385 - DEBUG - idom 238 from label 304
2025-05-02 21:05:38,385 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:05:38,385 - DEBUG - replaced with: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,385 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,385 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,385 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:05:38,385 - DEBUG - find_def var='offset' stmt=$334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:05:38,385 - DEBUG - find_def_from_top label 306
2025-05-02 21:05:38,385 - DEBUG - idom 304 from label 306
2025-05-02 21:05:38,385 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:05:38,385 - DEBUG - find_def_from_top label 304
2025-05-02 21:05:38,385 - DEBUG - idom 238 from label 304
2025-05-02 21:05:38,385 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:05:38,385 - DEBUG - replaced with: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,385 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,385 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,385 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,385 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,385 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,385 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,385 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,385 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,385 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:05:38,385 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,385 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,385 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,386 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,386 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1ACDF0>
2025-05-02 21:05:38,386 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,386 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,386 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1ACDF0>
2025-05-02 21:05:38,386 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,386 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,386 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,386 - DEBUG - Fix SSA violator on var weight
2025-05-02 21:05:38,386 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,386 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AC160>
2025-05-02 21:05:38,386 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,386 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,386 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,386 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,386 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,386 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,386 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,386 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,386 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,386 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,386 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,386 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,386 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,386 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,386 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,386 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,387 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,387 - DEBUG - first assign: weight
2025-05-02 21:05:38,387 - DEBUG - replaced with: weight = const(float, 0.0)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,387 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,387 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,387 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,387 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,387 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,387 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AC160>
2025-05-02 21:05:38,387 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,387 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,387 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,387 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AC160>
2025-05-02 21:05:38,387 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,387 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,387 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:05:38,388 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,388 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,388 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,388 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,388 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,388 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,388 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,388 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,388 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,388 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,388 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,388 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,388 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,388 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,388 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,388 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,388 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,388 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AC160>
2025-05-02 21:05:38,388 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,388 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,388 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,388 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,388 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,388 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,388 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AC160>
2025-05-02 21:05:38,388 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,388 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,388 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,388 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,388 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,389 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,389 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,389 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,389 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,389 - DEBUG - replaced with: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,389 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,389 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,389 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,389 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:05:38,389 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,389 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,389 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,389 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,389 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AC160>
2025-05-02 21:05:38,389 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,389 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,389 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,389 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,389 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,389 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,389 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,389 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,389 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,389 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,389 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,389 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,389 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,389 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,389 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,390 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,390 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,390 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,390 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,390 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AC160>
2025-05-02 21:05:38,390 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,390 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,390 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,390 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,390 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,390 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,390 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AC160>
2025-05-02 21:05:38,390 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,390 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,390 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,390 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,390 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,390 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,390 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,390 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,390 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,390 - DEBUG - replaced with: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,390 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,390 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,390 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,390 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,390 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,390 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:05:38,390 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,390 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,390 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,391 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,391 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AC160>
2025-05-02 21:05:38,391 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,391 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,391 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AC160>
2025-05-02 21:05:38,391 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,391 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,391 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,391 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000247FB1AC880>],
             170: [<numba.core.ir.Assign object at 0x00000247FB1AC7F0>],
             306: [<numba.core.ir.Assign object at 0x00000247FB1AF580>]})
2025-05-02 21:05:38,391 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,391 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC310>
2025-05-02 21:05:38,391 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,391 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,391 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,391 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,391 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,391 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,391 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,391 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,391 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,391 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,391 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,391 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,391 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,391 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,391 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,391 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,391 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,391 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,391 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,392 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,392 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,392 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,392 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,392 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,392 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC310>
2025-05-02 21:05:38,392 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,392 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,392 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,392 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC310>
2025-05-02 21:05:38,392 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,392 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,392 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:05:38,392 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,392 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,392 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,392 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,392 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,392 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,393 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,393 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,393 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,393 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,393 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,393 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC310>
2025-05-02 21:05:38,393 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,393 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,393 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,393 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC310>
2025-05-02 21:05:38,393 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,393 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,393 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,393 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,393 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,393 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,393 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,393 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,394 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,394 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:05:38,394 - DEBUG - find_def var='weight' stmt=$228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:05:38,394 - DEBUG - replaced with: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:05:38,394 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,394 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,394 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,394 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,394 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC310>
2025-05-02 21:05:38,394 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,394 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,394 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,394 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,394 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,394 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,394 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,394 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,394 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,394 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,394 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,394 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,394 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,394 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,394 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,394 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,394 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,394 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,394 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,395 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC310>
2025-05-02 21:05:38,395 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,395 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,395 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,395 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,395 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,395 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,395 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC310>
2025-05-02 21:05:38,395 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,395 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,395 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,395 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,395 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,395 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,395 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,395 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,395 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,395 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,395 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,395 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,395 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,395 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,395 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:05:38,395 - DEBUG - find_def var='weight' stmt=$368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:05:38,395 - DEBUG - replaced with: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:05:38,395 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,395 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,395 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,395 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,396 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC310>
2025-05-02 21:05:38,396 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,396 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,396 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC310>
2025-05-02 21:05:38,396 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,396 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,396 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,396 - DEBUG - Fix SSA violator on var time_register
2025-05-02 21:05:38,396 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,396 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF3A0>
2025-05-02 21:05:38,396 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,396 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,396 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,396 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,396 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,396 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,396 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,396 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,396 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,396 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,396 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,396 - DEBUG - first assign: time_register
2025-05-02 21:05:38,396 - DEBUG - replaced with: time_register = const(float, 0.0)
2025-05-02 21:05:38,396 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,396 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,396 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,396 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,396 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,396 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,396 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,396 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,396 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,396 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,397 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,397 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,397 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,397 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,397 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF3A0>
2025-05-02 21:05:38,397 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,397 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,397 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,397 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF3A0>
2025-05-02 21:05:38,397 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,397 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,397 - DEBUG - replaced with: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,397 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:05:38,397 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,397 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,397 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,397 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,397 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,398 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,398 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,398 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,398 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,398 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,398 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,398 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF3A0>
2025-05-02 21:05:38,398 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,398 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,398 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,398 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF3A0>
2025-05-02 21:05:38,398 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,398 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,398 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,398 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,398 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,398 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,398 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,399 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,399 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,399 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,399 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:05:38,399 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,399 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,399 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,399 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,399 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF3A0>
2025-05-02 21:05:38,399 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,399 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,399 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,399 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,399 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,399 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,399 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,399 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,399 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,399 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,399 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,399 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,399 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,399 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,399 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,399 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,399 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,399 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,399 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,399 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF3A0>
2025-05-02 21:05:38,399 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,400 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,400 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,400 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,400 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,400 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,400 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF3A0>
2025-05-02 21:05:38,400 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,400 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,400 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,400 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,400 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,400 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,400 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,400 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,400 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,400 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,400 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,400 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,400 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,400 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,400 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:05:38,400 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,400 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,400 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,400 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,400 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF3A0>
2025-05-02 21:05:38,400 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,400 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,400 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF3A0>
2025-05-02 21:05:38,400 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,401 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,401 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,401 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000247FB1AF820>],
             84: [<numba.core.ir.Assign object at 0x00000247FB1AC940>]})
2025-05-02 21:05:38,401 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,401 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC160>
2025-05-02 21:05:38,401 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,401 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,401 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,401 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,401 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,401 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,401 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,401 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,401 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,401 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,401 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,401 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,402 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,402 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,402 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,402 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,402 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,402 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,402 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,402 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,402 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,402 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,402 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,402 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,402 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,402 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,402 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,402 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,402 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,402 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,402 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,402 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,402 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC160>
2025-05-02 21:05:38,403 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,403 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,403 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,403 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,403 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,403 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,403 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC160>
2025-05-02 21:05:38,403 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,403 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,403 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,403 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,403 - DEBUG - find_def var='time_register' stmt=n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,403 - DEBUG - replaced with: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,403 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:05:38,403 - DEBUG - find_def var='time_register' stmt=$108binary_subtract.11 = time_register - n
2025-05-02 21:05:38,403 - DEBUG - replaced with: $108binary_subtract.11 = time_register.1 - n
2025-05-02 21:05:38,403 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,403 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,404 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,404 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,404 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,404 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,404 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,404 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,404 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,404 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,404 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,404 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,404 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,404 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,404 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,404 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,404 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,404 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC160>
2025-05-02 21:05:38,404 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,404 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,404 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,404 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,404 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,404 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,404 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC160>
2025-05-02 21:05:38,404 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,404 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,404 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,404 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,405 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,405 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,405 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,405 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,405 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,405 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,405 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,405 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,405 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:05:38,405 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,405 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,405 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,405 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,405 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC160>
2025-05-02 21:05:38,405 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,405 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,405 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,405 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,405 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,405 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,405 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,405 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,405 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,405 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,405 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,405 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,406 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,406 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,406 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,406 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,406 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,406 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,406 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,406 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC160>
2025-05-02 21:05:38,406 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,406 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,406 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,406 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,406 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,406 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,406 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC160>
2025-05-02 21:05:38,406 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,406 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,406 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,406 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,406 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,406 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,406 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,406 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,406 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,406 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,406 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,406 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,407 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,407 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,407 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:05:38,407 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,407 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,407 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,407 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,407 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC160>
2025-05-02 21:05:38,407 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,407 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,407 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC160>
2025-05-02 21:05:38,407 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,407 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,407 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,407 - DEBUG - Fix SSA violator on var n
2025-05-02 21:05:38,407 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,407 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF550>
2025-05-02 21:05:38,407 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,407 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,407 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,407 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,407 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,407 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,407 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,407 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,407 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,407 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,407 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,408 - DEBUG - first assign: n
2025-05-02 21:05:38,408 - DEBUG - replaced with: n = const(int, 0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,408 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,408 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,408 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF550>
2025-05-02 21:05:38,408 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,408 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,408 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,409 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF550>
2025-05-02 21:05:38,409 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,409 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,409 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,409 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,409 - DEBUG - replaced with: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,409 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 21:05:38,409 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,409 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,409 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,409 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,409 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,409 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,409 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,409 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,409 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,409 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,409 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,409 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,409 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,409 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,409 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,409 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,409 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,409 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF550>
2025-05-02 21:05:38,409 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,409 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,409 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,410 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,410 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,410 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,410 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF550>
2025-05-02 21:05:38,410 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,410 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,410 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,410 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,410 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,410 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,410 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,410 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,410 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,410 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,410 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,410 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,410 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:05:38,410 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,410 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,410 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,410 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,410 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF550>
2025-05-02 21:05:38,410 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,410 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,410 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,410 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,410 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,410 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,410 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,411 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,411 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,411 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,411 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,411 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,411 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,411 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF550>
2025-05-02 21:05:38,411 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,411 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,411 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,411 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF550>
2025-05-02 21:05:38,411 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,411 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,411 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,411 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,411 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,411 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,411 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,411 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,412 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,412 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,412 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,412 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,412 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:05:38,412 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,412 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,412 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,412 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,412 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF550>
2025-05-02 21:05:38,412 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,412 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,412 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF550>
2025-05-02 21:05:38,412 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,412 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,412 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,412 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000247FB1AF640>],
             84: [<numba.core.ir.Assign object at 0x00000247FB1AC7C0>]})
2025-05-02 21:05:38,412 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,412 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC2E0>
2025-05-02 21:05:38,412 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,412 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,412 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,412 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,412 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,412 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,412 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,412 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,412 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,412 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,412 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,412 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,412 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,413 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,413 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,413 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,413 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,413 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,413 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,413 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,413 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,413 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,413 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC2E0>
2025-05-02 21:05:38,413 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,413 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,413 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,413 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC2E0>
2025-05-02 21:05:38,413 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,413 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,413 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,414 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 21:05:38,414 - DEBUG - find_def var='n' stmt=$108binary_subtract.11 = time_register.1 - n
2025-05-02 21:05:38,414 - DEBUG - replaced with: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:05:38,414 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,414 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,414 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,414 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,414 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,414 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,414 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,414 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,414 - DEBUG - find_def var='n' stmt=$144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,414 - DEBUG - replaced with: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:05:38,414 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,414 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,414 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,414 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,414 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,414 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,414 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,414 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,414 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,414 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC2E0>
2025-05-02 21:05:38,414 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,414 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,414 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,415 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,415 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,415 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,415 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC2E0>
2025-05-02 21:05:38,415 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,415 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,415 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,415 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,415 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,415 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,415 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,415 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,415 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,415 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,415 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,415 - DEBUG - find_def var='n' stmt=$224binary_subtract.29 = n - i
2025-05-02 21:05:38,415 - DEBUG - find_def_from_top label 170
2025-05-02 21:05:38,415 - DEBUG - idom 168 from label 170
2025-05-02 21:05:38,415 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:05:38,415 - DEBUG - find_def_from_top label 168
2025-05-02 21:05:38,415 - DEBUG - idom 84 from label 168
2025-05-02 21:05:38,415 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:05:38,415 - DEBUG - replaced with: $224binary_subtract.29 = n.1 - i
2025-05-02 21:05:38,415 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,415 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:05:38,415 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,415 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,415 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,415 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,416 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC2E0>
2025-05-02 21:05:38,416 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,416 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,416 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,416 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,416 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,416 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,416 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,416 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,416 - DEBUG - find_def var='n' stmt=$276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,416 - DEBUG - find_def_from_top label 238
2025-05-02 21:05:38,416 - DEBUG - idom 168 from label 238
2025-05-02 21:05:38,416 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:05:38,416 - DEBUG - find_def_from_top label 168
2025-05-02 21:05:38,416 - DEBUG - idom 84 from label 168
2025-05-02 21:05:38,416 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:05:38,416 - DEBUG - replaced with: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:05:38,416 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,416 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,416 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,416 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,416 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,416 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,416 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,416 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,416 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,416 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,416 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,416 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC2E0>
2025-05-02 21:05:38,417 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,417 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,417 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,417 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,417 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,417 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,417 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC2E0>
2025-05-02 21:05:38,417 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,417 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,417 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,417 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,417 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,417 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,417 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,417 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,417 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,417 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,417 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,417 - DEBUG - find_def var='n' stmt=$360binary_add.29 = n + k
2025-05-02 21:05:38,417 - DEBUG - find_def_from_top label 306
2025-05-02 21:05:38,417 - DEBUG - idom 304 from label 306
2025-05-02 21:05:38,417 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:05:38,417 - DEBUG - find_def_from_top label 304
2025-05-02 21:05:38,417 - DEBUG - idom 238 from label 304
2025-05-02 21:05:38,417 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:05:38,417 - DEBUG - find_def_from_top label 238
2025-05-02 21:05:38,417 - DEBUG - idom 168 from label 238
2025-05-02 21:05:38,417 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:05:38,417 - DEBUG - find_def_from_top label 168
2025-05-02 21:05:38,417 - DEBUG - idom 84 from label 168
2025-05-02 21:05:38,417 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:05:38,417 - DEBUG - replaced with: $360binary_add.29 = n.1 + k
2025-05-02 21:05:38,418 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,418 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,418 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,418 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:05:38,418 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,418 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,418 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,418 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,418 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC2E0>
2025-05-02 21:05:38,418 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,418 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,418 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC2E0>
2025-05-02 21:05:38,418 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,418 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,418 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,418 - DEBUG - Fix SSA violator on var frac
2025-05-02 21:05:38,418 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,418 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB152C40>
2025-05-02 21:05:38,418 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,418 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,418 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,418 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,418 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,418 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,418 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,418 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,418 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,418 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,418 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,418 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,419 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,419 - DEBUG - first assign: frac
2025-05-02 21:05:38,419 - DEBUG - replaced with: frac = const(float, 0.0)
2025-05-02 21:05:38,419 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,419 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,419 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,419 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,419 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,419 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,419 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,419 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,419 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,419 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB152C40>
2025-05-02 21:05:38,419 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,419 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,419 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,419 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB152C40>
2025-05-02 21:05:38,419 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,420 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,420 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:05:38,420 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,420 - DEBUG - replaced with: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:05:38,420 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,420 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,420 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,420 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,420 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:05:38,420 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,420 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,420 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,420 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,420 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,420 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB152C40>
2025-05-02 21:05:38,420 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,420 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,420 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,420 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB152C40>
2025-05-02 21:05:38,421 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,421 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,421 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,421 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,421 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,421 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,421 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,421 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,421 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,421 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,421 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:05:38,421 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,421 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:05:38,421 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,421 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,421 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,421 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,421 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB152C40>
2025-05-02 21:05:38,421 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,421 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,421 - DEBUG - replaced with: frac.2 = $242binary_subtract.3
2025-05-02 21:05:38,421 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,421 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,421 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,421 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,421 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,421 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:05:38,421 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,421 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,421 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,422 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,422 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,422 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,422 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,422 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB152C40>
2025-05-02 21:05:38,422 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,422 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,422 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,422 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB152C40>
2025-05-02 21:05:38,422 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,422 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,422 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,422 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,422 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,422 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,422 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,422 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:05:38,422 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,422 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:05:38,422 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,423 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,423 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,423 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,423 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB152C40>
2025-05-02 21:05:38,423 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,423 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,423 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB152C40>
2025-05-02 21:05:38,423 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,423 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,423 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,423 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000247FB152C70>],
             84: [<numba.core.ir.Assign object at 0x00000247FB1AF1F0>],
             238: [<numba.core.ir.Assign object at 0x00000247FB1AC4F0>]})
2025-05-02 21:05:38,423 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,423 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC1C0>
2025-05-02 21:05:38,423 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,423 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,423 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,423 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,423 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,423 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,423 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,423 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,423 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,423 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,423 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,423 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,423 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,423 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,423 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,423 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,423 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,423 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,424 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,424 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,424 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,424 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,424 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,424 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC1C0>
2025-05-02 21:05:38,424 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,424 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,424 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,424 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC1C0>
2025-05-02 21:05:38,424 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,424 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,424 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:05:38,424 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:05:38,424 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,424 - DEBUG - find_def var='frac' stmt=index_frac = frac * num_table
2025-05-02 21:05:38,425 - DEBUG - replaced with: index_frac = frac.1 * num_table
2025-05-02 21:05:38,425 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,425 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,425 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,425 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,425 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,425 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:05:38,425 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,425 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,425 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,425 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,425 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,425 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,425 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,425 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,425 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,425 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC1C0>
2025-05-02 21:05:38,425 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,425 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,425 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,425 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,425 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,425 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,425 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC1C0>
2025-05-02 21:05:38,425 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,425 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,425 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,425 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,426 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,426 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,426 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,426 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,426 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,426 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,426 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:05:38,426 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,426 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:05:38,426 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,426 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,426 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,426 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,426 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC1C0>
2025-05-02 21:05:38,426 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,426 - DEBUG - find_def var='frac' stmt=$242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,426 - DEBUG - find_def_from_top label 238
2025-05-02 21:05:38,426 - DEBUG - idom 168 from label 238
2025-05-02 21:05:38,426 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:05:38,426 - DEBUG - find_def_from_top label 168
2025-05-02 21:05:38,426 - DEBUG - idom 84 from label 168
2025-05-02 21:05:38,426 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:05:38,426 - DEBUG - replaced with: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:05:38,426 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:05:38,426 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,426 - DEBUG - find_def var='frac' stmt=index_frac = frac * num_table
2025-05-02 21:05:38,426 - DEBUG - replaced with: index_frac = frac.2 * num_table
2025-05-02 21:05:38,426 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,426 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,426 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,427 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:05:38,427 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,427 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,427 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,427 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,427 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,427 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,427 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC1C0>
2025-05-02 21:05:38,427 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,427 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,427 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,427 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC1C0>
2025-05-02 21:05:38,427 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,427 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,427 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,427 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,427 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,427 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,428 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,428 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,428 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:05:38,428 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,428 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,428 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,428 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:05:38,428 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,428 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,428 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,428 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,428 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC1C0>
2025-05-02 21:05:38,428 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,428 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,428 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC1C0>
2025-05-02 21:05:38,428 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,428 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,428 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,428 - DEBUG - Fix SSA violator on var index_frac
2025-05-02 21:05:38,428 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,428 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF760>
2025-05-02 21:05:38,428 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,428 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,428 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,428 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,428 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,428 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,429 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,429 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,429 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,429 - DEBUG - first assign: index_frac
2025-05-02 21:05:38,429 - DEBUG - replaced with: index_frac = const(float, 0.0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,429 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,429 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,429 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF760>
2025-05-02 21:05:38,429 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,430 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,430 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,430 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,430 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,430 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF760>
2025-05-02 21:05:38,430 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,430 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,430 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,430 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,430 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:05:38,430 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:05:38,430 - DEBUG - on stmt: index_frac = frac.1 * num_table
2025-05-02 21:05:38,430 - DEBUG - replaced with: index_frac.1 = frac.1 * num_table
2025-05-02 21:05:38,430 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,430 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,430 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,430 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,430 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,430 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:05:38,430 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,430 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,430 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,430 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,430 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,430 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,430 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,430 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,430 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,430 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF760>
2025-05-02 21:05:38,431 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,431 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,431 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,431 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,431 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,431 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,431 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF760>
2025-05-02 21:05:38,431 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,431 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,431 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,431 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,431 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,431 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,431 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,431 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,431 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,431 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,431 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:05:38,431 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,431 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:05:38,431 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,431 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,431 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,431 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,431 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF760>
2025-05-02 21:05:38,431 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:05:38,431 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:05:38,431 - DEBUG - on stmt: index_frac = frac.2 * num_table
2025-05-02 21:05:38,432 - DEBUG - replaced with: index_frac.2 = frac.2 * num_table
2025-05-02 21:05:38,432 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,432 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,432 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,432 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:05:38,432 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,432 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,432 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,432 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,432 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,432 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,432 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF760>
2025-05-02 21:05:38,432 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,432 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,432 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,432 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF760>
2025-05-02 21:05:38,432 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,432 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,432 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,432 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,432 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,432 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,433 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,433 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,433 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:05:38,433 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,433 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,433 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,433 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:05:38,433 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,433 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,433 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,433 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,433 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF760>
2025-05-02 21:05:38,433 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,433 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,433 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF760>
2025-05-02 21:05:38,433 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,433 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,433 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,433 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000247FB1526D0>],
             84: [<numba.core.ir.Assign object at 0x00000247FB1AC910>],
             238: [<numba.core.ir.Assign object at 0x00000247FB1A3C40>]})
2025-05-02 21:05:38,433 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,433 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC490>
2025-05-02 21:05:38,433 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,433 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,433 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,433 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,433 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,433 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,433 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,434 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,434 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,434 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,434 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,434 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC490>
2025-05-02 21:05:38,434 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,434 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,435 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,435 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC490>
2025-05-02 21:05:38,435 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,435 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,435 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,435 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,435 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:05:38,435 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:05:38,435 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 21:05:38,435 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,435 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,435 - DEBUG - find_def var='index_frac' stmt=offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,435 - DEBUG - replaced with: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,435 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,435 - DEBUG - find_def var='index_frac' stmt=eta.1 = index_frac - offset.1
2025-05-02 21:05:38,435 - DEBUG - replaced with: eta.1 = index_frac.1 - offset.1
2025-05-02 21:05:38,435 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,435 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,435 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:05:38,435 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,435 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,435 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,435 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,435 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,435 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,435 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,436 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,436 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,436 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC490>
2025-05-02 21:05:38,436 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,436 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,436 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,436 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,436 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,436 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,436 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC490>
2025-05-02 21:05:38,436 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,436 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,436 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,436 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,436 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,436 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,436 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,436 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,436 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,436 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,436 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:05:38,436 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,436 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:05:38,436 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,436 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,436 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,436 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,436 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC490>
2025-05-02 21:05:38,436 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:05:38,436 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:05:38,436 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 21:05:38,437 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,437 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,437 - DEBUG - find_def var='index_frac' stmt=offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,437 - DEBUG - replaced with: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,437 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,437 - DEBUG - find_def var='index_frac' stmt=eta.2 = index_frac - offset.2
2025-05-02 21:05:38,437 - DEBUG - replaced with: eta.2 = index_frac.2 - offset.2
2025-05-02 21:05:38,437 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,437 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:05:38,437 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,437 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,437 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,437 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,437 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,437 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,437 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,437 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,437 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,437 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,437 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,437 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC490>
2025-05-02 21:05:38,437 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,437 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,437 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,437 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,437 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,437 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,438 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC490>
2025-05-02 21:05:38,438 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,438 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,438 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,438 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,438 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,438 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,438 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,438 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,438 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,438 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,438 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:05:38,438 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,438 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,438 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,438 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:05:38,438 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,438 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,438 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,438 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,438 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC490>
2025-05-02 21:05:38,438 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,438 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,438 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC490>
2025-05-02 21:05:38,438 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,438 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,438 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:52,908 - DEBUG - Audio loaded: shape=(2, 7385280), sample_rate=44100
2025-05-02 21:05:52,908 - DEBUG - Demixing audio: samples=7385280, margin=44100, chunk_size=1323000
2025-05-02 21:05:52,924 - DEBUG - Created 6 chunks for demixing

  0%|          | 0/6 [00:00<?, ?it/s]
Processing:   0%|          | 0/6 [00:00<?, ?it/s]2025-05-02 21:05:52,942 - DEBUG - Processing chunk: 6 waves

Processing:  17%|#6        | 1/6 [00:14<01:12, 14.50s/it]2025-05-02 21:06:07,461 - DEBUG - Processing chunk: 6 waves

Processing:  33%|###3      | 2/6 [00:27<00:54, 13.73s/it]2025-05-02 21:06:20,652 - DEBUG - Processing chunk: 6 waves

Processing:  50%|#####     | 3/6 [00:40<00:40, 13.45s/it]2025-05-02 21:06:33,750 - DEBUG - Processing chunk: 6 waves

Processing:  67%|######6   | 4/6 [00:54<00:26, 13.38s/it]2025-05-02 21:06:47,025 - DEBUG - Processing chunk: 6 waves

Processing:  83%|########3 | 5/6 [01:06<00:13, 13.14s/it]2025-05-02 21:06:59,733 - DEBUG - Processing chunk: 4 waves

Processing: 100%|##########| 6/6 [01:16<00:00, 11.80s/it]
Processing: 100%|##########| 6/6 [01:16<00:00, 12.67s/it]
2025-05-02 21:07:08,962 - DEBUG - Demixing complete
2025-05-02 21:07:09,339 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song10_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song10_no_vocals.wav

2025-05-02 21:07:10 - ERROR - Failed to generate stem: 2025-05-02 21:05:37,731 - DEBUG - Logging initialized
2025-05-02 21:05:37,732 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song10.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 30, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 21:05:37,732 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 21:05:37,732 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac
2025-05-02 21:05:37,734 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=4096, hop=1024
2025-05-02 21:05:37,734 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song10.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 44100, 'chunks': 30, 'n_fft': 4096, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 21:05:37,734 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_other.onnx
2025-05-02 21:05:37,800 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song10.flac
2025-05-02 21:05:38,241 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=86)
           2	LOAD_GLOBAL(arg=0, lineno=86)
           4	LOAD_FAST(arg=0, lineno=86)
           6	LOAD_FAST(arg=1, lineno=86)
           8	LOAD_FAST(arg=2, lineno=86)
          10	LOAD_FAST(arg=3, lineno=86)
          12	LOAD_FAST(arg=4, lineno=86)
          14	LOAD_FAST(arg=5, lineno=86)
          16	LOAD_FAST(arg=6, lineno=86)
          18	CALL_FUNCTION(arg=7, lineno=86)
          20	POP_TOP(arg=None, lineno=86)
          22	LOAD_CONST(arg=0, lineno=86)
          24	RETURN_VALUE(arg=None, lineno=86)
2025-05-02 21:05:38,241 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-02 21:05:38,241 - DEBUG - stack: []
2025-05-02 21:05:38,241 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=86)
2025-05-02 21:05:38,241 - DEBUG - stack []
2025-05-02 21:05:38,241 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=86)
2025-05-02 21:05:38,241 - DEBUG - stack []
2025-05-02 21:05:38,241 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=86)
2025-05-02 21:05:38,241 - DEBUG - stack ['$2load_global.0']
2025-05-02 21:05:38,241 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=86)
2025-05-02 21:05:38,242 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-05-02 21:05:38,242 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=86)
2025-05-02 21:05:38,242 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2']
2025-05-02 21:05:38,242 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=86)
2025-05-02 21:05:38,242 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3']
2025-05-02 21:05:38,242 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=4, lineno=86)
2025-05-02 21:05:38,242 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4']
2025-05-02 21:05:38,242 - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=5, lineno=86)
2025-05-02 21:05:38,242 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5']
2025-05-02 21:05:38,242 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=6, lineno=86)
2025-05-02 21:05:38,242 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6']
2025-05-02 21:05:38,242 - DEBUG - dispatch pc=18, inst=CALL_FUNCTION(arg=7, lineno=86)
2025-05-02 21:05:38,242 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6', '$y16.7']
2025-05-02 21:05:38,242 - DEBUG - dispatch pc=20, inst=POP_TOP(arg=None, lineno=86)
2025-05-02 21:05:38,242 - DEBUG - stack ['$18call_function.8']
2025-05-02 21:05:38,242 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=0, lineno=86)
2025-05-02 21:05:38,242 - DEBUG - stack []
2025-05-02 21:05:38,242 - DEBUG - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=86)
2025-05-02 21:05:38,242 - DEBUG - stack ['$const22.9']
2025-05-02 21:05:38,242 - DEBUG - end state. edges=[]
2025-05-02 21:05:38,242 - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-02 21:05:38,242 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-02 21:05:38,242 - DEBUG - defmap: {}
2025-05-02 21:05:38,242 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-02 21:05:38,242 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-02 21:05:38,242 - DEBUG - keep phismap: {}
2025-05-02 21:05:38,242 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-02 21:05:38,242 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-02 21:05:38,242 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'res': '$t_out6.2'}), (8, {'res': '$interp_win8.3'}), (10, {'res': '$interp_delta10.4'}), (12, {'res': '$num_table12.5'}), (14, {'res': '$scale14.6'}), (16, {'res': '$y16.7'}), (18, {'func': '$2load_global.0', 'args': ['$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6', '$y16.7'], 'res': '$18call_function.8'}), (22, {'res': '$const22.9'}), (24, {'retval': '$const22.9', 'castval': '$24return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-02 21:05:38,303 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    t_out = arg(1, name=t_out)               ['t_out']
    interp_win = arg(2, name=interp_win)     ['interp_win']
    interp_delta = arg(3, name=interp_delta) ['interp_delta']
    num_table = arg(4, name=num_table)       ['num_table']
    scale = arg(5, name=scale)               ['scale']
    y = arg(6, name=y)                       ['y']
    $2load_global.0 = global(_resample_loop_s: CPUDispatcher(<function _resample_loop at 0x00000247E9618F70>)) ['$2load_global.0']
    $18call_function.8 = call $2load_global.0(x, t_out, interp_win, interp_delta, num_table, scale, y, func=$2load_global.0, args=[Var(x, interpn.py:86), Var(t_out, interpn.py:86), Var(interp_win, interpn.py:86), Var(interp_delta, interpn.py:86), Var(num_table, interpn.py:86), Var(scale, interpn.py:86), Var(y, interpn.py:86)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call_function.8', '$2load_global.0', 'interp_delta', 'interp_win', 'num_table', 'scale', 't_out', 'x', 'y']
    $const22.9 = const(NoneType, None)       ['$const22.9']
    $24return_value.10 = cast(value=$const22.9) ['$24return_value.10', '$const22.9']
    return $24return_value.10                ['$24return_value.10']

2025-05-02 21:05:38,307 - DEBUG - ==== SSA block analysis pass on 0
2025-05-02 21:05:38,307 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB0F8A00>
2025-05-02 21:05:38,307 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,307 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,307 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,307 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,307 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,307 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,307 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,307 - DEBUG - on stmt: $2load_global.0 = global(_resample_loop_s: CPUDispatcher(<function _resample_loop at 0x00000247E9618F70>))
2025-05-02 21:05:38,308 - DEBUG - on stmt: $18call_function.8 = call $2load_global.0(x, t_out, interp_win, interp_delta, num_table, scale, y, func=$2load_global.0, args=[Var(x, interpn.py:86), Var(t_out, interpn.py:86), Var(interp_win, interpn.py:86), Var(interp_delta, interpn.py:86), Var(num_table, interpn.py:86), Var(scale, interpn.py:86), Var(y, interpn.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,308 - DEBUG - on stmt: $const22.9 = const(NoneType, None)
2025-05-02 21:05:38,308 - DEBUG - on stmt: $24return_value.10 = cast(value=$const22.9)
2025-05-02 21:05:38,308 - DEBUG - on stmt: return $24return_value.10
2025-05-02 21:05:38,308 - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call_function.8': [<numba.core.ir.Assign object at 0x00000247FB110D90>],
             '$24return_value.10': [<numba.core.ir.Assign object at 0x00000247FB0F88B0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x00000247FB1103D0>],
             '$const22.9': [<numba.core.ir.Assign object at 0x00000247FB0F8130>],
             'interp_delta': [<numba.core.ir.Assign object at 0x00000247FB0F8EB0>],
             'interp_win': [<numba.core.ir.Assign object at 0x00000247FB0F8D90>],
             'num_table': [<numba.core.ir.Assign object at 0x00000247FB0F8FD0>],
             'scale': [<numba.core.ir.Assign object at 0x00000247FB110130>],
             't_out': [<numba.core.ir.Assign object at 0x00000247FB0F8C70>],
             'x': [<numba.core.ir.Assign object at 0x00000247FB0F81F0>],
             'y': [<numba.core.ir.Assign object at 0x00000247FB110250>]})
2025-05-02 21:05:38,308 - DEBUG - SSA violators set()
2025-05-02 21:05:38,311 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=9)
           2	LOAD_GLOBAL(arg=0, lineno=9)
           4	LOAD_FAST(arg=5, lineno=9)
           6	LOAD_FAST(arg=4, lineno=9)
           8	BINARY_MULTIPLY(arg=None, lineno=9)
          10	CALL_FUNCTION(arg=1, lineno=9)
          12	STORE_FAST(arg=7, lineno=9)
          14	LOAD_CONST(arg=1, lineno=10)
          16	STORE_FAST(arg=8, lineno=10)
          18	LOAD_CONST(arg=2, lineno=12)
          20	STORE_FAST(arg=9, lineno=12)
          22	LOAD_CONST(arg=1, lineno=13)
          24	STORE_FAST(arg=10, lineno=13)
          26	LOAD_CONST(arg=1, lineno=14)
          28	STORE_FAST(arg=11, lineno=14)
          30	LOAD_CONST(arg=2, lineno=15)
          32	STORE_FAST(arg=12, lineno=15)
          34	LOAD_CONST(arg=1, lineno=16)
          36	STORE_FAST(arg=13, lineno=16)
          38	LOAD_CONST(arg=1, lineno=17)
          40	STORE_FAST(arg=14, lineno=17)
          42	LOAD_FAST(arg=2, lineno=19)
          44	LOAD_ATTR(arg=1, lineno=19)
          46	LOAD_CONST(arg=2, lineno=19)
          48	BINARY_SUBSCR(arg=None, lineno=19)
          50	STORE_FAST(arg=15, lineno=19)
          52	LOAD_FAST(arg=0, lineno=20)
          54	LOAD_ATTR(arg=1, lineno=20)
          56	LOAD_CONST(arg=2, lineno=20)
          58	BINARY_SUBSCR(arg=None, lineno=20)
          60	STORE_FAST(arg=16, lineno=20)
          62	LOAD_FAST(arg=1, lineno=21)
          64	LOAD_ATTR(arg=1, lineno=21)
          66	LOAD_CONST(arg=2, lineno=21)
          68	BINARY_SUBSCR(arg=None, lineno=21)
          70	STORE_FAST(arg=17, lineno=21)
          72	LOAD_GLOBAL(arg=2, lineno=23)
          74	LOAD_FAST(arg=17, lineno=23)
          76	CALL_FUNCTION(arg=1, lineno=23)
          78	GET_ITER(arg=None, lineno=23)
>         80	FOR_ITER(arg=298, lineno=23)
          84	STORE_FAST(arg=18, lineno=23)
          86	LOAD_FAST(arg=1, lineno=24)
          88	LOAD_FAST(arg=18, lineno=24)
          90	BINARY_SUBSCR(arg=None, lineno=24)
          92	STORE_FAST(arg=8, lineno=24)
          94	LOAD_GLOBAL(arg=0, lineno=27)
          96	LOAD_FAST(arg=8, lineno=27)
          98	CALL_FUNCTION(arg=1, lineno=27)
         100	STORE_FAST(arg=9, lineno=27)
         102	LOAD_FAST(arg=5, lineno=30)
         104	LOAD_FAST(arg=8, lineno=30)
         106	LOAD_FAST(arg=9, lineno=30)
         108	BINARY_SUBTRACT(arg=None, lineno=30)
         110	BINARY_MULTIPLY(arg=None, lineno=30)
         112	STORE_FAST(arg=10, lineno=30)
         114	LOAD_FAST(arg=10, lineno=33)
         116	LOAD_FAST(arg=4, lineno=33)
         118	BINARY_MULTIPLY(arg=None, lineno=33)
         120	STORE_FAST(arg=11, lineno=33)
         122	LOAD_GLOBAL(arg=0, lineno=34)
         124	LOAD_FAST(arg=11, lineno=34)
         126	CALL_FUNCTION(arg=1, lineno=34)
         128	STORE_FAST(arg=12, lineno=34)
         130	LOAD_FAST(arg=11, lineno=37)
         132	LOAD_FAST(arg=12, lineno=37)
         134	BINARY_SUBTRACT(arg=None, lineno=37)
         136	STORE_FAST(arg=13, lineno=37)
         138	LOAD_GLOBAL(arg=3, lineno=40)
         140	LOAD_FAST(arg=9, lineno=40)
         142	LOAD_CONST(arg=3, lineno=40)
         144	BINARY_ADD(arg=None, lineno=40)
         146	LOAD_FAST(arg=15, lineno=40)
         148	LOAD_FAST(arg=12, lineno=40)
         150	BINARY_SUBTRACT(arg=None, lineno=40)
         152	LOAD_FAST(arg=7, lineno=40)
         154	BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
         156	CALL_FUNCTION(arg=2, lineno=40)
         158	STORE_FAST(arg=19, lineno=40)
         160	LOAD_GLOBAL(arg=4, lineno=41)
         162	LOAD_FAST(arg=19, lineno=41)
         164	CALL_FUNCTION(arg=1, lineno=41)
         166	GET_ITER(arg=None, lineno=41)
>        168	FOR_ITER(arg=68, lineno=41)
         170	STORE_FAST(arg=20, lineno=41)
         172	LOAD_FAST(arg=2, lineno=44)
         174	LOAD_FAST(arg=12, lineno=44)
         176	LOAD_FAST(arg=20, lineno=44)
         178	LOAD_FAST(arg=7, lineno=44)
         180	BINARY_MULTIPLY(arg=None, lineno=44)
         182	BINARY_ADD(arg=None, lineno=44)
         184	BINARY_SUBSCR(arg=None, lineno=44)
         186	LOAD_FAST(arg=13, lineno=45)
         188	LOAD_FAST(arg=3, lineno=45)
         190	LOAD_FAST(arg=12, lineno=45)
         192	LOAD_FAST(arg=20, lineno=45)
         194	LOAD_FAST(arg=7, lineno=45)
         196	BINARY_MULTIPLY(arg=None, lineno=45)
         198	BINARY_ADD(arg=None, lineno=45)
         200	BINARY_SUBSCR(arg=None, lineno=45)
         202	BINARY_MULTIPLY(arg=None, lineno=45)
         204	BINARY_ADD(arg=None, lineno=44)
         206	STORE_FAST(arg=14, lineno=43)
         208	LOAD_FAST(arg=6, lineno=47)
         210	LOAD_FAST(arg=18, lineno=47)
         212	DUP_TOP_TWO(arg=None, lineno=47)
         214	BINARY_SUBSCR(arg=None, lineno=47)
         216	LOAD_FAST(arg=14, lineno=47)
         218	LOAD_FAST(arg=0, lineno=47)
         220	LOAD_FAST(arg=9, lineno=47)
         222	LOAD_FAST(arg=20, lineno=47)
         224	BINARY_SUBTRACT(arg=None, lineno=47)
         226	BINARY_SUBSCR(arg=None, lineno=47)
         228	BINARY_MULTIPLY(arg=None, lineno=47)
         230	INPLACE_ADD(arg=None, lineno=47)
         232	ROT_THREE(arg=None, lineno=47)
         234	STORE_SUBSCR(arg=None, lineno=47)
         236	JUMP_ABSOLUTE(arg=168, lineno=47)
>        238	LOAD_FAST(arg=5, lineno=50)
         240	LOAD_FAST(arg=10, lineno=50)
         242	BINARY_SUBTRACT(arg=None, lineno=50)
         244	STORE_FAST(arg=10, lineno=50)
         246	LOAD_FAST(arg=10, lineno=53)
         248	LOAD_FAST(arg=4, lineno=53)
         250	BINARY_MULTIPLY(arg=None, lineno=53)
         252	STORE_FAST(arg=11, lineno=53)
         254	LOAD_GLOBAL(arg=0, lineno=54)
         256	LOAD_FAST(arg=11, lineno=54)
         258	CALL_FUNCTION(arg=1, lineno=54)
         260	STORE_FAST(arg=12, lineno=54)
         262	LOAD_FAST(arg=11, lineno=57)
         264	LOAD_FAST(arg=12, lineno=57)
         266	BINARY_SUBTRACT(arg=None, lineno=57)
         268	STORE_FAST(arg=13, lineno=57)
         270	LOAD_GLOBAL(arg=3, lineno=60)
         272	LOAD_FAST(arg=16, lineno=60)
         274	LOAD_FAST(arg=9, lineno=60)
         276	BINARY_SUBTRACT(arg=None, lineno=60)
         278	LOAD_CONST(arg=3, lineno=60)
         280	BINARY_SUBTRACT(arg=None, lineno=60)
         282	LOAD_FAST(arg=15, lineno=60)
         284	LOAD_FAST(arg=12, lineno=60)
         286	BINARY_SUBTRACT(arg=None, lineno=60)
         288	LOAD_FAST(arg=7, lineno=60)
         290	BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
         292	CALL_FUNCTION(arg=2, lineno=60)
         294	STORE_FAST(arg=21, lineno=60)
         296	LOAD_GLOBAL(arg=4, lineno=61)
         298	LOAD_FAST(arg=21, lineno=61)
         300	CALL_FUNCTION(arg=1, lineno=61)
         302	GET_ITER(arg=None, lineno=61)
>        304	FOR_ITER(arg=74, lineno=61)
         306	STORE_FAST(arg=22, lineno=61)
         308	LOAD_FAST(arg=2, lineno=63)
         310	LOAD_FAST(arg=12, lineno=63)
         312	LOAD_FAST(arg=22, lineno=63)
         314	LOAD_FAST(arg=7, lineno=63)
         316	BINARY_MULTIPLY(arg=None, lineno=63)
         318	BINARY_ADD(arg=None, lineno=63)
         320	BINARY_SUBSCR(arg=None, lineno=63)
         322	LOAD_FAST(arg=13, lineno=64)
         324	LOAD_FAST(arg=3, lineno=64)
         326	LOAD_FAST(arg=12, lineno=64)
         328	LOAD_FAST(arg=22, lineno=64)
         330	LOAD_FAST(arg=7, lineno=64)
         332	BINARY_MULTIPLY(arg=None, lineno=64)
         334	BINARY_ADD(arg=None, lineno=64)
         336	BINARY_SUBSCR(arg=None, lineno=64)
         338	BINARY_MULTIPLY(arg=None, lineno=64)
         340	BINARY_ADD(arg=None, lineno=63)
         342	STORE_FAST(arg=14, lineno=62)
         344	LOAD_FAST(arg=6, lineno=66)
         346	LOAD_FAST(arg=18, lineno=66)
         348	DUP_TOP_TWO(arg=None, lineno=66)
         350	BINARY_SUBSCR(arg=None, lineno=66)
         352	LOAD_FAST(arg=14, lineno=66)
         354	LOAD_FAST(arg=0, lineno=66)
         356	LOAD_FAST(arg=9, lineno=66)
         358	LOAD_FAST(arg=22, lineno=66)
         360	BINARY_ADD(arg=None, lineno=66)
         362	LOAD_CONST(arg=3, lineno=66)
         364	BINARY_ADD(arg=None, lineno=66)
         366	BINARY_SUBSCR(arg=None, lineno=66)
         368	BINARY_MULTIPLY(arg=None, lineno=66)
         370	INPLACE_ADD(arg=None, lineno=66)
         372	ROT_THREE(arg=None, lineno=66)
         374	STORE_SUBSCR(arg=None, lineno=66)
         376	JUMP_ABSOLUTE(arg=304, lineno=66)
>        380	JUMP_ABSOLUTE(arg=80, lineno=66)
>        382	LOAD_CONST(arg=0, lineno=66)
         384	RETURN_VALUE(arg=None, lineno=66)
2025-05-02 21:05:38,311 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-02 21:05:38,311 - DEBUG - stack: []
2025-05-02 21:05:38,311 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=9)
2025-05-02 21:05:38,311 - DEBUG - stack []
2025-05-02 21:05:38,311 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=9)
2025-05-02 21:05:38,311 - DEBUG - stack []
2025-05-02 21:05:38,311 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=5, lineno=9)
2025-05-02 21:05:38,311 - DEBUG - stack ['$2load_global.0']
2025-05-02 21:05:38,311 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=4, lineno=9)
2025-05-02 21:05:38,311 - DEBUG - stack ['$2load_global.0', '$scale4.1']
2025-05-02 21:05:38,311 - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=9)
2025-05-02 21:05:38,311 - DEBUG - stack ['$2load_global.0', '$scale4.1', '$num_table6.2']
2025-05-02 21:05:38,311 - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=9)
2025-05-02 21:05:38,311 - DEBUG - stack ['$2load_global.0', '$8binary_multiply.3']
2025-05-02 21:05:38,311 - DEBUG - dispatch pc=12, inst=STORE_FAST(arg=7, lineno=9)
2025-05-02 21:05:38,311 - DEBUG - stack ['$10call_function.4']
2025-05-02 21:05:38,311 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=10)
2025-05-02 21:05:38,311 - DEBUG - stack []
2025-05-02 21:05:38,311 - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=8, lineno=10)
2025-05-02 21:05:38,311 - DEBUG - stack ['$const14.5']
2025-05-02 21:05:38,311 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=12)
2025-05-02 21:05:38,312 - DEBUG - stack []
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=20, inst=STORE_FAST(arg=9, lineno=12)
2025-05-02 21:05:38,312 - DEBUG - stack ['$const18.6']
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=13)
2025-05-02 21:05:38,312 - DEBUG - stack []
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=24, inst=STORE_FAST(arg=10, lineno=13)
2025-05-02 21:05:38,312 - DEBUG - stack ['$const22.7']
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=26, inst=LOAD_CONST(arg=1, lineno=14)
2025-05-02 21:05:38,312 - DEBUG - stack []
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=28, inst=STORE_FAST(arg=11, lineno=14)
2025-05-02 21:05:38,312 - DEBUG - stack ['$const26.8']
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=15)
2025-05-02 21:05:38,312 - DEBUG - stack []
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=32, inst=STORE_FAST(arg=12, lineno=15)
2025-05-02 21:05:38,312 - DEBUG - stack ['$const30.9']
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=16)
2025-05-02 21:05:38,312 - DEBUG - stack []
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=36, inst=STORE_FAST(arg=13, lineno=16)
2025-05-02 21:05:38,312 - DEBUG - stack ['$const34.10']
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=17)
2025-05-02 21:05:38,312 - DEBUG - stack []
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=40, inst=STORE_FAST(arg=14, lineno=17)
2025-05-02 21:05:38,312 - DEBUG - stack ['$const38.11']
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=42, inst=LOAD_FAST(arg=2, lineno=19)
2025-05-02 21:05:38,312 - DEBUG - stack []
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=44, inst=LOAD_ATTR(arg=1, lineno=19)
2025-05-02 21:05:38,312 - DEBUG - stack ['$interp_win42.12']
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=46, inst=LOAD_CONST(arg=2, lineno=19)
2025-05-02 21:05:38,312 - DEBUG - stack ['$44load_attr.13']
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=19)
2025-05-02 21:05:38,312 - DEBUG - stack ['$44load_attr.13', '$const46.14']
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=50, inst=STORE_FAST(arg=15, lineno=19)
2025-05-02 21:05:38,312 - DEBUG - stack ['$48binary_subscr.15']
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=20)
2025-05-02 21:05:38,312 - DEBUG - stack []
2025-05-02 21:05:38,312 - DEBUG - dispatch pc=54, inst=LOAD_ATTR(arg=1, lineno=20)
2025-05-02 21:05:38,313 - DEBUG - stack ['$x52.16']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=56, inst=LOAD_CONST(arg=2, lineno=20)
2025-05-02 21:05:38,313 - DEBUG - stack ['$54load_attr.17']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=20)
2025-05-02 21:05:38,313 - DEBUG - stack ['$54load_attr.17', '$const56.18']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=60, inst=STORE_FAST(arg=16, lineno=20)
2025-05-02 21:05:38,313 - DEBUG - stack ['$58binary_subscr.19']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=21)
2025-05-02 21:05:38,313 - DEBUG - stack []
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=64, inst=LOAD_ATTR(arg=1, lineno=21)
2025-05-02 21:05:38,313 - DEBUG - stack ['$t_out62.20']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=21)
2025-05-02 21:05:38,313 - DEBUG - stack ['$64load_attr.21']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=21)
2025-05-02 21:05:38,313 - DEBUG - stack ['$64load_attr.21', '$const66.22']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=70, inst=STORE_FAST(arg=17, lineno=21)
2025-05-02 21:05:38,313 - DEBUG - stack ['$68binary_subscr.23']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=72, inst=LOAD_GLOBAL(arg=2, lineno=23)
2025-05-02 21:05:38,313 - DEBUG - stack []
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=17, lineno=23)
2025-05-02 21:05:38,313 - DEBUG - stack ['$72load_global.24']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=23)
2025-05-02 21:05:38,313 - DEBUG - stack ['$72load_global.24', '$n_out74.25']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=23)
2025-05-02 21:05:38,313 - DEBUG - stack ['$76call_function.26']
2025-05-02 21:05:38,313 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.27',), blockstack=(), npush=0)]
2025-05-02 21:05:38,313 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-05-02 21:05:38,313 - DEBUG - stack: ['$phi80.0']
2025-05-02 21:05:38,313 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=298, lineno=23)
2025-05-02 21:05:38,313 - DEBUG - stack ['$phi80.0']
2025-05-02 21:05:38,313 - DEBUG - end state. edges=[Edge(pc=382, stack=(), blockstack=(), npush=0), Edge(pc=84, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-05-02 21:05:38,313 - DEBUG - pending: deque([State(pc_initial=382 nstack_initial=0), State(pc_initial=84 nstack_initial=2)])
2025-05-02 21:05:38,314 - DEBUG - stack: []
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=382, inst=LOAD_CONST(arg=0, lineno=66)
2025-05-02 21:05:38,314 - DEBUG - stack []
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=384, inst=RETURN_VALUE(arg=None, lineno=66)
2025-05-02 21:05:38,314 - DEBUG - stack ['$const382.0']
2025-05-02 21:05:38,314 - DEBUG - end state. edges=[]
2025-05-02 21:05:38,314 - DEBUG - pending: deque([State(pc_initial=84 nstack_initial=2)])
2025-05-02 21:05:38,314 - DEBUG - stack: ['$phi84.0', '$phi84.1']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=84, inst=STORE_FAST(arg=18, lineno=23)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0', '$phi84.1']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=24)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=88, inst=LOAD_FAST(arg=18, lineno=24)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0', '$t_out86.2']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=24)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0', '$t_out86.2', '$t88.3']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=92, inst=STORE_FAST(arg=8, lineno=24)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0', '$90binary_subscr.4']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=94, inst=LOAD_GLOBAL(arg=0, lineno=27)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=96, inst=LOAD_FAST(arg=8, lineno=27)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0', '$94load_global.5']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=98, inst=CALL_FUNCTION(arg=1, lineno=27)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0', '$94load_global.5', '$time_register96.6']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=100, inst=STORE_FAST(arg=9, lineno=27)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0', '$98call_function.7']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=102, inst=LOAD_FAST(arg=5, lineno=30)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=104, inst=LOAD_FAST(arg=8, lineno=30)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0', '$scale102.8']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=9, lineno=30)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0', '$scale102.8', '$time_register104.9']
2025-05-02 21:05:38,314 - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=30)
2025-05-02 21:05:38,314 - DEBUG - stack ['$phi84.0', '$scale102.8', '$time_register104.9', '$n106.10']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=110, inst=BINARY_MULTIPLY(arg=None, lineno=30)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$scale102.8', '$108binary_subtract.11']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=112, inst=STORE_FAST(arg=10, lineno=30)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$110binary_multiply.12']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=10, lineno=33)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=4, lineno=33)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$frac114.13']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=118, inst=BINARY_MULTIPLY(arg=None, lineno=33)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$frac114.13', '$num_table116.14']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=120, inst=STORE_FAST(arg=11, lineno=33)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$118binary_multiply.15']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=122, inst=LOAD_GLOBAL(arg=0, lineno=34)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=124, inst=LOAD_FAST(arg=11, lineno=34)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$122load_global.16']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=126, inst=CALL_FUNCTION(arg=1, lineno=34)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$122load_global.16', '$index_frac124.17']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=128, inst=STORE_FAST(arg=12, lineno=34)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$126call_function.18']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=130, inst=LOAD_FAST(arg=11, lineno=37)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=12, lineno=37)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$index_frac130.19']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=134, inst=BINARY_SUBTRACT(arg=None, lineno=37)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$index_frac130.19', '$offset132.20']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=136, inst=STORE_FAST(arg=13, lineno=37)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$134binary_subtract.21']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=138, inst=LOAD_GLOBAL(arg=3, lineno=40)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0']
2025-05-02 21:05:38,315 - DEBUG - dispatch pc=140, inst=LOAD_FAST(arg=9, lineno=40)
2025-05-02 21:05:38,315 - DEBUG - stack ['$phi84.0', '$138load_global.22']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=142, inst=LOAD_CONST(arg=3, lineno=40)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$n140.23']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=144, inst=BINARY_ADD(arg=None, lineno=40)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$n140.23', '$const142.24']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=146, inst=LOAD_FAST(arg=15, lineno=40)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=148, inst=LOAD_FAST(arg=12, lineno=40)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$nwin146.26']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=150, inst=BINARY_SUBTRACT(arg=None, lineno=40)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$nwin146.26', '$offset148.27']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=7, lineno=40)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$150binary_subtract.28']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=154, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$150binary_subtract.28', '$index_step152.29']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=156, inst=CALL_FUNCTION(arg=2, lineno=40)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$154binary_floor_divide.30']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=158, inst=STORE_FAST(arg=19, lineno=40)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$156call_function.31']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=160, inst=LOAD_GLOBAL(arg=4, lineno=41)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=162, inst=LOAD_FAST(arg=19, lineno=41)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$160load_global.32']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=41)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$160load_global.32', '$i_max162.33']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=166, inst=GET_ITER(arg=None, lineno=41)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi84.0', '$164call_function.34']
2025-05-02 21:05:38,316 - DEBUG - end state. edges=[Edge(pc=168, stack=('$phi84.0', '$166get_iter.35'), blockstack=(), npush=0)]
2025-05-02 21:05:38,316 - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=2)])
2025-05-02 21:05:38,316 - DEBUG - stack: ['$phi168.0', '$phi168.1']
2025-05-02 21:05:38,316 - DEBUG - dispatch pc=168, inst=FOR_ITER(arg=68, lineno=41)
2025-05-02 21:05:38,316 - DEBUG - stack ['$phi168.0', '$phi168.1']
2025-05-02 21:05:38,316 - DEBUG - end state. edges=[Edge(pc=238, stack=('$phi168.0',), blockstack=(), npush=0), Edge(pc=170, stack=('$phi168.0', '$phi168.1', '$168for_iter.3'), blockstack=(), npush=0)]
2025-05-02 21:05:38,317 - DEBUG - pending: deque([State(pc_initial=238 nstack_initial=1), State(pc_initial=170 nstack_initial=3)])
2025-05-02 21:05:38,317 - DEBUG - stack: ['$phi238.0']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=238, inst=LOAD_FAST(arg=5, lineno=50)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=10, lineno=50)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$scale238.1']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=242, inst=BINARY_SUBTRACT(arg=None, lineno=50)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$scale238.1', '$frac240.2']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=244, inst=STORE_FAST(arg=10, lineno=50)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$242binary_subtract.3']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=10, lineno=53)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=248, inst=LOAD_FAST(arg=4, lineno=53)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$frac246.4']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=250, inst=BINARY_MULTIPLY(arg=None, lineno=53)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$frac246.4', '$num_table248.5']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=252, inst=STORE_FAST(arg=11, lineno=53)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$250binary_multiply.6']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=254, inst=LOAD_GLOBAL(arg=0, lineno=54)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=11, lineno=54)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$254load_global.7']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=258, inst=CALL_FUNCTION(arg=1, lineno=54)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$254load_global.7', '$index_frac256.8']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=260, inst=STORE_FAST(arg=12, lineno=54)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$258call_function.9']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=262, inst=LOAD_FAST(arg=11, lineno=57)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=264, inst=LOAD_FAST(arg=12, lineno=57)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$index_frac262.10']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=266, inst=BINARY_SUBTRACT(arg=None, lineno=57)
2025-05-02 21:05:38,317 - DEBUG - stack ['$phi238.0', '$index_frac262.10', '$offset264.11']
2025-05-02 21:05:38,317 - DEBUG - dispatch pc=268, inst=STORE_FAST(arg=13, lineno=57)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$266binary_subtract.12']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=270, inst=LOAD_GLOBAL(arg=3, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=272, inst=LOAD_FAST(arg=16, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=274, inst=LOAD_FAST(arg=9, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$n_orig272.14']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=276, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$n_orig272.14', '$n274.15']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=278, inst=LOAD_CONST(arg=3, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$276binary_subtract.16']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=280, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$276binary_subtract.16', '$const278.17']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=282, inst=LOAD_FAST(arg=15, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=284, inst=LOAD_FAST(arg=12, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$nwin282.19']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=286, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$nwin282.19', '$offset284.20']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=288, inst=LOAD_FAST(arg=7, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$286binary_subtract.21']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=290, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$286binary_subtract.21', '$index_step288.22']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=292, inst=CALL_FUNCTION(arg=2, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$290binary_floor_divide.23']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=294, inst=STORE_FAST(arg=21, lineno=60)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$292call_function.24']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=296, inst=LOAD_GLOBAL(arg=4, lineno=61)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=298, inst=LOAD_FAST(arg=21, lineno=61)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$296load_global.25']
2025-05-02 21:05:38,318 - DEBUG - dispatch pc=300, inst=CALL_FUNCTION(arg=1, lineno=61)
2025-05-02 21:05:38,318 - DEBUG - stack ['$phi238.0', '$296load_global.25', '$k_max298.26']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=302, inst=GET_ITER(arg=None, lineno=61)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi238.0', '$300call_function.27']
2025-05-02 21:05:38,319 - DEBUG - end state. edges=[Edge(pc=304, stack=('$phi238.0', '$302get_iter.28'), blockstack=(), npush=0)]
2025-05-02 21:05:38,319 - DEBUG - pending: deque([State(pc_initial=170 nstack_initial=3), State(pc_initial=304 nstack_initial=2)])
2025-05-02 21:05:38,319 - DEBUG - stack: ['$phi170.0', '$phi170.1', '$phi170.2']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=170, inst=STORE_FAST(arg=20, lineno=41)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$phi170.2']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=172, inst=LOAD_FAST(arg=2, lineno=44)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=12, lineno=44)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=176, inst=LOAD_FAST(arg=20, lineno=44)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=178, inst=LOAD_FAST(arg=7, lineno=44)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$i176.5']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=44)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$i176.5', '$index_step178.6']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=44)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$180binary_multiply.7']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=44)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$182binary_add.8']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=186, inst=LOAD_FAST(arg=13, lineno=45)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=188, inst=LOAD_FAST(arg=3, lineno=45)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=12, lineno=45)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=192, inst=LOAD_FAST(arg=20, lineno=45)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=45)
2025-05-02 21:05:38,319 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$i192.13']
2025-05-02 21:05:38,319 - DEBUG - dispatch pc=196, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$i192.13', '$index_step194.14']
2025-05-02 21:05:38,320 - DEBUG - dispatch pc=198, inst=BINARY_ADD(arg=None, lineno=45)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$196binary_multiply.15']
2025-05-02 21:05:38,320 - DEBUG - dispatch pc=200, inst=BINARY_SUBSCR(arg=None, lineno=45)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$198binary_add.16']
2025-05-02 21:05:38,320 - DEBUG - dispatch pc=202, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$200binary_subscr.17']
2025-05-02 21:05:38,320 - DEBUG - dispatch pc=204, inst=BINARY_ADD(arg=None, lineno=44)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$202binary_multiply.18']
2025-05-02 21:05:38,320 - DEBUG - dispatch pc=206, inst=STORE_FAST(arg=14, lineno=43)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1', '$204binary_add.19']
2025-05-02 21:05:38,320 - DEBUG - dispatch pc=208, inst=LOAD_FAST(arg=6, lineno=47)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 21:05:38,320 - DEBUG - dispatch pc=210, inst=LOAD_FAST(arg=18, lineno=47)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20']
2025-05-02 21:05:38,320 - DEBUG - dispatch pc=212, inst=DUP_TOP_TWO(arg=None, lineno=47)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21']
2025-05-02 21:05:38,320 - DEBUG - dispatch pc=214, inst=BINARY_SUBSCR(arg=None, lineno=47)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$212dup_top_two.22', '$212dup_top_two.23']
2025-05-02 21:05:38,320 - DEBUG - dispatch pc=216, inst=LOAD_FAST(arg=14, lineno=47)
2025-05-02 21:05:38,320 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24']
2025-05-02 21:05:38,339 - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=47)
2025-05-02 21:05:38,339 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25']
2025-05-02 21:05:38,339 - DEBUG - dispatch pc=220, inst=LOAD_FAST(arg=9, lineno=47)
2025-05-02 21:05:38,339 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26']
2025-05-02 21:05:38,339 - DEBUG - dispatch pc=222, inst=LOAD_FAST(arg=20, lineno=47)
2025-05-02 21:05:38,339 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$n220.27']
2025-05-02 21:05:38,339 - DEBUG - dispatch pc=224, inst=BINARY_SUBTRACT(arg=None, lineno=47)
2025-05-02 21:05:38,339 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$n220.27', '$i222.28']
2025-05-02 21:05:38,339 - DEBUG - dispatch pc=226, inst=BINARY_SUBSCR(arg=None, lineno=47)
2025-05-02 21:05:38,339 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$224binary_subtract.29']
2025-05-02 21:05:38,339 - DEBUG - dispatch pc=228, inst=BINARY_MULTIPLY(arg=None, lineno=47)
2025-05-02 21:05:38,339 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$226binary_subscr.30']
2025-05-02 21:05:38,339 - DEBUG - dispatch pc=230, inst=INPLACE_ADD(arg=None, lineno=47)
2025-05-02 21:05:38,339 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$228binary_multiply.31']
2025-05-02 21:05:38,339 - DEBUG - dispatch pc=232, inst=ROT_THREE(arg=None, lineno=47)
2025-05-02 21:05:38,339 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$230inplace_add.32']
2025-05-02 21:05:38,339 - DEBUG - dispatch pc=234, inst=STORE_SUBSCR(arg=None, lineno=47)
2025-05-02 21:05:38,339 - DEBUG - stack ['$phi170.0', '$phi170.1', '$230inplace_add.32', '$y208.20', '$t210.21']
2025-05-02 21:05:38,339 - DEBUG - dispatch pc=236, inst=JUMP_ABSOLUTE(arg=168, lineno=47)
2025-05-02 21:05:38,340 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 21:05:38,340 - DEBUG - end state. edges=[Edge(pc=168, stack=('$phi170.0', '$phi170.1'), blockstack=(), npush=0)]
2025-05-02 21:05:38,340 - DEBUG - pending: deque([State(pc_initial=304 nstack_initial=2), State(pc_initial=168 nstack_initial=2)])
2025-05-02 21:05:38,340 - DEBUG - stack: ['$phi304.0', '$phi304.1']
2025-05-02 21:05:38,340 - DEBUG - dispatch pc=304, inst=FOR_ITER(arg=74, lineno=61)
2025-05-02 21:05:38,340 - DEBUG - stack ['$phi304.0', '$phi304.1']
2025-05-02 21:05:38,340 - DEBUG - end state. edges=[Edge(pc=380, stack=('$phi304.0',), blockstack=(), npush=0), Edge(pc=306, stack=('$phi304.0', '$phi304.1', '$304for_iter.3'), blockstack=(), npush=0)]
2025-05-02 21:05:38,340 - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=2), State(pc_initial=380 nstack_initial=1), State(pc_initial=306 nstack_initial=3)])
2025-05-02 21:05:38,340 - DEBUG - pending: deque([State(pc_initial=380 nstack_initial=1), State(pc_initial=306 nstack_initial=3)])
2025-05-02 21:05:38,340 - DEBUG - stack: ['$phi380.0']
2025-05-02 21:05:38,340 - DEBUG - dispatch pc=380, inst=JUMP_ABSOLUTE(arg=80, lineno=66)
2025-05-02 21:05:38,340 - DEBUG - stack ['$phi380.0']
2025-05-02 21:05:38,340 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi380.0',), blockstack=(), npush=0)]
2025-05-02 21:05:38,340 - DEBUG - pending: deque([State(pc_initial=306 nstack_initial=3), State(pc_initial=80 nstack_initial=1)])
2025-05-02 21:05:38,340 - DEBUG - stack: ['$phi306.0', '$phi306.1', '$phi306.2']
2025-05-02 21:05:38,340 - DEBUG - dispatch pc=306, inst=STORE_FAST(arg=22, lineno=61)
2025-05-02 21:05:38,340 - DEBUG - stack ['$phi306.0', '$phi306.1', '$phi306.2']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=308, inst=LOAD_FAST(arg=2, lineno=63)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=310, inst=LOAD_FAST(arg=12, lineno=63)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=312, inst=LOAD_FAST(arg=22, lineno=63)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=314, inst=LOAD_FAST(arg=7, lineno=63)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$k312.5']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=316, inst=BINARY_MULTIPLY(arg=None, lineno=63)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$k312.5', '$index_step314.6']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=318, inst=BINARY_ADD(arg=None, lineno=63)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$316binary_multiply.7']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=320, inst=BINARY_SUBSCR(arg=None, lineno=63)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$318binary_add.8']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=322, inst=LOAD_FAST(arg=13, lineno=64)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=324, inst=LOAD_FAST(arg=3, lineno=64)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=326, inst=LOAD_FAST(arg=12, lineno=64)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=328, inst=LOAD_FAST(arg=22, lineno=64)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=330, inst=LOAD_FAST(arg=7, lineno=64)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$k328.13']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=332, inst=BINARY_MULTIPLY(arg=None, lineno=64)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$k328.13', '$index_step330.14']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=334, inst=BINARY_ADD(arg=None, lineno=64)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$332binary_multiply.15']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=336, inst=BINARY_SUBSCR(arg=None, lineno=64)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$334binary_add.16']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=338, inst=BINARY_MULTIPLY(arg=None, lineno=64)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$336binary_subscr.17']
2025-05-02 21:05:38,341 - DEBUG - dispatch pc=340, inst=BINARY_ADD(arg=None, lineno=63)
2025-05-02 21:05:38,341 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$338binary_multiply.18']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=342, inst=STORE_FAST(arg=14, lineno=62)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$340binary_add.19']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=344, inst=LOAD_FAST(arg=6, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=346, inst=LOAD_FAST(arg=18, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=348, inst=DUP_TOP_TWO(arg=None, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=350, inst=BINARY_SUBSCR(arg=None, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$348dup_top_two.22', '$348dup_top_two.23']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=352, inst=LOAD_FAST(arg=14, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=354, inst=LOAD_FAST(arg=0, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=356, inst=LOAD_FAST(arg=9, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=358, inst=LOAD_FAST(arg=22, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$n356.27']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=360, inst=BINARY_ADD(arg=None, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$n356.27', '$k358.28']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=362, inst=LOAD_CONST(arg=3, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$360binary_add.29']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=364, inst=BINARY_ADD(arg=None, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$360binary_add.29', '$const362.30']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=366, inst=BINARY_SUBSCR(arg=None, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$364binary_add.31']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=368, inst=BINARY_MULTIPLY(arg=None, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$366binary_subscr.32']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=370, inst=INPLACE_ADD(arg=None, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$368binary_multiply.33']
2025-05-02 21:05:38,342 - DEBUG - dispatch pc=372, inst=ROT_THREE(arg=None, lineno=66)
2025-05-02 21:05:38,342 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$370inplace_add.34']
2025-05-02 21:05:38,343 - DEBUG - dispatch pc=374, inst=STORE_SUBSCR(arg=None, lineno=66)
2025-05-02 21:05:38,343 - DEBUG - stack ['$phi306.0', '$phi306.1', '$370inplace_add.34', '$y344.20', '$t346.21']
2025-05-02 21:05:38,343 - DEBUG - dispatch pc=376, inst=JUMP_ABSOLUTE(arg=304, lineno=66)
2025-05-02 21:05:38,343 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 21:05:38,343 - DEBUG - end state. edges=[Edge(pc=304, stack=('$phi306.0', '$phi306.1'), blockstack=(), npush=0)]
2025-05-02 21:05:38,343 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=304 nstack_initial=2)])
2025-05-02 21:05:38,343 - DEBUG - pending: deque([State(pc_initial=304 nstack_initial=2)])
2025-05-02 21:05:38,343 - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-02 21:05:38,343 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=84 nstack_initial=2): {'$phi84.1'},
             State(pc_initial=168 nstack_initial=2): {'$phi168.1'},
             State(pc_initial=170 nstack_initial=3): {'$phi170.2'},
             State(pc_initial=238 nstack_initial=1): set(),
             State(pc_initial=304 nstack_initial=2): {'$phi304.1'},
             State(pc_initial=306 nstack_initial=3): {'$phi306.2'},
             State(pc_initial=380 nstack_initial=1): set(),
             State(pc_initial=382 nstack_initial=0): set()})
2025-05-02 21:05:38,343 - DEBUG - defmap: {'$phi168.1': State(pc_initial=84 nstack_initial=2),
 '$phi170.2': State(pc_initial=168 nstack_initial=2),
 '$phi304.1': State(pc_initial=238 nstack_initial=1),
 '$phi306.2': State(pc_initial=304 nstack_initial=2),
 '$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi84.1': State(pc_initial=80 nstack_initial=1)}
2025-05-02 21:05:38,343 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi170.0',
                            State(pc_initial=170 nstack_initial=3)),
                           ('$phi84.0', State(pc_initial=84 nstack_initial=2))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2)),
                           ('$phi170.1',
                            State(pc_initial=170 nstack_initial=3))},
             '$phi170.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.1': {('$phi168.1',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi304.0': {('$phi238.0',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi306.0',
                            State(pc_initial=306 nstack_initial=3))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi306.1',
                            State(pc_initial=306 nstack_initial=3))},
             '$phi306.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.1': {('$phi304.1',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi380.0',
                           State(pc_initial=380 nstack_initial=1))},
             '$phi84.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:05:38,343 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2)),
                           ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2)),
                           ('$phi168.1',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi304.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2)),
                           ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi304.1',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:05:38,344 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:05:38,344 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:05:38,344 - DEBUG - keep phismap: {'$phi168.1': {('$166get_iter.35', State(pc_initial=84 nstack_initial=2))},
 '$phi170.2': {('$168for_iter.3', State(pc_initial=168 nstack_initial=2))},
 '$phi304.1': {('$302get_iter.28', State(pc_initial=238 nstack_initial=1))},
 '$phi306.2': {('$304for_iter.3', State(pc_initial=304 nstack_initial=2))},
 '$phi80.0': {('$78get_iter.27', State(pc_initial=0 nstack_initial=0))},
 '$phi84.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-05-02 21:05:38,344 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.27'},
             State(pc_initial=80 nstack_initial=1): {'$phi84.1': '$80for_iter.2'},
             State(pc_initial=84 nstack_initial=2): {'$phi168.1': '$166get_iter.35'},
             State(pc_initial=168 nstack_initial=2): {'$phi170.2': '$168for_iter.3'},
             State(pc_initial=238 nstack_initial=1): {'$phi304.1': '$302get_iter.28'},
             State(pc_initial=304 nstack_initial=2): {'$phi306.2': '$304for_iter.3'}})
2025-05-02 21:05:38,345 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-02 21:05:38,345 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$scale4.1'}), (6, {'res': '$num_table6.2'}), (8, {'lhs': '$scale4.1', 'rhs': '$num_table6.2', 'res': '$8binary_multiply.3'}), (10, {'func': '$2load_global.0', 'args': ['$8binary_multiply.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4'}), (14, {'res': '$const14.5'}), (16, {'value': '$const14.5'}), (18, {'res': '$const18.6'}), (20, {'value': '$const18.6'}), (22, {'res': '$const22.7'}), (24, {'value': '$const22.7'}), (26, {'res': '$const26.8'}), (28, {'value': '$const26.8'}), (30, {'res': '$const30.9'}), (32, {'value': '$const30.9'}), (34, {'res': '$const34.10'}), (36, {'value': '$const34.10'}), (38, {'res': '$const38.11'}), (40, {'value': '$const38.11'}), (42, {'res': '$interp_win42.12'}), (44, {'item': '$interp_win42.12', 'res': '$44load_attr.13'}), (46, {'res': '$const46.14'}), (48, {'index': '$const46.14', 'target': '$44load_attr.13', 'res': '$48binary_subscr.15'}), (50, {'value': '$48binary_subscr.15'}), (52, {'res': '$x52.16'}), (54, {'item': '$x52.16', 'res': '$54load_attr.17'}), (56, {'res': '$const56.18'}), (58, {'index': '$const56.18', 'target': '$54load_attr.17', 'res': '$58binary_subscr.19'}), (60, {'value': '$58binary_subscr.19'}), (62, {'res': '$t_out62.20'}), (64, {'item': '$t_out62.20', 'res': '$64load_attr.21'}), (66, {'res': '$const66.22'}), (68, {'index': '$const66.22', 'target': '$64load_attr.21', 'res': '$68binary_subscr.23'}), (70, {'value': '$68binary_subscr.23'}), (72, {'res': '$72load_global.24'}), (74, {'res': '$n_out74.25'}), (76, {'func': '$72load_global.24', 'args': ['$n_out74.25'], 'res': '$76call_function.26'}), (78, {'value': '$76call_function.26', 'res': '$78get_iter.27'})), outgoing_phis={'$phi80.0': '$78get_iter.27'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.27',)})
2025-05-02 21:05:38,345 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi84.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={382: (), 84: ('$phi80.0', '$80for_iter.2')})
2025-05-02 21:05:38,345 - DEBUG - block_infos State(pc_initial=84 nstack_initial=2):
AdaptBlockInfo(insts=((84, {'value': '$phi84.1'}), (86, {'res': '$t_out86.2'}), (88, {'res': '$t88.3'}), (90, {'index': '$t88.3', 'target': '$t_out86.2', 'res': '$90binary_subscr.4'}), (92, {'value': '$90binary_subscr.4'}), (94, {'res': '$94load_global.5'}), (96, {'res': '$time_register96.6'}), (98, {'func': '$94load_global.5', 'args': ['$time_register96.6'], 'res': '$98call_function.7'}), (100, {'value': '$98call_function.7'}), (102, {'res': '$scale102.8'}), (104, {'res': '$time_register104.9'}), (106, {'res': '$n106.10'}), (108, {'lhs': '$time_register104.9', 'rhs': '$n106.10', 'res': '$108binary_subtract.11'}), (110, {'lhs': '$scale102.8', 'rhs': '$108binary_subtract.11', 'res': '$110binary_multiply.12'}), (112, {'value': '$110binary_multiply.12'}), (114, {'res': '$frac114.13'}), (116, {'res': '$num_table116.14'}), (118, {'lhs': '$frac114.13', 'rhs': '$num_table116.14', 'res': '$118binary_multiply.15'}), (120, {'value': '$118binary_multiply.15'}), (122, {'res': '$122load_global.16'}), (124, {'res': '$index_frac124.17'}), (126, {'func': '$122load_global.16', 'args': ['$index_frac124.17'], 'res': '$126call_function.18'}), (128, {'value': '$126call_function.18'}), (130, {'res': '$index_frac130.19'}), (132, {'res': '$offset132.20'}), (134, {'lhs': '$index_frac130.19', 'rhs': '$offset132.20', 'res': '$134binary_subtract.21'}), (136, {'value': '$134binary_subtract.21'}), (138, {'res': '$138load_global.22'}), (140, {'res': '$n140.23'}), (142, {'res': '$const142.24'}), (144, {'lhs': '$n140.23', 'rhs': '$const142.24', 'res': '$144binary_add.25'}), (146, {'res': '$nwin146.26'}), (148, {'res': '$offset148.27'}), (150, {'lhs': '$nwin146.26', 'rhs': '$offset148.27', 'res': '$150binary_subtract.28'}), (152, {'res': '$index_step152.29'}), (154, {'lhs': '$150binary_subtract.28', 'rhs': '$index_step152.29', 'res': '$154binary_floor_divide.30'}), (156, {'func': '$138load_global.22', 'args': ['$144binary_add.25', '$154binary_floor_divide.30'], 'res': '$156call_function.31'}), (158, {'value': '$156call_function.31'}), (160, {'res': '$160load_global.32'}), (162, {'res': '$i_max162.33'}), (164, {'func': '$160load_global.32', 'args': ['$i_max162.33'], 'res': '$164call_function.34'}), (166, {'value': '$164call_function.34', 'res': '$166get_iter.35'})), outgoing_phis={'$phi168.1': '$166get_iter.35'}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi84.0', '$166get_iter.35')})
2025-05-02 21:05:38,345 - DEBUG - block_infos State(pc_initial=168 nstack_initial=2):
AdaptBlockInfo(insts=((168, {'iterator': '$phi168.1', 'pair': '$168for_iter.2', 'indval': '$168for_iter.3', 'pred': '$168for_iter.4'}),), outgoing_phis={'$phi170.2': '$168for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={238: ('$phi168.0',), 170: ('$phi168.0', '$phi168.1', '$168for_iter.3')})
2025-05-02 21:05:38,345 - DEBUG - block_infos State(pc_initial=170 nstack_initial=3):
AdaptBlockInfo(insts=((170, {'value': '$phi170.2'}), (172, {'res': '$interp_win172.3'}), (174, {'res': '$offset174.4'}), (176, {'res': '$i176.5'}), (178, {'res': '$index_step178.6'}), (180, {'lhs': '$i176.5', 'rhs': '$index_step178.6', 'res': '$180binary_multiply.7'}), (182, {'lhs': '$offset174.4', 'rhs': '$180binary_multiply.7', 'res': '$182binary_add.8'}), (184, {'index': '$182binary_add.8', 'target': '$interp_win172.3', 'res': '$184binary_subscr.9'}), (186, {'res': '$eta186.10'}), (188, {'res': '$interp_delta188.11'}), (190, {'res': '$offset190.12'}), (192, {'res': '$i192.13'}), (194, {'res': '$index_step194.14'}), (196, {'lhs': '$i192.13', 'rhs': '$index_step194.14', 'res': '$196binary_multiply.15'}), (198, {'lhs': '$offset190.12', 'rhs': '$196binary_multiply.15', 'res': '$198binary_add.16'}), (200, {'index': '$198binary_add.16', 'target': '$interp_delta188.11', 'res': '$200binary_subscr.17'}), (202, {'lhs': '$eta186.10', 'rhs': '$200binary_subscr.17', 'res': '$202binary_multiply.18'}), (204, {'lhs': '$184binary_subscr.9', 'rhs': '$202binary_multiply.18', 'res': '$204binary_add.19'}), (206, {'value': '$204binary_add.19'}), (208, {'res': '$y208.20'}), (210, {'res': '$t210.21'}), (212, {'orig': ['$y208.20', '$t210.21'], 'duped': ['$212dup_top_two.22', '$212dup_top_two.23']}), (214, {'index': '$212dup_top_two.23', 'target': '$212dup_top_two.22', 'res': '$214binary_subscr.24'}), (216, {'res': '$weight216.25'}), (218, {'res': '$x218.26'}), (220, {'res': '$n220.27'}), (222, {'res': '$i222.28'}), (224, {'lhs': '$n220.27', 'rhs': '$i222.28', 'res': '$224binary_subtract.29'}), (226, {'index': '$224binary_subtract.29', 'target': '$x218.26', 'res': '$226binary_subscr.30'}), (228, {'lhs': '$weight216.25', 'rhs': '$226binary_subscr.30', 'res': '$228binary_multiply.31'}), (230, {'lhs': '$214binary_subscr.24', 'rhs': '$228binary_multiply.31', 'res': '$230inplace_add.32'}), (234, {'target': '$y208.20', 'index': '$t210.21', 'value': '$230inplace_add.32'}), (236, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi170.0', '$phi170.1')})
2025-05-02 21:05:38,345 - DEBUG - block_infos State(pc_initial=238 nstack_initial=1):
AdaptBlockInfo(insts=((238, {'res': '$scale238.1'}), (240, {'res': '$frac240.2'}), (242, {'lhs': '$scale238.1', 'rhs': '$frac240.2', 'res': '$242binary_subtract.3'}), (244, {'value': '$242binary_subtract.3'}), (246, {'res': '$frac246.4'}), (248, {'res': '$num_table248.5'}), (250, {'lhs': '$frac246.4', 'rhs': '$num_table248.5', 'res': '$250binary_multiply.6'}), (252, {'value': '$250binary_multiply.6'}), (254, {'res': '$254load_global.7'}), (256, {'res': '$index_frac256.8'}), (258, {'func': '$254load_global.7', 'args': ['$index_frac256.8'], 'res': '$258call_function.9'}), (260, {'value': '$258call_function.9'}), (262, {'res': '$index_frac262.10'}), (264, {'res': '$offset264.11'}), (266, {'lhs': '$index_frac262.10', 'rhs': '$offset264.11', 'res': '$266binary_subtract.12'}), (268, {'value': '$266binary_subtract.12'}), (270, {'res': '$270load_global.13'}), (272, {'res': '$n_orig272.14'}), (274, {'res': '$n274.15'}), (276, {'lhs': '$n_orig272.14', 'rhs': '$n274.15', 'res': '$276binary_subtract.16'}), (278, {'res': '$const278.17'}), (280, {'lhs': '$276binary_subtract.16', 'rhs': '$const278.17', 'res': '$280binary_subtract.18'}), (282, {'res': '$nwin282.19'}), (284, {'res': '$offset284.20'}), (286, {'lhs': '$nwin282.19', 'rhs': '$offset284.20', 'res': '$286binary_subtract.21'}), (288, {'res': '$index_step288.22'}), (290, {'lhs': '$286binary_subtract.21', 'rhs': '$index_step288.22', 'res': '$290binary_floor_divide.23'}), (292, {'func': '$270load_global.13', 'args': ['$280binary_subtract.18', '$290binary_floor_divide.23'], 'res': '$292call_function.24'}), (294, {'value': '$292call_function.24'}), (296, {'res': '$296load_global.25'}), (298, {'res': '$k_max298.26'}), (300, {'func': '$296load_global.25', 'args': ['$k_max298.26'], 'res': '$300call_function.27'}), (302, {'value': '$300call_function.27', 'res': '$302get_iter.28'})), outgoing_phis={'$phi304.1': '$302get_iter.28'}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: ('$phi238.0', '$302get_iter.28')})
2025-05-02 21:05:38,345 - DEBUG - block_infos State(pc_initial=304 nstack_initial=2):
AdaptBlockInfo(insts=((304, {'iterator': '$phi304.1', 'pair': '$304for_iter.2', 'indval': '$304for_iter.3', 'pred': '$304for_iter.4'}),), outgoing_phis={'$phi306.2': '$304for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={380: ('$phi304.0',), 306: ('$phi304.0', '$phi304.1', '$304for_iter.3')})
2025-05-02 21:05:38,345 - DEBUG - block_infos State(pc_initial=306 nstack_initial=3):
AdaptBlockInfo(insts=((306, {'value': '$phi306.2'}), (308, {'res': '$interp_win308.3'}), (310, {'res': '$offset310.4'}), (312, {'res': '$k312.5'}), (314, {'res': '$index_step314.6'}), (316, {'lhs': '$k312.5', 'rhs': '$index_step314.6', 'res': '$316binary_multiply.7'}), (318, {'lhs': '$offset310.4', 'rhs': '$316binary_multiply.7', 'res': '$318binary_add.8'}), (320, {'index': '$318binary_add.8', 'target': '$interp_win308.3', 'res': '$320binary_subscr.9'}), (322, {'res': '$eta322.10'}), (324, {'res': '$interp_delta324.11'}), (326, {'res': '$offset326.12'}), (328, {'res': '$k328.13'}), (330, {'res': '$index_step330.14'}), (332, {'lhs': '$k328.13', 'rhs': '$index_step330.14', 'res': '$332binary_multiply.15'}), (334, {'lhs': '$offset326.12', 'rhs': '$332binary_multiply.15', 'res': '$334binary_add.16'}), (336, {'index': '$334binary_add.16', 'target': '$interp_delta324.11', 'res': '$336binary_subscr.17'}), (338, {'lhs': '$eta322.10', 'rhs': '$336binary_subscr.17', 'res': '$338binary_multiply.18'}), (340, {'lhs': '$320binary_subscr.9', 'rhs': '$338binary_multiply.18', 'res': '$340binary_add.19'}), (342, {'value': '$340binary_add.19'}), (344, {'res': '$y344.20'}), (346, {'res': '$t346.21'}), (348, {'orig': ['$y344.20', '$t346.21'], 'duped': ['$348dup_top_two.22', '$348dup_top_two.23']}), (350, {'index': '$348dup_top_two.23', 'target': '$348dup_top_two.22', 'res': '$350binary_subscr.24'}), (352, {'res': '$weight352.25'}), (354, {'res': '$x354.26'}), (356, {'res': '$n356.27'}), (358, {'res': '$k358.28'}), (360, {'lhs': '$n356.27', 'rhs': '$k358.28', 'res': '$360binary_add.29'}), (362, {'res': '$const362.30'}), (364, {'lhs': '$360binary_add.29', 'rhs': '$const362.30', 'res': '$364binary_add.31'}), (366, {'index': '$364binary_add.31', 'target': '$x354.26', 'res': '$366binary_subscr.32'}), (368, {'lhs': '$weight352.25', 'rhs': '$366binary_subscr.32', 'res': '$368binary_multiply.33'}), (370, {'lhs': '$350binary_subscr.24', 'rhs': '$368binary_multiply.33', 'res': '$370inplace_add.34'}), (374, {'target': '$y344.20', 'index': '$t346.21', 'value': '$370inplace_add.34'}), (376, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: ('$phi306.0', '$phi306.1')})
2025-05-02 21:05:38,345 - DEBUG - block_infos State(pc_initial=380 nstack_initial=1):
AdaptBlockInfo(insts=((380, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi380.0',)})
2025-05-02 21:05:38,345 - DEBUG - block_infos State(pc_initial=382 nstack_initial=0):
AdaptBlockInfo(insts=((382, {'res': '$const382.0'}), (384, {'retval': '$const382.0', 'castval': '$384return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-02 21:05:38,347 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    t_out = arg(1, name=t_out)               ['t_out']
    interp_win = arg(2, name=interp_win)     ['interp_win']
    interp_delta = arg(3, name=interp_delta) ['interp_delta']
    num_table = arg(4, name=num_table)       ['num_table']
    scale = arg(5, name=scale)               ['scale']
    y = arg(6, name=y)                       ['y']
    $2load_global.0 = global(int: <class 'int'>) ['$2load_global.0']
    $8binary_multiply.3 = scale * num_table  ['$8binary_multiply.3', 'num_table', 'scale']
    index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8binary_multiply.3', 'index_step']
    time_register = const(float, 0.0)        ['time_register']
    n = const(int, 0)                        ['n']
    frac = const(float, 0.0)                 ['frac']
    index_frac = const(float, 0.0)           ['index_frac']
    offset = const(int, 0)                   ['offset']
    eta = const(float, 0.0)                  ['eta']
    weight = const(float, 0.0)               ['weight']
    $44load_attr.13 = getattr(value=interp_win, attr=shape) ['$44load_attr.13', 'interp_win']
    $const46.14 = const(int, 0)              ['$const46.14']
    nwin = getitem(value=$44load_attr.13, index=$const46.14, fn=<built-in function getitem>) ['$44load_attr.13', '$const46.14', 'nwin']
    $54load_attr.17 = getattr(value=x, attr=shape) ['$54load_attr.17', 'x']
    $const56.18 = const(int, 0)              ['$const56.18']
    n_orig = getitem(value=$54load_attr.17, index=$const56.18, fn=<built-in function getitem>) ['$54load_attr.17', '$const56.18', 'n_orig']
    $64load_attr.21 = getattr(value=t_out, attr=shape) ['$64load_attr.21', 't_out']
    $const66.22 = const(int, 0)              ['$const66.22']
    n_out = getitem(value=$64load_attr.21, index=$const66.22, fn=<built-in function getitem>) ['$64load_attr.21', '$const66.22', 'n_out']
    $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>) ['$72load_global.24']
    $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.24', '$76call_function.26', 'n_out']
    $78get_iter.27 = getiter(value=$76call_function.26) ['$76call_function.26', '$78get_iter.27']
    $phi80.0 = $78get_iter.27                ['$78get_iter.27', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi84.1 = $80for_iter.2                 ['$80for_iter.2', '$phi84.1']
    branch $80for_iter.3, 84, 382            ['$80for_iter.3']
label 84:
    t = $phi84.1                             ['$phi84.1', 't']
    time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>) ['t', 't_out', 'time_register']
    $94load_global.5 = global(int: <class 'int'>) ['$94load_global.5']
    n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None) ['$94load_global.5', 'n', 'time_register']
    $108binary_subtract.11 = time_register - n ['$108binary_subtract.11', 'n', 'time_register']
    frac = scale * $108binary_subtract.11    ['$108binary_subtract.11', 'frac', 'scale']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $122load_global.16 = global(int: <class 'int'>) ['$122load_global.16']
    offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.16', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $138load_global.22 = global(min: <built-in function min>) ['$138load_global.22']
    $const142.24 = const(int, 1)             ['$const142.24']
    $144binary_add.25 = n + $const142.24     ['$144binary_add.25', '$const142.24', 'n']
    $150binary_subtract.28 = nwin - offset   ['$150binary_subtract.28', 'nwin', 'offset']
    $154binary_floor_divide.30 = $150binary_subtract.28 // index_step ['$150binary_subtract.28', '$154binary_floor_divide.30', 'index_step']
    i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None) ['$138load_global.22', '$144binary_add.25', '$154binary_floor_divide.30', 'i_max']
    $160load_global.32 = global(range: <class 'range'>) ['$160load_global.32']
    $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None) ['$160load_global.32', '$164call_function.34', 'i_max']
    $166get_iter.35 = getiter(value=$164call_function.34) ['$164call_function.34', '$166get_iter.35']
    $phi168.1 = $166get_iter.35              ['$166get_iter.35', '$phi168.1']
    jump 168                                 []
label 168:
    $168for_iter.2 = iternext(value=$phi168.1) ['$168for_iter.2', '$phi168.1']
    $168for_iter.3 = pair_first(value=$168for_iter.2) ['$168for_iter.2', '$168for_iter.3']
    $168for_iter.4 = pair_second(value=$168for_iter.2) ['$168for_iter.2', '$168for_iter.4']
    $phi170.2 = $168for_iter.3               ['$168for_iter.3', '$phi170.2']
    branch $168for_iter.4, 170, 238          ['$168for_iter.4']
label 170:
    i = $phi170.2                            ['$phi170.2', 'i']
    $180binary_multiply.7 = i * index_step   ['$180binary_multiply.7', 'i', 'index_step']
    $182binary_add.8 = offset + $180binary_multiply.7 ['$180binary_multiply.7', '$182binary_add.8', 'offset']
    $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>) ['$182binary_add.8', '$184binary_subscr.9', 'interp_win']
    $196binary_multiply.15 = i * index_step  ['$196binary_multiply.15', 'i', 'index_step']
    $198binary_add.16 = offset + $196binary_multiply.15 ['$196binary_multiply.15', '$198binary_add.16', 'offset']
    $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>) ['$198binary_add.16', '$200binary_subscr.17', 'interp_delta']
    $202binary_multiply.18 = eta * $200binary_subscr.17 ['$200binary_subscr.17', '$202binary_multiply.18', 'eta']
    weight = $184binary_subscr.9 + $202binary_multiply.18 ['$184binary_subscr.9', '$202binary_multiply.18', 'weight']
    $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>) ['$214binary_subscr.24', 't', 'y']
    $224binary_subtract.29 = n - i           ['$224binary_subtract.29', 'i', 'n']
    $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>) ['$224binary_subtract.29', '$226binary_subscr.30', 'x']
    $228binary_multiply.31 = weight * $226binary_subscr.30 ['$226binary_subscr.30', '$228binary_multiply.31', 'weight']
    $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined) ['$214binary_subscr.24', '$228binary_multiply.31', '$230inplace_add.32']
    y[t] = $230inplace_add.32                ['$230inplace_add.32', 't', 'y']
    jump 168                                 []
label 238:
    $242binary_subtract.3 = scale - frac     ['$242binary_subtract.3', 'frac', 'scale']
    frac = $242binary_subtract.3             ['$242binary_subtract.3', 'frac']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $254load_global.7 = global(int: <class 'int'>) ['$254load_global.7']
    offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None) ['$254load_global.7', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $270load_global.13 = global(min: <built-in function min>) ['$270load_global.13']
    $276binary_subtract.16 = n_orig - n      ['$276binary_subtract.16', 'n', 'n_orig']
    $const278.17 = const(int, 1)             ['$const278.17']
    $280binary_subtract.18 = $276binary_subtract.16 - $const278.17 ['$276binary_subtract.16', '$280binary_subtract.18', '$const278.17']
    $286binary_subtract.21 = nwin - offset   ['$286binary_subtract.21', 'nwin', 'offset']
    $290binary_floor_divide.23 = $286binary_subtract.21 // index_step ['$286binary_subtract.21', '$290binary_floor_divide.23', 'index_step']
    k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None) ['$270load_global.13', '$280binary_subtract.18', '$290binary_floor_divide.23', 'k_max']
    $296load_global.25 = global(range: <class 'range'>) ['$296load_global.25']
    $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None) ['$296load_global.25', '$300call_function.27', 'k_max']
    $302get_iter.28 = getiter(value=$300call_function.27) ['$300call_function.27', '$302get_iter.28']
    $phi304.1 = $302get_iter.28              ['$302get_iter.28', '$phi304.1']
    jump 304                                 []
label 304:
    $304for_iter.2 = iternext(value=$phi304.1) ['$304for_iter.2', '$phi304.1']
    $304for_iter.3 = pair_first(value=$304for_iter.2) ['$304for_iter.2', '$304for_iter.3']
    $304for_iter.4 = pair_second(value=$304for_iter.2) ['$304for_iter.2', '$304for_iter.4']
    $phi306.2 = $304for_iter.3               ['$304for_iter.3', '$phi306.2']
    branch $304for_iter.4, 306, 380          ['$304for_iter.4']
label 306:
    k = $phi306.2                            ['$phi306.2', 'k']
    $316binary_multiply.7 = k * index_step   ['$316binary_multiply.7', 'index_step', 'k']
    $318binary_add.8 = offset + $316binary_multiply.7 ['$316binary_multiply.7', '$318binary_add.8', 'offset']
    $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>) ['$318binary_add.8', '$320binary_subscr.9', 'interp_win']
    $332binary_multiply.15 = k * index_step  ['$332binary_multiply.15', 'index_step', 'k']
    $334binary_add.16 = offset + $332binary_multiply.15 ['$332binary_multiply.15', '$334binary_add.16', 'offset']
    $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>) ['$334binary_add.16', '$336binary_subscr.17', 'interp_delta']
    $338binary_multiply.18 = eta * $336binary_subscr.17 ['$336binary_subscr.17', '$338binary_multiply.18', 'eta']
    weight = $320binary_subscr.9 + $338binary_multiply.18 ['$320binary_subscr.9', '$338binary_multiply.18', 'weight']
    $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>) ['$350binary_subscr.24', 't', 'y']
    $360binary_add.29 = n + k                ['$360binary_add.29', 'k', 'n']
    $const362.30 = const(int, 1)             ['$const362.30']
    $364binary_add.31 = $360binary_add.29 + $const362.30 ['$360binary_add.29', '$364binary_add.31', '$const362.30']
    $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>) ['$364binary_add.31', '$366binary_subscr.32', 'x']
    $368binary_multiply.33 = weight * $366binary_subscr.32 ['$366binary_subscr.32', '$368binary_multiply.33', 'weight']
    $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined) ['$350binary_subscr.24', '$368binary_multiply.33', '$370inplace_add.34']
    y[t] = $370inplace_add.34                ['$370inplace_add.34', 't', 'y']
    jump 304                                 []
label 380:
    jump 80                                  []
label 382:
    $const382.0 = const(NoneType, None)      ['$const382.0']
    $384return_value.1 = cast(value=$const382.0) ['$384return_value.1', '$const382.0']
    return $384return_value.1                ['$384return_value.1']

2025-05-02 21:05:38,356 - DEBUG - ==== SSA block analysis pass on 0
2025-05-02 21:05:38,356 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB1A24F0>
2025-05-02 21:05:38,356 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,356 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,356 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,356 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,356 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,356 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,356 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,356 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,356 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,356 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,357 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,357 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,357 - DEBUG - ==== SSA block analysis pass on 80
2025-05-02 21:05:38,357 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB1A24F0>
2025-05-02 21:05:38,357 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,357 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,357 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,358 - DEBUG - ==== SSA block analysis pass on 84
2025-05-02 21:05:38,358 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB1A24F0>
2025-05-02 21:05:38,358 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,358 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,358 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,358 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,358 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:05:38,358 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,358 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,358 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,358 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,358 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:05:38,358 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,358 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,358 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,358 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:05:38,358 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,358 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,358 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,358 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,358 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,358 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,358 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,358 - DEBUG - ==== SSA block analysis pass on 168
2025-05-02 21:05:38,358 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB1A24F0>
2025-05-02 21:05:38,358 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,358 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,358 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,359 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,359 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,359 - DEBUG - ==== SSA block analysis pass on 170
2025-05-02 21:05:38,359 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB1A24F0>
2025-05-02 21:05:38,359 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,359 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,359 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:05:38,359 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,359 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,359 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:05:38,359 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,359 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:05:38,359 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,359 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,359 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,359 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,359 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:05:38,359 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,359 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,359 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,359 - DEBUG - ==== SSA block analysis pass on 238
2025-05-02 21:05:38,359 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB1A24F0>
2025-05-02 21:05:38,359 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,359 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,359 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,359 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,359 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,359 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:05:38,359 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,359 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,359 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,360 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:05:38,360 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,360 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,360 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,360 - DEBUG - ==== SSA block analysis pass on 304
2025-05-02 21:05:38,360 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB1A24F0>
2025-05-02 21:05:38,360 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,360 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,360 - DEBUG - ==== SSA block analysis pass on 306
2025-05-02 21:05:38,360 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB1A24F0>
2025-05-02 21:05:38,360 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,360 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,360 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:05:38,360 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,360 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:05:38,360 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:05:38,360 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,360 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,360 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,360 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,361 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,361 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,361 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:05:38,361 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,361 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,361 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,361 - DEBUG - ==== SSA block analysis pass on 380
2025-05-02 21:05:38,361 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB1A24F0>
2025-05-02 21:05:38,361 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,361 - DEBUG - ==== SSA block analysis pass on 382
2025-05-02 21:05:38,361 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000247FB1A24F0>
2025-05-02 21:05:38,361 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,361 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,361 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,362 - DEBUG - defs defaultdict(<class 'list'>,
            {'$108binary_subtract.11': [<numba.core.ir.Assign object at 0x00000247FB18D4F0>],
             '$122load_global.16': [<numba.core.ir.Assign object at 0x00000247FB18DD00>],
             '$138load_global.22': [<numba.core.ir.Assign object at 0x00000247FB1906A0>],
             '$144binary_add.25': [<numba.core.ir.Assign object at 0x00000247FB190AF0>],
             '$150binary_subtract.28': [<numba.core.ir.Assign object at 0x00000247FB190EB0>],
             '$154binary_floor_divide.30': [<numba.core.ir.Assign object at 0x00000247FB193190>],
             '$160load_global.32': [<numba.core.ir.Assign object at 0x00000247FB193580>],
             '$164call_function.34': [<numba.core.ir.Assign object at 0x00000247FB193880>],
             '$166get_iter.35': [<numba.core.ir.Assign object at 0x00000247FB1939A0>],
             '$168for_iter.2': [<numba.core.ir.Assign object at 0x00000247FB18D2B0>],
             '$168for_iter.3': [<numba.core.ir.Assign object at 0x00000247FB18D6D0>],
             '$168for_iter.4': [<numba.core.ir.Assign object at 0x00000247FB18DC10>],
             '$180binary_multiply.7': [<numba.core.ir.Assign object at 0x00000247FB193D90>],
             '$182binary_add.8': [<numba.core.ir.Assign object at 0x00000247FB193F10>],
             '$184binary_subscr.9': [<numba.core.ir.Assign object at 0x00000247FB1960D0>],
             '$196binary_multiply.15': [<numba.core.ir.Assign object at 0x00000247FB1967F0>],
             '$198binary_add.16': [<numba.core.ir.Assign object at 0x00000247FB196970>],
             '$200binary_subscr.17': [<numba.core.ir.Assign object at 0x00000247FB196AF0>],
             '$202binary_multiply.18': [<numba.core.ir.Assign object at 0x00000247FB196C70>],
             '$214binary_subscr.24': [<numba.core.ir.Assign object at 0x00000247FB198490>],
             '$224binary_subtract.29': [<numba.core.ir.Assign object at 0x00000247FB198A90>],
             '$226binary_subscr.30': [<numba.core.ir.Assign object at 0x00000247FB198C10>],
             '$228binary_multiply.31': [<numba.core.ir.Assign object at 0x00000247FB198D90>],
             '$230inplace_add.32': [<numba.core.ir.Assign object at 0x00000247FB198F10>],
             '$242binary_subtract.3': [<numba.core.ir.Assign object at 0x00000247FB198070>],
             '$254load_global.7': [<numba.core.ir.Assign object at 0x00000247FB19A4C0>],
             '$270load_global.13': [<numba.core.ir.Assign object at 0x00000247FB19AE20>],
             '$276binary_subtract.16': [<numba.core.ir.Assign object at 0x00000247FB19C250>],
             '$280binary_subtract.18': [<numba.core.ir.Assign object at 0x00000247FB19C550>],
             '$286binary_subtract.21': [<numba.core.ir.Assign object at 0x00000247FB19C910>],
             '$290binary_floor_divide.23': [<numba.core.ir.Assign object at 0x00000247FB19CBB0>],
             '$296load_global.25': [<numba.core.ir.Assign object at 0x00000247FB19CFA0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x00000247FB1810A0>],
             '$300call_function.27': [<numba.core.ir.Assign object at 0x00000247FB19E2E0>],
             '$302get_iter.28': [<numba.core.ir.Assign object at 0x00000247FB19E400>],
             '$304for_iter.2': [<numba.core.ir.Assign object at 0x00000247FB19A700>],
             '$304for_iter.3': [<numba.core.ir.Assign object at 0x00000247FB19AD30>],
             '$304for_iter.4': [<numba.core.ir.Assign object at 0x00000247FB19C130>],
             '$316binary_multiply.7': [<numba.core.ir.Assign object at 0x00000247FB19EB50>],
             '$318binary_add.8': [<numba.core.ir.Assign object at 0x00000247FB19ECD0>],
             '$320binary_subscr.9': [<numba.core.ir.Assign object at 0x00000247FB19EE50>],
             '$332binary_multiply.15': [<numba.core.ir.Assign object at 0x00000247FB1A05B0>],
             '$334binary_add.16': [<numba.core.ir.Assign object at 0x00000247FB1A0730>],
             '$336binary_subscr.17': [<numba.core.ir.Assign object at 0x00000247FB1A08B0>],
             '$338binary_multiply.18': [<numba.core.ir.Assign object at 0x00000247FB1A0A30>],
             '$350binary_subscr.24': [<numba.core.ir.Assign object at 0x00000247FB1A2250>],
             '$360binary_add.29': [<numba.core.ir.Assign object at 0x00000247FB1A2850>],
             '$364binary_add.31': [<numba.core.ir.Assign object at 0x00000247FB1A2B50>],
             '$366binary_subscr.32': [<numba.core.ir.Assign object at 0x00000247FB1A2CD0>],
             '$368binary_multiply.33': [<numba.core.ir.Assign object at 0x00000247FB1A2E50>],
             '$370inplace_add.34': [<numba.core.ir.Assign object at 0x00000247FB1A2FD0>],
             '$384return_value.1': [<numba.core.ir.Assign object at 0x00000247FB1A2040>],
             '$44load_attr.13': [<numba.core.ir.Assign object at 0x00000247FB186C40>],
             '$54load_attr.17': [<numba.core.ir.Assign object at 0x00000247FB188340>],
             '$64load_attr.21': [<numba.core.ir.Assign object at 0x00000247FB188A00>],
             '$72load_global.24': [<numba.core.ir.Assign object at 0x00000247FB188FA0>],
             '$76call_function.26': [<numba.core.ir.Assign object at 0x00000247FB18A2E0>],
             '$78get_iter.27': [<numba.core.ir.Assign object at 0x00000247FB18A400>],
             '$80for_iter.1': [<numba.core.ir.Assign object at 0x00000247FB186A30>],
             '$80for_iter.2': [<numba.core.ir.Assign object at 0x00000247FB188250>],
             '$80for_iter.3': [<numba.core.ir.Assign object at 0x00000247FB188EB0>],
             '$8binary_multiply.3': [<numba.core.ir.Assign object at 0x00000247FB181490>],
             '$94load_global.5': [<numba.core.ir.Assign object at 0x00000247FB18AC40>],
             '$const142.24': [<numba.core.ir.Assign object at 0x00000247FB190940>],
             '$const278.17': [<numba.core.ir.Assign object at 0x00000247FB19C3A0>],
             '$const362.30': [<numba.core.ir.Assign object at 0x00000247FB1A29A0>],
             '$const382.0': [<numba.core.ir.Assign object at 0x00000247FB1A0C70>],
             '$const46.14': [<numba.core.ir.Assign object at 0x00000247FB186DC0>],
             '$const56.18': [<numba.core.ir.Assign object at 0x00000247FB1884C0>],
             '$const66.22': [<numba.core.ir.Assign object at 0x00000247FB188B80>],
             '$phi168.1': [<numba.core.ir.Assign object at 0x00000247FB18A7F0>],
             '$phi170.2': [<numba.core.ir.Assign object at 0x00000247FB18D070>],
             '$phi304.1': [<numba.core.ir.Assign object at 0x00000247FB196370>],
             '$phi306.2': [<numba.core.ir.Assign object at 0x00000247FB19A670>],
             '$phi80.0': [<numba.core.ir.Assign object at 0x00000247FB181250>],
             '$phi84.1': [<numba.core.ir.Assign object at 0x00000247FB1864F0>],
             'eta': [<numba.core.ir.Assign object at 0x00000247FB1865E0>,
                     <numba.core.ir.Assign object at 0x00000247FB190490>,
                     <numba.core.ir.Assign object at 0x00000247FB19AC10>],
             'frac': [<numba.core.ir.Assign object at 0x00000247FB181DC0>,
                      <numba.core.ir.Assign object at 0x00000247FB18D670>,
                      <numba.core.ir.Assign object at 0x00000247FB198310>],
             'i': [<numba.core.ir.Assign object at 0x00000247FB1903D0>],
             'i_max': [<numba.core.ir.Assign object at 0x00000247FB193340>],
             'index_frac': [<numba.core.ir.Assign object at 0x00000247FB1860A0>,
                            <numba.core.ir.Assign object at 0x00000247FB18DAF0>,
                            <numba.core.ir.Assign object at 0x00000247FB19A2B0>],
             'index_step': [<numba.core.ir.Assign object at 0x00000247FB181640>],
             'interp_delta': [<numba.core.ir.Assign object at 0x00000247FB1641C0>],
             'interp_win': [<numba.core.ir.Assign object at 0x00000247FB164280>],
             'k': [<numba.core.ir.Assign object at 0x00000247FB19E520>],
             'k_max': [<numba.core.ir.Assign object at 0x00000247FB19CD60>],
             'n': [<numba.core.ir.Assign object at 0x00000247FB181B20>,
                   <numba.core.ir.Assign object at 0x00000247FB18AF40>],
             'n_orig': [<numba.core.ir.Assign object at 0x00000247FB1ACC10>],
             'n_out': [<numba.core.ir.Assign object at 0x00000247FB1ACCD0>],
             'num_table': [<numba.core.ir.Assign object at 0x00000247FB1644C0>],
             'nwin': [<numba.core.ir.Assign object at 0x00000247FB1AC070>],
             'offset': [<numba.core.ir.Assign object at 0x00000247FB186340>,
                        <numba.core.ir.Assign object at 0x00000247FB190040>,
                        <numba.core.ir.Assign object at 0x00000247FB19A7C0>],
             'scale': [<numba.core.ir.Assign object at 0x00000247FB164DC0>],
             't': [<numba.core.ir.Assign object at 0x00000247FB18A640>],
             't_out': [<numba.core.ir.Assign object at 0x00000247FB164700>],
             'time_register': [<numba.core.ir.Assign object at 0x00000247FB181880>,
                               <numba.core.ir.Assign object at 0x00000247FB18AA30>],
             'weight': [<numba.core.ir.Assign object at 0x00000247FB186880>,
                        <numba.core.ir.Assign object at 0x00000247FB196DF0>,
                        <numba.core.ir.Assign object at 0x00000247FB1A0BB0>],
             'x': [<numba.core.ir.Assign object at 0x00000247FB164640>],
             'y': [<numba.core.ir.Assign object at 0x00000247FB164EE0>]})
2025-05-02 21:05:38,362 - DEBUG - SSA violators {'eta', 'offset', 'weight', 'time_register', 'n', 'frac', 'index_frac'}
2025-05-02 21:05:38,362 - DEBUG - Fix SSA violator on var eta
2025-05-02 21:05:38,362 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,362 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,362 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,362 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,362 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,362 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,362 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,362 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,362 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,362 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,362 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,362 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,362 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,362 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,362 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,362 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,362 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,362 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,362 - DEBUG - first assign: eta
2025-05-02 21:05:38,362 - DEBUG - replaced with: eta = const(float, 0.0)
2025-05-02 21:05:38,362 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,362 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,362 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,362 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,363 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,363 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,363 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,363 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,363 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,363 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,363 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,363 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,363 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,363 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,363 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,363 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,363 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:05:38,363 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,363 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,363 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,363 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,364 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:05:38,364 - DEBUG - replaced with: eta.1 = index_frac - offset
2025-05-02 21:05:38,364 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,364 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,364 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,364 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:05:38,364 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,364 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,364 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,364 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,364 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,364 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,364 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,364 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,364 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,364 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,364 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,364 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,364 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,364 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,364 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,364 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,364 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,364 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,364 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:05:38,364 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,364 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,364 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:05:38,365 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,365 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:05:38,365 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,365 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,365 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,365 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,365 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:05:38,365 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,365 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,365 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,365 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,365 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,365 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,365 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,365 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,365 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,365 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,365 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:05:38,365 - DEBUG - replaced with: eta.2 = index_frac - offset
2025-05-02 21:05:38,365 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,365 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,365 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,365 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,365 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:05:38,365 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,365 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,365 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,365 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,366 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,366 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,366 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,366 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,366 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,366 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,366 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,366 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,366 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,366 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,366 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,366 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,366 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,366 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,366 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:05:38,366 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,366 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,366 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:05:38,366 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,366 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:05:38,366 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,366 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,366 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,366 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,366 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,366 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,366 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:05:38,366 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,366 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,366 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,366 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,367 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,367 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,367 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,367 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,367 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,367 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,367 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,367 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000247FB1AC400>],
             84: [<numba.core.ir.Assign object at 0x00000247FB1ACEB0>],
             238: [<numba.core.ir.Assign object at 0x00000247FB1AC7C0>]})
2025-05-02 21:05:38,367 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,367 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,367 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,367 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,367 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,367 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,367 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,367 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,367 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,367 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,367 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,367 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,367 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,367 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,367 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,367 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,367 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,367 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,367 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,367 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,367 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,368 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,368 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,368 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,368 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,368 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,368 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,368 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,368 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,368 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,368 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,368 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,368 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,368 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,368 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:05:38,368 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,368 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,369 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,369 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,369 - DEBUG - on stmt: eta.1 = index_frac - offset
2025-05-02 21:05:38,369 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,369 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,369 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,369 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:05:38,369 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,369 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,369 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,369 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,369 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,369 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,369 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,369 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,369 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,369 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,369 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,369 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,369 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,369 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,369 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,369 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,369 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,369 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,369 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:05:38,369 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,369 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,370 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:05:38,370 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,370 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:05:38,370 - DEBUG - find_def var='eta' stmt=$202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:05:38,370 - DEBUG - find_def_from_top label 170
2025-05-02 21:05:38,370 - DEBUG - idom 168 from label 170
2025-05-02 21:05:38,370 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:05:38,370 - DEBUG - find_def_from_top label 168
2025-05-02 21:05:38,370 - DEBUG - idom 84 from label 168
2025-05-02 21:05:38,370 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:05:38,370 - DEBUG - replaced with: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,370 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,370 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,370 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,370 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,370 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:05:38,370 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,370 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,370 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,370 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,370 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,370 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,370 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,370 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,371 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,371 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,371 - DEBUG - on stmt: eta.2 = index_frac - offset
2025-05-02 21:05:38,371 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,371 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,371 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,371 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,371 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:05:38,371 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,371 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,371 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,371 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,371 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,371 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,371 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,371 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,371 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,371 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,371 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,371 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,371 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,371 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,373 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,373 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,373 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,373 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,373 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:05:38,373 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,373 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,373 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:05:38,373 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,373 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:05:38,373 - DEBUG - find_def var='eta' stmt=$338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:05:38,373 - DEBUG - find_def_from_top label 306
2025-05-02 21:05:38,373 - DEBUG - idom 304 from label 306
2025-05-02 21:05:38,373 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:05:38,373 - DEBUG - find_def_from_top label 304
2025-05-02 21:05:38,373 - DEBUG - idom 238 from label 304
2025-05-02 21:05:38,373 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:05:38,373 - DEBUG - replaced with: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,373 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,373 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,373 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,373 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,373 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,373 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,373 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:05:38,374 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,374 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,374 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,374 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,374 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,374 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,374 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,374 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,374 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,374 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,374 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,374 - DEBUG - Fix SSA violator on var offset
2025-05-02 21:05:38,374 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,374 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,374 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,374 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,374 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,374 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,374 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,374 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,374 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,374 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,374 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,374 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,374 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,374 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,374 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,375 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,375 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,375 - DEBUG - first assign: offset
2025-05-02 21:05:38,375 - DEBUG - replaced with: offset = const(int, 0)
2025-05-02 21:05:38,375 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,375 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,375 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,375 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,375 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,375 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,375 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,375 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,375 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,375 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,375 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,375 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,375 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,376 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,376 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,376 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,376 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,376 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:05:38,376 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,376 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,376 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,376 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,376 - DEBUG - replaced with: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,376 - DEBUG - on stmt: eta.1 = index_frac - offset
2025-05-02 21:05:38,376 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,376 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,376 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,376 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:05:38,376 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,376 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,376 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,376 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,376 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,376 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,376 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,376 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,376 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,376 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,377 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,377 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,377 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,377 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,377 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,377 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,377 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,377 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,377 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:05:38,377 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,377 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,377 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:05:38,377 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,377 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,377 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,377 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,377 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,377 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,377 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:05:38,377 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,377 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,377 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,377 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,377 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,377 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,377 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,377 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,377 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,377 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,377 - DEBUG - replaced with: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,378 - DEBUG - on stmt: eta.2 = index_frac - offset
2025-05-02 21:05:38,378 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,378 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,378 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,378 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,378 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:05:38,378 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,378 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,378 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,378 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,378 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,378 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,378 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,378 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,378 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,378 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,378 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,378 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,378 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,378 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,378 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,378 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,378 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,378 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,378 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:05:38,378 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,378 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,379 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:05:38,379 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,379 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,379 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,379 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,379 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,379 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,379 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,379 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,379 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:05:38,379 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,379 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,379 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,379 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,379 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,379 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,379 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,379 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1A26A0>
2025-05-02 21:05:38,379 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,379 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,379 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,379 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000247FB1AC1F0>],
             84: [<numba.core.ir.Assign object at 0x00000247FB1AC9D0>],
             238: [<numba.core.ir.Assign object at 0x00000247FB1AFDC0>]})
2025-05-02 21:05:38,379 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,379 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1ACDF0>
2025-05-02 21:05:38,379 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,379 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,379 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,379 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,380 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,380 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,380 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,380 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,380 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,380 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,380 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,380 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,380 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,380 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,380 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,380 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,380 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,380 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,380 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,380 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,380 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,380 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1ACDF0>
2025-05-02 21:05:38,381 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,381 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,381 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,381 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,381 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,381 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,381 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1ACDF0>
2025-05-02 21:05:38,381 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,381 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,381 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,381 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,381 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:05:38,381 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,381 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,381 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,381 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,381 - DEBUG - on stmt: eta.1 = index_frac - offset
2025-05-02 21:05:38,381 - DEBUG - find_def var='offset' stmt=eta.1 = index_frac - offset
2025-05-02 21:05:38,381 - DEBUG - replaced with: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,381 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,381 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,381 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,381 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:05:38,381 - DEBUG - find_def var='offset' stmt=$150binary_subtract.28 = nwin - offset
2025-05-02 21:05:38,381 - DEBUG - replaced with: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,381 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,381 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,382 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,382 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,382 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,382 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,382 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,382 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,382 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1ACDF0>
2025-05-02 21:05:38,382 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,382 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,382 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,382 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,382 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,382 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,382 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1ACDF0>
2025-05-02 21:05:38,382 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,382 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,382 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:05:38,382 - DEBUG - find_def var='offset' stmt=$182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:05:38,382 - DEBUG - find_def_from_top label 170
2025-05-02 21:05:38,382 - DEBUG - idom 168 from label 170
2025-05-02 21:05:38,382 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:05:38,382 - DEBUG - find_def_from_top label 168
2025-05-02 21:05:38,382 - DEBUG - idom 84 from label 168
2025-05-02 21:05:38,382 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:05:38,382 - DEBUG - replaced with: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,382 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,382 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,382 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:05:38,383 - DEBUG - find_def var='offset' stmt=$198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:05:38,383 - DEBUG - find_def_from_top label 170
2025-05-02 21:05:38,383 - DEBUG - idom 168 from label 170
2025-05-02 21:05:38,383 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:05:38,383 - DEBUG - find_def_from_top label 168
2025-05-02 21:05:38,383 - DEBUG - idom 84 from label 168
2025-05-02 21:05:38,383 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:05:38,383 - DEBUG - replaced with: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,383 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,383 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,383 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,383 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,383 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,383 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,383 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:05:38,383 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,383 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,383 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,383 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,383 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1ACDF0>
2025-05-02 21:05:38,383 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,383 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,383 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,383 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,383 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,383 - DEBUG - on stmt: eta.2 = index_frac - offset
2025-05-02 21:05:38,383 - DEBUG - find_def var='offset' stmt=eta.2 = index_frac - offset
2025-05-02 21:05:38,383 - DEBUG - replaced with: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,384 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,384 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,384 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,384 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,384 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:05:38,384 - DEBUG - find_def var='offset' stmt=$286binary_subtract.21 = nwin - offset
2025-05-02 21:05:38,384 - DEBUG - replaced with: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,384 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,384 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,384 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,384 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,384 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,384 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,384 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,384 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,384 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1ACDF0>
2025-05-02 21:05:38,384 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,384 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,384 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,384 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,384 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,384 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,384 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1ACDF0>
2025-05-02 21:05:38,384 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,384 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,384 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:05:38,384 - DEBUG - find_def var='offset' stmt=$318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:05:38,384 - DEBUG - find_def_from_top label 306
2025-05-02 21:05:38,384 - DEBUG - idom 304 from label 306
2025-05-02 21:05:38,385 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:05:38,385 - DEBUG - find_def_from_top label 304
2025-05-02 21:05:38,385 - DEBUG - idom 238 from label 304
2025-05-02 21:05:38,385 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:05:38,385 - DEBUG - replaced with: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,385 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,385 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,385 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:05:38,385 - DEBUG - find_def var='offset' stmt=$334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:05:38,385 - DEBUG - find_def_from_top label 306
2025-05-02 21:05:38,385 - DEBUG - idom 304 from label 306
2025-05-02 21:05:38,385 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:05:38,385 - DEBUG - find_def_from_top label 304
2025-05-02 21:05:38,385 - DEBUG - idom 238 from label 304
2025-05-02 21:05:38,385 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:05:38,385 - DEBUG - replaced with: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,385 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,385 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,385 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,385 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,385 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,385 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,385 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,385 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,385 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:05:38,385 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,385 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,385 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,386 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,386 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1ACDF0>
2025-05-02 21:05:38,386 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,386 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,386 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1ACDF0>
2025-05-02 21:05:38,386 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,386 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,386 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,386 - DEBUG - Fix SSA violator on var weight
2025-05-02 21:05:38,386 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,386 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AC160>
2025-05-02 21:05:38,386 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,386 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,386 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,386 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,386 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,386 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,386 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,386 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,386 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,386 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,386 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,386 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,386 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,386 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,386 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,386 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,387 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,387 - DEBUG - first assign: weight
2025-05-02 21:05:38,387 - DEBUG - replaced with: weight = const(float, 0.0)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,387 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,387 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,387 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,387 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,387 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,387 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AC160>
2025-05-02 21:05:38,387 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,387 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,387 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,387 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AC160>
2025-05-02 21:05:38,387 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,387 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,387 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,387 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:05:38,388 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,388 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,388 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,388 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,388 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,388 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,388 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,388 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,388 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,388 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,388 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,388 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,388 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,388 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,388 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,388 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,388 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,388 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AC160>
2025-05-02 21:05:38,388 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,388 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,388 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,388 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,388 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,388 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,388 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AC160>
2025-05-02 21:05:38,388 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,388 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,388 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,388 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,388 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,389 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,389 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,389 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,389 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,389 - DEBUG - replaced with: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,389 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,389 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,389 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,389 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:05:38,389 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,389 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,389 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,389 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,389 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AC160>
2025-05-02 21:05:38,389 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,389 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,389 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,389 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,389 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,389 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,389 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,389 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,389 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,389 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,389 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,389 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,389 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,389 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,389 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,390 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,390 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,390 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,390 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,390 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AC160>
2025-05-02 21:05:38,390 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,390 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,390 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,390 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,390 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,390 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,390 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AC160>
2025-05-02 21:05:38,390 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,390 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,390 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,390 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,390 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,390 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,390 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,390 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,390 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,390 - DEBUG - replaced with: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,390 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,390 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,390 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,390 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,390 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,390 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:05:38,390 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,390 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,390 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,391 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,391 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AC160>
2025-05-02 21:05:38,391 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,391 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,391 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AC160>
2025-05-02 21:05:38,391 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,391 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,391 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,391 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000247FB1AC880>],
             170: [<numba.core.ir.Assign object at 0x00000247FB1AC7F0>],
             306: [<numba.core.ir.Assign object at 0x00000247FB1AF580>]})
2025-05-02 21:05:38,391 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,391 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC310>
2025-05-02 21:05:38,391 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,391 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,391 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,391 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,391 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,391 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,391 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,391 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,391 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,391 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,391 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,391 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,391 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,391 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,391 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,391 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,391 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,391 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,391 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,392 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,392 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,392 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,392 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,392 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,392 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC310>
2025-05-02 21:05:38,392 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,392 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,392 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,392 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC310>
2025-05-02 21:05:38,392 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,392 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,392 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:05:38,392 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,392 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,392 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,392 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,392 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,392 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,392 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,393 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,393 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,393 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,393 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,393 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,393 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC310>
2025-05-02 21:05:38,393 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,393 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,393 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,393 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC310>
2025-05-02 21:05:38,393 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,393 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,393 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,393 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,393 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,393 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,393 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,393 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,393 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,394 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,394 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:05:38,394 - DEBUG - find_def var='weight' stmt=$228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:05:38,394 - DEBUG - replaced with: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:05:38,394 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,394 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,394 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,394 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,394 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC310>
2025-05-02 21:05:38,394 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,394 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,394 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,394 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,394 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,394 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,394 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,394 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,394 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,394 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,394 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,394 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,394 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,394 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,394 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,394 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,394 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,394 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,394 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,395 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC310>
2025-05-02 21:05:38,395 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,395 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,395 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,395 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,395 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,395 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,395 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC310>
2025-05-02 21:05:38,395 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,395 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,395 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,395 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,395 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,395 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,395 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,395 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,395 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,395 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,395 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,395 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,395 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,395 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,395 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:05:38,395 - DEBUG - find_def var='weight' stmt=$368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:05:38,395 - DEBUG - replaced with: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:05:38,395 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,395 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,395 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,395 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,396 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC310>
2025-05-02 21:05:38,396 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,396 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,396 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC310>
2025-05-02 21:05:38,396 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,396 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,396 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,396 - DEBUG - Fix SSA violator on var time_register
2025-05-02 21:05:38,396 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,396 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF3A0>
2025-05-02 21:05:38,396 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,396 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,396 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,396 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,396 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,396 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,396 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,396 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,396 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,396 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,396 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,396 - DEBUG - first assign: time_register
2025-05-02 21:05:38,396 - DEBUG - replaced with: time_register = const(float, 0.0)
2025-05-02 21:05:38,396 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,396 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,396 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,396 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,396 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,396 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,396 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,396 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,396 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,396 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,397 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,397 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,397 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,397 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,397 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF3A0>
2025-05-02 21:05:38,397 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,397 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,397 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,397 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF3A0>
2025-05-02 21:05:38,397 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,397 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,397 - DEBUG - replaced with: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,397 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,397 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:05:38,397 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,397 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,397 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,397 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,397 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,398 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,398 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,398 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,398 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,398 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,398 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,398 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF3A0>
2025-05-02 21:05:38,398 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,398 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,398 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,398 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF3A0>
2025-05-02 21:05:38,398 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,398 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,398 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,398 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,398 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,398 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,398 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,398 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,399 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,399 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,399 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,399 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:05:38,399 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,399 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,399 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,399 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,399 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF3A0>
2025-05-02 21:05:38,399 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,399 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,399 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,399 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,399 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,399 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,399 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,399 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,399 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,399 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,399 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,399 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,399 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,399 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,399 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,399 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,399 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,399 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,399 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,399 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF3A0>
2025-05-02 21:05:38,399 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,400 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,400 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,400 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,400 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,400 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,400 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF3A0>
2025-05-02 21:05:38,400 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,400 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,400 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,400 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,400 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,400 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,400 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,400 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,400 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,400 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,400 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,400 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,400 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,400 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,400 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:05:38,400 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,400 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,400 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,400 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,400 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF3A0>
2025-05-02 21:05:38,400 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,400 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,400 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF3A0>
2025-05-02 21:05:38,400 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,401 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,401 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,401 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000247FB1AF820>],
             84: [<numba.core.ir.Assign object at 0x00000247FB1AC940>]})
2025-05-02 21:05:38,401 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,401 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC160>
2025-05-02 21:05:38,401 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,401 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,401 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,401 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,401 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,401 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,401 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,401 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,401 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,401 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,401 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,401 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,402 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,402 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,402 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,402 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,402 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,402 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,402 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,402 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,402 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,402 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,402 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,402 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,402 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,402 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,402 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,402 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,402 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,402 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,402 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,402 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,402 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC160>
2025-05-02 21:05:38,403 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,403 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,403 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,403 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,403 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,403 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,403 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC160>
2025-05-02 21:05:38,403 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,403 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,403 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,403 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,403 - DEBUG - find_def var='time_register' stmt=n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,403 - DEBUG - replaced with: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,403 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:05:38,403 - DEBUG - find_def var='time_register' stmt=$108binary_subtract.11 = time_register - n
2025-05-02 21:05:38,403 - DEBUG - replaced with: $108binary_subtract.11 = time_register.1 - n
2025-05-02 21:05:38,403 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,403 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,404 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,404 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,404 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,404 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,404 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,404 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,404 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,404 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,404 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,404 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,404 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,404 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,404 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,404 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,404 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,404 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC160>
2025-05-02 21:05:38,404 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,404 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,404 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,404 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,404 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,404 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,404 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC160>
2025-05-02 21:05:38,404 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,404 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,404 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,404 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,405 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,405 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,405 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,405 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,405 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,405 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,405 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,405 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,405 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:05:38,405 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,405 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,405 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,405 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,405 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC160>
2025-05-02 21:05:38,405 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,405 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,405 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,405 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,405 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,405 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,405 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,405 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,405 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,405 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,405 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,405 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,406 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,406 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,406 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,406 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,406 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,406 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,406 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,406 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC160>
2025-05-02 21:05:38,406 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,406 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,406 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,406 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,406 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,406 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,406 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC160>
2025-05-02 21:05:38,406 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,406 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,406 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,406 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,406 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,406 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,406 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,406 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,406 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,406 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,406 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,406 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,407 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,407 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,407 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:05:38,407 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,407 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,407 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,407 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,407 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC160>
2025-05-02 21:05:38,407 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,407 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,407 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC160>
2025-05-02 21:05:38,407 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,407 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,407 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,407 - DEBUG - Fix SSA violator on var n
2025-05-02 21:05:38,407 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,407 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF550>
2025-05-02 21:05:38,407 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,407 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,407 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,407 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,407 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,407 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,407 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,407 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,407 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,407 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,407 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,408 - DEBUG - first assign: n
2025-05-02 21:05:38,408 - DEBUG - replaced with: n = const(int, 0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,408 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,408 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,408 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF550>
2025-05-02 21:05:38,408 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,408 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,408 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,408 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,409 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF550>
2025-05-02 21:05:38,409 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,409 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,409 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,409 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,409 - DEBUG - replaced with: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,409 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 21:05:38,409 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,409 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,409 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,409 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,409 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,409 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,409 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,409 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,409 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,409 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,409 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,409 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,409 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,409 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,409 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,409 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,409 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,409 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF550>
2025-05-02 21:05:38,409 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,409 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,409 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,410 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,410 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,410 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,410 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF550>
2025-05-02 21:05:38,410 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,410 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,410 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,410 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,410 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,410 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,410 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,410 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,410 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,410 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,410 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,410 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,410 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:05:38,410 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,410 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,410 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,410 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,410 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF550>
2025-05-02 21:05:38,410 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,410 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,410 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,410 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,410 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,410 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,410 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,411 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,411 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,411 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,411 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,411 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,411 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,411 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF550>
2025-05-02 21:05:38,411 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,411 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,411 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,411 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF550>
2025-05-02 21:05:38,411 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,411 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,411 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,411 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,411 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,411 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,411 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,411 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,411 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,412 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,412 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,412 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,412 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,412 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:05:38,412 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,412 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,412 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,412 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,412 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF550>
2025-05-02 21:05:38,412 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,412 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,412 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF550>
2025-05-02 21:05:38,412 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,412 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,412 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,412 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000247FB1AF640>],
             84: [<numba.core.ir.Assign object at 0x00000247FB1AC7C0>]})
2025-05-02 21:05:38,412 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,412 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC2E0>
2025-05-02 21:05:38,412 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,412 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,412 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,412 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,412 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,412 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,412 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,412 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,412 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,412 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,412 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,412 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,412 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,413 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,413 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,413 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,413 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,413 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,413 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,413 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,413 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,413 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,413 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC2E0>
2025-05-02 21:05:38,413 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,413 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,413 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,413 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC2E0>
2025-05-02 21:05:38,413 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,413 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,413 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,413 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,414 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 21:05:38,414 - DEBUG - find_def var='n' stmt=$108binary_subtract.11 = time_register.1 - n
2025-05-02 21:05:38,414 - DEBUG - replaced with: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:05:38,414 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,414 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,414 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,414 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,414 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,414 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,414 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,414 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,414 - DEBUG - find_def var='n' stmt=$144binary_add.25 = n + $const142.24
2025-05-02 21:05:38,414 - DEBUG - replaced with: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:05:38,414 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,414 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,414 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,414 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,414 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,414 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,414 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,414 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,414 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,414 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC2E0>
2025-05-02 21:05:38,414 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,414 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,414 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,415 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,415 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,415 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,415 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC2E0>
2025-05-02 21:05:38,415 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,415 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,415 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,415 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,415 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,415 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,415 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,415 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,415 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,415 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,415 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:05:38,415 - DEBUG - find_def var='n' stmt=$224binary_subtract.29 = n - i
2025-05-02 21:05:38,415 - DEBUG - find_def_from_top label 170
2025-05-02 21:05:38,415 - DEBUG - idom 168 from label 170
2025-05-02 21:05:38,415 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:05:38,415 - DEBUG - find_def_from_top label 168
2025-05-02 21:05:38,415 - DEBUG - idom 84 from label 168
2025-05-02 21:05:38,415 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:05:38,415 - DEBUG - replaced with: $224binary_subtract.29 = n.1 - i
2025-05-02 21:05:38,415 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,415 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:05:38,415 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,415 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,415 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,415 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,416 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC2E0>
2025-05-02 21:05:38,416 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,416 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,416 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,416 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,416 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,416 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,416 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,416 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,416 - DEBUG - find_def var='n' stmt=$276binary_subtract.16 = n_orig - n
2025-05-02 21:05:38,416 - DEBUG - find_def_from_top label 238
2025-05-02 21:05:38,416 - DEBUG - idom 168 from label 238
2025-05-02 21:05:38,416 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:05:38,416 - DEBUG - find_def_from_top label 168
2025-05-02 21:05:38,416 - DEBUG - idom 84 from label 168
2025-05-02 21:05:38,416 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:05:38,416 - DEBUG - replaced with: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:05:38,416 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,416 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,416 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,416 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,416 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,416 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,416 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,416 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,416 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,416 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,416 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,416 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC2E0>
2025-05-02 21:05:38,417 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,417 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,417 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,417 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,417 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,417 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,417 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC2E0>
2025-05-02 21:05:38,417 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,417 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,417 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,417 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,417 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,417 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,417 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,417 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,417 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,417 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,417 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:05:38,417 - DEBUG - find_def var='n' stmt=$360binary_add.29 = n + k
2025-05-02 21:05:38,417 - DEBUG - find_def_from_top label 306
2025-05-02 21:05:38,417 - DEBUG - idom 304 from label 306
2025-05-02 21:05:38,417 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:05:38,417 - DEBUG - find_def_from_top label 304
2025-05-02 21:05:38,417 - DEBUG - idom 238 from label 304
2025-05-02 21:05:38,417 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:05:38,417 - DEBUG - find_def_from_top label 238
2025-05-02 21:05:38,417 - DEBUG - idom 168 from label 238
2025-05-02 21:05:38,417 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:05:38,417 - DEBUG - find_def_from_top label 168
2025-05-02 21:05:38,417 - DEBUG - idom 84 from label 168
2025-05-02 21:05:38,417 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:05:38,417 - DEBUG - replaced with: $360binary_add.29 = n.1 + k
2025-05-02 21:05:38,418 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,418 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,418 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,418 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:05:38,418 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,418 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,418 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,418 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,418 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC2E0>
2025-05-02 21:05:38,418 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,418 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,418 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC2E0>
2025-05-02 21:05:38,418 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,418 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,418 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,418 - DEBUG - Fix SSA violator on var frac
2025-05-02 21:05:38,418 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,418 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB152C40>
2025-05-02 21:05:38,418 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,418 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,418 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,418 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,418 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,418 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,418 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,418 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,418 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,418 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,418 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,418 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,419 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,419 - DEBUG - first assign: frac
2025-05-02 21:05:38,419 - DEBUG - replaced with: frac = const(float, 0.0)
2025-05-02 21:05:38,419 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,419 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,419 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,419 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,419 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,419 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,419 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,419 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,419 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,419 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB152C40>
2025-05-02 21:05:38,419 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,419 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,419 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,419 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,419 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB152C40>
2025-05-02 21:05:38,419 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,420 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,420 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:05:38,420 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:05:38,420 - DEBUG - replaced with: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:05:38,420 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,420 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,420 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,420 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,420 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:05:38,420 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,420 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,420 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,420 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,420 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,420 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB152C40>
2025-05-02 21:05:38,420 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,420 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,420 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,420 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,420 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB152C40>
2025-05-02 21:05:38,421 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,421 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,421 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,421 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,421 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,421 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,421 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,421 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,421 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,421 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,421 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:05:38,421 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,421 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:05:38,421 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,421 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,421 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,421 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,421 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB152C40>
2025-05-02 21:05:38,421 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,421 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:05:38,421 - DEBUG - replaced with: frac.2 = $242binary_subtract.3
2025-05-02 21:05:38,421 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,421 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,421 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,421 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,421 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,421 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:05:38,421 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,421 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,421 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,422 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,422 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,422 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,422 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,422 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB152C40>
2025-05-02 21:05:38,422 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,422 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,422 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,422 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB152C40>
2025-05-02 21:05:38,422 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,422 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,422 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,422 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,422 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,422 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,422 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,422 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:05:38,422 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,422 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,422 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:05:38,422 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,423 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,423 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,423 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,423 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB152C40>
2025-05-02 21:05:38,423 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,423 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,423 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB152C40>
2025-05-02 21:05:38,423 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,423 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,423 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,423 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000247FB152C70>],
             84: [<numba.core.ir.Assign object at 0x00000247FB1AF1F0>],
             238: [<numba.core.ir.Assign object at 0x00000247FB1AC4F0>]})
2025-05-02 21:05:38,423 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,423 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC1C0>
2025-05-02 21:05:38,423 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,423 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,423 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,423 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,423 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,423 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,423 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,423 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,423 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,423 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,423 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,423 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,423 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,423 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,423 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,423 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,423 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,423 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,424 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,424 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,424 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,424 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,424 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,424 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC1C0>
2025-05-02 21:05:38,424 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,424 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,424 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,424 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC1C0>
2025-05-02 21:05:38,424 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,424 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,424 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,424 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:05:38,424 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:05:38,424 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,424 - DEBUG - find_def var='frac' stmt=index_frac = frac * num_table
2025-05-02 21:05:38,425 - DEBUG - replaced with: index_frac = frac.1 * num_table
2025-05-02 21:05:38,425 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,425 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,425 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,425 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,425 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,425 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:05:38,425 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,425 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,425 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,425 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,425 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,425 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,425 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,425 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,425 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,425 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC1C0>
2025-05-02 21:05:38,425 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,425 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,425 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,425 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,425 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,425 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,425 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC1C0>
2025-05-02 21:05:38,425 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,425 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,425 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,425 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,426 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,426 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,426 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,426 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,426 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,426 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,426 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:05:38,426 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,426 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:05:38,426 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,426 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,426 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,426 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,426 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC1C0>
2025-05-02 21:05:38,426 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,426 - DEBUG - find_def var='frac' stmt=$242binary_subtract.3 = scale - frac
2025-05-02 21:05:38,426 - DEBUG - find_def_from_top label 238
2025-05-02 21:05:38,426 - DEBUG - idom 168 from label 238
2025-05-02 21:05:38,426 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:05:38,426 - DEBUG - find_def_from_top label 168
2025-05-02 21:05:38,426 - DEBUG - idom 84 from label 168
2025-05-02 21:05:38,426 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:05:38,426 - DEBUG - replaced with: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:05:38,426 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:05:38,426 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:05:38,426 - DEBUG - find_def var='frac' stmt=index_frac = frac * num_table
2025-05-02 21:05:38,426 - DEBUG - replaced with: index_frac = frac.2 * num_table
2025-05-02 21:05:38,426 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,426 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,426 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,427 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:05:38,427 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,427 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,427 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,427 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,427 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,427 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,427 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC1C0>
2025-05-02 21:05:38,427 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,427 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,427 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,427 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC1C0>
2025-05-02 21:05:38,427 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,427 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,427 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,427 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,427 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,427 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,427 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,428 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,428 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,428 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:05:38,428 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,428 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,428 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,428 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:05:38,428 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,428 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,428 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,428 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,428 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC1C0>
2025-05-02 21:05:38,428 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,428 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,428 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC1C0>
2025-05-02 21:05:38,428 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,428 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,428 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,428 - DEBUG - Fix SSA violator on var index_frac
2025-05-02 21:05:38,428 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,428 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF760>
2025-05-02 21:05:38,428 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,428 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,428 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,428 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,428 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,428 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,429 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,429 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,429 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,429 - DEBUG - first assign: index_frac
2025-05-02 21:05:38,429 - DEBUG - replaced with: index_frac = const(float, 0.0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,429 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,429 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,429 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF760>
2025-05-02 21:05:38,429 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,429 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,430 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,430 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,430 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,430 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,430 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF760>
2025-05-02 21:05:38,430 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,430 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,430 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,430 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,430 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:05:38,430 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:05:38,430 - DEBUG - on stmt: index_frac = frac.1 * num_table
2025-05-02 21:05:38,430 - DEBUG - replaced with: index_frac.1 = frac.1 * num_table
2025-05-02 21:05:38,430 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,430 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,430 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,430 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,430 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,430 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:05:38,430 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,430 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,430 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,430 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,430 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,430 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,430 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,430 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,430 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,430 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF760>
2025-05-02 21:05:38,431 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,431 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,431 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,431 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,431 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,431 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,431 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF760>
2025-05-02 21:05:38,431 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,431 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,431 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,431 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,431 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,431 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,431 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,431 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,431 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,431 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,431 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:05:38,431 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,431 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:05:38,431 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,431 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,431 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,431 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,431 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF760>
2025-05-02 21:05:38,431 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:05:38,431 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:05:38,431 - DEBUG - on stmt: index_frac = frac.2 * num_table
2025-05-02 21:05:38,432 - DEBUG - replaced with: index_frac.2 = frac.2 * num_table
2025-05-02 21:05:38,432 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,432 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,432 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,432 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:05:38,432 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,432 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,432 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,432 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,432 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,432 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,432 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF760>
2025-05-02 21:05:38,432 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,432 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,432 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,432 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF760>
2025-05-02 21:05:38,432 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,432 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,432 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,432 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,432 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,432 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,432 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,433 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,433 - DEBUG - on stmt: $350binary_subscr.24 = getitem(valukuielabndex=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,433 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:05:38,433 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,433 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,433 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,433 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:05:38,433 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,433 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,433 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,433 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,433 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF760>
2025-05-02 21:05:38,433 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,433 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,433 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000247FB1AF760>
2025-05-02 21:05:38,433 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,433 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,433 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:38,433 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000247FB1526D0>],
             84: [<numba.core.ir.Assign object at 0x00000247FB1AC910>],
             238: [<numba.core.ir.Assign object at 0x00000247FB1A3C40>]})
2025-05-02 21:05:38,433 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:05:38,433 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC490>
2025-05-02 21:05:38,433 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:05:38,433 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:05:38,433 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:05:38,433 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:05:38,433 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:05:38,433 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:05:38,433 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:05:38,434 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,434 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:05:38,434 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,434 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:05:38,434 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC490>
2025-05-02 21:05:38,434 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:05:38,434 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:05:38,434 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:05:38,435 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:05:38,435 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC490>
2025-05-02 21:05:38,435 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:05:38,435 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,435 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:05:38,435 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,435 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:05:38,435 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:05:38,435 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 21:05:38,435 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:05:38,435 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,435 - DEBUG - find_def var='index_frac' stmt=offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,435 - DEBUG - replaced with: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,435 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 21:05:38,435 - DEBUG - find_def var='index_frac' stmt=eta.1 = index_frac - offset.1
2025-05-02 21:05:38,435 - DEBUG - replaced with: eta.1 = index_frac.1 - offset.1
2025-05-02 21:05:38,435 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:05:38,435 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:05:38,435 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:05:38,435 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:05:38,435 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:05:38,435 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,435 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:05:38,435 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,435 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:05:38,435 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:05:38,436 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,436 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:05:38,436 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC490>
2025-05-02 21:05:38,436 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:05:38,436 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:05:38,436 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:05:38,436 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:05:38,436 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:05:38,436 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:05:38,436 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC490>
2025-05-02 21:05:38,436 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:05:38,436 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:05:38,436 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:05:38,436 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,436 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:05:38,436 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:05:38,436 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,436 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:05:38,436 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:05:38,436 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,436 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:05:38,436 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:05:38,436 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:05:38,436 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,436 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:05:38,436 - DEBUG - on stmt: jump 168
2025-05-02 21:05:38,436 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:05:38,436 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC490>
2025-05-02 21:05:38,436 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:05:38,436 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:05:38,436 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 21:05:38,437 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:05:38,437 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,437 - DEBUG - find_def var='index_frac' stmt=offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,437 - DEBUG - replaced with: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,437 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 21:05:38,437 - DEBUG - find_def var='index_frac' stmt=eta.2 = index_frac - offset.2
2025-05-02 21:05:38,437 - DEBUG - replaced with: eta.2 = index_frac.2 - offset.2
2025-05-02 21:05:38,437 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:05:38,437 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:05:38,437 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:05:38,437 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:05:38,437 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:05:38,437 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:05:38,437 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,437 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:05:38,437 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:05:38,437 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:05:38,437 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:05:38,437 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,437 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:05:38,437 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC490>
2025-05-02 21:05:38,437 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:05:38,437 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:05:38,437 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:05:38,437 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:05:38,437 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:05:38,437 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:05:38,438 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC490>
2025-05-02 21:05:38,438 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:05:38,438 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:05:38,438 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:05:38,438 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:05:38,438 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:05:38,438 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:05:38,438 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:05:38,438 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:05:38,438 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:05:38,438 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:05:38,438 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:05:38,438 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:05:38,438 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:05:38,438 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:05:38,438 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:05:38,438 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:05:38,438 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:05:38,438 - DEBUG - on stmt: jump 304
2025-05-02 21:05:38,438 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:05:38,438 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC490>
2025-05-02 21:05:38,438 - DEBUG - on stmt: jump 80
2025-05-02 21:05:38,438 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:05:38,438 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000247FB1AC490>
2025-05-02 21:05:38,438 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:05:38,438 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:05:38,438 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:05:52,908 - DEBUG - Audio loaded: shape=(2, 7385280), sample_rate=44100
2025-05-02 21:05:52,908 - DEBUG - Demixing audio: samples=7385280, margin=44100, chunk_size=1323000
2025-05-02 21:05:52,924 - DEBUG - Created 6 chunks for demixing

  0%|          | 0/6 [00:00<?, ?it/s]
Processing:   0%|          | 0/6 [00:00<?, ?it/s]2025-05-02 21:05:52,942 - DEBUG - Processing chunk: 6 waves

Processing:  17%|#6        | 1/6 [00:14<01:12, 14.50s/it]2025-05-02 21:06:07,461 - DEBUG - Processing chunk: 6 waves

Processing:  33%|###3      | 2/6 [00:27<00:54, 13.73s/it]2025-05-02 21:06:20,652 - DEBUG - Processing chunk: 6 waves

Processing:  50%|#####     | 3/6 [00:40<00:40, 13.45s/it]2025-05-02 21:06:33,750 - DEBUG - Processing chunk: 6 waves

Processing:  67%|######6   | 4/6 [00:54<00:26, 13.38s/it]2025-05-02 21:06:47,025 - DEBUG - Processing chunk: 6 waves

Processing:  83%|########3 | 5/6 [01:06<00:13, 13.14s/it]2025-05-02 21:06:59,733 - DEBUG - Processing chunk: 4 waves

Processing: 100%|##########| 6/6 [01:16<00:00, 11.80s/it]
Processing: 100%|##########| 6/6 [01:16<00:00, 12.67s/it]
2025-05-02 21:07:08,962 - DEBUG - Demixing complete
2025-05-02 21:07:09,339 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song10_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song10_no_vocals.wav
\song10_other.wav
2025-05-02 21:07:10 - INFO - Saved successful values to models.ini for model: kuelab_b_other
2025-05-02 21:52:16 - INFO - Starting separation for model: UVR_MDXNET_Inst_Main, Quality: Balanced, Input: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song2.flac, Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems, SegmentSize: 250, Overlap: 76800, Denoise: True, NFFT: 6144, DimF: 2048, DimT: 8
2025-05-02 21:52:16 - DEBUG - Original command: cmd /c "cd @EnvPath@ && activate.bat && cd @ScriptDir@ && python @PythonScript@ "@SongPath@" -m "@Path@" -o "@OutputDir@" --chunks @SegmentSize@ --margin @Overlap@ --n_fft @NFFT@ --dim_f @DimF@ --dim_t @DimT@ && deactivate"
2025-05-02 21:52:16 - INFO - Resolved command: cmd /c "cd C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\UVR\uvr_env\Scripts && activate.bat && cd C:\Git\3DAudioStudio\scripts\autoit\1.3 && python separate.py "C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song2.flac" -m "C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\UVR-MDX-NET-Inst_Main.onnx" -o "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems" --chunks 250 --margin 76800 --n_fft 6144 --dim_f 2048 --dim_t 8 && deactivate"
2025-05-02 22:01:02 - INFO - Separation output: 2025-05-02 21:52:18,417 - DEBUG - Logging initialized
2025-05-02 21:52:18,417 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song2.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR-MDX-NET-Inst_Main.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 76800, 'chunks': 250, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 21:52:18,417 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 21:52:18,417 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song2.flac
2025-05-02 21:52:18,417 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 21:52:18,417 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song2.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR-MDX-NET-Inst_Main.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 76800, 'chunks': 250, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 21:52:18,417 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\UVR-MDX-NET-Inst_Main.onnx
2025-05-02 21:52:18,560 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song2.flac
2025-05-02 21:52:19,018 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=86)
           2	LOAD_GLOBAL(arg=0, lineno=86)
           4	LOAD_FAST(arg=0, lineno=86)
           6	LOAD_FAST(arg=1, lineno=86)
           8	LOAD_FAST(arg=2, lineno=86)
          10	LOAD_FAST(arg=3, lineno=86)
          12	LOAD_FAST(arg=4, lineno=86)
          14	LOAD_FAST(arg=5, lineno=86)
          16	LOAD_FAST(arg=6, lineno=86)
          18	CALL_FUNCTION(arg=7, lineno=86)
          20	POP_TOP(arg=None, lineno=86)
          22	LOAD_CONST(arg=0, lineno=86)
          24	RETURN_VALUE(arg=None, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-02 21:52:19,018 - DEBUG - stack: []
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack []
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack []
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=4, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=5, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=6, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=18, inst=CALL_FUNCTION(arg=7, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6', '$y16.7']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=20, inst=POP_TOP(arg=None, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$18call_function.8']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=0, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack []
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$const22.9']
2025-05-02 21:52:19,018 - DEBUG - end state. edges=[]
2025-05-02 21:52:19,018 - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-02 21:52:19,018 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-02 21:52:19,018 - DEBUG - defmap: {}
2025-05-02 21:52:19,018 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-02 21:52:19,018 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-02 21:52:19,018 - DEBUG - keep phismap: {}
2025-05-02 21:52:19,018 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-02 21:52:19,018 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-02 21:52:19,018 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'res': '$t_out6.2'}), (8, {'res': '$interp_win8.3'}), (10, {'res': '$interp_delta10.4'}), (12, {'res': '$num_table12.5'}), (14, {'res': '$scale14.6'}), (16, {'res': '$y16.7'}), (18, {'func': '$2load_global.0', 'args': ['$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6', '$y16.7'], 'res': '$18call_function.8'}), (22, {'res': '$const22.9'}), (24, {'retval': '$const22.9', 'castval': '$24return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-02 21:52:19,081 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    t_out = arg(1, name=t_out)               ['t_out']
    interp_win = arg(2, name=interp_win)     ['interp_win']
    interp_delta = arg(3, name=interp_delta) ['interp_delta']
    num_table = arg(4, name=num_table)       ['num_table']
    scale = arg(5, name=scale)               ['scale']
    y = arg(6, name=y)                       ['y']
    $2load_global.0 = global(_resample_loop_s: CPUDispatcher(<function _resample_loop at 0x000002D3494E8CA0>)) ['$2load_global.0']
    $18call_function.8 = call $2load_global.0(x, t_out, interp_win, interp_delta, num_table, scale, y, func=$2load_global.0, args=[Var(x, interpn.py:86), Var(t_out, interpn.py:86), Var(interp_win, interpn.py:86), Var(interp_delta, interpn.py:86), Var(num_table, interpn.py:86), Var(scale, interpn.py:86), Var(y, interpn.py:86)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call_function.8', '$2load_global.0', 'interp_delta', 'interp_win', 'num_table', 'scale', 't_out', 'x', 'y']
    $const22.9 = const(NoneType, None)       ['$const22.9']
    $24return_value.10 = cast(value=$const22.9) ['$24return_value.10', '$const22.9']
    return $24return_value.10                ['$24return_value.10']

2025-05-02 21:52:19,081 - DEBUG - ==== SSA block analysis pass on 0
2025-05-02 21:52:19,081 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E778A00>
2025-05-02 21:52:19,081 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,081 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,081 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,081 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,081 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,081 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,081 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,081 - DEBUG - on stmt: $2load_global.0 = global(_resample_loop_s: CPUDispatcher(<function _resample_loop at 0x000002D3494E8CA0>))
2025-05-02 21:52:19,081 - DEBUG - on stmt: $18call_function.8 = call $2load_global.0(x, t_out, interp_win, interp_delta, num_table, scale, y, func=$2load_global.0, args=[Var(x, interpn.py:86), Var(t_out, interpn.py:86), Var(interp_win, interpn.py:86), Var(interp_delta, interpn.py:86), Var(num_table, interpn.py:86), Var(scale, interpn.py:86), Var(y, interpn.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,081 - DEBUG - on stmt: $const22.9 = const(NoneType, None)
2025-05-02 21:52:19,081 - DEBUG - on stmt: $24return_value.10 = cast(value=$const22.9)
2025-05-02 21:52:19,081 - DEBUG - on stmt: return $24return_value.10
2025-05-02 21:52:19,081 - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call_function.8': [<numba.core.ir.Assign object at 0x000002D34E791D90>],
             '$24return_value.10': [<numba.core.ir.Assign object at 0x000002D34E7788B0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000002D34E7913D0>],
             '$const22.9': [<numba.core.ir.Assign object at 0x000002D34E778130>],
             'interp_delta': [<numba.core.ir.Assign object at 0x000002D34E778EB0>],
             'interp_win': [<numba.core.ir.Assign object at 0x000002D34E778D90>],
             'num_table': [<numba.core.ir.Assign object at 0x000002D34E778FD0>],
             'scale': [<numba.core.ir.Assign object at 0x000002D34E791130>],
             't_out': [<numba.core.ir.Assign object at 0x000002D34E778C70>],
             'x': [<numba.core.ir.Assign object at 0x000002D34E7781F0>],
             'y': [<numba.core.ir.Assign object at 0x000002D34E791250>]})
2025-05-02 21:52:19,081 - DEBUG - SSA violators set()
2025-05-02 21:52:19,097 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=9)
           2	LOAD_GLOBAL(arg=0, lineno=9)
           4	LOAD_FAST(arg=5, lineno=9)
           6	LOAD_FAST(arg=4, lineno=9)
           8	BINARY_MULTIPLY(arg=None, lineno=9)
          10	CALL_FUNCTION(arg=1, lineno=9)
          12	STORE_FAST(arg=7, lineno=9)
          14	LOAD_CONST(arg=1, lineno=10)
          16	STORE_FAST(arg=8, lineno=10)
          18	LOAD_CONST(arg=2, lineno=12)
          20	STORE_FAST(arg=9, lineno=12)
          22	LOAD_CONST(arg=1, lineno=13)
          24	STORE_FAST(arg=10, lineno=13)
          26	LOAD_CONST(arg=1, lineno=14)
          28	STORE_FAST(arg=11, lineno=14)
          30	LOAD_CONST(arg=2, lineno=15)
          32	STORE_FAST(arg=12, lineno=15)
          34	LOAD_CONST(arg=1, lineno=16)
          36	STORE_FAST(arg=13, lineno=16)
          38	LOAD_CONST(arg=1, lineno=17)
          40	STORE_FAST(arg=14, lineno=17)
          42	LOAD_FAST(arg=2, lineno=19)
          44	LOAD_ATTR(arg=1, lineno=19)
          46	LOAD_CONST(arg=2, lineno=19)
          48	BINARY_SUBSCR(arg=None, lineno=19)
          50	STORE_FAST(arg=15, lineno=19)
          52	LOAD_FAST(arg=0, lineno=20)
          54	LOAD_ATTR(arg=1, lineno=20)
          56	LOAD_CONST(arg=2, lineno=20)
          58	BINARY_SUBSCR(arg=None, lineno=20)
          60	STORE_FAST(arg=16, lineno=20)
          62	LOAD_FAST(arg=1, lineno=21)
          64	LOAD_ATTR(arg=1, lineno=21)
          66	LOAD_CONST(arg=2, lineno=21)
          68	BINARY_SUBSCR(arg=None, lineno=21)
          70	STORE_FAST(arg=17, lineno=21)
          72	LOAD_GLOBAL(arg=2, lineno=23)
          74	LOAD_FAST(arg=17, lineno=23)
          76	CALL_FUNCTION(arg=1, lineno=23)
          78	GET_ITER(arg=None, lineno=23)
>         80	FOR_ITER(arg=298, lineno=23)
          84	STORE_FAST(arg=18, lineno=23)
          86	LOAD_FAST(arg=1, lineno=24)
          88	LOAD_FAST(arg=18, lineno=24)
          90	BINARY_SUBSCR(arg=None, lineno=24)
          92	STORE_FAST(arg=8, lineno=24)
          94	LOAD_GLOBAL(arg=0, lineno=27)
          96	LOAD_FAST(arg=8, lineno=27)
          98	CALL_FUNCTION(arg=1, lineno=27)
         100	STORE_FAST(arg=9, lineno=27)
         102	LOAD_FAST(arg=5, lineno=30)
         104	LOAD_FAST(arg=8, lineno=30)
         106	LOAD_FAST(arg=9, lineno=30)
         108	BINARY_SUBTRACT(arg=None, lineno=30)
         110	BINARY_MULTIPLY(arg=None, lineno=30)
         112	STORE_FAST(arg=10, lineno=30)
         114	LOAD_FAST(arg=10, lineno=33)
         116	LOAD_FAST(arg=4, lineno=33)
         118	BINARY_MULTIPLY(arg=None, lineno=33)
         120	STORE_FAST(arg=11, lineno=33)
         122	LOAD_GLOBAL(arg=0, lineno=34)
         124	LOAD_FAST(arg=11, lineno=34)
         126	CALL_FUNCTION(arg=1, lineno=34)
         128	STORE_FAST(arg=12, lineno=34)
         130	LOAD_FAST(arg=11, lineno=37)
         132	LOAD_FAST(arg=12, lineno=37)
         134	BINARY_SUBTRACT(arg=None, lineno=37)
         136	STORE_FAST(arg=13, lineno=37)
         138	LOAD_GLOBAL(arg=3, lineno=40)
         140	LOAD_FAST(arg=9, lineno=40)
         142	LOAD_CONST(arg=3, lineno=40)
         144	BINARY_ADD(arg=None, lineno=40)
         146	LOAD_FAST(arg=15, lineno=40)
         148	LOAD_FAST(arg=12, lineno=40)
         150	BINARY_SUBTRACT(arg=None, lineno=40)
         152	LOAD_FAST(arg=7, lineno=40)
         154	BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
         156	CALL_FUNCTION(arg=2, lineno=40)
         158	STORE_FAST(arg=19, lineno=40)
         160	LOAD_GLOBAL(arg=4, lineno=41)
         162	LOAD_FAST(arg=19, lineno=41)
         164	CALL_FUNCTION(arg=1, lineno=41)
         166	GET_ITER(arg=None, lineno=41)
>        168	FOR_ITER(arg=68, lineno=41)
         170	STORE_FAST(arg=20, lineno=41)
         172	LOAD_FAST(arg=2, lineno=44)
         174	LOAD_FAST(arg=12, lineno=44)
         176	LOAD_FAST(arg=20, lineno=44)
         178	LOAD_FAST(arg=7, lineno=44)
         180	BINARY_MULTIPLY(arg=None, lineno=44)
         182	BINARY_ADD(arg=None, lineno=44)
         184	BINARY_SUBSCR(arg=None, lineno=44)
         186	LOAD_FAST(arg=13, lineno=45)
         188	LOAD_FAST(arg=3, lineno=45)
         190	LOAD_FAST(arg=12, lineno=45)
         192	LOAD_FAST(arg=20, lineno=45)
         194	LOAD_FAST(arg=7, lineno=45)
         196	BINARY_MULTIPLY(arg=None, lineno=45)
         198	BINARY_ADD(arg=None, lineno=45)
         200	BINARY_SUBSCR(arg=None, lineno=45)
         202	BINARY_MULTIPLY(arg=None, lineno=45)
         204	BINARY_ADD(arg=None, lineno=44)
         206	STORE_FAST(arg=14, lineno=43)
         208	LOAD_FAST(arg=6, lineno=47)
         210	LOAD_FAST(arg=18, lineno=47)
         212	DUP_TOP_TWO(arg=None, lineno=47)
         214	BINARY_SUBSCR(arg=None, lineno=47)
         216	LOAD_FAST(arg=14, lineno=47)
         218	LOAD_FAST(arg=0, lineno=47)
         220	LOAD_FAST(arg=9, lineno=47)
         222	LOAD_FAST(arg=20, lineno=47)
         224	BINARY_SUBTRACT(arg=None, lineno=47)
         226	BINARY_SUBSCR(arg=None, lineno=47)
         228	BINARY_MULTIPLY(arg=None, lineno=47)
         230	INPLACE_ADD(arg=None, lineno=47)
         232	ROT_THREE(arg=None, lineno=47)
         234	STORE_SUBSCR(arg=None, lineno=47)
         236	JUMP_ABSOLUTE(arg=168, lineno=47)
>        238	LOAD_FAST(arg=5, lineno=50)
         240	LOAD_FAST(arg=10, lineno=50)
         242	BINARY_SUBTRACT(arg=None, lineno=50)
         244	STORE_FAST(arg=10, lineno=50)
         246	LOAD_FAST(arg=10, lineno=53)
         248	LOAD_FAST(arg=4, lineno=53)
         250	BINARY_MULTIPLY(arg=None, lineno=53)
         252	STORE_FAST(arg=11, lineno=53)
         254	LOAD_GLOBAL(arg=0, lineno=54)
         256	LOAD_FAST(arg=11, lineno=54)
         258	CALL_FUNCTION(arg=1, lineno=54)
         260	STORE_FAST(arg=12, lineno=54)
         262	LOAD_FAST(arg=11, lineno=57)
         264	LOAD_FAST(arg=12, lineno=57)
         266	BINARY_SUBTRACT(arg=None, lineno=57)
         268	STORE_FAST(arg=13, lineno=57)
         270	LOAD_GLOBAL(arg=3, lineno=60)
         272	LOAD_FAST(arg=16, lineno=60)
         274	LOAD_FAST(arg=9, lineno=60)
         276	BINARY_SUBTRACT(arg=None, lineno=60)
         278	LOAD_CONST(arg=3, lineno=60)
         280	BINARY_SUBTRACT(arg=None, lineno=60)
         282	LOAD_FAST(arg=15, lineno=60)
         284	LOAD_FAST(arg=12, lineno=60)
         286	BINARY_SUBTRACT(arg=None, lineno=60)
         288	LOAD_FAST(arg=7, lineno=60)
         290	BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
         292	CALL_FUNCTION(arg=2, lineno=60)
         294	STORE_FAST(arg=21, lineno=60)
         296	LOAD_GLOBAL(arg=4, lineno=61)
         298	LOAD_FAST(arg=21, lineno=61)
         300	CALL_FUNCTION(arg=1, lineno=61)
         302	GET_ITER(arg=None, lineno=61)
>        304	FOR_ITER(arg=74, lineno=61)
         306	STORE_FAST(arg=22, lineno=61)
         308	LOAD_FAST(arg=2, lineno=63)
         310	LOAD_FAST(arg=12, lineno=63)
         312	LOAD_FAST(arg=22, lineno=63)
         314	LOAD_FAST(arg=7, lineno=63)
         316	BINARY_MULTIPLY(arg=None, lineno=63)
         318	BINARY_ADD(arg=None, lineno=63)
         320	BINARY_SUBSCR(arg=None, lineno=63)
         322	LOAD_FAST(arg=13, lineno=64)
         324	LOAD_FAST(arg=3, lineno=64)
         326	LOAD_FAST(arg=12, lineno=64)
         328	LOAD_FAST(arg=22, lineno=64)
         330	LOAD_FAST(arg=7, lineno=64)
         332	BINARY_MULTIPLY(arg=None, lineno=64)
         334	BINARY_ADD(arg=None, lineno=64)
         336	BINARY_SUBSCR(arg=None, lineno=64)
         338	BINARY_MULTIPLY(arg=None, lineno=64)
         340	BINARY_ADD(arg=None, lineno=63)
         342	STORE_FAST(arg=14, lineno=62)
         344	LOAD_FAST(arg=6, lineno=66)
         346	LOAD_FAST(arg=18, lineno=66)
         348	DUP_TOP_TWO(arg=None, lineno=66)
         350	BINARY_SUBSCR(arg=None, lineno=66)
         352	LOAD_FAST(arg=14, lineno=66)
         354	LOAD_FAST(arg=0, lineno=66)
         356	LOAD_FAST(arg=9, lineno=66)
         358	LOAD_FAST(arg=22, lineno=66)
         360	BINARY_ADD(arg=None, lineno=66)
         362	LOAD_CONST(arg=3, lineno=66)
         364	BINARY_ADD(arg=None, lineno=66)
         366	BINARY_SUBSCR(arg=None, lineno=66)
         368	BINARY_MULTIPLY(arg=None, lineno=66)
         370	INPLACE_ADD(arg=None, lineno=66)
         372	ROT_THREE(arg=None, lineno=66)
         374	STORE_SUBSCR(arg=None, lineno=66)
         376	JUMP_ABSOLUTE(arg=304, lineno=66)
>        380	JUMP_ABSOLUTE(arg=80, lineno=66)
>        382	LOAD_CONST(arg=0, lineno=66)
         384	RETURN_VALUE(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-02 21:52:19,097 - DEBUG - stack: []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=9)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=9)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=5, lineno=9)
2025-05-02 21:52:19,097 - DEBUG - stack ['$2load_global.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=4, lineno=9)
2025-05-02 21:52:19,097 - DEBUG - stack ['$2load_global.0', '$scale4.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=9)
2025-05-02 21:52:19,097 - DEBUG - stack ['$2load_global.0', '$scale4.1', '$num_table6.2']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=9)
2025-05-02 21:52:19,097 - DEBUG - stack ['$2load_global.0', '$8binary_multiply.3']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=12, inst=STORE_FAST(arg=7, lineno=9)
2025-05-02 21:52:19,097 - DEBUG - stack ['$10call_function.4']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=10)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=8, lineno=10)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const14.5']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=12)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=20, inst=STORE_FAST(arg=9, lineno=12)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const18.6']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=13)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=24, inst=STORE_FAST(arg=10, lineno=13)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const22.7']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=26, inst=LOAD_CONST(arg=1, lineno=14)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=28, inst=STORE_FAST(arg=11, lineno=14)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const26.8']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=15)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=32, inst=STORE_FAST(arg=12, lineno=15)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const30.9']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=16)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=36, inst=STORE_FAST(arg=13, lineno=16)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const34.10']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=17)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=40, inst=STORE_FAST(arg=14, lineno=17)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const38.11']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=42, inst=LOAD_FAST(arg=2, lineno=19)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=44, inst=LOAD_ATTR(arg=1, lineno=19)
2025-05-02 21:52:19,097 - DEBUG - stack ['$interp_win42.12']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=46, inst=LOAD_CONST(arg=2, lineno=19)
2025-05-02 21:52:19,097 - DEBUG - stack ['$44load_attr.13']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=19)
2025-05-02 21:52:19,097 - DEBUG - stack ['$44load_attr.13', '$const46.14']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=50, inst=STORE_FAST(arg=15, lineno=19)
2025-05-02 21:52:19,097 - DEBUG - stack ['$48binary_subscr.15']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=20)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=54, inst=LOAD_ATTR(arg=1, lineno=20)
2025-05-02 21:52:19,097 - DEBUG - stack ['$x52.16']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=56, inst=LOAD_CONST(arg=2, lineno=20)
2025-05-02 21:52:19,097 - DEBUG - stack ['$54load_attr.17']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=20)
2025-05-02 21:52:19,097 - DEBUG - stack ['$54load_attr.17', '$const56.18']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=60, inst=STORE_FAST(arg=16, lineno=20)
2025-05-02 21:52:19,097 - DEBUG - stack ['$58binary_subscr.19']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=21)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=64, inst=LOAD_ATTR(arg=1, lineno=21)
2025-05-02 21:52:19,097 - DEBUG - stack ['$t_out62.20']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=21)
2025-05-02 21:52:19,097 - DEBUG - stack ['$64load_attr.21']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=21)
2025-05-02 21:52:19,097 - DEBUG - stack ['$64load_attr.21', '$const66.22']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=70, inst=STORE_FAST(arg=17, lineno=21)
2025-05-02 21:52:19,097 - DEBUG - stack ['$68binary_subscr.23']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=72, inst=LOAD_GLOBAL(arg=2, lineno=23)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=17, lineno=23)
2025-05-02 21:52:19,097 - DEBUG - stack ['$72load_global.24']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=23)
2025-05-02 21:52:19,097 - DEBUG - stack ['$72load_global.24', '$n_out74.25']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=23)
2025-05-02 21:52:19,097 - DEBUG - stack ['$76call_function.26']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.27',), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi80.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=298, lineno=23)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi80.0']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=382, stack=(), blockstack=(), npush=0), Edge(pc=84, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=382 nstack_initial=0), State(pc_initial=84 nstack_initial=2)])
2025-05-02 21:52:19,097 - DEBUG - stack: []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=382, inst=LOAD_CONST(arg=0, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=384, inst=RETURN_VALUE(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const382.0']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=84 nstack_initial=2)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi84.0', '$phi84.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=84, inst=STORE_FAST(arg=18, lineno=23)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$phi84.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=24)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=88, inst=LOAD_FAST(arg=18, lineno=24)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$t_out86.2']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=24)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$t_out86.2', '$t88.3']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=92, inst=STORE_FAST(arg=8, lineno=24)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$90binary_subscr.4']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=94, inst=LOAD_GLOBAL(arg=0, lineno=27)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=96, inst=LOAD_FAST(arg=8, lineno=27)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$94load_global.5']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=98, inst=CALL_FUNCTION(arg=1, lineno=27)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$94load_global.5', '$time_register96.6']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=100, inst=STORE_FAST(arg=9, lineno=27)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$98call_function.7']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=102, inst=LOAD_FAST(arg=5, lineno=30)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=104, inst=LOAD_FAST(arg=8, lineno=30)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$scale102.8']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=9, lineno=30)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$scale102.8', '$time_register104.9']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=30)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$scale102.8', '$time_register104.9', '$n106.10']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=110, inst=BINARY_MULTIPLY(arg=None, lineno=30)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$scale102.8', '$108binary_subtract.11']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=112, inst=STORE_FAST(arg=10, lineno=30)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$110binary_multiply.12']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=10, lineno=33)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=4, lineno=33)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$frac114.13']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=118, inst=BINARY_MULTIPLY(arg=None, lineno=33)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$frac114.13', '$num_table116.14']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=120, inst=STORE_FAST(arg=11, lineno=33)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$118binary_multiply.15']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=122, inst=LOAD_GLOBAL(arg=0, lineno=34)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=124, inst=LOAD_FAST(arg=11, lineno=34)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$122load_global.16']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=126, inst=CALL_FUNCTION(arg=1, lineno=34)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$122load_global.16', '$index_frac124.17']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=128, inst=STORE_FAST(arg=12, lineno=34)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$126call_function.18']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=130, inst=LOAD_FAST(arg=11, lineno=37)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=12, lineno=37)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$index_frac130.19']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=134, inst=BINARY_SUBTRACT(arg=None, lineno=37)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$index_frac130.19', '$offset132.20']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=136, inst=STORE_FAST(arg=13, lineno=37)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$134binary_subtract.21']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=138, inst=LOAD_GLOBAL(arg=3, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=140, inst=LOAD_FAST(arg=9, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=142, inst=LOAD_CONST(arg=3, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$n140.23']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=144, inst=BINARY_ADD(arg=None, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$n140.23', '$const142.24']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=146, inst=LOAD_FAST(arg=15, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=148, inst=LOAD_FAST(arg=12, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$nwin146.26']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=150, inst=BINARY_SUBTRACT(arg=None, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$nwin146.26', '$offset148.27']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=7, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$150binary_subtract.28']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=154, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$150binary_subtract.28', '$index_step152.29']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=156, inst=CALL_FUNCTION(arg=2, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$154binary_floor_divide.30']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=158, inst=STORE_FAST(arg=19, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$156call_function.31']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=160, inst=LOAD_GLOBAL(arg=4, lineno=41)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=162, inst=LOAD_FAST(arg=19, lineno=41)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$160load_global.32']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=41)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$160load_global.32', '$i_max162.33']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=166, inst=GET_ITER(arg=None, lineno=41)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$164call_function.34']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=168, stack=('$phi84.0', '$166get_iter.35'), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=2)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi168.0', '$phi168.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=168, inst=FOR_ITER(arg=68, lineno=41)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi168.0', '$phi168.1']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=238, stack=('$phi168.0',), blockstack=(), npush=0), Edge(pc=170, stack=('$phi168.0', '$phi168.1', '$168for_iter.3'), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=238 nstack_initial=1), State(pc_initial=170 nstack_initial=3)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi238.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=238, inst=LOAD_FAST(arg=5, lineno=50)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=10, lineno=50)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$scale238.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=242, inst=BINARY_SUBTRACT(arg=None, lineno=50)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$scale238.1', '$frac240.2']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=244, inst=STORE_FAST(arg=10, lineno=50)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$242binary_subtract.3']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=10, lineno=53)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=248, inst=LOAD_FAST(arg=4, lineno=53)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$frac246.4']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=250, inst=BINARY_MULTIPLY(arg=None, lineno=53)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$frac246.4', '$num_table248.5']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=252, inst=STORE_FAST(arg=11, lineno=53)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$250binary_multiply.6']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=254, inst=LOAD_GLOBAL(arg=0, lineno=54)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=11, lineno=54)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$254load_global.7']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=258, inst=CALL_FUNCTION(arg=1, lineno=54)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$254load_global.7', '$index_frac256.8']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=260, inst=STORE_FAST(arg=12, lineno=54)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$258call_function.9']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=262, inst=LOAD_FAST(arg=11, lineno=57)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=264, inst=LOAD_FAST(arg=12, lineno=57)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$index_frac262.10']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=266, inst=BINARY_SUBTRACT(arg=None, lineno=57)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$index_frac262.10', '$offset264.11']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=268, inst=STORE_FAST(arg=13, lineno=57)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$266binary_subtract.12']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=270, inst=LOAD_GLOBAL(arg=3, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=272, inst=LOAD_FAST(arg=16, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=274, inst=LOAD_FAST(arg=9, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$n_orig272.14']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=276, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$n_orig272.14', '$n274.15']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=278, inst=LOAD_CONST(arg=3, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$276binary_subtract.16']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=280, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$276binary_subtract.16', '$const278.17']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=282, inst=LOAD_FAST(arg=15, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=284, inst=LOAD_FAST(arg=12, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$nwin282.19']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=286, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$nwin282.19', '$offset284.20']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=288, inst=LOAD_FAST(arg=7, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$286binary_subtract.21']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=290, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$286binary_subtract.21', '$index_step288.22']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=292, inst=CALL_FUNCTION(arg=2, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$290binary_floor_divide.23']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=294, inst=STORE_FAST(arg=21, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$292call_function.24']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=296, inst=LOAD_GLOBAL(arg=4, lineno=61)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=298, inst=LOAD_FAST(arg=21, lineno=61)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$296load_global.25']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=300, inst=CALL_FUNCTION(arg=1, lineno=61)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$296load_global.25', '$k_max298.26']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=302, inst=GET_ITER(arg=None, lineno=61)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$300call_function.27']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=304, stack=('$phi238.0', '$302get_iter.28'), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=170 nstack_initial=3), State(pc_initial=304 nstack_initial=2)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi170.0', '$phi170.1', '$phi170.2']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=170, inst=STORE_FAST(arg=20, lineno=41)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$phi170.2']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=172, inst=LOAD_FAST(arg=2, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=12, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=176, inst=LOAD_FAST(arg=20, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=178, inst=LOAD_FAST(arg=7, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$i176.5']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$i176.5', '$index_step178.6']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$180binary_multiply.7']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$182binary_add.8']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=186, inst=LOAD_FAST(arg=13, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=188, inst=LOAD_FAST(arg=3, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=12, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=192, inst=LOAD_FAST(arg=20, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$i192.13']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=196, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$i192.13', '$index_step194.14']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=198, inst=BINARY_ADD(arg=None, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$196binary_multiply.15']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=200, inst=BINARY_SUBSCR(arg=None, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$198binary_add.16']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=202, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$200binary_subscr.17']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=204, inst=BINARY_ADD(arg=None, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$202binary_multiply.18']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=206, inst=STORE_FAST(arg=14, lineno=43)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$204binary_add.19']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=208, inst=LOAD_FAST(arg=6, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=210, inst=LOAD_FAST(arg=18, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=212, inst=DUP_TOP_TWO(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=214, inst=BINARY_SUBSCR(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$212dup_top_two.22', '$212dup_top_two.23']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=216, inst=LOAD_FAST(arg=14, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=220, inst=LOAD_FAST(arg=9, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=222, inst=LOAD_FAST(arg=20, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$n220.27']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=224, inst=BINARY_SUBTRACT(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$n220.27', '$i222.28']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=226, inst=BINARY_SUBSCR(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$224binary_subtract.29']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=228, inst=BINARY_MULTIPLY(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$226binary_subscr.30']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=230, inst=INPLACE_ADD(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$228binary_multiply.31']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=232, inst=ROT_THREE(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$230inplace_add.32']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=234, inst=STORE_SUBSCR(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$230inplace_add.32', '$y208.20', '$t210.21']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=236, inst=JUMP_ABSOLUTE(arg=168, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=168, stack=('$phi170.0', '$phi170.1'), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=304 nstack_initial=2), State(pc_initial=168 nstack_initial=2)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi304.0', '$phi304.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=304, inst=FOR_ITER(arg=74, lineno=61)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi304.0', '$phi304.1']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=380, stack=('$phi304.0',), blockstack=(), npush=0), Edge(pc=306, stack=('$phi304.0', '$phi304.1', '$304for_iter.3'), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=2), State(pc_initial=380 nstack_initial=1), State(pc_initial=306 nstack_initial=3)])
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=380 nstack_initial=1), State(pc_initial=306 nstack_initial=3)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi380.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=380, inst=JUMP_ABSOLUTE(arg=80, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi380.0']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi380.0',), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=306 nstack_initial=3), State(pc_initial=80 nstack_initial=1)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi306.0', '$phi306.1', '$phi306.2']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=306, inst=STORE_FAST(arg=22, lineno=61)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$phi306.2']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=308, inst=LOAD_FAST(arg=2, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=310, inst=LOAD_FAST(arg=12, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=312, inst=LOAD_FAST(arg=22, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=314, inst=LOAD_FAST(arg=7, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$k312.5']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=316, inst=BINARY_MULTIPLY(arg=None, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$k312.5', '$index_step314.6']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=318, inst=BINARY_ADD(arg=None, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$316binary_multiply.7']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=320, inst=BINARY_SUBSCR(arg=None, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$318binary_add.8']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=322, inst=LOAD_FAST(arg=13, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=324, inst=LOAD_FAST(arg=3, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=326, inst=LOAD_FAST(arg=12, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=328, inst=LOAD_FAST(arg=22, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=330, inst=LOAD_FAST(arg=7, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$k328.13']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=332, inst=BINARY_MULTIPLY(arg=None, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$k328.13', '$index_step330.14']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=334, inst=BINARY_ADD(arg=None, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$332binary_multiply.15']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=336, inst=BINARY_SUBSCR(arg=None, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$334binary_add.16']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=338, inst=BINARY_MULTIPLY(arg=None, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$336binary_subscr.17']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=340, inst=BINARY_ADD(arg=None, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$338binary_multiply.18']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=342, inst=STORE_FAST(arg=14, lineno=62)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$340binary_add.19']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=344, inst=LOAD_FAST(arg=6, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=346, inst=LOAD_FAST(arg=18, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=348, inst=DUP_TOP_TWO(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=350, inst=BINARY_SUBSCR(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$348dup_top_two.22', '$348dup_top_two.23']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=352, inst=LOAD_FAST(arg=14, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=354, inst=LOAD_FAST(arg=0, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=356, inst=LOAD_FAST(arg=9, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=358, inst=LOAD_FAST(arg=22, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$n356.27']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=360, inst=BINARY_ADD(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$n356.27', '$k358.28']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=362, inst=LOAD_CONST(arg=3, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$360binary_add.29']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=364, inst=BINARY_ADD(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$360binary_add.29', '$const362.30']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=366, inst=BINARY_SUBSCR(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$364binary_add.31']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=368, inst=BINARY_MULTIPLY(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$366binary_subscr.32']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=370, inst=INPLACE_ADD(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$368binary_multiply.33']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=372, inst=ROT_THREE(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$370inplace_add.34']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=374, inst=STORE_SUBSCR(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$370inplace_add.34', '$y344.20', '$t346.21']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=376, inst=JUMP_ABSOLUTE(arg=304, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=304, stack=('$phi306.0', '$phi306.1'), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=304 nstack_initial=2)])
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=304 nstack_initial=2)])
2025-05-02 21:52:19,097 - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-02 21:52:19,097 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=84 nstack_initial=2): {'$phi84.1'},
             State(pc_initial=168 nstack_initial=2): {'$phi168.1'},
             State(pc_initial=170 nstack_initial=3): {'$phi170.2'},
             State(pc_initial=238 nstack_initial=1): set(),
             State(pc_initial=304 nstack_initial=2): {'$phi304.1'},
             State(pc_initial=306 nstack_initial=3): {'$phi306.2'},
             State(pc_initial=380 nstack_initial=1): set(),
             State(pc_initial=382 nstack_initial=0): set()})
2025-05-02 21:52:19,113 - DEBUG - defmap: {'$phi168.1': State(pc_initial=84 nstack_initial=2),
 '$phi170.2': State(pc_initial=168 nstack_initial=2),
 '$phi304.1': State(pc_initial=238 nstack_initial=1),
 '$phi306.2': State(pc_initial=304 nstack_initial=2),
 '$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi84.1': State(pc_initial=80 nstack_initial=1)}
2025-05-02 21:52:19,113 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi170.0',
                            State(pc_initial=170 nstack_initial=3)),
                           ('$phi84.0', State(pc_initial=84 nstack_initial=2))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2)),
                           ('$phi170.1',
                            State(pc_initial=170 nstack_initial=3))},
             '$phi170.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.1': {('$phi168.1',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi304.0': {('$phi238.0',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi306.0',
                            State(pc_initial=306 nstack_initial=3))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi306.1',
                            State(pc_initial=306 nstack_initial=3))},
             '$phi306.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.1': {('$phi304.1',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi380.0',
                           State(pc_initial=380 nstack_initial=1))},
             '$phi84.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:52:19,113 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2)),
                           ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2)),
                           ('$phi168.1',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi304.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2)),
                           ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi304.1',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:52:19,113 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:52:19,113 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:52:19,113 - DEBUG - keep phismap: {'$phi168.1': {('$166get_iter.35', State(pc_initial=84 nstack_initial=2))},
 '$phi170.2': {('$168for_iter.3', State(pc_initial=168 nstack_initial=2))},
 '$phi304.1': {('$302get_iter.28', State(pc_initial=238 nstack_initial=1))},
 '$phi306.2': {('$304for_iter.3', State(pc_initial=304 nstack_initial=2))},
 '$phi80.0': {('$78get_iter.27', State(pc_initial=0 nstack_initial=0))},
 '$phi84.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-05-02 21:52:19,113 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.27'},
             State(pc_initial=80 nstack_initial=1): {'$phi84.1': '$80for_iter.2'},
             State(pc_initial=84 nstack_initial=2): {'$phi168.1': '$166get_iter.35'},
             State(pc_initial=168 nstack_initial=2): {'$phi170.2': '$168for_iter.3'},
             State(pc_initial=238 nstack_initial=1): {'$phi304.1': '$302get_iter.28'},
             State(pc_initial=304 nstack_initial=2): {'$phi306.2': '$304for_iter.3'}})
2025-05-02 21:52:19,113 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-02 21:52:19,113 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$scale4.1'}), (6, {'res': '$num_table6.2'}), (8, {'lhs': '$scale4.1', 'rhs': '$num_table6.2', 'res': '$8binary_multiply.3'}), (10, {'func': '$2load_global.0', 'args': ['$8binary_multiply.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4'}), (14, {'res': '$const14.5'}), (16, {'value': '$const14.5'}), (18, {'res': '$const18.6'}), (20, {'value': '$const18.6'}), (22, {'res': '$const22.7'}), (24, {'value': '$const22.7'}), (26, {'res': '$const26.8'}), (28, {'value': '$const26.8'}), (30, {'res': '$const30.9'}), (32, {'value': '$const30.9'}), (34, {'res': '$const34.10'}), (36, {'value': '$const34.10'}), (38, {'res': '$const38.11'}), (40, {'value': '$const38.11'}), (42, {'res': '$interp_win42.12'}), (44, {'item': '$interp_win42.12', 'res': '$44load_attr.13'}), (46, {'res': '$const46.14'}), (48, {'index': '$const46.14', 'target': '$44load_attr.13', 'res': '$48binary_subscr.15'}), (50, {'value': '$48binary_subscr.15'}), (52, {'res': '$x52.16'}), (54, {'item': '$x52.16', 'res': '$54load_attr.17'}), (56, {'res': '$const56.18'}), (58, {'index': '$const56.18', 'target': '$54load_attr.17', 'res': '$58binary_subscr.19'}), (60, {'value': '$58binary_subscr.19'}), (62, {'res': '$t_out62.20'}), (64, {'item': '$t_out62.20', 'res': '$64load_attr.21'}), (66, {'res': '$const66.22'}), (68, {'index': '$const66.22', 'target': '$64load_attr.21', 'res': '$68binary_subscr.23'}), (70, {'value': '$68binary_subscr.23'}), (72, {'res': '$72load_global.24'}), (74, {'res': '$n_out74.25'}), (76, {'func': '$72load_global.24', 'args': ['$n_out74.25'], 'res': '$76call_function.26'}), (78, {'value': '$76call_function.26', 'res': '$78get_iter.27'})), outgoing_phis={'$phi80.0': '$78get_iter.27'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.27',)})
2025-05-02 21:52:19,113 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi84.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={382: (), 84: ('$phi80.0', '$80for_iter.2')})
2025-05-02 21:52:19,113 - DEBUG - block_infos State(pc_initial=84 nstack_initial=2):
AdaptBlockInfo(insts=((84, {'value': '$phi84.1'}), (86, {'res': '$t_out86.2'}), (88, {'res': '$t88.3'}), (90, {'index': '$t88.3', 'target': '$t_out86.2', 'res': '$90binary_subscr.4'}), (92, {'value': '$90binary_subscr.4'}), (94, {'res': '$94load_global.5'}), (96, {'res': '$time_register96.6'}), (98, {'func': '$94load_global.5', 'args': ['$time_register96.6'], 'res': '$98call_function.7'}), (100, {'value': '$98call_function.7'}), (102, {'res': '$scale102.8'}), (104, {'res': '$time_register104.9'}), (106, {'res': '$n106.10'}), (108, {'lhs': '$time_register104.9', 'rhs': '$n106.10', 'res': '$108binary_subtract.11'}), (110, {'lhs': '$scale102.8', 'rhs': '$108binary_subtract.11', 'res': '$110binary_multiply.12'}), (112, {'value': '$110binary_multiply.12'}), (114, {'res': '$frac114.13'}), (116, {'res': '$num_table116.14'}), (118, {'lhs': '$frac114.13', 'rhs': '$num_table116.14', 'res': '$118binary_multiply.15'}), (120, {'value': '$118binary_multiply.15'}), (122, {'res': '$122load_global.16'}), (124, {'res': '$index_frac124.17'}), (126, {'func': '$122load_global.16', 'args': ['$index_frac124.17'], 'res': '$126call_function.18'}), (128, {'value': '$126call_function.18'}), (130, {'res': '$index_frac130.19'}), (132, {'res': '$offset132.20'}), (134, {'lhs': '$index_frac130.19', 'rhs': '$offset132.20', 'res': '$134binary_subtract.21'}), (136, {'value': '$134binary_subtract.21'}), (138, {'res': '$138load_global.22'}), (140, {'res': '$n140.23'}), (142, {'res': '$const142.24'}), (144, {'lhs': '$n140.23', 'rhs': '$const142.24', 'res': '$144binary_add.25'}), (146, {'res': '$nwin146.26'}), (148, {'res': '$offset148.27'}), (150, {'lhs': '$nwin146.26', 'rhs': '$offset148.27', 'res': '$150binary_subtract.28'}), (152, {'res': '$index_step152.29'}), (154, {'lhs': '$150binary_subtract.28', 'rhs': '$index_step152.29', 'res': '$154binary_floor_divide.30'}), (156, {'func': '$138load_global.22', 'args': ['$144binary_add.25', '$154binary_floor_divide.30'], 'res': '$156call_function.31'}), (158, {'value': '$156call_function.31'}), (160, {'res': '$160load_global.32'}), (162, {'res': '$i_max162.33'}), (164, {'func': '$160load_global.32', 'args': ['$i_max162.33'], 'res': '$164call_function.34'}), (166, {'value': '$164call_function.34', 'res': '$166get_iter.35'})), outgoing_phis={'$phi168.1': '$166get_iter.35'}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi84.0', '$166get_iter.35')})
2025-05-02 21:52:19,115 - DEBUG - block_infos State(pc_initial=168 nstack_initial=2):
AdaptBlockInfo(insts=((168, {'iterator': '$phi168.1', 'pair': '$168for_iter.2', 'indval': '$168for_iter.3', 'pred': '$168for_iter.4'}),), outgoing_phis={'$phi170.2': '$168for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={238: ('$phi168.0',), 170: ('$phi168.0', '$phi168.1', '$168for_iter.3')})
2025-05-02 21:52:19,115 - DEBUG - block_infos State(pc_initial=170 nstack_initial=3):
AdaptBlockInfo(insts=((170, {'value': '$phi170.2'}), (172, {'res': '$interp_win172.3'}), (174, {'res': '$offset174.4'}), (176, {'res': '$i176.5'}), (178, {'res': '$index_step178.6'}), (180, {'lhs': '$i176.5', 'rhs': '$index_step178.6', 'res': '$180binary_multiply.7'}), (182, {'lhs': '$offset174.4', 'rhs': '$180binary_multiply.7', 'res': '$182binary_add.8'}), (184, {'index': '$182binary_add.8', 'target': '$interp_win172.3', 'res': '$184binary_subscr.9'}), (186, {'res': '$eta186.10'}), (188, {'res': '$interp_delta188.11'}), (190, {'res': '$offset190.12'}), (192, {'res': '$i192.13'}), (194, {'res': '$index_step194.14'}), (196, {'lhs': '$i192.13', 'rhs': '$index_step194.14', 'res': '$196binary_multiply.15'}), (198, {'lhs': '$offset190.12', 'rhs': '$196binary_multiply.15', 'res': '$198binary_add.16'}), (200, {'index': '$198binary_add.16', 'target': '$interp_delta188.11', 'res': '$200binary_subscr.17'}), (202, {'lhs': '$eta186.10', 'rhs': '$200binary_subscr.17', 'res': '$202binary_multiply.18'}), (204, {'lhs': '$184binary_subscr.9', 'rhs': '$202binary_multiply.18', 'res': '$204binary_add.19'}), (206, {'value': '$204binary_add.19'}), (208, {'res': '$y208.20'}), (210, {'res': '$t210.21'}), (212, {'orig': ['$y208.20', '$t210.21'], 'duped': ['$212dup_top_two.22', '$212dup_top_two.23']}), (214, {'index': '$212dup_top_two.23', 'target': '$212dup_top_two.22', 'res': '$214binary_subscr.24'}), (216, {'res': '$weight216.25'}), (218, {'res': '$x218.26'}), (220, {'res': '$n220.27'}), (222, {'res': '$i222.28'}), (224, {'lhs': '$n220.27', 'rhs': '$i222.28', 'res': '$224binary_subtract.29'}), (226, {'index': '$224binary_subtract.29', 'target': '$x218.26', 'res': '$226binary_subscr.30'}), (228, {'lhs': '$weight216.25', 'rhs': '$226binary_subscr.30', 'res': '$228binary_multiply.31'}), (230, {'lhs': '$214binary_subscr.24', 'rhs': '$228binary_multiply.31', 'res': '$230inplace_add.32'}), (234, {'target': '$y208.20', 'index': '$t210.21', 'value': '$230inplace_add.32'}), (236, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi170.0', '$phi170.1')})
2025-05-02 21:52:19,115 - DEBUG - block_infos State(pc_initial=238 nstack_initial=1):
AdaptBlockInfo(insts=((238, {'res': '$scale238.1'}), (240, {'res': '$frac240.2'}), (242, {'lhs': '$scale238.1', 'rhs': '$frac240.2', 'res': '$242binary_subtract.3'}), (244, {'value': '$242binary_subtract.3'}), (246, {'res': '$frac246.4'}), (248, {'res': '$num_table248.5'}), (250, {'lhs': '$frac246.4', 'rhs': '$num_table248.5', 'res': '$250binary_multiply.6'}), (252, {'value': '$250binary_multiply.6'}), (254, {'res': '$254load_global.7'}), (256, {'res': '$index_frac256.8'}), (258, {'func': '$254load_global.7', 'args': ['$index_frac256.8'], 'res': '$258call_function.9'}), (260, {'value': '$258call_function.9'}), (262, {'res': '$index_frac262.10'}), (264, {'res': '$offset264.11'}), (266, {'lhs': '$index_frac262.10', 'rhs': '$offset264.11', 'res': '$266binary_subtract.12'}), (268, {'value': '$266binary_subtract.12'}), (270, {'res': '$270load_global.13'}), (272, {'res': '$n_orig272.14'}), (274, {'res': '$n274.15'}), (276, {'lhs': '$n_orig272.14', 'rhs': '$n274.15', 'res': '$276binary_subtract.16'}), (278, {'res': '$const278.17'}), (280, {'lhs': '$276binary_subtract.16', 'rhs': '$const278.17', 'res': '$280binary_subtract.18'}), (282, {'res': '$nwin282.19'}), (284, {'res': '$offset284.20'}), (286, {'lhs': '$nwin282.19', 'rhs': '$offset284.20', 'res': '$286binary_subtract.21'}), (288, {'res': '$index_step288.22'}), (290, {'lhs': '$286binary_subtract.21', 'rhs': '$index_step288.22', 'res': '$290binary_floor_divide.23'}), (292, {'func': '$270load_global.13', 'args': ['$280binary_subtract.18', '$290binary_floor_divide.23'], 'res': '$292call_function.24'}), (294, {'value': '$292call_function.24'}), (296, {'res': '$296load_global.25'}), (298, {'res': '$k_max298.26'}), (300, {'func': '$296load_global.25', 'args': ['$k_max298.26'], 'res': '$300call_function.27'}), (302, {'value': '$300call_function.27', 'res': '$302get_iter.28'})), outgoing_phis={'$phi304.1': '$302get_iter.28'}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: ('$phi238.0', '$302get_iter.28')})
2025-05-02 21:52:19,115 - DEBUG - block_infos State(pc_initial=304 nstack_initial=2):
AdaptBlockInfo(insts=((304, {'iterator': '$phi304.1', 'pair': '$304for_iter.2', 'indval': '$304for_iter.3', 'pred': '$304for_iter.4'}),), outgoing_phis={'$phi306.2': '$304for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={380: ('$phi304.0',), 306: ('$phi304.0', '$phi304.1', '$304for_iter.3')})
2025-05-02 21:52:19,115 - DEBUG - block_infos State(pc_initial=306 nstack_initial=3):
AdaptBlockInfo(insts=((306, {'value': '$phi306.2'}), (308, {'res': '$interp_win308.3'}), (310, {'res': '$offset310.4'}), (312, {'res': '$k312.5'}), (314, {'res': '$index_step314.6'}), (316, {'lhs': '$k312.5', 'rhs': '$index_step314.6', 'res': '$316binary_multiply.7'}), (318, {'lhs': '$offset310.4', 'rhs': '$316binary_multiply.7', 'res': '$318binary_add.8'}), (320, {'index': '$318binary_add.8', 'target': '$interp_win308.3', 'res': '$320binary_subscr.9'}), (322, {'res': '$eta322.10'}), (324, {'res': '$interp_delta324.11'}), (326, {'res': '$offset326.12'}), (328, {'res': '$k328.13'}), (330, {'res': '$index_step330.14'}), (332, {'lhs': '$k328.13', 'rhs': '$index_step330.14', 'res': '$332binary_multiply.15'}), (334, {'lhs': '$offset326.12', 'rhs': '$332binary_multiply.15', 'res': '$334binary_add.16'}), (336, {'index': '$334binary_add.16', 'target': '$interp_delta324.11', 'res': '$336binary_subscr.17'}), (338, {'lhs': '$eta322.10', 'rhs': '$336binary_subscr.17', 'res': '$338binary_multiply.18'}), (340, {'lhs': '$320binary_subscr.9', 'rhs': '$338binary_multiply.18', 'res': '$340binary_add.19'}), (342, {'value': '$340binary_add.19'}), (344, {'res': '$y344.20'}), (346, {'res': '$t346.21'}), (348, {'orig': ['$y344.20', '$t346.21'], 'duped': ['$348dup_top_two.22', '$348dup_top_two.23']}), (350, {'index': '$348dup_top_two.23', 'target': '$348dup_top_two.22', 'res': '$350binary_subscr.24'}), (352, {'res': '$weight352.25'}), (354, {'res': '$x354.26'}), (356, {'res': '$n356.27'}), (358, {'res': '$k358.28'}), (360, {'lhs': '$n356.27', 'rhs': '$k358.28', 'res': '$360binary_add.29'}), (362, {'res': '$const362.30'}), (364, {'lhs': '$360binary_add.29', 'rhs': '$const362.30', 'res': '$364binary_add.31'}), (366, {'index': '$364binary_add.31', 'target': '$x354.26', 'res': '$366binary_subscr.32'}), (368, {'lhs': '$weight352.25', 'rhs': '$366binary_subscr.32', 'res': '$368binary_multiply.33'}), (370, {'lhs': '$350binary_subscr.24', 'rhs': '$368binary_multiply.33', 'res': '$370inplace_add.34'}), (374, {'target': '$y344.20', 'index': '$t346.21', 'value': '$370inplace_add.34'}), (376, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: ('$phi306.0', '$phi306.1')})
2025-05-02 21:52:19,115 - DEBUG - block_infos State(pc_initial=380 nstack_initial=1):
AdaptBlockInfo(insts=((380, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi380.0',)})
2025-05-02 21:52:19,115 - DEBUG - block_infos State(pc_initial=382 nstack_initial=0):
AdaptBlockInfo(insts=((382, {'res': '$const382.0'}), (384, {'retval': '$const382.0', 'castval': '$384return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-02 21:52:19,117 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    t_out = arg(1, name=t_out)               ['t_out']
    interp_win = arg(2, name=interp_win)     ['interp_win']
    interp_delta = arg(3, name=interp_delta) ['interp_delta']
    num_table = arg(4, name=num_table)       ['num_table']
    scale = arg(5, name=scale)               ['scale']
    y = arg(6, name=y)                       ['y']
    $2load_global.0 = global(int: <class 'int'>) ['$2load_global.0']
    $8binary_multiply.3 = scale * num_table  ['$8binary_multiply.3', 'num_table', 'scale']
    index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8binary_multiply.3', 'index_step']
    time_register = const(float, 0.0)        ['time_register']
    n = const(int, 0)                        ['n']
    frac = const(float, 0.0)                 ['frac']
    index_frac = const(float, 0.0)           ['index_frac']
    offset = const(int, 0)                   ['offset']
    eta = const(float, 0.0)                  ['eta']
    weight = const(float, 0.0)               ['weight']
    $44load_attr.13 = getattr(value=interp_win, attr=shape) ['$44load_attr.13', 'interp_win']
    $const46.14 = const(int, 0)              ['$const46.14']
    nwin = getitem(value=$44load_attr.13, index=$const46.14, fn=<built-in function getitem>) ['$44load_attr.13', '$const46.14', 'nwin']
    $54load_attr.17 = getattr(value=x, attr=shape) ['$54load_attr.17', 'x']
    $const56.18 = const(int, 0)              ['$const56.18']
    n_orig = getitem(value=$54load_attr.17, index=$const56.18, fn=<built-in function getitem>) ['$54load_attr.17', '$const56.18', 'n_orig']
    $64load_attr.21 = getattr(value=t_out, attr=shape) ['$64load_attr.21', 't_out']
    $const66.22 = const(int, 0)              ['$const66.22']
    n_out = getitem(value=$64load_attr.21, index=$const66.22, fn=<built-in function getitem>) ['$64load_attr.21', '$const66.22', 'n_out']
    $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>) ['$72load_global.24']
    $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.24', '$76call_function.26', 'n_out']
    $78get_iter.27 = getiter(value=$76call_function.26) ['$76call_function.26', '$78get_iter.27']
    $phi80.0 = $78get_iter.27                ['$78get_iter.27', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi84.1 = $80for_iter.2                 ['$80for_iter.2', '$phi84.1']
    branch $80for_iter.3, 84, 382            ['$80for_iter.3']
label 84:
    t = $phi84.1                             ['$phi84.1', 't']
    time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>) ['t', 't_out', 'time_register']
    $94load_global.5 = global(int: <class 'int'>) ['$94load_global.5']
    n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None) ['$94load_global.5', 'n', 'time_register']
    $108binary_subtract.11 = time_register - n ['$108binary_subtract.11', 'n', 'time_register']
    frac = scale * $108binary_subtract.11    ['$108binary_subtract.11', 'frac', 'scale']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $122load_global.16 = global(int: <class 'int'>) ['$122load_global.16']
    offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.16', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $138load_global.22 = global(min: <built-in function min>) ['$138load_global.22']
    $const142.24 = const(int, 1)             ['$const142.24']
    $144binary_add.25 = n + $const142.24     ['$144binary_add.25', '$const142.24', 'n']
    $150binary_subtract.28 = nwin - offset   ['$150binary_subtract.28', 'nwin', 'offset']
    $154binary_floor_divide.30 = $150binary_subtract.28 // index_step ['$150binary_subtract.28', '$154binary_floor_divide.30', 'index_step']
    i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None) ['$138load_global.22', '$144binary_add.25', '$154binary_floor_divide.30', 'i_max']
    $160load_global.32 = global(range: <class 'range'>) ['$160load_global.32']
    $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None) ['$160load_global.32', '$164call_function.34', 'i_max']
    $166get_iter.35 = getiter(value=$164call_function.34) ['$164call_function.34', '$166get_iter.35']
    $phi168.1 = $166get_iter.35              ['$166get_iter.35', '$phi168.1']
    jump 168                                 []
label 168:
    $168for_iter.2 = iternext(value=$phi168.1) ['$168for_iter.2', '$phi168.1']
    $168for_iter.3 = pair_first(value=$168for_iter.2) ['$168for_iter.2', '$168for_iter.3']
    $168for_iter.4 = pair_second(value=$168for_iter.2) ['$168for_iter.2', '$168for_iter.4']
    $phi170.2 = $168for_iter.3               ['$168for_iter.3', '$phi170.2']
    branch $168for_iter.4, 170, 238          ['$168for_iter.4']
label 170:
    i = $phi170.2                            ['$phi170.2', 'i']
    $180binary_multiply.7 = i * index_step   ['$180binary_multiply.7', 'i', 'index_step']
    $182binary_add.8 = offset + $180binary_multiply.7 ['$180binary_multiply.7', '$182binary_add.8', 'offset']
    $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>) ['$182binary_add.8', '$184binary_subscr.9', 'interp_win']
    $196binary_multiply.15 = i * index_step  ['$196binary_multiply.15', 'i', 'index_step']
    $198binary_add.16 = offset + $196binary_multiply.15 ['$196binary_multiply.15', '$198binary_add.16', 'offset']
    $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>) ['$198binary_add.16', '$200binary_subscr.17', 'interp_delta']
    $202binary_multiply.18 = eta * $200binary_subscr.17 ['$200binary_subscr.17', '$202binary_multiply.18', 'eta']
    weight = $184binary_subscr.9 + $202binary_multiply.18 ['$184binary_subscr.9', '$202binary_multiply.18', 'weight']
    $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>) ['$214binary_subscr.24', 't', 'y']
    $224binary_subtract.29 = n - i           ['$224binary_subtract.29', 'i', 'n']
    $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>) ['$224binary_subtract.29', '$226binary_subscr.30', 'x']
    $228binary_multiply.31 = weight * $226binary_subscr.30 ['$226binary_subscr.30', '$228binary_multiply.31', 'weight']
    $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined) ['$214binary_subscr.24', '$228binary_multiply.31', '$230inplace_add.32']
    y[t] = $230inplace_add.32                ['$230inplace_add.32', 't', 'y']
    jump 168                                 []
label 238:
    $242binary_subtract.3 = scale - frac     ['$242binary_subtract.3', 'frac', 'scale']
    frac = $242binary_subtract.3             ['$242binary_subtract.3', 'frac']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $254load_global.7 = global(int: <class 'int'>) ['$254load_global.7']
    offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None) ['$254load_global.7', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $270load_global.13 = global(min: <built-in function min>) ['$270load_global.13']
    $276binary_subtract.16 = n_orig - n      ['$276binary_subtract.16', 'n', 'n_orig']
    $const278.17 = const(int, 1)             ['$const278.17']
    $280binary_subtract.18 = $276binary_subtract.16 - $const278.17 ['$276binary_subtract.16', '$280binary_subtract.18', '$const278.17']
    $286binary_subtract.21 = nwin - offset   ['$286binary_subtract.21', 'nwin', 'offset']
    $290binary_floor_divide.23 = $286binary_subtract.21 // index_step ['$286binary_subtract.21', '$290binary_floor_divide.23', 'index_step']
    k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None) ['$270load_global.13', '$280binary_subtract.18', '$290binary_floor_divide.23', 'k_max']
    $296load_global.25 = global(range: <class 'range'>) ['$296load_global.25']
    $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None) ['$296load_global.25', '$300call_function.27', 'k_max']
    $302get_iter.28 = getiter(value=$300call_function.27) ['$300call_function.27', '$302get_iter.28']
    $phi304.1 = $302get_iter.28              ['$302get_iter.28', '$phi304.1']
    jump 304                                 []
label 304:
    $304for_iter.2 = iternext(value=$phi304.1) ['$304for_iter.2', '$phi304.1']
    $304for_iter.3 = pair_first(value=$304for_iter.2) ['$304for_iter.2', '$304for_iter.3']
    $304for_iter.4 = pair_second(value=$304for_iter.2) ['$304for_iter.2', '$304for_iter.4']
    $phi306.2 = $304for_iter.3               ['$304for_iter.3', '$phi306.2']
    branch $304for_iter.4, 306, 380          ['$304for_iter.4']
label 306:
    k = $phi306.2                            ['$phi306.2', 'k']
    $316binary_multiply.7 = k * index_step   ['$316binary_multiply.7', 'index_step', 'k']
    $318binary_add.8 = offset + $316binary_multiply.7 ['$316binary_multiply.7', '$318binary_add.8', 'offset']
    $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>) ['$318binary_add.8', '$320binary_subscr.9', 'interp_win']
    $332binary_multiply.15 = k * index_step  ['$332binary_multiply.15', 'index_step', 'k']
    $334binary_add.16 = offset + $332binary_multiply.15 ['$332binary_multiply.15', '$334binary_add.16', 'offset']
    $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>) ['$334binary_add.16', '$336binary_subscr.17', 'interp_delta']
    $338binary_multiply.18 = eta * $336binary_subscr.17 ['$336binary_subscr.17', '$338binary_multiply.18', 'eta']
    weight = $320binary_subscr.9 + $338binary_multiply.18 ['$320binary_subscr.9', '$338binary_multiply.18', 'weight']
    $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>) ['$350binary_subscr.24', 't', 'y']
    $360binary_add.29 = n + k                ['$360binary_add.29', 'k', 'n']
    $const362.30 = const(int, 1)             ['$const362.30']
    $364binary_add.31 = $360binary_add.29 + $const362.30 ['$360binary_add.29', '$364binary_add.31', '$const362.30']
    $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>) ['$364binary_add.31', '$366binary_subscr.32', 'x']
    $368binary_multiply.33 = weight * $366binary_subscr.32 ['$366binary_subscr.32', '$368binary_multiply.33', 'weight']
    $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined) ['$350binary_subscr.24', '$368binary_multiply.33', '$370inplace_add.34']
    y[t] = $370inplace_add.34                ['$370inplace_add.34', 't', 'y']
    jump 304                                 []
label 380:
    jump 80                                  []
label 382:
    $const382.0 = const(NoneType, None)      ['$const382.0']
    $384return_value.1 = cast(value=$const382.0) ['$384return_value.1', '$const382.0']
    return $384return_value.1                ['$384return_value.1']

2025-05-02 21:52:19,126 - DEBUG - ==== SSA block analysis pass on 0
2025-05-02 21:52:19,126 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,126 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,126 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,126 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,126 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,126 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,126 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,126 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,126 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,126 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,126 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,126 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,126 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,126 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,128 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,128 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,128 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,128 - DEBUG - ==== SSA block analysis pass on 80
2025-05-02 21:52:19,128 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,128 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,128 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,128 - DEBUG - ==== SSA block analysis pass on 84
2025-05-02 21:52:19,128 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,128 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,128 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,128 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:52:19,128 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,128 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,128 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,128 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:52:19,129 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block analysis pass on 168
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block analysis pass on 170
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,129 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,129 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,129 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:52:19,129 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,129 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block analysis pass on 238
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block analysis pass on 304
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block analysis pass on 306
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,129 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,129 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,129 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,129 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,129 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block analysis pass on 380
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block analysis pass on 382
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,129 - DEBUG - defs defaultdict(<class 'list'>,
            {'$108binary_subtract.11': [<numba.core.ir.Assign object at 0x000002D34E80D4F0>],
             '$122load_global.16': [<numba.core.ir.Assign object at 0x000002D34E80DD00>],
             '$138load_global.22': [<numba.core.ir.Assign object at 0x000002D34E8106A0>],
             '$144binary_add.25': [<numba.core.ir.Assign object at 0x000002D34E810AF0>],
             '$150binary_subtract.28': [<numba.core.ir.Assign object at 0x000002D34E810EB0>],
             '$154binary_floor_divide.30': [<numba.core.ir.Assign object at 0x000002D34E813190>],
             '$160load_global.32': [<numba.core.ir.Assign object at 0x000002D34E813580>],
             '$164call_function.34': [<numba.core.ir.Assign object at 0x000002D34E813880>],
             '$166get_iter.35': [<numba.core.ir.Assign object at 0x000002D34E8139A0>],
             '$168for_iter.2': [<numba.core.ir.Assign object at 0x000002D34E80D2B0>],
             '$168for_iter.3': [<numba.core.ir.Assign object at 0x000002D34E80D6D0>],
             '$168for_iter.4': [<numba.core.ir.Assign object at 0x000002D34E80DC10>],
             '$180binary_multiply.7': [<numba.core.ir.Assign object at 0x000002D34E813D90>],
             '$182binary_add.8': [<numba.core.ir.Assign object at 0x000002D34E813F10>],
             '$184binary_subscr.9': [<numba.core.ir.Assign object at 0x000002D34E8160D0>],
             '$196binary_multiply.15': [<numba.core.ir.Assign object at 0x000002D34E8167F0>],
             '$198binary_add.16': [<numba.core.ir.Assign object at 0x000002D34E816970>],
             '$200binary_subscr.17': [<numba.core.ir.Assign object at 0x000002D34E816AF0>],
             '$202binary_multiply.18': [<numba.core.ir.Assign object at 0x000002D34E816C70>],
             '$214binary_subscr.24': [<numba.core.ir.Assign object at 0x000002D34E818490>],
             '$224binary_subtract.29': [<numba.core.ir.Assign object at 0x000002D34E818A90>],
             '$226binary_subscr.30': [<numba.core.ir.Assign object at 0x000002D34E818C10>],
             '$228binary_multiply.31': [<numba.core.ir.Assign object at 0x000002D34E818D90>],
             '$230inplace_add.32': [<numba.core.ir.Assign object at 0x000002D34E818F10>],
             '$242binary_subtract.3': [<numba.core.ir.Assign object at 0x000002D34E818070>],
             '$254load_global.7': [<numba.core.ir.Assign object at 0x000002D34E81A4C0>],
             '$270load_global.13': [<numba.core.ir.Assign object at 0x000002D34E81AE20>],
             '$276binary_subtract.16': [<numba.core.ir.Assign object at 0x000002D34E81C250>],
             '$280binary_subtract.18': [<numba.core.ir.Assign object at 0x000002D34E81C550>],
             '$286binary_subtract.21': [<numba.core.ir.Assign object at 0x000002D34E81C910>],
             '$290binary_floor_divide.23': [<numba.core.ir.Assign object at 0x000002D34E81CBB0>],
             '$296load_global.25': [<numba.core.ir.Assign object at 0x000002D34E81CFA0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000002D34E8020A0>],
             '$300call_function.27': [<numba.core.ir.Assign object at 0x000002D34E81E2E0>],
             '$302get_iter.28': [<numba.core.ir.Assign object at 0x000002D34E81E400>],
             '$304for_iter.2': [<numba.core.ir.Assign object at 0x000002D34E81A700>],
             '$304for_iter.3': [<numba.core.ir.Assign object at 0x000002D34E81AD30>],
             '$304for_iter.4': [<numba.core.ir.Assign object at 0x000002D34E81C130>],
             '$316binary_multiply.7': [<numba.core.ir.Assign object at 0x000002D34E81EB50>],
             '$318binary_add.8': [<numba.core.ir.Assign object at 0x000002D34E81ECD0>],
             '$320binary_subscr.9': [<numba.core.ir.Assign object at 0x000002D34E81EE50>],
             '$332binary_multiply.15': [<numba.core.ir.Assign object at 0x000002D34E8205B0>],
             '$334binary_add.16': [<numba.core.ir.Assign object at 0x000002D34E820730>],
             '$336binary_subscr.17': [<numba.core.ir.Assign object at 0x000002D34E8208B0>],
             '$338binary_multiply.18': [<numba.core.ir.Assign object at 0x000002D34E820A30>],
             '$350binary_subscr.24': [<numba.core.ir.Assign object at 0x000002D34E822250>],
             '$360binary_add.29': [<numba.core.ir.Assign object at 0x000002D34E822850>],
             '$364binary_add.31': [<numba.core.ir.Assign object at 0x000002D34E822B50>],
             '$366binary_subscr.32': [<numba.core.ir.Assign object at 0x000002D34E822CD0>],
             '$368binary_multiply.33': [<numba.core.ir.Assign object at 0x000002D34E822E50>],
             '$370inplace_add.34': [<numba.core.ir.Assign object at 0x000002D34E822FD0>],
             '$384return_value.1': [<numba.core.ir.Assign object at 0x000002D34E822040>],
             '$44load_attr.13': [<numba.core.ir.Assign object at 0x000002D34E805C40>],
             '$54load_attr.17': [<numba.core.ir.Assign object at 0x000002D34E808340>],
             '$64load_attr.21': [<numba.core.ir.Assign object at 0x000002D34E808A00>],
             '$72load_global.24': [<numba.core.ir.Assign object at 0x000002D34E808FA0>],
             '$76call_function.26': [<numba.core.ir.Assign object at 0x000002D34E80A2E0>],
             '$78get_iter.27': [<numba.core.ir.Assign object at 0x000002D34E80A400>],
             '$80for_iter.1': [<numba.core.ir.Assign object at 0x000002D34E805A30>],
             '$80for_iter.2': [<numba.core.ir.Assign object at 0x000002D34E808250>],
             '$80for_iter.3': [<numba.core.ir.Assign object at 0x000002D34E808EB0>],
             '$8binary_multiply.3': [<numba.core.ir.Assign object at 0x000002D34E802490>],
             '$94load_global.5': [<numba.core.ir.Assign object at 0x000002D34E80AC40>],
             '$const142.24': [<numba.core.ir.Assign object at 0x000002D34E810940>],
             '$const278.17': [<numba.core.ir.Assign object at 0x000002D34E81C3A0>],
             '$const362.30': [<numba.core.ir.Assign object at 0x000002D34E8229A0>],
             '$const382.0': [<numba.core.ir.Assign object at 0x000002D34E820C70>],
             '$const46.14': [<numba.core.ir.Assign object at 0x000002D34E805DC0>],
             '$const56.18': [<numba.core.ir.Assign object at 0x000002D34E8084C0>],
             '$const66.22': [<numba.core.ir.Assign object at 0x000002D34E808B80>],
             '$phi168.1': [<numba.core.ir.Assign object at 0x000002D34E80A7F0>],
             '$phi170.2': [<numba.core.ir.Assign object at 0x000002D34E80D070>],
             '$phi304.1': [<numba.core.ir.Assign object at 0x000002D34E816370>],
             '$phi306.2': [<numba.core.ir.Assign object at 0x000002D34E81A670>],
             '$phi80.0': [<numba.core.ir.Assign object at 0x000002D34E802250>],
             '$phi84.1': [<numba.core.ir.Assign object at 0x000002D34E8054F0>],
             'eta': [<numba.core.ir.Assign object at 0x000002D34E8055E0>,
                     <numba.core.ir.Assign object at 0x000002D34E810490>,
                     <numba.core.ir.Assign object at 0x000002D34E81AC10>],
             'frac': [<numba.core.ir.Assign object at 0x000002D34E802DC0>,
                      <numba.core.ir.Assign object at 0x000002D34E80D670>,
                      <numba.core.ir.Assign object at 0x000002D34E818310>],
             'i': [<numba.core.ir.Assign object at 0x000002D34E8103D0>],
             'i_max': [<numba.core.ir.Assign object at 0x000002D34E813340>],
             'index_frac': [<numba.core.ir.Assign object at 0x000002D34E8050A0>,
                            <numba.core.ir.Assign object at 0x000002D34E80DAF0>,
                            <numba.core.ir.Assign object at 0x000002D34E81A2B0>],
             'index_step': [<numba.core.ir.Assign object at 0x000002D34E802640>],
             'interp_delta': [<numba.core.ir.Assign object at 0x000002D34E7E41C0>],
             'interp_win': [<numba.core.ir.Assign object at 0x000002D34E7E4280>],
             'k': [<numba.core.ir.Assign object at 0x000002D34E81E520>],
             'k_max': [<numba.core.ir.Assign object at 0x000002D34E81CD60>],
             'n': [<numba.core.ir.Assign object at 0x000002D34E802B20>,
                   <numba.core.ir.Assign object at 0x000002D34E80AF40>],
             'n_orig': [<numba.core.ir.Assign object at 0x000002D34E82CC10>],
             'n_out': [<numba.core.ir.Assign object at 0x000002D34E82CCD0>],
             'num_table': [<numba.core.ir.Assign object at 0x000002D34E7E44C0>],
             'nwin': [<numba.core.ir.Assign object at 0x000002D34E82C070>],
             'offset': [<numba.core.ir.Assign object at 0x000002D34E805340>,
                        <numba.core.ir.Assign object at 0x000002D34E810040>,
                        <numba.core.ir.Assign object at 0x000002D34E81A7C0>],
             'scale': [<numba.core.ir.Assign object at 0x000002D34E7E4DC0>],
             't': [<numba.core.ir.Assign object at 0x000002D34E80A640>],
             't_out': [<numba.core.ir.Assign object at 0x000002D34E7E4700>],
             'time_register': [<numba.core.ir.Assign object at 0x000002D34E802880>,
                               <numba.core.ir.Assign object at 0x000002D34E80AA30>],
             'weight': [<numba.core.ir.Assign object at 0x000002D34E805880>,
                        <numba.core.ir.Assign object at 0x000002D34E816DF0>,
                        <numba.core.ir.Assign object at 0x000002D34E820BB0>],
             'x': [<numba.core.ir.Assign object at 0x000002D34E7E4640>],
             'y': [<numba.core.ir.Assign object at 0x000002D34E7E4EE0>]})
2025-05-02 21:52:19,129 - DEBUG - SSA violators {'time_register', 'n', 'weight', 'offset', 'index_frac', 'frac', 'eta'}
2025-05-02 21:52:19,129 - DEBUG - Fix SSA violator on var time_register
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,129 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,129 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,129 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,129 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,129 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - first assign: time_register
2025-05-02 21:52:19,129 - DEBUG - replaced with: time_register = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,129 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - replaced with: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:52:19,129 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,129 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,129 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,129 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:52:19,129 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,129 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,129 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,129 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,129 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,129 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,129 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,129 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002D34E82C400>],
             84: [<numba.core.ir.Assign object at 0x000002D34E82CEB0>]})
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,129 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,129 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,129 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,129 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,129 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,129 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - find_def var='time_register' stmt=n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - replaced with: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:52:19,129 - DEBUG - find_def var='time_register' stmt=$108binary_subtract.11 = time_register - n
2025-05-02 21:52:19,129 - DEBUG - replaced with: $108binary_subtract.11 = time_register.1 - n
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:52:19,129 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,129 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,129 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,129 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:52:19,129 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,129 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,129 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,129 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,129 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,129 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,129 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,129 - DEBUG - Fix SSA violator on var n
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,129 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,129 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,129 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,129 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,129 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - first assign: n
2025-05-02 21:52:19,129 - DEBUG - replaced with: n = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,144 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,144 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,144 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,144 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,144 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,144 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,144 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,144 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,144 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,144 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,144 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,144 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,144 - DEBUG - replaced with: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 21:52:19,144 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,144 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,144 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,144 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,144 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:52:19,146 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,146 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,146 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,146 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,146 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,146 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,146 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,146 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,146 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,146 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,146 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,146 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,146 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,146 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,146 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,146 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,146 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,146 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:52:19,146 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,146 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,146 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,146 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,146 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,146 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,146 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,146 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,146 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,146 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,146 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,146 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,146 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:52:19,148 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,148 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,148 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,148 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,148 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,148 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,148 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,148 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,148 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,148 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,148 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,148 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,148 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,148 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,148 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,148 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,148 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,148 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,148 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:52:19,148 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,148 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,148 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,148 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,148 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,148 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,148 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,148 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,148 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,148 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,148 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,148 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,148 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002D34E82C880>],
             84: [<numba.core.ir.Assign object at 0x000002D34E82C9D0>]})
2025-05-02 21:52:19,148 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,148 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,148 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,148 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,148 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,148 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,148 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,148 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,148 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,148 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,150 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,150 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 21:52:19,150 - DEBUG - find_def var='n' stmt=$108binary_subtract.11 = time_register.1 - n
2025-05-02 21:52:19,150 - DEBUG - replaced with: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,150 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,150 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,150 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:52:19,150 - DEBUG - find_def var='n' stmt=$144binary_add.25 = n + $const142.24
2025-05-02 21:52:19,150 - DEBUG - replaced with: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,150 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,150 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,150 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,150 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,150 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,150 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,150 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:52:19,150 - DEBUG - find_def var='n' stmt=$224binary_subtract.29 = n - i
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 170
2025-05-02 21:52:19,150 - DEBUG - idom 168 from label 170
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 168
2025-05-02 21:52:19,150 - DEBUG - idom 84 from label 168
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:52:19,150 - DEBUG - replaced with: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,150 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,150 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,150 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,150 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,150 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,150 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:52:19,150 - DEBUG - find_def var='n' stmt=$276binary_subtract.16 = n_orig - n
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 238
2025-05-02 21:52:19,150 - DEBUG - idom 168 from label 238
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 168
2025-05-02 21:52:19,150 - DEBUG - idom 84 from label 168
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:52:19,150 - DEBUG - replaced with: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,150 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,150 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,150 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,150 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,150 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,150 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,150 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:52:19,150 - DEBUG - find_def var='n' stmt=$360binary_add.29 = n + k
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 306
2025-05-02 21:52:19,150 - DEBUG - idom 304 from label 306
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 304
2025-05-02 21:52:19,150 - DEBUG - idom 238 from label 304
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 238
2025-05-02 21:52:19,150 - DEBUG - idom 168 from label 238
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 168
2025-05-02 21:52:19,150 - DEBUG - idom 84 from label 168
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:52:19,150 - DEBUG - replaced with: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,150 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,150 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,150 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,150 - DEBUG - Fix SSA violator on var weight
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,150 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,150 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,150 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,150 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,150 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,150 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,150 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - first assign: weight
2025-05-02 21:52:19,150 - DEBUG - replaced with: weight = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,150 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,150 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,150 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,150 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,150 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,150 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,150 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,150 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,150 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,150 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,150 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,150 - DEBUG - replaced with: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,150 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,150 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,150 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,150 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,150 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,150 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,150 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,150 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,150 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,150 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,150 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,150 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,150 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,150 - DEBUG - replaced with: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,160 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,160 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,160 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,160 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,160 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,160 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,160 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,160 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,160 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,160 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,160 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,160 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,160 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,160 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,160 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,160 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,160 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,160 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002D34E82C280>],
             170: [<numba.core.ir.Assign object at 0x000002D34E82C580>],
             306: [<numba.core.ir.Assign object at 0x000002D34E82FA00>]})
2025-05-02 21:52:19,161 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,161 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,161 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,161 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,161 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,161 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,161 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,161 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,161 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,161 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,161 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,161 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,161 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,161 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,161 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,161 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,161 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,161 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,161 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,161 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,161 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,161 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,161 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,161 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,161 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,161 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,161 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,161 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,161 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,163 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,163 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,163 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,163 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,163 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,163 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,163 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,163 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,163 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,163 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,163 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,163 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,163 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,163 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,163 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,163 - DEBUG - find_def var='weight' stmt=$228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,163 - DEBUG - replaced with: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,163 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,163 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,163 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,163 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,163 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,163 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,163 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,163 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,163 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,163 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,163 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,163 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,163 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,163 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,163 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,163 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,163 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,163 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,163 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,163 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,163 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,163 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,163 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,163 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,163 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,165 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,165 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,165 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,165 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,165 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,165 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,165 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,165 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,165 - DEBUG - find_def var='weight' stmt=$368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,165 - DEBUG - replaced with: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,165 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,165 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,165 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,165 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,165 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,165 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,165 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,165 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,165 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,165 - DEBUG - Fix SSA violator on var offset
2025-05-02 21:52:19,165 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,165 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,165 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,165 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,165 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,165 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,165 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,165 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,165 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,165 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,165 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,165 - DEBUG - first assign: offset
2025-05-02 21:52:19,165 - DEBUG - replaced with: offset = const(int, 0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,167 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,167 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,167 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,167 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,167 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,167 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,167 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,167 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,167 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,167 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,167 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,167 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,167 - DEBUG - replaced with: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,167 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,167 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,167 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,167 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,167 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,167 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,167 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,167 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,167 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,167 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,167 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,167 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,167 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,167 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,167 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,167 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,167 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,167 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,167 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,167 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,167 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,169 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,169 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,169 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,169 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,169 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,169 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,169 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,169 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,169 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,169 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,169 - DEBUG - replaced with: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,169 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,169 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,169 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,169 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,169 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,169 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,169 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,169 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,169 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,169 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,169 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,169 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,169 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,169 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,169 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,169 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,169 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,169 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,169 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,169 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,169 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,169 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,169 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,169 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,169 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,169 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,169 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,169 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,169 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,169 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,169 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,169 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,171 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002D34E82C700>],
             84: [<numba.core.ir.Assign object at 0x000002D34E82C5E0>],
             238: [<numba.core.ir.Assign object at 0x000002D34E82F340>]})
2025-05-02 21:52:19,171 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,171 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,171 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,171 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,171 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,171 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,171 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,171 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,171 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,171 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,171 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,171 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,171 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,171 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,171 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,171 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,171 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,171 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,171 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,171 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,171 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,173 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,173 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,173 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,173 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,173 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,173 - DEBUG - find_def var='offset' stmt=eta = index_frac - offset
2025-05-02 21:52:19,173 - DEBUG - replaced with: eta = index_frac - offset.1
2025-05-02 21:52:19,173 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,173 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,173 - DEBUG - find_def var='offset' stmt=$150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,173 - DEBUG - replaced with: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:52:19,173 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,173 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,173 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,173 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,173 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,173 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,173 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,173 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,173 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,173 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,173 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,173 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,173 - DEBUG - find_def var='offset' stmt=$182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,173 - DEBUG - find_def_from_top label 170
2025-05-02 21:52:19,173 - DEBUG - idom 168 from label 170
2025-05-02 21:52:19,173 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:52:19,173 - DEBUG - find_def_from_top label 168
2025-05-02 21:52:19,173 - DEBUG - idom 84 from label 168
2025-05-02 21:52:19,173 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:52:19,173 - DEBUG - replaced with: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:52:19,173 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,173 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,173 - DEBUG - find_def var='offset' stmt=$198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,173 - DEBUG - find_def_from_top label 170
2025-05-02 21:52:19,173 - DEBUG - idom 168 from label 170
2025-05-02 21:52:19,173 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:52:19,173 - DEBUG - find_def_from_top label 168
2025-05-02 21:52:19,173 - DEBUG - idom 84 from label 168
2025-05-02 21:52:19,173 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:52:19,173 - DEBUG - replaced with: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:52:19,173 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,175 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,175 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,175 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,175 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,175 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,175 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,175 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,175 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,175 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,175 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,175 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,175 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,175 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,175 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,175 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,175 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,175 - DEBUG - find_def var='offset' stmt=eta = index_frac - offset
2025-05-02 21:52:19,175 - DEBUG - replaced with: eta = index_frac - offset.2
2025-05-02 21:52:19,175 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,175 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,175 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,175 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,175 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,175 - DEBUG - find_def var='offset' stmt=$286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,175 - DEBUG - replaced with: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:52:19,175 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,175 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,176 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,176 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,176 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,176 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,176 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,176 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,176 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,176 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,176 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,176 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,176 - DEBUG - find_def var='offset' stmt=$318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,176 - DEBUG - find_def_from_top label 306
2025-05-02 21:52:19,176 - DEBUG - idom 304 from label 306
2025-05-02 21:52:19,176 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:52:19,176 - DEBUG - find_def_from_top label 304
2025-05-02 21:52:19,176 - DEBUG - idom 238 from label 304
2025-05-02 21:52:19,176 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:52:19,176 - DEBUG - replaced with: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:52:19,176 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,176 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,176 - DEBUG - find_def var='offset' stmt=$334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,176 - DEBUG - find_def_from_top label 306
2025-05-02 21:52:19,176 - DEBUG - idom 304 from label 306
2025-05-02 21:52:19,176 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:52:19,176 - DEBUG - find_def_from_top label 304
2025-05-02 21:52:19,176 - DEBUG - idom 238 from label 304
2025-05-02 21:52:19,176 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:52:19,176 - DEBUG - replaced with: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:52:19,176 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,176 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,176 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,176 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,176 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,176 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,176 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,176 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,176 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,176 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,176 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,176 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,176 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,176 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,176 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,178 - DEBUG - Fix SSA violator on var index_frac
2025-05-02 21:52:19,178 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,178 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,178 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,178 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,178 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,178 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,178 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,178 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,178 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,178 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,178 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,178 - DEBUG - first assign: index_frac
2025-05-02 21:52:19,178 - DEBUG - replaced with: index_frac = const(float, 0.0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,178 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,178 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,178 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,178 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,178 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,178 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,178 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,178 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,178 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,178 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,178 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,178 - DEBUG - replaced with: index_frac.1 = frac * num_table
2025-05-02 21:52:19,178 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,178 - DEBUG - on stmt: eta = index_frac - offset.1
2025-05-02 21:52:19,178 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,178 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:52:19,178 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,178 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,180 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,180 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,180 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,180 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,180 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,180 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,180 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,180 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,180 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,180 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:52:19,180 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,180 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:52:19,180 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,180 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,180 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,180 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,180 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,180 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,180 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,180 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,180 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,180 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,180 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,180 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,180 - DEBUG - replaced with: index_frac.2 = frac * num_table
2025-05-02 21:52:19,180 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,180 - DEBUG - on stmt: eta = index_frac - offset.2
2025-05-02 21:52:19,180 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,180 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,180 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:52:19,180 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,180 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,180 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,180 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,180 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,180 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,180 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,180 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,180 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,180 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,180 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,182 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:52:19,182 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,182 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:52:19,182 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,182 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,182 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,182 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,182 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,182 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,182 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,182 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,182 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,182 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,182 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,182 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,182 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,182 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,182 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002D34E82FAC0>],
             84: [<numba.core.ir.Assign object at 0x000002D34E82F4F0>],
             238: [<numba.core.ir.Assign object at 0x000002D34E82C130>]})
2025-05-02 21:52:19,182 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,182 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,182 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,182 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,182 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,182 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,182 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,182 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,182 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,182 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,182 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,182 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,182 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,182 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,182 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,182 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,184 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,184 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,184 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,184 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,184 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,184 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,184 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 21:52:19,184 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,184 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,184 - DEBUG - find_def var='index_frac' stmt=offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,184 - DEBUG - replaced with: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,184 - DEBUG - on stmt: eta = index_frac - offset.1
2025-05-02 21:52:19,184 - DEBUG - find_def var='index_frac' stmt=eta = index_frac - offset.1
2025-05-02 21:52:19,184 - DEBUG - replaced with: eta = index_frac.1 - offset.1
2025-05-02 21:52:19,184 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,184 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:52:19,184 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,184 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,184 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,184 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,184 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,184 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,184 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,184 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,184 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,184 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,184 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,184 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:52:19,184 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,184 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:52:19,184 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,184 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,186 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,186 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,186 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,186 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,186 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,186 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,186 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,186 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,186 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,186 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 21:52:19,186 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,186 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,186 - DEBUG - find_def var='index_frac' stmt=offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,186 - DEBUG - replaced with: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,186 - DEBUG - on stmt: eta = index_frac - offset.2
2025-05-02 21:52:19,186 - DEBUG - find_def var='index_frac' stmt=eta = index_frac - offset.2
2025-05-02 21:52:19,186 - DEBUG - replaced with: eta = index_frac.2 - offset.2
2025-05-02 21:52:19,186 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,186 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,186 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:52:19,186 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,186 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,186 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,186 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,186 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,186 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,186 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,186 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,186 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,186 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,186 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,186 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:52:19,186 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,186 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:52:19,186 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,186 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,186 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,188 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,188 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,188 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,188 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,188 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,188 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,188 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,188 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,188 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,188 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,188 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,188 - DEBUG - Fix SSA violator on var frac
2025-05-02 21:52:19,188 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,188 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,188 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,188 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,188 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,188 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,188 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,188 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,188 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,188 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,188 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,188 - DEBUG - first assign: frac
2025-05-02 21:52:19,188 - DEBUG - replaced with: frac = const(float, 0.0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,188 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,188 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,188 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,188 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,188 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,188 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,190 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,190 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,190 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,190 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,190 - DEBUG - replaced with: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:52:19,190 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 21:52:19,190 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,190 - DEBUG - on stmt: eta = index_frac.1 - offset.1
2025-05-02 21:52:19,190 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,190 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:52:19,190 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,190 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,190 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,190 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,190 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,190 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,190 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,190 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,190 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,190 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,190 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,190 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:52:19,190 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,190 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:52:19,190 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,190 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,190 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,190 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,190 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,190 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,190 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,190 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,190 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,190 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,190 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,190 - DEBUG - replaced with: frac.2 = $242binary_subtract.3
2025-05-02 21:52:19,190 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 21:52:19,190 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,192 - DEBUG - on stmt: eta = index_frac.2 - offset.2
2025-05-02 21:52:19,192 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,192 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,192 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:52:19,192 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,192 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,192 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,192 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,192 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,192 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,192 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,192 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,192 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,192 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,192 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,192 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:52:19,192 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,192 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:52:19,192 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,192 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,192 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,192 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,192 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,192 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,192 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,192 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,192 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,192 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,192 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,192 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,192 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,192 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,192 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,192 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002D34E82C910>],
             84: [<numba.core.ir.Assign object at 0x000002D34E82F8E0>],
             238: [<numba.core.ir.Assign object at 0x000002D34E7D2760>]})
2025-05-02 21:52:19,192 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,192 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,192 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,192 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,192 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,192 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,192 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,194 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,194 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,194 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,194 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,194 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,194 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,194 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,194 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,194 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,194 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,194 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,194 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,194 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,194 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:52:19,194 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 21:52:19,194 - DEBUG - find_def var='frac' stmt=index_frac.1 = frac * num_table
2025-05-02 21:52:19,194 - DEBUG - replaced with: index_frac.1 = frac.1 * num_table
2025-05-02 21:52:19,194 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,194 - DEBUG - on stmt: eta = index_frac.1 - offset.1
2025-05-02 21:52:19,194 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,194 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:52:19,194 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,194 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,196 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,196 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,196 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,196 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,196 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,196 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,196 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,196 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,196 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,196 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:52:19,196 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,196 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:52:19,196 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,196 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,196 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,196 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,196 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,196 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,196 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,196 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,196 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,196 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,196 - DEBUG - find_def var='frac' stmt=$242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,196 - DEBUG - find_def_from_top label 238
2025-05-02 21:52:19,196 - DEBUG - idom 168 from label 238
2025-05-02 21:52:19,196 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:52:19,196 - DEBUG - find_def_from_top label 168
2025-05-02 21:52:19,196 - DEBUG - idom 84 from label 168
2025-05-02 21:52:19,196 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:52:19,196 - DEBUG - replaced with: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:52:19,196 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:52:19,196 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 21:52:19,196 - DEBUG - find_def var='frac' stmt=index_frac.2 = frac * num_table
2025-05-02 21:52:19,196 - DEBUG - replaced with: index_frac.2 = frac.2 * num_table
2025-05-02 21:52:19,196 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,196 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,196 - DEBUG - on stmt: eta = index_frac.2 - offset.2
2025-05-02 21:52:19,196 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,196 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,196 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:52:19,196 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,196 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,198 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,198 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,198 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,198 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,198 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,198 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,198 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,198 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,198 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,198 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:52:19,198 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,198 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:52:19,198 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,198 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,198 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,198 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,198 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,198 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,198 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,198 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,198 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,198 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,198 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,198 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,198 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,198 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,198 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,198 - DEBUG - Fix SSA violator on var eta
2025-05-02 21:52:19,198 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,198 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,198 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,198 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,198 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,198 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,198 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,198 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,198 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,198 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,198 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,198 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,198 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,198 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,198 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,198 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,198 - DEBUG - first assign: eta
2025-05-02 21:52:19,200 - DEBUG - replaced with: eta = const(float, 0.0)
2025-05-02 21:52:19,200 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,200 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,200 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,200 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,200 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,200 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,200 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,200 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,200 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,200 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,200 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,200 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,200 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,200 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:52:19,200 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 21:52:19,200 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,200 - DEBUG - on stmt: eta = index_frac.1 - offset.1
2025-05-02 21:52:19,200 - DEBUG - replaced with: eta.1 = index_frac.1 - offset.1
2025-05-02 21:52:19,200 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,200 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:52:19,200 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,200 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,200 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,200 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,200 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,200 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,200 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,200 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,202 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,202 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,202 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,202 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:52:19,202 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,202 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:52:19,202 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,202 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,202 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,202 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,202 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,202 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,202 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,202 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,202 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,202 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:52:19,202 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:52:19,202 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 21:52:19,202 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,202 - DEBUG - on stmt: eta = index_frac.2 - offset.2
2025-05-02 21:52:19,202 - DEBUG - replaced with: eta.2 = index_frac.2 - offset.2
2025-05-02 21:52:19,202 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,202 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,202 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:52:19,202 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,202 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,202 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,202 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,202 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,202 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,202 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,202 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,202 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,202 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,202 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,202 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:52:19,202 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,202 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:52:19,202 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,202 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,202 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,204 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,204 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,204 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,204 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,204 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,204 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,204 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,204 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,204 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,204 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,204 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,204 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002D34E82C2E0>],
             84: [<numba.core.ir.Assign object at 0x000002D34E82FE50>],
             238: [<numba.core.ir.Assign object at 0x000002D34E824DC0>]})
2025-05-02 21:52:19,204 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,204 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,204 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,204 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,204 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,204 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,204 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,204 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,204 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,204 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,204 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,204 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,204 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,204 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,204 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,206 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,206 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,206 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,206 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,206 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,206 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,206 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:52:19,206 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 21:52:19,206 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,206 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,206 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 21:52:19,206 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,206 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:52:19,206 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,206 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,206 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,206 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,206 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,206 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,206 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,206 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,206 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,206 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,206 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,206 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:52:19,206 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,206 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:52:19,206 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,206 - DEBUG - find_def var='eta' stmt=$202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,207 - DEBUG - find_def_from_top label 170
2025-05-02 21:52:19,207 - DEBUG - idom 168 from label 170
2025-05-02 21:52:19,207 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:52:19,207 - DEBUG - find_def_from_top label 168
2025-05-02 21:52:19,207 - DEBUG - idom 84 from label 168
2025-05-02 21:52:19,207 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:52:19,207 - DEBUG - replaced with: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:52:19,207 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,207 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,207 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,207 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,207 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,207 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,207 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,207 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,207 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,207 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,207 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:52:19,207 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:52:19,207 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 21:52:19,207 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,207 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,207 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 21:52:19,207 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,207 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,207 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,207 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,207 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:52:19,209 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,209 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,209 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,209 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,209 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,209 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,209 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,209 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,209 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,209 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,209 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,209 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:52:19,209 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,209 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:52:19,209 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,209 - DEBUG - find_def var='eta' stmt=$338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,209 - DEBUG - find_def_from_top label 306
2025-05-02 21:52:19,209 - DEBUG - idom 304 from label 306
2025-05-02 21:52:19,210 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:52:19,210 - DEBUG - find_def_from_top label 304
2025-05-02 21:52:19,210 - DEBUG - idom 238 from label 304
2025-05-02 21:52:19,210 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:52:19,210 - DEBUG - replaced with: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:52:19,210 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,210 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,210 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,210 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,210 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,210 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,210 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,210 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,210 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,210 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,210 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,210 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,210 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,210 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,210 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,210 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,210 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,210 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:37,397 - DEBUG - Audio loaded: shape=(2, 7694568), sample_rate=44100
2025-05-02 21:52:37,397 - DEBUG - Demixing audio: samples=7694568, margin=76800, chunk_size=11025000
2025-05-02 21:52:37,413 - DEBUG - Created 1 chunks for demixing
  0%|          | 0/1 [00:00<?, ?it/s]Processing:   0%|          | 0/1 [00:00<?, ?it/s]2025-05-02 21:52:37,494 - DEBUG - Processing chunk: 31 waves
Processing: 100%|##########| 1/1 [08:19<00:00, 499.17s/it]Processing: 100%|##########| 1/1 [08:19<00:00, 499.38s/it]
2025-05-02 22:00:56,857 - DEBUG - Demixing complete
2025-05-02 22:00:58,374 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song2_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song2_no_vocals.wav

2025-05-02 22:01:02 - ERROR - Failed to generate stem: 2025-05-02 21:52:18,417 - DEBUG - Logging initialized
2025-05-02 21:52:18,417 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song2.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR-MDX-NET-Inst_Main.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 76800, 'chunks': 250, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 21:52:18,417 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 21:52:18,417 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song2.flac
2025-05-02 21:52:18,417 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 21:52:18,417 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song2.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR-MDX-NET-Inst_Main.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 76800, 'chunks': 250, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 21:52:18,417 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\UVR-MDX-NET-Inst_Main.onnx
2025-05-02 21:52:18,560 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song2.flac
2025-05-02 21:52:19,018 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=86)
           2	LOAD_GLOBAL(arg=0, lineno=86)
           4	LOAD_FAST(arg=0, lineno=86)
           6	LOAD_FAST(arg=1, lineno=86)
           8	LOAD_FAST(arg=2, lineno=86)
          10	LOAD_FAST(arg=3, lineno=86)
          12	LOAD_FAST(arg=4, lineno=86)
          14	LOAD_FAST(arg=5, lineno=86)
          16	LOAD_FAST(arg=6, lineno=86)
          18	CALL_FUNCTION(arg=7, lineno=86)
          20	POP_TOP(arg=None, lineno=86)
          22	LOAD_CONST(arg=0, lineno=86)
          24	RETURN_VALUE(arg=None, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-02 21:52:19,018 - DEBUG - stack: []
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack []
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack []
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=4, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=5, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=6, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=18, inst=CALL_FUNCTION(arg=7, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6', '$y16.7']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=20, inst=POP_TOP(arg=None, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$18call_function.8']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=0, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack []
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$const22.9']
2025-05-02 21:52:19,018 - DEBUG - end state. edges=[]
2025-05-02 21:52:19,018 - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-02 21:52:19,018 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-02 21:52:19,018 - DEBUG - defmap: {}
2025-05-02 21:52:19,018 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-02 21:52:19,018 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-02 21:52:19,018 - DEBUG - keep phismap: {}
2025-05-02 21:52:19,018 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-02 21:52:19,018 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-02 21:52:19,018 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'res': '$t_out6.2'}), (8, {'res': '$interp_win8.3'}), (10, {'res': '$interp_delta10.4'}), (12, {'res': '$num_table12.5'}), (14, {'res': '$scale14.6'}), (16, {'res': '$y16.7'}), (18, {'func': '$2load_global.0', 'args': ['$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6', '$y16.7'], 'res': '$18call_function.8'}), (22, {'res': '$const22.9'}), (24, {'retval': '$const22.9', 'castval': '$24return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-02 21:52:19,081 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    t_out = arg(1, name=t_out)               ['t_out']
    interp_win = arg(2, name=interp_win)     ['interp_win']
    interp_delta = arg(3, name=interp_delta) ['interp_delta']
    num_table = arg(4, name=num_table)       ['num_table']
    scale = arg(5, name=scale)               ['scale']
    y = arg(6, name=y)                       ['y']
    $2load_global.0 = global(_resample_loop_s: CPUDispatcher(<function _resample_loop at 0x000002D3494E8CA0>)) ['$2load_global.0']
    $18call_function.8 = call $2load_global.0(x, t_out, interp_win, interp_delta, num_table, scale, y, func=$2load_global.0, args=[Var(x, interpn.py:86), Var(t_out, interpn.py:86), Var(interp_win, interpn.py:86), Var(interp_delta, interpn.py:86), Var(num_table, interpn.py:86), Var(scale, interpn.py:86), Var(y, interpn.py:86)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call_function.8', '$2load_global.0', 'interp_delta', 'interp_win', 'num_table', 'scale', 't_out', 'x', 'y']
    $const22.9 = const(NoneType, None)       ['$const22.9']
    $24return_value.10 = cast(value=$const22.9) ['$24return_value.10', '$const22.9']
    return $24return_value.10                ['$24return_value.10']

2025-05-02 21:52:19,081 - DEBUG - ==== SSA block analysis pass on 0
2025-05-02 21:52:19,081 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E778A00>
2025-05-02 21:52:19,081 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,081 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,081 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,081 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,081 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,081 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,081 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,081 - DEBUG - on stmt: $2load_global.0 = global(_resample_loop_s: CPUDispatcher(<function _resample_loop at 0x000002D3494E8CA0>))
2025-05-02 21:52:19,081 - DEBUG - on stmt: $18call_function.8 = call $2load_global.0(x, t_out, interp_win, interp_delta, num_table, scale, y, func=$2load_global.0, args=[Var(x, interpn.py:86), Var(t_out, interpn.py:86), Var(interp_win, interpn.py:86), Var(interp_delta, interpn.py:86), Var(num_table, interpn.py:86), Var(scale, interpn.py:86), Var(y, interpn.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,081 - DEBUG - on stmt: $const22.9 = const(NoneType, None)
2025-05-02 21:52:19,081 - DEBUG - on stmt: $24return_value.10 = cast(value=$const22.9)
2025-05-02 21:52:19,081 - DEBUG - on stmt: return $24return_value.10
2025-05-02 21:52:19,081 - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call_function.8': [<numba.core.ir.Assign object at 0x000002D34E791D90>],
             '$24return_value.10': [<numba.core.ir.Assign object at 0x000002D34E7788B0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000002D34E7913D0>],
             '$const22.9': [<numba.core.ir.Assign object at 0x000002D34E778130>],
             'interp_delta': [<numba.core.ir.Assign object at 0x000002D34E778EB0>],
             'interp_win': [<numba.core.ir.Assign object at 0x000002D34E778D90>],
             'num_table': [<numba.core.ir.Assign object at 0x000002D34E778FD0>],
             'scale': [<numba.core.ir.Assign object at 0x000002D34E791130>],
             't_out': [<numba.core.ir.Assign object at 0x000002D34E778C70>],
             'x': [<numba.core.ir.Assign object at 0x000002D34E7781F0>],
             'y': [<numba.core.ir.Assign object at 0x000002D34E791250>]})
2025-05-02 21:52:19,081 - DEBUG - SSA violators set()
2025-05-02 21:52:19,097 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=9)
           2	LOAD_GLOBAL(arg=0, lineno=9)
           4	LOAD_FAST(arg=5, lineno=9)
           6	LOAD_FAST(arg=4, lineno=9)
           8	BINARY_MULTIPLY(arg=None, lineno=9)
          10	CALL_FUNCTION(arg=1, lineno=9)
          12	STORE_FAST(arg=7, lineno=9)
          14	LOAD_CONST(arg=1, lineno=10)
          16	STORE_FAST(arg=8, lineno=10)
          18	LOAD_CONST(arg=2, lineno=12)
          20	STORE_FAST(arg=9, lineno=12)
          22	LOAD_CONST(arg=1, lineno=13)
          24	STORE_FAST(arg=10, lineno=13)
          26	LOAD_CONST(arg=1, lineno=14)
          28	STORE_FAST(arg=11, lineno=14)
          30	LOAD_CONST(arg=2, lineno=15)
          32	STORE_FAST(arg=12, lineno=15)
          34	LOAD_CONST(arg=1, lineno=16)
          36	STORE_FAST(arg=13, lineno=16)
          38	LOAD_CONST(arg=1, lineno=17)
          40	STORE_FAST(arg=14, lineno=17)
          42	LOAD_FAST(arg=2, lineno=19)
          44	LOAD_ATTR(arg=1, lineno=19)
          46	LOAD_CONST(arg=2, lineno=19)
          48	BINARY_SUBSCR(arg=None, lineno=19)
          50	STORE_FAST(arg=15, lineno=19)
          52	LOAD_FAST(arg=0, lineno=20)
          54	LOAD_ATTR(arg=1, lineno=20)
          56	LOAD_CONST(arg=2, lineno=20)
          58	BINARY_SUBSCR(arg=None, lineno=20)
          60	STORE_FAST(arg=16, lineno=20)
          62	LOAD_FAST(arg=1, lineno=21)
          64	LOAD_ATTR(arg=1, lineno=21)
          66	LOAD_CONST(arg=2, lineno=21)
          68	BINARY_SUBSCR(arg=None, lineno=21)
          70	STORE_FAST(arg=17, lineno=21)
          72	LOAD_GLOBAL(arg=2, lineno=23)
          74	LOAD_FAST(arg=17, lineno=23)
          76	CALL_FUNCTION(arg=1, lineno=23)
          78	GET_ITER(arg=None, lineno=23)
>         80	FOR_ITER(arg=298, lineno=23)
          84	STORE_FAST(arg=18, lineno=23)
          86	LOAD_FAST(arg=1, lineno=24)
          88	LOAD_FAST(arg=18, lineno=24)
          90	BINARY_SUBSCR(arg=None, lineno=24)
          92	STORE_FAST(arg=8, lineno=24)
          94	LOAD_GLOBAL(arg=0, lineno=27)
          96	LOAD_FAST(arg=8, lineno=27)
          98	CALL_FUNCTION(arg=1, lineno=27)
         100	STORE_FAST(arg=9, lineno=27)
         102	LOAD_FAST(arg=5, lineno=30)
         104	LOAD_FAST(arg=8, lineno=30)
         106	LOAD_FAST(arg=9, lineno=30)
         108	BINARY_SUBTRACT(arg=None, lineno=30)
         110	BINARY_MULTIPLY(arg=None, lineno=30)
         112	STORE_FAST(arg=10, lineno=30)
         114	LOAD_FAST(arg=10, lineno=33)
         116	LOAD_FAST(arg=4, lineno=33)
         118	BINARY_MULTIPLY(arg=None, lineno=33)
         120	STORE_FAST(arg=11, lineno=33)
         122	LOAD_GLOBAL(arg=0, lineno=34)
         124	LOAD_FAST(arg=11, lineno=34)
         126	CALL_FUNCTION(arg=1, lineno=34)
         128	STORE_FAST(arg=12, lineno=34)
         130	LOAD_FAST(arg=11, lineno=37)
         132	LOAD_FAST(arg=12, lineno=37)
         134	BINARY_SUBTRACT(arg=None, lineno=37)
         136	STORE_FAST(arg=13, lineno=37)
         138	LOAD_GLOBAL(arg=3, lineno=40)
         140	LOAD_FAST(arg=9, lineno=40)
         142	LOAD_CONST(arg=3, lineno=40)
         144	BINARY_ADD(arg=None, lineno=40)
         146	LOAD_FAST(arg=15, lineno=40)
         148	LOAD_FAST(arg=12, lineno=40)
         150	BINARY_SUBTRACT(arg=None, lineno=40)
         152	LOAD_FAST(arg=7, lineno=40)
         154	BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
         156	CALL_FUNCTION(arg=2, lineno=40)
         158	STORE_FAST(arg=19, lineno=40)
         160	LOAD_GLOBAL(arg=4, lineno=41)
         162	LOAD_FAST(arg=19, lineno=41)
         164	CALL_FUNCTION(arg=1, lineno=41)
         166	GET_ITER(arg=None, lineno=41)
>        168	FOR_ITER(arg=68, lineno=41)
         170	STORE_FAST(arg=20, lineno=41)
         172	LOAD_FAST(arg=2, lineno=44)
         174	LOAD_FAST(arg=12, lineno=44)
         176	LOAD_FAST(arg=20, lineno=44)
         178	LOAD_FAST(arg=7, lineno=44)
         180	BINARY_MULTIPLY(arg=None, lineno=44)
         182	BINARY_ADD(arg=None, lineno=44)
         184	BINARY_SUBSCR(arg=None, lineno=44)
         186	LOAD_FAST(arg=13, lineno=45)
         188	LOAD_FAST(arg=3, lineno=45)
         190	LOAD_FAST(arg=12, lineno=45)
         192	LOAD_FAST(arg=20, lineno=45)
         194	LOAD_FAST(arg=7, lineno=45)
         196	BINARY_MULTIPLY(arg=None, lineno=45)
         198	BINARY_ADD(arg=None, lineno=45)
         200	BINARY_SUBSCR(arg=None, lineno=45)
         202	BINARY_MULTIPLY(arg=None, lineno=45)
         204	BINARY_ADD(arg=None, lineno=44)
         206	STORE_FAST(arg=14, lineno=43)
         208	LOAD_FAST(arg=6, lineno=47)
         210	LOAD_FAST(arg=18, lineno=47)
         212	DUP_TOP_TWO(arg=None, lineno=47)
         214	BINARY_SUBSCR(arg=None, lineno=47)
         216	LOAD_FAST(arg=14, lineno=47)
         218	LOAD_FAST(arg=0, lineno=47)
         220	LOAD_FAST(arg=9, lineno=47)
         222	LOAD_FAST(arg=20, lineno=47)
         224	BINARY_SUBTRACT(arg=None, lineno=47)
         226	BINARY_SUBSCR(arg=None, lineno=47)
         228	BINARY_MULTIPLY(arg=None, lineno=47)
         230	INPLACE_ADD(arg=None, lineno=47)
         232	ROT_THREE(arg=None, lineno=47)
         234	STORE_SUBSCR(arg=None, lineno=47)
         236	JUMP_ABSOLUTE(arg=168, lineno=47)
>        238	LOAD_FAST(arg=5, lineno=50)
         240	LOAD_FAST(arg=10, lineno=50)
         242	BINARY_SUBTRACT(arg=None, lineno=50)
         244	STORE_FAST(arg=10, lineno=50)
         246	LOAD_FAST(arg=10, lineno=53)
         248	LOAD_FAST(arg=4, lineno=53)
         250	BINARY_MULTIPLY(arg=None, lineno=53)
         252	STORE_FAST(arg=11, lineno=53)
         254	LOAD_GLOBAL(arg=0, lineno=54)
         256	LOAD_FAST(arg=11, lineno=54)
         258	CALL_FUNCTION(arg=1, lineno=54)
         260	STORE_FAST(arg=12, lineno=54)
         262	LOAD_FAST(arg=11, lineno=57)
         264	LOAD_FAST(arg=12, lineno=57)
         266	BINARY_SUBTRACT(arg=None, lineno=57)
         268	STORE_FAST(arg=13, lineno=57)
         270	LOAD_GLOBAL(arg=3, lineno=60)
         272	LOAD_FAST(arg=16, lineno=60)
         274	LOAD_FAST(arg=9, lineno=60)
         276	BINARY_SUBTRACT(arg=None, lineno=60)
         278	LOAD_CONST(arg=3, lineno=60)
         280	BINARY_SUBTRACT(arg=None, lineno=60)
         282	LOAD_FAST(arg=15, lineno=60)
         284	LOAD_FAST(arg=12, lineno=60)
         286	BINARY_SUBTRACT(arg=None, lineno=60)
         288	LOAD_FAST(arg=7, lineno=60)
         290	BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
         292	CALL_FUNCTION(arg=2, lineno=60)
         294	STORE_FAST(arg=21, lineno=60)
         296	LOAD_GLOBAL(arg=4, lineno=61)
         298	LOAD_FAST(arg=21, lineno=61)
         300	CALL_FUNCTION(arg=1, lineno=61)
         302	GET_ITER(arg=None, lineno=61)
>        304	FOR_ITER(arg=74, lineno=61)
         306	STORE_FAST(arg=22, lineno=61)
         308	LOAD_FAST(arg=2, lineno=63)
         310	LOAD_FAST(arg=12, lineno=63)
         312	LOAD_FAST(arg=22, lineno=63)
         314	LOAD_FAST(arg=7, lineno=63)
         316	BINARY_MULTIPLY(arg=None, lineno=63)
         318	BINARY_ADD(arg=None, lineno=63)
         320	BINARY_SUBSCR(arg=None, lineno=63)
         322	LOAD_FAST(arg=13, lineno=64)
         324	LOAD_FAST(arg=3, lineno=64)
         326	LOAD_FAST(arg=12, lineno=64)
         328	LOAD_FAST(arg=22, lineno=64)
         330	LOAD_FAST(arg=7, lineno=64)
         332	BINARY_MULTIPLY(arg=None, lineno=64)
         334	BINARY_ADD(arg=None, lineno=64)
         336	BINARY_SUBSCR(arg=None, lineno=64)
         338	BINARY_MULTIPLY(arg=None, lineno=64)
         340	BINARY_ADD(arg=None, lineno=63)
         342	STORE_FAST(arg=14, lineno=62)
         344	LOAD_FAST(arg=6, lineno=66)
         346	LOAD_FAST(arg=18, lineno=66)
         348	DUP_TOP_TWO(arg=None, lineno=66)
         350	BINARY_SUBSCR(arg=None, lineno=66)
         352	LOAD_FAST(arg=14, lineno=66)
         354	LOAD_FAST(arg=0, lineno=66)
         356	LOAD_FAST(arg=9, lineno=66)
         358	LOAD_FAST(arg=22, lineno=66)
         360	BINARY_ADD(arg=None, lineno=66)
         362	LOAD_CONST(arg=3, lineno=66)
         364	BINARY_ADD(arg=None, lineno=66)
         366	BINARY_SUBSCR(arg=None, lineno=66)
         368	BINARY_MULTIPLY(arg=None, lineno=66)
         370	INPLACE_ADD(arg=None, lineno=66)
         372	ROT_THREE(arg=None, lineno=66)
         374	STORE_SUBSCR(arg=None, lineno=66)
         376	JUMP_ABSOLUTE(arg=304, lineno=66)
>        380	JUMP_ABSOLUTE(arg=80, lineno=66)
>        382	LOAD_CONST(arg=0, lineno=66)
         384	RETURN_VALUE(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-02 21:52:19,097 - DEBUG - stack: []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=9)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=9)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=5, lineno=9)
2025-05-02 21:52:19,097 - DEBUG - stack ['$2load_global.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=4, lineno=9)
2025-05-02 21:52:19,097 - DEBUG - stack ['$2load_global.0', '$scale4.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=9)
2025-05-02 21:52:19,097 - DEBUG - stack ['$2load_global.0', '$scale4.1', '$num_table6.2']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=9)
2025-05-02 21:52:19,097 - DEBUG - stack ['$2load_global.0', '$8binary_multiply.3']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=12, inst=STORE_FAST(arg=7, lineno=9)
2025-05-02 21:52:19,097 - DEBUG - stack ['$10call_function.4']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=10)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=8, lineno=10)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const14.5']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=12)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=20, inst=STORE_FAST(arg=9, lineno=12)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const18.6']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=13)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=24, inst=STORE_FAST(arg=10, lineno=13)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const22.7']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=26, inst=LOAD_CONST(arg=1, lineno=14)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=28, inst=STORE_FAST(arg=11, lineno=14)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const26.8']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=15)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=32, inst=STORE_FAST(arg=12, lineno=15)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const30.9']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=16)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=36, inst=STORE_FAST(arg=13, lineno=16)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const34.10']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=17)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=40, inst=STORE_FAST(arg=14, lineno=17)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const38.11']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=42, inst=LOAD_FAST(arg=2, lineno=19)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=44, inst=LOAD_ATTR(arg=1, lineno=19)
2025-05-02 21:52:19,097 - DEBUG - stack ['$interp_win42.12']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=46, inst=LOAD_CONST(arg=2, lineno=19)
2025-05-02 21:52:19,097 - DEBUG - stack ['$44load_attr.13']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=19)
2025-05-02 21:52:19,097 - DEBUG - stack ['$44load_attr.13', '$const46.14']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=50, inst=STORE_FAST(arg=15, lineno=19)
2025-05-02 21:52:19,097 - DEBUG - stack ['$48binary_subscr.15']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=20)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=54, inst=LOAD_ATTR(arg=1, lineno=20)
2025-05-02 21:52:19,097 - DEBUG - stack ['$x52.16']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=56, inst=LOAD_CONST(arg=2, lineno=20)
2025-05-02 21:52:19,097 - DEBUG - stack ['$54load_attr.17']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=20)
2025-05-02 21:52:19,097 - DEBUG - stack ['$54load_attr.17', '$const56.18']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=60, inst=STORE_FAST(arg=16, lineno=20)
2025-05-02 21:52:19,097 - DEBUG - stack ['$58binary_subscr.19']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=21)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=64, inst=LOAD_ATTR(arg=1, lineno=21)
2025-05-02 21:52:19,097 - DEBUG - stack ['$t_out62.20']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=21)
2025-05-02 21:52:19,097 - DEBUG - stack ['$64load_attr.21']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=21)
2025-05-02 21:52:19,097 - DEBUG - stack ['$64load_attr.21', '$const66.22']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=70, inst=STORE_FAST(arg=17, lineno=21)
2025-05-02 21:52:19,097 - DEBUG - stack ['$68binary_subscr.23']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=72, inst=LOAD_GLOBAL(arg=2, lineno=23)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=17, lineno=23)
2025-05-02 21:52:19,097 - DEBUG - stack ['$72load_global.24']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=23)
2025-05-02 21:52:19,097 - DEBUG - stack ['$72load_global.24', '$n_out74.25']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=23)
2025-05-02 21:52:19,097 - DEBUG - stack ['$76call_function.26']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.27',), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi80.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=298, lineno=23)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi80.0']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=382, stack=(), blockstack=(), npush=0), Edge(pc=84, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=382 nstack_initial=0), State(pc_initial=84 nstack_initial=2)])
2025-05-02 21:52:19,097 - DEBUG - stack: []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=382, inst=LOAD_CONST(arg=0, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=384, inst=RETURN_VALUE(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const382.0']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=84 nstack_initial=2)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi84.0', '$phi84.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=84, inst=STORE_FAST(arg=18, lineno=23)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$phi84.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=24)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=88, inst=LOAD_FAST(arg=18, lineno=24)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$t_out86.2']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=24)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$t_out86.2', '$t88.3']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=92, inst=STORE_FAST(arg=8, lineno=24)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$90binary_subscr.4']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=94, inst=LOAD_GLOBAL(arg=0, lineno=27)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=96, inst=LOAD_FAST(arg=8, lineno=27)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$94load_global.5']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=98, inst=CALL_FUNCTION(arg=1, lineno=27)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$94load_global.5', '$time_register96.6']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=100, inst=STORE_FAST(arg=9, lineno=27)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$98call_function.7']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=102, inst=LOAD_FAST(arg=5, lineno=30)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=104, inst=LOAD_FAST(arg=8, lineno=30)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$scale102.8']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=9, lineno=30)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$scale102.8', '$time_register104.9']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=30)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$scale102.8', '$time_register104.9', '$n106.10']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=110, inst=BINARY_MULTIPLY(arg=None, lineno=30)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$scale102.8', '$108binary_subtract.11']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=112, inst=STORE_FAST(arg=10, lineno=30)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$110binary_multiply.12']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=10, lineno=33)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=4, lineno=33)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$frac114.13']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=118, inst=BINARY_MULTIPLY(arg=None, lineno=33)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$frac114.13', '$num_table116.14']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=120, inst=STORE_FAST(arg=11, lineno=33)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$118binary_multiply.15']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=122, inst=LOAD_GLOBAL(arg=0, lineno=34)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=124, inst=LOAD_FAST(arg=11, lineno=34)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$122load_global.16']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=126, inst=CALL_FUNCTION(arg=1, lineno=34)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$122load_global.16', '$index_frac124.17']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=128, inst=STORE_FAST(arg=12, lineno=34)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$126call_function.18']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=130, inst=LOAD_FAST(arg=11, lineno=37)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=12, lineno=37)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$index_frac130.19']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=134, inst=BINARY_SUBTRACT(arg=None, lineno=37)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$index_frac130.19', '$offset132.20']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=136, inst=STORE_FAST(arg=13, lineno=37)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$134binary_subtract.21']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=138, inst=LOAD_GLOBAL(arg=3, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=140, inst=LOAD_FAST(arg=9, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=142, inst=LOAD_CONST(arg=3, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$n140.23']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=144, inst=BINARY_ADD(arg=None, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$n140.23', '$const142.24']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=146, inst=LOAD_FAST(arg=15, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=148, inst=LOAD_FAST(arg=12, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$nwin146.26']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=150, inst=BINARY_SUBTRACT(arg=None, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$nwin146.26', '$offset148.27']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=7, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$150binary_subtract.28']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=154, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$150binary_subtract.28', '$index_step152.29']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=156, inst=CALL_FUNCTION(arg=2, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$154binary_floor_divide.30']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=158, inst=STORE_FAST(arg=19, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$156call_function.31']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=160, inst=LOAD_GLOBAL(arg=4, lineno=41)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=162, inst=LOAD_FAST(arg=19, lineno=41)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$160load_global.32']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=41)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$160load_global.32', '$i_max162.33']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=166, inst=GET_ITER(arg=None, lineno=41)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$164call_function.34']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=168, stack=('$phi84.0', '$166get_iter.35'), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=2)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi168.0', '$phi168.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=168, inst=FOR_ITER(arg=68, lineno=41)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi168.0', '$phi168.1']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=238, stack=('$phi168.0',), blockstack=(), npush=0), Edge(pc=170, stack=('$phi168.0', '$phi168.1', '$168for_iter.3'), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=238 nstack_initial=1), State(pc_initial=170 nstack_initial=3)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi238.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=238, inst=LOAD_FAST(arg=5, lineno=50)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=10, lineno=50)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$scale238.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=242, inst=BINARY_SUBTRACT(arg=None, lineno=50)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$scale238.1', '$frac240.2']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=244, inst=STORE_FAST(arg=10, lineno=50)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$242binary_subtract.3']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=10, lineno=53)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=248, inst=LOAD_FAST(arg=4, lineno=53)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$frac246.4']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=250, inst=BINARY_MULTIPLY(arg=None, lineno=53)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$frac246.4', '$num_table248.5']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=252, inst=STORE_FAST(arg=11, lineno=53)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$250binary_multiply.6']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=254, inst=LOAD_GLOBAL(arg=0, lineno=54)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=11, lineno=54)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$254load_global.7']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=258, inst=CALL_FUNCTION(arg=1, lineno=54)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$254load_global.7', '$index_frac256.8']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=260, inst=STORE_FAST(arg=12, lineno=54)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$258call_function.9']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=262, inst=LOAD_FAST(arg=11, lineno=57)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=264, inst=LOAD_FAST(arg=12, lineno=57)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$index_frac262.10']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=266, inst=BINARY_SUBTRACT(arg=None, lineno=57)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$index_frac262.10', '$offset264.11']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=268, inst=STORE_FAST(arg=13, lineno=57)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$266binary_subtract.12']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=270, inst=LOAD_GLOBAL(arg=3, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=272, inst=LOAD_FAST(arg=16, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=274, inst=LOAD_FAST(arg=9, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$n_orig272.14']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=276, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$n_orig272.14', '$n274.15']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=278, inst=LOAD_CONST(arg=3, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$276binary_subtract.16']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=280, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$276binary_subtract.16', '$const278.17']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=282, inst=LOAD_FAST(arg=15, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=284, inst=LOAD_FAST(arg=12, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$nwin282.19']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=286, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$nwin282.19', '$offset284.20']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=288, inst=LOAD_FAST(arg=7, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$286binary_subtract.21']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=290, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$286binary_subtract.21', '$index_step288.22']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=292, inst=CALL_FUNCTION(arg=2, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$290binary_floor_divide.23']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=294, inst=STORE_FAST(arg=21, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$292call_function.24']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=296, inst=LOAD_GLOBAL(arg=4, lineno=61)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=298, inst=LOAD_FAST(arg=21, lineno=61)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$296load_global.25']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=300, inst=CALL_FUNCTION(arg=1, lineno=61)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$296load_global.25', '$k_max298.26']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=302, inst=GET_ITER(arg=None, lineno=61)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$300call_function.27']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=304, stack=('$phi238.0', '$302get_iter.28'), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=170 nstack_initial=3), State(pc_initial=304 nstack_initial=2)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi170.0', '$phi170.1', '$phi170.2']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=170, inst=STORE_FAST(arg=20, lineno=41)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$phi170.2']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=172, inst=LOAD_FAST(arg=2, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=12, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=176, inst=LOAD_FAST(arg=20, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=178, inst=LOAD_FAST(arg=7, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$i176.5']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$i176.5', '$index_step178.6']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$180binary_multiply.7']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$182binary_add.8']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=186, inst=LOAD_FAST(arg=13, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=188, inst=LOAD_FAST(arg=3, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=12, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=192, inst=LOAD_FAST(arg=20, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$i192.13']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=196, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$i192.13', '$index_step194.14']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=198, inst=BINARY_ADD(arg=None, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$196binary_multiply.15']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=200, inst=BINARY_SUBSCR(arg=None, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$198binary_add.16']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=202, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$200binary_subscr.17']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=204, inst=BINARY_ADD(arg=None, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$202binary_multiply.18']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=206, inst=STORE_FAST(arg=14, lineno=43)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$204binary_add.19']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=208, inst=LOAD_FAST(arg=6, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=210, inst=LOAD_FAST(arg=18, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=212, inst=DUP_TOP_TWO(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=214, inst=BINARY_SUBSCR(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$212dup_top_two.22', '$212dup_top_two.23']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=216, inst=LOAD_FAST(arg=14, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=220, inst=LOAD_FAST(arg=9, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=222, inst=LOAD_FAST(arg=20, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$n220.27']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=224, inst=BINARY_SUBTRACT(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$n220.27', '$i222.28']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=226, inst=BINARY_SUBSCR(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$224binary_subtract.29']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=228, inst=BINARY_MULTIPLY(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$226binary_subscr.30']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=230, inst=INPLACE_ADD(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$228binary_multiply.31']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=232, inst=ROT_THREE(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$230inplace_add.32']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=234, inst=STORE_SUBSCR(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$230inplace_add.32', '$y208.20', '$t210.21']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=236, inst=JUMP_ABSOLUTE(arg=168, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=168, stack=('$phi170.0', '$phi170.1'), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=304 nstack_initial=2), State(pc_initial=168 nstack_initial=2)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi304.0', '$phi304.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=304, inst=FOR_ITER(arg=74, lineno=61)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi304.0', '$phi304.1']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=380, stack=('$phi304.0',), blockstack=(), npush=0), Edge(pc=306, stack=('$phi304.0', '$phi304.1', '$304for_iter.3'), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=2), State(pc_initial=380 nstack_initial=1), State(pc_initial=306 nstack_initial=3)])
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=380 nstack_initial=1), State(pc_initial=306 nstack_initial=3)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi380.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=380, inst=JUMP_ABSOLUTE(arg=80, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi380.0']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi380.0',), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=306 nstack_initial=3), State(pc_initial=80 nstack_initial=1)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi306.0', '$phi306.1', '$phi306.2']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=306, inst=STORE_FAST(arg=22, lineno=61)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$phi306.2']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=308, inst=LOAD_FAST(arg=2, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=310, inst=LOAD_FAST(arg=12, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=312, inst=LOAD_FAST(arg=22, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=314, inst=LOAD_FAST(arg=7, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$k312.5']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=316, inst=BINARY_MULTIPLY(arg=None, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$k312.5', '$index_step314.6']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=318, inst=BINARY_ADD(arg=None, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$316binary_multiply.7']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=320, inst=BINARY_SUBSCR(arg=None, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$318binary_add.8']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=322, inst=LOAD_FAST(arg=13, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=324, inst=LOAD_FAST(arg=3, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=326, inst=LOAD_FAST(arg=12, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=328, inst=LOAD_FAST(arg=22, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=330, inst=LOAD_FAST(arg=7, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$k328.13']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=332, inst=BINARY_MULTIPLY(arg=None, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$k328.13', '$index_step330.14']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=334, inst=BINARY_ADD(arg=None, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$332binary_multiply.15']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=336, inst=BINARY_SUBSCR(arg=None, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$334binary_add.16']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=338, inst=BINARY_MULTIPLY(arg=None, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$336binary_subscr.17']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=340, inst=BINARY_ADD(arg=None, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$338binary_multiply.18']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=342, inst=STORE_FAST(arg=14, lineno=62)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$340binary_add.19']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=344, inst=LOAD_FAST(arg=6, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=346, inst=LOAD_FAST(arg=18, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=348, inst=DUP_TOP_TWO(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=350, inst=BINARY_SUBSCR(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$348dup_top_two.22', '$348dup_top_two.23']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=352, inst=LOAD_FAST(arg=14, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=354, inst=LOAD_FAST(arg=0, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=356, inst=LOAD_FAST(arg=9, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=358, inst=LOAD_FAST(arg=22, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$n356.27']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=360, inst=BINARY_ADD(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$n356.27', '$k358.28']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=362, inst=LOAD_CONST(arg=3, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$360binary_add.29']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=364, inst=BINARY_ADD(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$360binary_add.29', '$const362.30']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=366, inst=BINARY_SUBSCR(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$364binary_add.31']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=368, inst=BINARY_MULTIPLY(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$366binary_subscr.32']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=370, inst=INPLACE_ADD(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$368binary_multiply.33']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=372, inst=ROT_THREE(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$370inplace_add.34']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=374, inst=STORE_SUBSCR(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$370inplace_add.34', '$y344.20', '$t346.21']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=376, inst=JUMP_ABSOLUTE(arg=304, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=304, stack=('$phi306.0', '$phi306.1'), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=304 nstack_initial=2)])
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=304 nstack_initial=2)])
2025-05-02 21:52:19,097 - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-02 21:52:19,097 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=84 nstack_initial=2): {'$phi84.1'},
             State(pc_initial=168 nstack_initial=2): {'$phi168.1'},
             State(pc_initial=170 nstack_initial=3): {'$phi170.2'},
             State(pc_initial=238 nstack_initial=1): set(),
             State(pc_initial=304 nstack_initial=2): {'$phi304.1'},
             State(pc_initial=306 nstack_initial=3): {'$phi306.2'},
             State(pc_initial=380 nstack_initial=1): set(),
             State(pc_initial=382 nstack_initial=0): set()})
2025-05-02 21:52:19,113 - DEBUG - defmap: {'$phi168.1': State(pc_initial=84 nstack_initial=2),
 '$phi170.2': State(pc_initial=168 nstack_initial=2),
 '$phi304.1': State(pc_initial=238 nstack_initial=1),
 '$phi306.2': State(pc_initial=304 nstack_initial=2),
 '$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi84.1': State(pc_initial=80 nstack_initial=1)}
2025-05-02 21:52:19,113 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi170.0',
                            State(pc_initial=170 nstack_initial=3)),
                           ('$phi84.0', State(pc_initial=84 nstack_initial=2))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2)),
                           ('$phi170.1',
                            State(pc_initial=170 nstack_initial=3))},
             '$phi170.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.1': {('$phi168.1',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi304.0': {('$phi238.0',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi306.0',
                            State(pc_initial=306 nstack_initial=3))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi306.1',
                            State(pc_initial=306 nstack_initial=3))},
             '$phi306.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.1': {('$phi304.1',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi380.0',
                           State(pc_initial=380 nstack_initial=1))},
             '$phi84.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:52:19,113 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2)),
                           ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2)),
                           ('$phi168.1',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi304.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2)),
                           ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi304.1',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:52:19,113 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:52:19,113 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:52:19,113 - DEBUG - keep phismap: {'$phi168.1': {('$166get_iter.35', State(pc_initial=84 nstack_initial=2))},
 '$phi170.2': {('$168for_iter.3', State(pc_initial=168 nstack_initial=2))},
 '$phi304.1': {('$302get_iter.28', State(pc_initial=238 nstack_initial=1))},
 '$phi306.2': {('$304for_iter.3', State(pc_initial=304 nstack_initial=2))},
 '$phi80.0': {('$78get_iter.27', State(pc_initial=0 nstack_initial=0))},
 '$phi84.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-05-02 21:52:19,113 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.27'},
             State(pc_initial=80 nstack_initial=1): {'$phi84.1': '$80for_iter.2'},
             State(pc_initial=84 nstack_initial=2): {'$phi168.1': '$166get_iter.35'},
             State(pc_initial=168 nstack_initial=2): {'$phi170.2': '$168for_iter.3'},
             State(pc_initial=238 nstack_initial=1): {'$phi304.1': '$302get_iter.28'},
             State(pc_initial=304 nstack_initial=2): {'$phi306.2': '$304for_iter.3'}})
2025-05-02 21:52:19,113 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-02 21:52:19,113 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$scale4.1'}), (6, {'res': '$num_table6.2'}), (8, {'lhs': '$scale4.1', 'rhs': '$num_table6.2', 'res': '$8binary_multiply.3'}), (10, {'func': '$2load_global.0', 'args': ['$8binary_multiply.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4'}), (14, {'res': '$const14.5'}), (16, {'value': '$const14.5'}), (18, {'res': '$const18.6'}), (20, {'value': '$const18.6'}), (22, {'res': '$const22.7'}), (24, {'value': '$const22.7'}), (26, {'res': '$const26.8'}), (28, {'value': '$const26.8'}), (30, {'res': '$const30.9'}), (32, {'value': '$const30.9'}), (34, {'res': '$const34.10'}), (36, {'value': '$const34.10'}), (38, {'res': '$const38.11'}), (40, {'value': '$const38.11'}), (42, {'res': '$interp_win42.12'}), (44, {'item': '$interp_win42.12', 'res': '$44load_attr.13'}), (46, {'res': '$const46.14'}), (48, {'index': '$const46.14', 'target': '$44load_attr.13', 'res': '$48binary_subscr.15'}), (50, {'value': '$48binary_subscr.15'}), (52, {'res': '$x52.16'}), (54, {'item': '$x52.16', 'res': '$54load_attr.17'}), (56, {'res': '$const56.18'}), (58, {'index': '$const56.18', 'target': '$54load_attr.17', 'res': '$58binary_subscr.19'}), (60, {'value': '$58binary_subscr.19'}), (62, {'res': '$t_out62.20'}), (64, {'item': '$t_out62.20', 'res': '$64load_attr.21'}), (66, {'res': '$const66.22'}), (68, {'index': '$const66.22', 'target': '$64load_attr.21', 'res': '$68binary_subscr.23'}), (70, {'value': '$68binary_subscr.23'}), (72, {'res': '$72load_global.24'}), (74, {'res': '$n_out74.25'}), (76, {'func': '$72load_global.24', 'args': ['$n_out74.25'], 'res': '$76call_function.26'}), (78, {'value': '$76call_function.26', 'res': '$78get_iter.27'})), outgoing_phis={'$phi80.0': '$78get_iter.27'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.27',)})
2025-05-02 21:52:19,113 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi84.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={382: (), 84: ('$phi80.0', '$80for_iter.2')})
2025-05-02 21:52:19,113 - DEBUG - block_infos State(pc_initial=84 nstack_initial=2):
AdaptBlockInfo(insts=((84, {'value': '$phi84.1'}), (86, {'res': '$t_out86.2'}), (88, {'res': '$t88.3'}), (90, {'index': '$t88.3', 'target': '$t_out86.2', 'res': '$90binary_subscr.4'}), (92, {'value': '$90binary_subscr.4'}), (94, {'res': '$94load_global.5'}), (96, {'res': '$time_register96.6'}), (98, {'func': '$94load_global.5', 'args': ['$time_register96.6'], 'res': '$98call_function.7'}), (100, {'value': '$98call_function.7'}), (102, {'res': '$scale102.8'}), (104, {'res': '$time_register104.9'}), (106, {'res': '$n106.10'}), (108, {'lhs': '$time_register104.9', 'rhs': '$n106.10', 'res': '$108binary_subtract.11'}), (110, {'lhs': '$scale102.8', 'rhs': '$108binary_subtract.11', 'res': '$110binary_multiply.12'}), (112, {'value': '$110binary_multiply.12'}), (114, {'res': '$frac114.13'}), (116, {'res': '$num_table116.14'}), (118, {'lhs': '$frac114.13', 'rhs': '$num_table116.14', 'res': '$118binary_multiply.15'}), (120, {'value': '$118binary_multiply.15'}), (122, {'res': '$122load_global.16'}), (124, {'res': '$index_frac124.17'}), (126, {'func': '$122load_global.16', 'args': ['$index_frac124.17'], 'res': '$126call_function.18'}), (128, {'value': '$126call_function.18'}), (130, {'res': '$index_frac130.19'}), (132, {'res': '$offset132.20'}), (134, {'lhs': '$index_frac130.19', 'rhs': '$offset132.20', 'res': '$134binary_subtract.21'}), (136, {'value': '$134binary_subtract.21'}), (138, {'res': '$138load_global.22'}), (140, {'res': '$n140.23'}), (142, {'res': '$const142.24'}), (144, {'lhs': '$n140.23', 'rhs': '$const142.24', 'res': '$144binary_add.25'}), (146, {'res': '$nwin146.26'}), (148, {'res': '$offset148.27'}), (150, {'lhs': '$nwin146.26', 'rhs': '$offset148.27', 'res': '$150binary_subtract.28'}), (152, {'res': '$index_step152.29'}), (154, {'lhs': '$150binary_subtract.28', 'rhs': '$index_step152.29', 'res': '$154binary_floor_divide.30'}), (156, {'func': '$138load_global.22', 'args': ['$144binary_add.25', '$154binary_floor_divide.30'], 'res': '$156call_function.31'}), (158, {'value': '$156call_function.31'}), (160, {'res': '$160load_global.32'}), (162, {'res': '$i_max162.33'}), (164, {'func': '$160load_global.32', 'args': ['$i_max162.33'], 'res': '$164call_function.34'}), (166, {'value': '$164call_function.34', 'res': '$166get_iter.35'})), outgoing_phis={'$phi168.1': '$166get_iter.35'}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi84.0', '$166get_iter.35')})
2025-05-02 21:52:19,115 - DEBUG - block_infos State(pc_initial=168 nstack_initial=2):
AdaptBlockInfo(insts=((168, {'iterator': '$phi168.1', 'pair': '$168for_iter.2', 'indval': '$168for_iter.3', 'pred': '$168for_iter.4'}),), outgoing_phis={'$phi170.2': '$168for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={238: ('$phi168.0',), 170: ('$phi168.0', '$phi168.1', '$168for_iter.3')})
2025-05-02 21:52:19,115 - DEBUG - block_infos State(pc_initial=170 nstack_initial=3):
AdaptBlockInfo(insts=((170, {'value': '$phi170.2'}), (172, {'res': '$interp_win172.3'}), (174, {'res': '$offset174.4'}), (176, {'res': '$i176.5'}), (178, {'res': '$index_step178.6'}), (180, {'lhs': '$i176.5', 'rhs': '$index_step178.6', 'res': '$180binary_multiply.7'}), (182, {'lhs': '$offset174.4', 'rhs': '$180binary_multiply.7', 'res': '$182binary_add.8'}), (184, {'index': '$182binary_add.8', 'target': '$interp_win172.3', 'res': '$184binary_subscr.9'}), (186, {'res': '$eta186.10'}), (188, {'res': '$interp_delta188.11'}), (190, {'res': '$offset190.12'}), (192, {'res': '$i192.13'}), (194, {'res': '$index_step194.14'}), (196, {'lhs': '$i192.13', 'rhs': '$index_step194.14', 'res': '$196binary_multiply.15'}), (198, {'lhs': '$offset190.12', 'rhs': '$196binary_multiply.15', 'res': '$198binary_add.16'}), (200, {'index': '$198binary_add.16', 'target': '$interp_delta188.11', 'res': '$200binary_subscr.17'}), (202, {'lhs': '$eta186.10', 'rhs': '$200binary_subscr.17', 'res': '$202binary_multiply.18'}), (204, {'lhs': '$184binary_subscr.9', 'rhs': '$202binary_multiply.18', 'res': '$204binary_add.19'}), (206, {'value': '$204binary_add.19'}), (208, {'res': '$y208.20'}), (210, {'res': '$t210.21'}), (212, {'orig': ['$y208.20', '$t210.21'], 'duped': ['$212dup_top_two.22', '$212dup_top_two.23']}), (214, {'index': '$212dup_top_two.23', 'target': '$212dup_top_two.22', 'res': '$214binary_subscr.24'}), (216, {'res': '$weight216.25'}), (218, {'res': '$x218.26'}), (220, {'res': '$n220.27'}), (222, {'res': '$i222.28'}), (224, {'lhs': '$n220.27', 'rhs': '$i222.28', 'res': '$224binary_subtract.29'}), (226, {'index': '$224binary_subtract.29', 'target': '$x218.26', 'res': '$226binary_subscr.30'}), (228, {'lhs': '$weight216.25', 'rhs': '$226binary_subscr.30', 'res': '$228binary_multiply.31'}), (230, {'lhs': '$214binary_subscr.24', 'rhs': '$228binary_multiply.31', 'res': '$230inplace_add.32'}), (234, {'target': '$y208.20', 'index': '$t210.21', 'value': '$230inplace_add.32'}), (236, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi170.0', '$phi170.1')})
2025-05-02 21:52:19,115 - DEBUG - block_infos State(pc_initial=238 nstack_initial=1):
AdaptBlockInfo(insts=((238, {'res': '$scale238.1'}), (240, {'res': '$frac240.2'}), (242, {'lhs': '$scale238.1', 'rhs': '$frac240.2', 'res': '$242binary_subtract.3'}), (244, {'value': '$242binary_subtract.3'}), (246, {'res': '$frac246.4'}), (248, {'res': '$num_table248.5'}), (250, {'lhs': '$frac246.4', 'rhs': '$num_table248.5', 'res': '$250binary_multiply.6'}), (252, {'value': '$250binary_multiply.6'}), (254, {'res': '$254load_global.7'}), (256, {'res': '$index_frac256.8'}), (258, {'func': '$254load_global.7', 'args': ['$index_frac256.8'], 'res': '$258call_function.9'}), (260, {'value': '$258call_function.9'}), (262, {'res': '$index_frac262.10'}), (264, {'res': '$offset264.11'}), (266, {'lhs': '$index_frac262.10', 'rhs': '$offset264.11', 'res': '$266binary_subtract.12'}), (268, {'value': '$266binary_subtract.12'}), (270, {'res': '$270load_global.13'}), (272, {'res': '$n_orig272.14'}), (274, {'res': '$n274.15'}), (276, {'lhs': '$n_orig272.14', 'rhs': '$n274.15', 'res': '$276binary_subtract.16'}), (278, {'res': '$const278.17'}), (280, {'lhs': '$276binary_subtract.16', 'rhs': '$const278.17', 'res': '$280binary_subtract.18'}), (282, {'res': '$nwin282.19'}), (284, {'res': '$offset284.20'}), (286, {'lhs': '$nwin282.19', 'rhs': '$offset284.20', 'res': '$286binary_subtract.21'}), (288, {'res': '$index_step288.22'}), (290, {'lhs': '$286binary_subtract.21', 'rhs': '$index_step288.22', 'res': '$290binary_floor_divide.23'}), (292, {'func': '$270load_global.13', 'args': ['$280binary_subtract.18', '$290binary_floor_divide.23'], 'res': '$292call_function.24'}), (294, {'value': '$292call_function.24'}), (296, {'res': '$296load_global.25'}), (298, {'res': '$k_max298.26'}), (300, {'func': '$296load_global.25', 'args': ['$k_max298.26'], 'res': '$300call_function.27'}), (302, {'value': '$300call_function.27', 'res': '$302get_iter.28'})), outgoing_phis={'$phi304.1': '$302get_iter.28'}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: ('$phi238.0', '$302get_iter.28')})
2025-05-02 21:52:19,115 - DEBUG - block_infos State(pc_initial=304 nstack_initial=2):
AdaptBlockInfo(insts=((304, {'iterator': '$phi304.1', 'pair': '$304for_iter.2', 'indval': '$304for_iter.3', 'pred': '$304for_iter.4'}),), outgoing_phis={'$phi306.2': '$304for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={380: ('$phi304.0',), 306: ('$phi304.0', '$phi304.1', '$304for_iter.3')})
2025-05-02 21:52:19,115 - DEBUG - block_infos State(pc_initial=306 nstack_initial=3):
AdaptBlockInfo(insts=((306, {'value': '$phi306.2'}), (308, {'res': '$interp_win308.3'}), (310, {'res': '$offset310.4'}), (312, {'res': '$k312.5'}), (314, {'res': '$index_step314.6'}), (316, {'lhs': '$k312.5', 'rhs': '$index_step314.6', 'res': '$316binary_multiply.7'}), (318, {'lhs': '$offset310.4', 'rhs': '$316binary_multiply.7', 'res': '$318binary_add.8'}), (320, {'index': '$318binary_add.8', 'target': '$interp_win308.3', 'res': '$320binary_subscr.9'}), (322, {'res': '$eta322.10'}), (324, {'res': '$interp_delta324.11'}), (326, {'res': '$offset326.12'}), (328, {'res': '$k328.13'}), (330, {'res': '$index_step330.14'}), (332, {'lhs': '$k328.13', 'rhs': '$index_step330.14', 'res': '$332binary_multiply.15'}), (334, {'lhs': '$offset326.12', 'rhs': '$332binary_multiply.15', 'res': '$334binary_add.16'}), (336, {'index': '$334binary_add.16', 'target': '$interp_delta324.11', 'res': '$336binary_subscr.17'}), (338, {'lhs': '$eta322.10', 'rhs': '$336binary_subscr.17', 'res': '$338binary_multiply.18'}), (340, {'lhs': '$320binary_subscr.9', 'rhs': '$338binary_multiply.18', 'res': '$340binary_add.19'}), (342, {'value': '$340binary_add.19'}), (344, {'res': '$y344.20'}), (346, {'res': '$t346.21'}), (348, {'orig': ['$y344.20', '$t346.21'], 'duped': ['$348dup_top_two.22', '$348dup_top_two.23']}), (350, {'index': '$348dup_top_two.23', 'target': '$348dup_top_two.22', 'res': '$350binary_subscr.24'}), (352, {'res': '$weight352.25'}), (354, {'res': '$x354.26'}), (356, {'res': '$n356.27'}), (358, {'res': '$k358.28'}), (360, {'lhs': '$n356.27', 'rhs': '$k358.28', 'res': '$360binary_add.29'}), (362, {'res': '$const362.30'}), (364, {'lhs': '$360binary_add.29', 'rhs': '$const362.30', 'res': '$364binary_add.31'}), (366, {'index': '$364binary_add.31', 'target': '$x354.26', 'res': '$366binary_subscr.32'}), (368, {'lhs': '$weight352.25', 'rhs': '$366binary_subscr.32', 'res': '$368binary_multiply.33'}), (370, {'lhs': '$350binary_subscr.24', 'rhs': '$368binary_multiply.33', 'res': '$370inplace_add.34'}), (374, {'target': '$y344.20', 'index': '$t346.21', 'value': '$370inplace_add.34'}), (376, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: ('$phi306.0', '$phi306.1')})
2025-05-02 21:52:19,115 - DEBUG - block_infos State(pc_initial=380 nstack_initial=1):
AdaptBlockInfo(insts=((380, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi380.0',)})
2025-05-02 21:52:19,115 - DEBUG - block_infos State(pc_initial=382 nstack_initial=0):
AdaptBlockInfo(insts=((382, {'res': '$const382.0'}), (384, {'retval': '$const382.0', 'castval': '$384return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-02 21:52:19,117 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    t_out = arg(1, name=t_out)               ['t_out']
    interp_win = arg(2, name=interp_win)     ['interp_win']
    interp_delta = arg(3, name=interp_delta) ['interp_delta']
    num_table = arg(4, name=num_table)       ['num_table']
    scale = arg(5, name=scale)               ['scale']
    y = arg(6, name=y)                       ['y']
    $2load_global.0 = global(int: <class 'int'>) ['$2load_global.0']
    $8binary_multiply.3 = scale * num_table  ['$8binary_multiply.3', 'num_table', 'scale']
    index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8binary_multiply.3', 'index_step']
    time_register = const(float, 0.0)        ['time_register']
    n = const(int, 0)                        ['n']
    frac = const(float, 0.0)                 ['frac']
    index_frac = const(float, 0.0)           ['index_frac']
    offset = const(int, 0)                   ['offset']
    eta = const(float, 0.0)                  ['eta']
    weight = const(float, 0.0)               ['weight']
    $44load_attr.13 = getattr(value=interp_win, attr=shape) ['$44load_attr.13', 'interp_win']
    $const46.14 = const(int, 0)              ['$const46.14']
    nwin = getitem(value=$44load_attr.13, index=$const46.14, fn=<built-in function getitem>) ['$44load_attr.13', '$const46.14', 'nwin']
    $54load_attr.17 = getattr(value=x, attr=shape) ['$54load_attr.17', 'x']
    $const56.18 = const(int, 0)              ['$const56.18']
    n_orig = getitem(value=$54load_attr.17, index=$const56.18, fn=<built-in function getitem>) ['$54load_attr.17', '$const56.18', 'n_orig']
    $64load_attr.21 = getattr(value=t_out, attr=shape) ['$64load_attr.21', 't_out']
    $const66.22 = const(int, 0)              ['$const66.22']
    n_out = getitem(value=$64load_attr.21, index=$const66.22, fn=<built-in function getitem>) ['$64load_attr.21', '$const66.22', 'n_out']
    $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>) ['$72load_global.24']
    $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.24', '$76call_function.26', 'n_out']
    $78get_iter.27 = getiter(value=$76call_function.26) ['$76call_function.26', '$78get_iter.27']
    $phi80.0 = $78get_iter.27                ['$78get_iter.27', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi84.1 = $80for_iter.2                 ['$80for_iter.2', '$phi84.1']
    branch $80for_iter.3, 84, 382            ['$80for_iter.3']
label 84:
    t = $phi84.1                             ['$phi84.1', 't']
    time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>) ['t', 't_out', 'time_register']
    $94load_global.5 = global(int: <class 'int'>) ['$94load_global.5']
    n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None) ['$94load_global.5', 'n', 'time_register']
    $108binary_subtract.11 = time_register - n ['$108binary_subtract.11', 'n', 'time_register']
    frac = scale * $108binary_subtract.11    ['$108binary_subtract.11', 'frac', 'scale']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $122load_global.16 = global(int: <class 'int'>) ['$122load_global.16']
    offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.16', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $138load_global.22 = global(min: <built-in function min>) ['$138load_global.22']
    $const142.24 = const(int, 1)             ['$const142.24']
    $144binary_add.25 = n + $const142.24     ['$144binary_add.25', '$const142.24', 'n']
    $150binary_subtract.28 = nwin - offset   ['$150binary_subtract.28', 'nwin', 'offset']
    $154binary_floor_divide.30 = $150binary_subtract.28 // index_step ['$150binary_subtract.28', '$154binary_floor_divide.30', 'index_step']
    i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None) ['$138load_global.22', '$144binary_add.25', '$154binary_floor_divide.30', 'i_max']
    $160load_global.32 = global(range: <class 'range'>) ['$160load_global.32']
    $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None) ['$160load_global.32', '$164call_function.34', 'i_max']
    $166get_iter.35 = getiter(value=$164call_function.34) ['$164call_function.34', '$166get_iter.35']
    $phi168.1 = $166get_iter.35              ['$166get_iter.35', '$phi168.1']
    jump 168                                 []
label 168:
    $168for_iter.2 = iternext(value=$phi168.1) ['$168for_iter.2', '$phi168.1']
    $168for_iter.3 = pair_first(value=$168for_iter.2) ['$168for_iter.2', '$168for_iter.3']
    $168for_iter.4 = pair_second(value=$168for_iter.2) ['$168for_iter.2', '$168for_iter.4']
    $phi170.2 = $168for_iter.3               ['$168for_iter.3', '$phi170.2']
    branch $168for_iter.4, 170, 238          ['$168for_iter.4']
label 170:
    i = $phi170.2                            ['$phi170.2', 'i']
    $180binary_multiply.7 = i * index_step   ['$180binary_multiply.7', 'i', 'index_step']
    $182binary_add.8 = offset + $180binary_multiply.7 ['$180binary_multiply.7', '$182binary_add.8', 'offset']
    $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>) ['$182binary_add.8', '$184binary_subscr.9', 'interp_win']
    $196binary_multiply.15 = i * index_step  ['$196binary_multiply.15', 'i', 'index_step']
    $198binary_add.16 = offset + $196binary_multiply.15 ['$196binary_multiply.15', '$198binary_add.16', 'offset']
    $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>) ['$198binary_add.16', '$200binary_subscr.17', 'interp_delta']
    $202binary_multiply.18 = eta * $200binary_subscr.17 ['$200binary_subscr.17', '$202binary_multiply.18', 'eta']
    weight = $184binary_subscr.9 + $202binary_multiply.18 ['$184binary_subscr.9', '$202binary_multiply.18', 'weight']
    $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>) ['$214binary_subscr.24', 't', 'y']
    $224binary_subtract.29 = n - i           ['$224binary_subtract.29', 'i', 'n']
    $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>) ['$224binary_subtract.29', '$226binary_subscr.30', 'x']
    $228binary_multiply.31 = weight * $226binary_subscr.30 ['$226binary_subscr.30', '$228binary_multiply.31', 'weight']
    $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined) ['$214binary_subscr.24', '$228binary_multiply.31', '$230inplace_add.32']
    y[t] = $230inplace_add.32                ['$230inplace_add.32', 't', 'y']
    jump 168                                 []
label 238:
    $242binary_subtract.3 = scale - frac     ['$242binary_subtract.3', 'frac', 'scale']
    frac = $242binary_subtract.3             ['$242binary_subtract.3', 'frac']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $254load_global.7 = global(int: <class 'int'>) ['$254load_global.7']
    offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None) ['$254load_global.7', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $270load_global.13 = global(min: <built-in function min>) ['$270load_global.13']
    $276binary_subtract.16 = n_orig - n      ['$276binary_subtract.16', 'n', 'n_orig']
    $const278.17 = const(int, 1)             ['$const278.17']
    $280binary_subtract.18 = $276binary_subtract.16 - $const278.17 ['$276binary_subtract.16', '$280binary_subtract.18', '$const278.17']
    $286binary_subtract.21 = nwin - offset   ['$286binary_subtract.21', 'nwin', 'offset']
    $290binary_floor_divide.23 = $286binary_subtract.21 // index_step ['$286binary_subtract.21', '$290binary_floor_divide.23', 'index_step']
    k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None) ['$270load_global.13', '$280binary_subtract.18', '$290binary_floor_divide.23', 'k_max']
    $296load_global.25 = global(range: <class 'range'>) ['$296load_global.25']
    $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None) ['$296load_global.25', '$300call_function.27', 'k_max']
    $302get_iter.28 = getiter(value=$300call_function.27) ['$300call_function.27', '$302get_iter.28']
    $phi304.1 = $302get_iter.28              ['$302get_iter.28', '$phi304.1']
    jump 304                                 []
label 304:
    $304for_iter.2 = iternext(value=$phi304.1) ['$304for_iter.2', '$phi304.1']
    $304for_iter.3 = pair_first(value=$304for_iter.2) ['$304for_iter.2', '$304for_iter.3']
    $304for_iter.4 = pair_second(value=$304for_iter.2) ['$304for_iter.2', '$304for_iter.4']
    $phi306.2 = $304for_iter.3               ['$304for_iter.3', '$phi306.2']
    branch $304for_iter.4, 306, 380          ['$304for_iter.4']
label 306:
    k = $phi306.2                            ['$phi306.2', 'k']
    $316binary_multiply.7 = k * index_step   ['$316binary_multiply.7', 'index_step', 'k']
    $318binary_add.8 = offset + $316binary_multiply.7 ['$316binary_multiply.7', '$318binary_add.8', 'offset']
    $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>) ['$318binary_add.8', '$320binary_subscr.9', 'interp_win']
    $332binary_multiply.15 = k * index_step  ['$332binary_multiply.15', 'index_step', 'k']
    $334binary_add.16 = offset + $332binary_multiply.15 ['$332binary_multiply.15', '$334binary_add.16', 'offset']
    $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>) ['$334binary_add.16', '$336binary_subscr.17', 'interp_delta']
    $338binary_multiply.18 = eta * $336binary_subscr.17 ['$336binary_subscr.17', '$338binary_multiply.18', 'eta']
    weight = $320binary_subscr.9 + $338binary_multiply.18 ['$320binary_subscr.9', '$338binary_multiply.18', 'weight']
    $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>) ['$350binary_subscr.24', 't', 'y']
    $360binary_add.29 = n + k                ['$360binary_add.29', 'k', 'n']
    $const362.30 = const(int, 1)             ['$const362.30']
    $364binary_add.31 = $360binary_add.29 + $const362.30 ['$360binary_add.29', '$364binary_add.31', '$const362.30']
    $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>) ['$364binary_add.31', '$366binary_subscr.32', 'x']
    $368binary_multiply.33 = weight * $366binary_subscr.32 ['$366binary_subscr.32', '$368binary_multiply.33', 'weight']
    $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined) ['$350binary_subscr.24', '$368binary_multiply.33', '$370inplace_add.34']
    y[t] = $370inplace_add.34                ['$370inplace_add.34', 't', 'y']
    jump 304                                 []
label 380:
    jump 80                                  []
label 382:
    $const382.0 = const(NoneType, None)      ['$const382.0']
    $384return_value.1 = cast(value=$const382.0) ['$384return_value.1', '$const382.0']
    return $384return_value.1                ['$384return_value.1']

2025-05-02 21:52:19,126 - DEBUG - ==== SSA block analysis pass on 0
2025-05-02 21:52:19,126 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,126 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,126 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,126 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,126 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,126 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,126 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,126 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,126 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,126 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,126 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,126 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,126 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,126 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,128 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,128 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,128 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,128 - DEBUG - ==== SSA block analysis pass on 80
2025-05-02 21:52:19,128 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,128 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,128 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,128 - DEBUG - ==== SSA block analysis pass on 84
2025-05-02 21:52:19,128 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,128 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,128 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,128 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:52:19,128 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,128 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,128 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,128 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:52:19,129 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block analysis pass on 168
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block analysis pass on 170
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,129 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,129 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,129 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:52:19,129 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,129 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block analysis pass on 238
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block analysis pass on 304
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block analysis pass on 306
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,129 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,129 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,129 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,129 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,129 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block analysis pass on 380
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block analysis pass on 382
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,129 - DEBUG - defs defaultdict(<class 'list'>,
            {'$108binary_subtract.11': [<numba.core.ir.Assign object at 0x000002D34E80D4F0>],
             '$122load_global.16': [<numba.core.ir.Assign object at 0x000002D34E80DD00>],
             '$138load_global.22': [<numba.core.ir.Assign object at 0x000002D34E8106A0>],
             '$144binary_add.25': [<numba.core.ir.Assign object at 0x000002D34E810AF0>],
             '$150binary_subtract.28': [<numba.core.ir.Assign object at 0x000002D34E810EB0>],
             '$154binary_floor_divide.30': [<numba.core.ir.Assign object at 0x000002D34E813190>],
             '$160load_global.32': [<numba.core.ir.Assign object at 0x000002D34E813580>],
             '$164call_function.34': [<numba.core.ir.Assign object at 0x000002D34E813880>],
             '$166get_iter.35': [<numba.core.ir.Assign object at 0x000002D34E8139A0>],
             '$168for_iter.2': [<numba.core.ir.Assign object at 0x000002D34E80D2B0>],
             '$168for_iter.3': [<numba.core.ir.Assign object at 0x000002D34E80D6D0>],
             '$168for_iter.4': [<numba.core.ir.Assign object at 0x000002D34E80DC10>],
             '$180binary_multiply.7': [<numba.core.ir.Assign object at 0x000002D34E813D90>],
             '$182binary_add.8': [<numba.core.ir.Assign object at 0x000002D34E813F10>],
             '$184binary_subscr.9': [<numba.core.ir.Assign object at 0x000002D34E8160D0>],
             '$196binary_multiply.15': [<numba.core.ir.Assign object at 0x000002D34E8167F0>],
             '$198binary_add.16': [<numba.core.ir.Assign object at 0x000002D34E816970>],
             '$200binary_subscr.17': [<numba.core.ir.Assign object at 0x000002D34E816AF0>],
             '$202binary_multiply.18': [<numba.core.ir.Assign object at 0x000002D34E816C70>],
             '$214binary_subscr.24': [<numba.core.ir.Assign object at 0x000002D34E818490>],
             '$224binary_subtract.29': [<numba.core.ir.Assign object at 0x000002D34E818A90>],
             '$226binary_subscr.30': [<numba.core.ir.Assign object at 0x000002D34E818C10>],
             '$228binary_multiply.31': [<numba.core.ir.Assign object at 0x000002D34E818D90>],
             '$230inplace_add.32': [<numba.core.ir.Assign object at 0x000002D34E818F10>],
             '$242binary_subtract.3': [<numba.core.ir.Assign object at 0x000002D34E818070>],
             '$254load_global.7': [<numba.core.ir.Assign object at 0x000002D34E81A4C0>],
             '$270load_global.13': [<numba.core.ir.Assign object at 0x000002D34E81AE20>],
             '$276binary_subtract.16': [<numba.core.ir.Assign object at 0x000002D34E81C250>],
             '$280binary_subtract.18': [<numba.core.ir.Assign object at 0x000002D34E81C550>],
             '$286binary_subtract.21': [<numba.core.ir.Assign object at 0x000002D34E81C910>],
             '$290binary_floor_divide.23': [<numba.core.ir.Assign object at 0x000002D34E81CBB0>],
             '$296load_global.25': [<numba.core.ir.Assign object at 0x000002D34E81CFA0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000002D34E8020A0>],
             '$300call_function.27': [<numba.core.ir.Assign object at 0x000002D34E81E2E0>],
             '$302get_iter.28': [<numba.core.ir.Assign object at 0x000002D34E81E400>],
             '$304for_iter.2': [<numba.core.ir.Assign object at 0x000002D34E81A700>],
             '$304for_iter.3': [<numba.core.ir.Assign object at 0x000002D34E81AD30>],
             '$304for_iter.4': [<numba.core.ir.Assign object at 0x000002D34E81C130>],
             '$316binary_multiply.7': [<numba.core.ir.Assign object at 0x000002D34E81EB50>],
             '$318binary_add.8': [<numba.core.ir.Assign object at 0x000002D34E81ECD0>],
             '$320binary_subscr.9': [<numba.core.ir.Assign object at 0x000002D34E81EE50>],
             '$332binary_multiply.15': [<numba.core.ir.Assign object at 0x000002D34E8205B0>],
             '$334binary_add.16': [<numba.core.ir.Assign object at 0x000002D34E820730>],
             '$336binary_subscr.17': [<numba.core.ir.Assign object at 0x000002D34E8208B0>],
             '$338binary_multiply.18': [<numba.core.ir.Assign object at 0x000002D34E820A30>],
             '$350binary_subscr.24': [<numba.core.ir.Assign object at 0x000002D34E822250>],
             '$360binary_add.29': [<numba.core.ir.Assign object at 0x000002D34E822850>],
             '$364binary_add.31': [<numba.core.ir.Assign object at 0x000002D34E822B50>],
             '$366binary_subscr.32': [<numba.core.ir.Assign object at 0x000002D34E822CD0>],
             '$368binary_multiply.33': [<numba.core.ir.Assign object at 0x000002D34E822E50>],
             '$370inplace_add.34': [<numba.core.ir.Assign object at 0x000002D34E822FD0>],
             '$384return_value.1': [<numba.core.ir.Assign object at 0x000002D34E822040>],
             '$44load_attr.13': [<numba.core.ir.Assign object at 0x000002D34E805C40>],
             '$54load_attr.17': [<numba.core.ir.Assign object at 0x000002D34E808340>],
             '$64load_attr.21': [<numba.core.ir.Assign object at 0x000002D34E808A00>],
             '$72load_global.24': [<numba.core.ir.Assign object at 0x000002D34E808FA0>],
             '$76call_function.26': [<numba.core.ir.Assign object at 0x000002D34E80A2E0>],
             '$78get_iter.27': [<numba.core.ir.Assign object at 0x000002D34E80A400>],
             '$80for_iter.1': [<numba.core.ir.Assign object at 0x000002D34E805A30>],
             '$80for_iter.2': [<numba.core.ir.Assign object at 0x000002D34E808250>],
             '$80for_iter.3': [<numba.core.ir.Assign object at 0x000002D34E808EB0>],
             '$8binary_multiply.3': [<numba.core.ir.Assign object at 0x000002D34E802490>],
             '$94load_global.5': [<numba.core.ir.Assign object at 0x000002D34E80AC40>],
             '$const142.24': [<numba.core.ir.Assign object at 0x000002D34E810940>],
             '$const278.17': [<numba.core.ir.Assign object at 0x000002D34E81C3A0>],
             '$const362.30': [<numba.core.ir.Assign object at 0x000002D34E8229A0>],
             '$const382.0': [<numba.core.ir.Assign object at 0x000002D34E820C70>],
             '$const46.14': [<numba.core.ir.Assign object at 0x000002D34E805DC0>],
             '$const56.18': [<numba.core.ir.Assign object at 0x000002D34E8084C0>],
             '$const66.22': [<numba.core.ir.Assign object at 0x000002D34E808B80>],
             '$phi168.1': [<numba.core.ir.Assign object at 0x000002D34E80A7F0>],
             '$phi170.2': [<numba.core.ir.Assign object at 0x000002D34E80D070>],
             '$phi304.1': [<numba.core.ir.Assign object at 0x000002D34E816370>],
             '$phi306.2': [<numba.core.ir.Assign object at 0x000002D34E81A670>],
             '$phi80.0': [<numba.core.ir.Assign object at 0x000002D34E802250>],
             '$phi84.1': [<numba.core.ir.Assign object at 0x000002D34E8054F0>],
             'eta': [<numba.core.ir.Assign object at 0x000002D34E8055E0>,
                     <numba.core.ir.Assign object at 0x000002D34E810490>,
                     <numba.core.ir.Assign object at 0x000002D34E81AC10>],
             'frac': [<numba.core.ir.Assign object at 0x000002D34E802DC0>,
                      <numba.core.ir.Assign object at 0x000002D34E80D670>,
                      <numba.core.ir.Assign object at 0x000002D34E818310>],
             'i': [<numba.core.ir.Assign object at 0x000002D34E8103D0>],
             'i_max': [<numba.core.ir.Assign object at 0x000002D34E813340>],
             'index_frac': [<numba.core.ir.Assign object at 0x000002D34E8050A0>,
                            <numba.core.ir.Assign object at 0x000002D34E80DAF0>,
                            <numba.core.ir.Assign object at 0x000002D34E81A2B0>],
             'index_step': [<numba.core.ir.Assign object at 0x000002D34E802640>],
             'interp_delta': [<numba.core.ir.Assign object at 0x000002D34E7E41C0>],
             'interp_win': [<numba.core.ir.Assign object at 0x000002D34E7E4280>],
             'k': [<numba.core.ir.Assign object at 0x000002D34E81E520>],
             'k_max': [<numba.core.ir.Assign object at 0x000002D34E81CD60>],
             'n': [<numba.core.ir.Assign object at 0x000002D34E802B20>,
                   <numba.core.ir.Assign object at 0x000002D34E80AF40>],
             'n_orig': [<numba.core.ir.Assign object at 0x000002D34E82CC10>],
             'n_out': [<numba.core.ir.Assign object at 0x000002D34E82CCD0>],
             'num_table': [<numba.core.ir.Assign object at 0x000002D34E7E44C0>],
             'nwin': [<numba.core.ir.Assign object at 0x000002D34E82C070>],
             'offset': [<numba.core.ir.Assign object at 0x000002D34E805340>,
                        <numba.core.ir.Assign object at 0x000002D34E810040>,
                        <numba.core.ir.Assign object at 0x000002D34E81A7C0>],
             'scale': [<numba.core.ir.Assign object at 0x000002D34E7E4DC0>],
             't': [<numba.core.ir.Assign object at 0x000002D34E80A640>],
             't_out': [<numba.core.ir.Assign object at 0x000002D34E7E4700>],
             'time_register': [<numba.core.ir.Assign object at 0x000002D34E802880>,
                               <numba.core.ir.Assign object at 0x000002D34E80AA30>],
             'weight': [<numba.core.ir.Assign object at 0x000002D34E805880>,
                        <numba.core.ir.Assign object at 0x000002D34E816DF0>,
                        <numba.core.ir.Assign object at 0x000002D34E820BB0>],
             'x': [<numba.core.ir.Assign object at 0x000002D34E7E4640>],
             'y': [<numba.core.ir.Assign object at 0x000002D34E7E4EE0>]})
2025-05-02 21:52:19,129 - DEBUG - SSA violators {'time_register', 'n', 'weight', 'offset', 'index_frac', 'frac', 'eta'}
2025-05-02 21:52:19,129 - DEBUG - Fix SSA violator on var time_register
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,129 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,129 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,129 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,129 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,129 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - first assign: time_register
2025-05-02 21:52:19,129 - DEBUG - replaced with: time_register = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,129 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - replaced with: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:52:19,129 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,129 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,129 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,129 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:52:19,129 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,129 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,129 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,129 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,129 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,129 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,129 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,129 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002D34E82C400>],
             84: [<numba.core.ir.Assign object at 0x000002D34E82CEB0>]})
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,129 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,129 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,129 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,129 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,129 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,129 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - find_def var='time_register' stmt=n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - replaced with: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:52:19,129 - DEBUG - find_def var='time_register' stmt=$108binary_subtract.11 = time_register - n
2025-05-02 21:52:19,129 - DEBUG - replaced with: $108binary_subtract.11 = time_register.1 - n
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:52:19,129 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,129 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,129 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,129 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:52:19,129 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,129 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,129 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,129 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,129 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,129 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,129 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,129 - DEBUG - Fix SSA violator on var n
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,129 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,129 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,129 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,129 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,129 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - first assign: n
2025-05-02 21:52:19,129 - DEBUG - replaced with: n = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,144 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,144 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,144 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,144 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,144 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,144 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,144 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,144 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,144 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,144 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,144 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,144 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,144 - DEBUG - replaced with: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 21:52:19,144 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,144 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,144 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,144 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,144 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:52:19,146 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,146 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,146 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,146 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,146 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,146 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,146 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,146 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,146 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,146 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,146 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,146 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,146 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,146 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,146 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,146 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,146 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,146 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:52:19,146 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,146 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,146 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,146 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,146 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,146 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,146 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,146 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,146 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,146 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,146 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,146 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,146 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:52:19,148 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,148 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,148 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,148 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,148 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,148 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,148 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,148 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,148 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,148 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,148 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,148 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,148 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,148 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,148 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,148 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,148 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,148 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,148 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:52:19,148 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,148 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,148 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,148 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,148 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,148 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,148 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,148 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,148 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,148 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,148 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,148 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,148 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002D34E82C880>],
             84: [<numba.core.ir.Assign object at 0x000002D34E82C9D0>]})
2025-05-02 21:52:19,148 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,148 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,148 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,148 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,148 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,148 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,148 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,148 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,148 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,148 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,150 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,150 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 21:52:19,150 - DEBUG - find_def var='n' stmt=$108binary_subtract.11 = time_register.1 - n
2025-05-02 21:52:19,150 - DEBUG - replaced with: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,150 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,150 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,150 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:52:19,150 - DEBUG - find_def var='n' stmt=$144binary_add.25 = n + $const142.24
2025-05-02 21:52:19,150 - DEBUG - replaced with: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,150 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,150 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,150 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,150 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,150 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,150 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,150 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:52:19,150 - DEBUG - find_def var='n' stmt=$224binary_subtract.29 = n - i
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 170
2025-05-02 21:52:19,150 - DEBUG - idom 168 from label 170
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 168
2025-05-02 21:52:19,150 - DEBUG - idom 84 from label 168
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:52:19,150 - DEBUG - replaced with: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,150 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,150 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,150 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,150 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,150 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,150 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:52:19,150 - DEBUG - find_def var='n' stmt=$276binary_subtract.16 = n_orig - n
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 238
2025-05-02 21:52:19,150 - DEBUG - idom 168 from label 238
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 168
2025-05-02 21:52:19,150 - DEBUG - idom 84 from label 168
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:52:19,150 - DEBUG - replaced with: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,150 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,150 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,150 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,150 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,150 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,150 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,150 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:52:19,150 - DEBUG - find_def var='n' stmt=$360binary_add.29 = n + k
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 306
2025-05-02 21:52:19,150 - DEBUG - idom 304 from label 306
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 304
2025-05-02 21:52:19,150 - DEBUG - idom 238 from label 304
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 238
2025-05-02 21:52:19,150 - DEBUG - idom 168 from label 238
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 168
2025-05-02 21:52:19,150 - DEBUG - idom 84 from label 168
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:52:19,150 - DEBUG - replaced with: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,150 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,150 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,150 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,150 - DEBUG - Fix SSA violator on var weight
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,150 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,150 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,150 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,150 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,150 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,150 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,150 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - first assign: weight
2025-05-02 21:52:19,150 - DEBUG - replaced with: weight = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,150 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,150 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,150 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,150 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,150 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,150 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,150 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,150 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,150 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,150 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,150 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,150 - DEBUG - replaced with: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,150 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,150 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,150 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,150 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,150 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,150 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,150 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,150 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,150 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,150 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,150 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,150 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,150 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,150 - DEBUG - replaced with: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,160 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,160 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,160 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,160 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,160 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,160 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,160 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,160 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,160 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,160 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,160 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,160 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,160 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,160 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,160 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,160 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,160 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,160 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002D34E82C280>],
             170: [<numba.core.ir.Assign object at 0x000002D34E82C580>],
             306: [<numba.core.ir.Assign object at 0x000002D34E82FA00>]})
2025-05-02 21:52:19,161 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,161 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,161 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,161 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,161 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,161 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,161 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,161 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,161 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,161 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,161 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,161 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,161 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,161 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,161 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,161 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,161 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,161 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,161 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,161 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,161 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,161 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,161 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,161 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,161 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,161 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,161 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,161 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,161 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,163 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,163 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,163 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,163 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,163 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,163 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,163 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,163 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,163 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,163 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,163 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,163 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,163 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,163 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,163 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,163 - DEBUG - find_def var='weight' stmt=$228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,163 - DEBUG - replaced with: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,163 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,163 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,163 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,163 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,163 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,163 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,163 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,163 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,163 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,163 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,163 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,163 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,163 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,163 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,163 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,163 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,163 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,163 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,163 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,163 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,163 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,163 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,163 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,163 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,163 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,165 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,165 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,165 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,165 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,165 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,165 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,165 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,165 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,165 - DEBUG - find_def var='weight' stmt=$368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,165 - DEBUG - replaced with: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,165 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,165 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,165 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,165 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,165 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,165 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,165 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,165 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,165 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,165 - DEBUG - Fix SSA violator on var offset
2025-05-02 21:52:19,165 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,165 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,165 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,165 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,165 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,165 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,165 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,165 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,165 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,165 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,165 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,165 - DEBUG - first assign: offset
2025-05-02 21:52:19,165 - DEBUG - replaced with: offset = const(int, 0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,167 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,167 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,167 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,167 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,167 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,167 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,167 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,167 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,167 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,167 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,167 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,167 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,167 - DEBUG - replaced with: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,167 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,167 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,167 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,167 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,167 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,167 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,167 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,167 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,167 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,167 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,167 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,167 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,167 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,167 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,167 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,167 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,167 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,167 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,167 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,167 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,167 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,169 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,169 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,169 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,169 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,169 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,169 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,169 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,169 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,169 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,169 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,169 - DEBUG - replaced with: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,169 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,169 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,169 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,169 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,169 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,169 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,169 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,169 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,169 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,169 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,169 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,169 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,169 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,169 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,169 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,169 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,169 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,169 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,169 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,169 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,169 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,169 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,169 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,169 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,169 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,169 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,169 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,169 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,169 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,169 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,169 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,169 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,171 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002D34E82C700>],
             84: [<numba.core.ir.Assign object at 0x000002D34E82C5E0>],
             238: [<numba.core.ir.Assign object at 0x000002D34E82F340>]})
2025-05-02 21:52:19,171 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,171 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,171 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,171 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,171 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,171 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,171 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,171 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,171 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,171 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,171 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,171 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,171 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,171 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,171 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,171 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,171 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,171 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,171 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,171 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,171 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,173 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,173 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,173 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,173 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,173 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,173 - DEBUG - find_def var='offset' stmt=eta = index_frac - offset
2025-05-02 21:52:19,173 - DEBUG - replaced with: eta = index_frac - offset.1
2025-05-02 21:52:19,173 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,173 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,173 - DEBUG - find_def var='offset' stmt=$150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,173 - DEBUG - replaced with: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:52:19,173 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,173 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,173 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,173 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,173 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,173 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,173 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,173 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,173 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,173 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,173 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,173 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,173 - DEBUG - find_def var='offset' stmt=$182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,173 - DEBUG - find_def_from_top label 170
2025-05-02 21:52:19,173 - DEBUG - idom 168 from label 170
2025-05-02 21:52:19,173 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:52:19,173 - DEBUG - find_def_from_top label 168
2025-05-02 21:52:19,173 - DEBUG - idom 84 from label 168
2025-05-02 21:52:19,173 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:52:19,173 - DEBUG - replaced with: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:52:19,173 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,173 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,173 - DEBUG - find_def var='offset' stmt=$198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,173 - DEBUG - find_def_from_top label 170
2025-05-02 21:52:19,173 - DEBUG - idom 168 from label 170
2025-05-02 21:52:19,173 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:52:19,173 - DEBUG - find_def_from_top label 168
2025-05-02 21:52:19,173 - DEBUG - idom 84 from label 168
2025-05-02 21:52:19,173 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:52:19,173 - DEBUG - replaced with: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:52:19,173 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,175 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,175 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,175 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,175 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,175 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,175 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,175 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,175 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,175 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,175 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,175 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,175 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,175 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,175 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,175 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,175 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,175 - DEBUG - find_def var='offset' stmt=eta = index_frac - offset
2025-05-02 21:52:19,175 - DEBUG - replaced with: eta = index_frac - offset.2
2025-05-02 21:52:19,175 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,175 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,175 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,175 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,175 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,175 - DEBUG - find_def var='offset' stmt=$286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,175 - DEBUG - replaced with: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:52:19,175 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,175 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,176 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,176 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,176 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,176 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,176 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,176 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,176 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,176 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,176 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,176 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,176 - DEBUG - find_def var='offset' stmt=$318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,176 - DEBUG - find_def_from_top label 306
2025-05-02 21:52:19,176 - DEBUG - idom 304 from label 306
2025-05-02 21:52:19,176 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:52:19,176 - DEBUG - find_def_from_top label 304
2025-05-02 21:52:19,176 - DEBUG - idom 238 from label 304
2025-05-02 21:52:19,176 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:52:19,176 - DEBUG - replaced with: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:52:19,176 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,176 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,176 - DEBUG - find_def var='offset' stmt=$334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,176 - DEBUG - find_def_from_top label 306
2025-05-02 21:52:19,176 - DEBUG - idom 304 from label 306
2025-05-02 21:52:19,176 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:52:19,176 - DEBUG - find_def_from_top label 304
2025-05-02 21:52:19,176 - DEBUG - idom 238 from label 304
2025-05-02 21:52:19,176 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:52:19,176 - DEBUG - replaced with: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:52:19,176 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,176 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,176 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,176 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,176 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,176 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,176 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,176 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,176 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,176 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,176 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,176 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,176 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,176 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,176 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,178 - DEBUG - Fix SSA violator on var index_frac
2025-05-02 21:52:19,178 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,178 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,178 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,178 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,178 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,178 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,178 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,178 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,178 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,178 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,178 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,178 - DEBUG - first assign: index_frac
2025-05-02 21:52:19,178 - DEBUG - replaced with: index_frac = const(float, 0.0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,178 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,178 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,178 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,178 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,178 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,178 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,178 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,178 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,178 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,178 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,178 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,178 - DEBUG - replaced with: index_frac.1 = frac * num_table
2025-05-02 21:52:19,178 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,178 - DEBUG - on stmt: eta = index_frac - offset.1
2025-05-02 21:52:19,178 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,178 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:52:19,178 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,178 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,180 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,180 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,180 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,180 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,180 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,180 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,180 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,180 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,180 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,180 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:52:19,180 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,180 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:52:19,180 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,180 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,180 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,180 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,180 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,180 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,180 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,180 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,180 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,180 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,180 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,180 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,180 - DEBUG - replaced with: index_frac.2 = frac * num_table
2025-05-02 21:52:19,180 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,180 - DEBUG - on stmt: eta = index_frac - offset.2
2025-05-02 21:52:19,180 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,180 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,180 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:52:19,180 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,180 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,180 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,180 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,180 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,180 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,180 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,180 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,180 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,180 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,180 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,182 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:52:19,182 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,182 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:52:19,182 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,182 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,182 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,182 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,182 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,182 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,182 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,182 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,182 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,182 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,182 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,182 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,182 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,182 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,182 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002D34E82FAC0>],
             84: [<numba.core.ir.Assign object at 0x000002D34E82F4F0>],
             238: [<numba.core.ir.Assign object at 0x000002D34E82C130>]})
2025-05-02 21:52:19,182 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,182 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,182 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,182 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,182 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,182 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,182 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,182 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,182 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,182 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,182 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,182 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,182 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,182 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,182 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,182 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,184 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,184 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,184 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,184 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,184 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,184 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,184 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 21:52:19,184 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,184 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,184 - DEBUG - find_def var='index_frac' stmt=offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,184 - DEBUG - replaced with: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,184 - DEBUG - on stmt: eta = index_frac - offset.1
2025-05-02 21:52:19,184 - DEBUG - find_def var='index_frac' stmt=eta = index_frac - offset.1
2025-05-02 21:52:19,184 - DEBUG - replaced with: eta = index_frac.1 - offset.1
2025-05-02 21:52:19,184 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,184 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:52:19,184 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,184 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,184 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,184 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,184 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,184 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,184 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,184 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,184 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,184 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,184 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,184 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:52:19,184 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,184 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:52:19,184 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,184 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,186 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,186 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,186 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,186 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,186 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,186 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,186 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,186 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,186 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,186 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 21:52:19,186 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,186 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,186 - DEBUG - find_def var='index_frac' stmt=offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,186 - DEBUG - replaced with: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,186 - DEBUG - on stmt: eta = index_frac - offset.2
2025-05-02 21:52:19,186 - DEBUG - find_def var='index_frac' stmt=eta = index_frac - offset.2
2025-05-02 21:52:19,186 - DEBUG - replaced with: eta = index_frac.2 - offset.2
2025-05-02 21:52:19,186 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,186 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,186 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:52:19,186 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,186 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,186 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,186 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,186 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,186 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,186 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,186 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,186 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,186 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,186 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,186 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:52:19,186 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,186 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:52:19,186 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,186 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,186 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,188 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,188 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,188 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,188 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,188 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,188 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,188 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,188 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,188 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,188 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,188 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,188 - DEBUG - Fix SSA violator on var frac
2025-05-02 21:52:19,188 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,188 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,188 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,188 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,188 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,188 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,188 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,188 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,188 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,188 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,188 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,188 - DEBUG - first assign: frac
2025-05-02 21:52:19,188 - DEBUG - replaced with: frac = const(float, 0.0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,188 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,188 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,188 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,188 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,188 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,188 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,190 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,190 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,190 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,190 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,190 - DEBUG - replaced with: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:52:19,190 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 21:52:19,190 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,190 - DEBUG - on stmt: eta = index_frac.1 - offset.1
2025-05-02 21:52:19,190 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,190 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:52:19,190 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,190 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,190 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,190 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,190 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,190 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,190 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,190 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,190 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,190 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,190 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,190 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:52:19,190 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,190 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:52:19,190 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,190 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,190 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,190 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,190 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,190 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,190 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,190 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,190 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,190 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,190 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,190 - DEBUG - replaced with: frac.2 = $242binary_subtract.3
2025-05-02 21:52:19,190 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 21:52:19,190 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,192 - DEBUG - on stmt: eta = index_frac.2 - offset.2
2025-05-02 21:52:19,192 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,192 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,192 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:52:19,192 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,192 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,192 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,192 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,192 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,192 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,192 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,192 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,192 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,192 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,192 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,192 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:52:19,192 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,192 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:52:19,192 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,192 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,192 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,192 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,192 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,192 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,192 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,192 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,192 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,192 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,192 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,192 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,192 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,192 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,192 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,192 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002D34E82C910>],
             84: [<numba.core.ir.Assign object at 0x000002D34E82F8E0>],
             238: [<numba.core.ir.Assign object at 0x000002D34E7D2760>]})
2025-05-02 21:52:19,192 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,192 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,192 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,192 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,192 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,192 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,192 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,194 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,194 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,194 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,194 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,194 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,194 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,194 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,194 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,194 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,194 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,194 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,194 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,194 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,194 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:52:19,194 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 21:52:19,194 - DEBUG - find_def var='frac' stmt=index_frac.1 = frac * num_table
2025-05-02 21:52:19,194 - DEBUG - replaced with: index_frac.1 = frac.1 * num_table
2025-05-02 21:52:19,194 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,194 - DEBUG - on stmt: eta = index_frac.1 - offset.1
2025-05-02 21:52:19,194 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,194 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:52:19,194 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,194 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,196 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,196 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,196 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,196 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,196 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,196 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,196 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,196 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,196 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,196 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:52:19,196 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,196 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:52:19,196 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,196 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,196 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,196 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,196 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,196 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,196 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,196 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,196 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,196 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,196 - DEBUG - find_def var='frac' stmt=$242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,196 - DEBUG - find_def_from_top label 238
2025-05-02 21:52:19,196 - DEBUG - idom 168 from label 238
2025-05-02 21:52:19,196 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:52:19,196 - DEBUG - find_def_from_top label 168
2025-05-02 21:52:19,196 - DEBUG - idom 84 from label 168
2025-05-02 21:52:19,196 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:52:19,196 - DEBUG - replaced with: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:52:19,196 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:52:19,196 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 21:52:19,196 - DEBUG - find_def var='frac' stmt=index_frac.2 = frac * num_table
2025-05-02 21:52:19,196 - DEBUG - replaced with: index_frac.2 = frac.2 * num_table
2025-05-02 21:52:19,196 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,196 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,196 - DEBUG - on stmt: eta = index_frac.2 - offset.2
2025-05-02 21:52:19,196 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,196 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,196 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:52:19,196 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,196 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,198 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,198 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,198 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,198 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,198 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,198 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,198 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,198 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,198 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,198 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:52:19,198 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,198 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:52:19,198 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,198 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,198 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,198 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,198 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,198 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,198 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,198 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,198 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,198 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,198 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,198 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,198 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,198 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,198 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,198 - DEBUG - Fix SSA violator on var eta
2025-05-02 21:52:19,198 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,198 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,198 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,198 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,198 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,198 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,198 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,198 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,198 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,198 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,198 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,198 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,198 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,198 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,198 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,198 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,198 - DEBUG - first assign: eta
2025-05-02 21:52:19,200 - DEBUG - replaced with: eta = const(float, 0.0)
2025-05-02 21:52:19,200 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,200 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,200 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,200 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,200 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,200 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,200 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,200 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,200 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,200 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,200 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,200 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,200 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,200 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:52:19,200 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 21:52:19,200 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,200 - DEBUG - on stmt: eta = index_frac.1 - offset.1
2025-05-02 21:52:19,200 - DEBUG - replaced with: eta.1 = index_frac.1 - offset.1
2025-05-02 21:52:19,200 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,200 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:52:19,200 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,200 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,200 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,200 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,200 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,200 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,200 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,200 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,202 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,202 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,202 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,202 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:52:19,202 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,202 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:52:19,202 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,202 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,202 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,202 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,202 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,202 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,202 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,202 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,202 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,202 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:52:19,202 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:52:19,202 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 21:52:19,202 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,202 - DEBUG - on stmt: eta = index_frac.2 - offset.2
2025-05-02 21:52:19,202 - DEBUG - replaced with: eta.2 = index_frac.2 - offset.2
2025-05-02 21:52:19,202 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,202 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,202 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:52:19,202 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,202 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,202 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,202 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,202 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,202 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,202 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,202 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,202 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,202 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,202 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,202 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:52:19,202 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,202 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:52:19,202 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,202 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,202 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,204 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,204 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,204 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,204 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,204 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,204 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,204 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,204 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,204 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,204 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,204 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,204 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002D34E82C2E0>],
             84: [<numba.core.ir.Assign object at 0x000002D34E82FE50>],
             238: [<numba.core.ir.Assign object at 0x000002D34E824DC0>]})
2025-05-02 21:52:19,204 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,204 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,204 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,204 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,204 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,204 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,204 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,204 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,204 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,204 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,204 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,204 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,204 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,204 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,204 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,206 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,206 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,206 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,206 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,206 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,206 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,206 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:52:19,206 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 21:52:19,206 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,206 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,206 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 21:52:19,206 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,206 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:52:19,206 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,206 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,206 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,206 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,206 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,206 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,206 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,206 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,206 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,206 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,206 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,206 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:52:19,206 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,206 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:52:19,206 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,206 - DEBUG - find_def var='eta' stmt=$202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,207 - DEBUG - find_def_from_top label 170
2025-05-02 21:52:19,207 - DEBUG - idom 168 from label 170
2025-05-02 21:52:19,207 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:52:19,207 - DEBUG - find_def_from_top label 168
2025-05-02 21:52:19,207 - DEBUG - idom 84 from label 168
2025-05-02 21:52:19,207 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:52:19,207 - DEBUG - replaced with: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:52:19,207 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,207 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,207 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,207 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,207 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,207 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,207 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,207 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,207 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,207 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,207 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:52:19,207 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:52:19,207 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 21:52:19,207 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,207 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,207 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 21:52:19,207 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,207 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,207 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,207 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,207 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:52:19,209 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,209 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,209 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,209 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,209 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,209 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,209 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,209 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,209 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,209 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,209 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,209 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:52:19,209 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,209 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:52:19,209 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,209 - DEBUG - find_def var='eta' stmt=$338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,209 - DEBUG - find_def_from_top label 306
2025-05-02 21:52:19,209 - DEBUG - idom 304 from label 306
2025-05-02 21:52:19,210 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:52:19,210 - DEBUG - find_def_from_top label 304
2025-05-02 21:52:19,210 - DEBUG - idom 238 from label 304
2025-05-02 21:52:19,210 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:52:19,210 - DEBUG - replaced with: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:52:19,210 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,210 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,210 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,210 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,210 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,210 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,210 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,210 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,210 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,210 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,210 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,210 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,210 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,210 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,210 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,210 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,210 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,210 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:37,397 - DEBUG - Audio loaded: shape=(2, 7694568), sample_rate=44100
2025-05-02 21:52:37,397 - DEBUG - Demixing audio: samples=7694568, margin=76800, chunk_size=11025000
2025-05-02 21:52:37,413 - DEBUG - Created 1 chunks for demixing
  0%|          | 0/1 [00:00<?, ?it/s]Processing:   0%|          | 0/1 [00:00<?, ?it/s]2025-05-02 21:52:37,494 - DEBUG - Processing chunk: 31 waves
Processing: 100%|##########| 1/1 [08:19<00:00, 499.17s/it]Processing: 100%|##########| 1/1 [08:19<00:00, 499.38s/it]
2025-05-02 22:00:56,857 - DEBUG - Demixing complete
2025-05-02 22:00:58,374 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song2_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song2_no_vocals.wav
\song2_vocals.wav
2025-05-02 22:01:02 - ERROR - Failed to generate stem: 2025-05-02 21:52:18,417 - DEBUG - Logging initialized
2025-05-02 21:52:18,417 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song2.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR-MDX-NET-Inst_Main.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 76800, 'chunks': 250, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 21:52:18,417 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 21:52:18,417 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song2.flac
2025-05-02 21:52:18,417 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 21:52:18,417 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song2.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR-MDX-NET-Inst_Main.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 76800, 'chunks': 250, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 21:52:18,417 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\UVR-MDX-NET-Inst_Main.onnx
2025-05-02 21:52:18,560 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song2.flac
2025-05-02 21:52:19,018 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=86)
           2	LOAD_GLOBAL(arg=0, lineno=86)
           4	LOAD_FAST(arg=0, lineno=86)
           6	LOAD_FAST(arg=1, lineno=86)
           8	LOAD_FAST(arg=2, lineno=86)
          10	LOAD_FAST(arg=3, lineno=86)
          12	LOAD_FAST(arg=4, lineno=86)
          14	LOAD_FAST(arg=5, lineno=86)
          16	LOAD_FAST(arg=6, lineno=86)
          18	CALL_FUNCTION(arg=7, lineno=86)
          20	POP_TOP(arg=None, lineno=86)
          22	LOAD_CONST(arg=0, lineno=86)
          24	RETURN_VALUE(arg=None, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-02 21:52:19,018 - DEBUG - stack: []
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack []
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack []
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=4, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=5, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=6, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=18, inst=CALL_FUNCTION(arg=7, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6', '$y16.7']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=20, inst=POP_TOP(arg=None, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$18call_function.8']
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=0, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack []
2025-05-02 21:52:19,018 - DEBUG - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=86)
2025-05-02 21:52:19,018 - DEBUG - stack ['$const22.9']
2025-05-02 21:52:19,018 - DEBUG - end state. edges=[]
2025-05-02 21:52:19,018 - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-02 21:52:19,018 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-02 21:52:19,018 - DEBUG - defmap: {}
2025-05-02 21:52:19,018 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-02 21:52:19,018 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-02 21:52:19,018 - DEBUG - keep phismap: {}
2025-05-02 21:52:19,018 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-02 21:52:19,018 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-02 21:52:19,018 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'res': '$t_out6.2'}), (8, {'res': '$interp_win8.3'}), (10, {'res': '$interp_delta10.4'}), (12, {'res': '$num_table12.5'}), (14, {'res': '$scale14.6'}), (16, {'res': '$y16.7'}), (18, {'func': '$2load_global.0', 'args': ['$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6', '$y16.7'], 'res': '$18call_function.8'}), (22, {'res': '$const22.9'}), (24, {'retval': '$const22.9', 'castval': '$24return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-02 21:52:19,081 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    t_out = arg(1, name=t_out)               ['t_out']
    interp_win = arg(2, name=interp_win)     ['interp_win']
    interp_delta = arg(3, name=interp_delta) ['interp_delta']
    num_table = arg(4, name=num_table)       ['num_table']
    scale = arg(5, name=scale)               ['scale']
    y = arg(6, name=y)                       ['y']
    $2load_global.0 = global(_resample_loop_s: CPUDispatcher(<function _resample_loop at 0x000002D3494E8CA0>)) ['$2load_global.0']
    $18call_function.8 = call $2load_global.0(x, t_out, interp_win, interp_delta, num_table, scale, y, func=$2load_global.0, args=[Var(x, interpn.py:86), Var(t_out, interpn.py:86), Var(interp_win, interpn.py:86), Var(interp_delta, interpn.py:86), Var(num_table, interpn.py:86), Var(scale, interpn.py:86), Var(y, interpn.py:86)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call_function.8', '$2load_global.0', 'interp_delta', 'interp_win', 'num_table', 'scale', 't_out', 'x', 'y']
    $const22.9 = const(NoneType, None)       ['$const22.9']
    $24return_value.10 = cast(value=$const22.9) ['$24return_value.10', '$const22.9']
    return $24return_value.10                ['$24return_value.10']

2025-05-02 21:52:19,081 - DEBUG - ==== SSA block analysis pass on 0
2025-05-02 21:52:19,081 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E778A00>
2025-05-02 21:52:19,081 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,081 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,081 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,081 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,081 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,081 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,081 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,081 - DEBUG - on stmt: $2load_global.0 = global(_resample_loop_s: CPUDispatcher(<function _resample_loop at 0x000002D3494E8CA0>))
2025-05-02 21:52:19,081 - DEBUG - on stmt: $18call_function.8 = call $2load_global.0(x, t_out, interp_win, interp_delta, num_table, scale, y, func=$2load_global.0, args=[Var(x, interpn.py:86), Var(t_out, interpn.py:86), Var(interp_win, interpn.py:86), Var(interp_delta, interpn.py:86), Var(num_table, interpn.py:86), Var(scale, interpn.py:86), Var(y, interpn.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,081 - DEBUG - on stmt: $const22.9 = const(NoneType, None)
2025-05-02 21:52:19,081 - DEBUG - on stmt: $24return_value.10 = cast(value=$const22.9)
2025-05-02 21:52:19,081 - DEBUG - on stmt: return $24return_value.10
2025-05-02 21:52:19,081 - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call_function.8': [<numba.core.ir.Assign object at 0x000002D34E791D90>],
             '$24return_value.10': [<numba.core.ir.Assign object at 0x000002D34E7788B0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000002D34E7913D0>],
             '$const22.9': [<numba.core.ir.Assign object at 0x000002D34E778130>],
             'interp_delta': [<numba.core.ir.Assign object at 0x000002D34E778EB0>],
             'interp_win': [<numba.core.ir.Assign object at 0x000002D34E778D90>],
             'num_table': [<numba.core.ir.Assign object at 0x000002D34E778FD0>],
             'scale': [<numba.core.ir.Assign object at 0x000002D34E791130>],
             't_out': [<numba.core.ir.Assign object at 0x000002D34E778C70>],
             'x': [<numba.core.ir.Assign object at 0x000002D34E7781F0>],
             'y': [<numba.core.ir.Assign object at 0x000002D34E791250>]})
2025-05-02 21:52:19,081 - DEBUG - SSA violators set()
2025-05-02 21:52:19,097 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=9)
           2	LOAD_GLOBAL(arg=0, lineno=9)
           4	LOAD_FAST(arg=5, lineno=9)
           6	LOAD_FAST(arg=4, lineno=9)
           8	BINARY_MULTIPLY(arg=None, lineno=9)
          10	CALL_FUNCTION(arg=1, lineno=9)
          12	STORE_FAST(arg=7, lineno=9)
          14	LOAD_CONST(arg=1, lineno=10)
          16	STORE_FAST(arg=8, lineno=10)
          18	LOAD_CONST(arg=2, lineno=12)
          20	STORE_FAST(arg=9, lineno=12)
          22	LOAD_CONST(arg=1, lineno=13)
          24	STORE_FAST(arg=10, lineno=13)
          26	LOAD_CONST(arg=1, lineno=14)
          28	STORE_FAST(arg=11, lineno=14)
          30	LOAD_CONST(arg=2, lineno=15)
          32	STORE_FAST(arg=12, lineno=15)
          34	LOAD_CONST(arg=1, lineno=16)
          36	STORE_FAST(arg=13, lineno=16)
          38	LOAD_CONST(arg=1, lineno=17)
          40	STORE_FAST(arg=14, lineno=17)
          42	LOAD_FAST(arg=2, lineno=19)
          44	LOAD_ATTR(arg=1, lineno=19)
          46	LOAD_CONST(arg=2, lineno=19)
          48	BINARY_SUBSCR(arg=None, lineno=19)
          50	STORE_FAST(arg=15, lineno=19)
          52	LOAD_FAST(arg=0, lineno=20)
          54	LOAD_ATTR(arg=1, lineno=20)
          56	LOAD_CONST(arg=2, lineno=20)
          58	BINARY_SUBSCR(arg=None, lineno=20)
          60	STORE_FAST(arg=16, lineno=20)
          62	LOAD_FAST(arg=1, lineno=21)
          64	LOAD_ATTR(arg=1, lineno=21)
          66	LOAD_CONST(arg=2, lineno=21)
          68	BINARY_SUBSCR(arg=None, lineno=21)
          70	STORE_FAST(arg=17, lineno=21)
          72	LOAD_GLOBAL(arg=2, lineno=23)
          74	LOAD_FAST(arg=17, lineno=23)
          76	CALL_FUNCTION(arg=1, lineno=23)
          78	GET_ITER(arg=None, lineno=23)
>         80	FOR_ITER(arg=298, lineno=23)
          84	STORE_FAST(arg=18, lineno=23)
          86	LOAD_FAST(arg=1, lineno=24)
          88	LOAD_FAST(arg=18, lineno=24)
          90	BINARY_SUBSCR(arg=None, lineno=24)
          92	STORE_FAST(arg=8, lineno=24)
          94	LOAD_GLOBAL(arg=0, lineno=27)
          96	LOAD_FAST(arg=8, lineno=27)
          98	CALL_FUNCTION(arg=1, lineno=27)
         100	STORE_FAST(arg=9, lineno=27)
         102	LOAD_FAST(arg=5, lineno=30)
         104	LOAD_FAST(arg=8, lineno=30)
         106	LOAD_FAST(arg=9, lineno=30)
         108	BINARY_SUBTRACT(arg=None, lineno=30)
         110	BINARY_MULTIPLY(arg=None, lineno=30)
         112	STORE_FAST(arg=10, lineno=30)
         114	LOAD_FAST(arg=10, lineno=33)
         116	LOAD_FAST(arg=4, lineno=33)
         118	BINARY_MULTIPLY(arg=None, lineno=33)
         120	STORE_FAST(arg=11, lineno=33)
         122	LOAD_GLOBAL(arg=0, lineno=34)
         124	LOAD_FAST(arg=11, lineno=34)
         126	CALL_FUNCTION(arg=1, lineno=34)
         128	STORE_FAST(arg=12, lineno=34)
         130	LOAD_FAST(arg=11, lineno=37)
         132	LOAD_FAST(arg=12, lineno=37)
         134	BINARY_SUBTRACT(arg=None, lineno=37)
         136	STORE_FAST(arg=13, lineno=37)
         138	LOAD_GLOBAL(arg=3, lineno=40)
         140	LOAD_FAST(arg=9, lineno=40)
         142	LOAD_CONST(arg=3, lineno=40)
         144	BINARY_ADD(arg=None, lineno=40)
         146	LOAD_FAST(arg=15, lineno=40)
         148	LOAD_FAST(arg=12, lineno=40)
         150	BINARY_SUBTRACT(arg=None, lineno=40)
         152	LOAD_FAST(arg=7, lineno=40)
         154	BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
         156	CALL_FUNCTION(arg=2, lineno=40)
         158	STORE_FAST(arg=19, lineno=40)
         160	LOAD_GLOBAL(arg=4, lineno=41)
         162	LOAD_FAST(arg=19, lineno=41)
         164	CALL_FUNCTION(arg=1, lineno=41)
         166	GET_ITER(arg=None, lineno=41)
>        168	FOR_ITER(arg=68, lineno=41)
         170	STORE_FAST(arg=20, lineno=41)
         172	LOAD_FAST(arg=2, lineno=44)
         174	LOAD_FAST(arg=12, lineno=44)
         176	LOAD_FAST(arg=20, lineno=44)
         178	LOAD_FAST(arg=7, lineno=44)
         180	BINARY_MULTIPLY(arg=None, lineno=44)
         182	BINARY_ADD(arg=None, lineno=44)
         184	BINARY_SUBSCR(arg=None, lineno=44)
         186	LOAD_FAST(arg=13, lineno=45)
         188	LOAD_FAST(arg=3, lineno=45)
         190	LOAD_FAST(arg=12, lineno=45)
         192	LOAD_FAST(arg=20, lineno=45)
         194	LOAD_FAST(arg=7, lineno=45)
         196	BINARY_MULTIPLY(arg=None, lineno=45)
         198	BINARY_ADD(arg=None, lineno=45)
         200	BINARY_SUBSCR(arg=None, lineno=45)
         202	BINARY_MULTIPLY(arg=None, lineno=45)
         204	BINARY_ADD(arg=None, lineno=44)
         206	STORE_FAST(arg=14, lineno=43)
         208	LOAD_FAST(arg=6, lineno=47)
         210	LOAD_FAST(arg=18, lineno=47)
         212	DUP_TOP_TWO(arg=None, lineno=47)
         214	BINARY_SUBSCR(arg=None, lineno=47)
         216	LOAD_FAST(arg=14, lineno=47)
         218	LOAD_FAST(arg=0, lineno=47)
         220	LOAD_FAST(arg=9, lineno=47)
         222	LOAD_FAST(arg=20, lineno=47)
         224	BINARY_SUBTRACT(arg=None, lineno=47)
         226	BINARY_SUBSCR(arg=None, lineno=47)
         228	BINARY_MULTIPLY(arg=None, lineno=47)
         230	INPLACE_ADD(arg=None, lineno=47)
         232	ROT_THREE(arg=None, lineno=47)
         234	STORE_SUBSCR(arg=None, lineno=47)
         236	JUMP_ABSOLUTE(arg=168, lineno=47)
>        238	LOAD_FAST(arg=5, lineno=50)
         240	LOAD_FAST(arg=10, lineno=50)
         242	BINARY_SUBTRACT(arg=None, lineno=50)
         244	STORE_FAST(arg=10, lineno=50)
         246	LOAD_FAST(arg=10, lineno=53)
         248	LOAD_FAST(arg=4, lineno=53)
         250	BINARY_MULTIPLY(arg=None, lineno=53)
         252	STORE_FAST(arg=11, lineno=53)
         254	LOAD_GLOBAL(arg=0, lineno=54)
         256	LOAD_FAST(arg=11, lineno=54)
         258	CALL_FUNCTION(arg=1, lineno=54)
         260	STORE_FAST(arg=12, lineno=54)
         262	LOAD_FAST(arg=11, lineno=57)
         264	LOAD_FAST(arg=12, lineno=57)
         266	BINARY_SUBTRACT(arg=None, lineno=57)
         268	STORE_FAST(arg=13, lineno=57)
         270	LOAD_GLOBAL(arg=3, lineno=60)
         272	LOAD_FAST(arg=16, lineno=60)
         274	LOAD_FAST(arg=9, lineno=60)
         276	BINARY_SUBTRACT(arg=None, lineno=60)
         278	LOAD_CONST(arg=3, lineno=60)
         280	BINARY_SUBTRACT(arg=None, lineno=60)
         282	LOAD_FAST(arg=15, lineno=60)
         284	LOAD_FAST(arg=12, lineno=60)
         286	BINARY_SUBTRACT(arg=None, lineno=60)
         288	LOAD_FAST(arg=7, lineno=60)
         290	BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
         292	CALL_FUNCTION(arg=2, lineno=60)
         294	STORE_FAST(arg=21, lineno=60)
         296	LOAD_GLOBAL(arg=4, lineno=61)
         298	LOAD_FAST(arg=21, lineno=61)
         300	CALL_FUNCTION(arg=1, lineno=61)
         302	GET_ITER(arg=None, lineno=61)
>        304	FOR_ITER(arg=74, lineno=61)
         306	STORE_FAST(arg=22, lineno=61)
         308	LOAD_FAST(arg=2, lineno=63)
         310	LOAD_FAST(arg=12, lineno=63)
         312	LOAD_FAST(arg=22, lineno=63)
         314	LOAD_FAST(arg=7, lineno=63)
         316	BINARY_MULTIPLY(arg=None, lineno=63)
         318	BINARY_ADD(arg=None, lineno=63)
         320	BINARY_SUBSCR(arg=None, lineno=63)
         322	LOAD_FAST(arg=13, lineno=64)
         324	LOAD_FAST(arg=3, lineno=64)
         326	LOAD_FAST(arg=12, lineno=64)
         328	LOAD_FAST(arg=22, lineno=64)
         330	LOAD_FAST(arg=7, lineno=64)
         332	BINARY_MULTIPLY(arg=None, lineno=64)
         334	BINARY_ADD(arg=None, lineno=64)
         336	BINARY_SUBSCR(arg=None, lineno=64)
         338	BINARY_MULTIPLY(arg=None, lineno=64)
         340	BINARY_ADD(arg=None, lineno=63)
         342	STORE_FAST(arg=14, lineno=62)
         344	LOAD_FAST(arg=6, lineno=66)
         346	LOAD_FAST(arg=18, lineno=66)
         348	DUP_TOP_TWO(arg=None, lineno=66)
         350	BINARY_SUBSCR(arg=None, lineno=66)
         352	LOAD_FAST(arg=14, lineno=66)
         354	LOAD_FAST(arg=0, lineno=66)
         356	LOAD_FAST(arg=9, lineno=66)
         358	LOAD_FAST(arg=22, lineno=66)
         360	BINARY_ADD(arg=None, lineno=66)
         362	LOAD_CONST(arg=3, lineno=66)
         364	BINARY_ADD(arg=None, lineno=66)
         366	BINARY_SUBSCR(arg=None, lineno=66)
         368	BINARY_MULTIPLY(arg=None, lineno=66)
         370	INPLACE_ADD(arg=None, lineno=66)
         372	ROT_THREE(arg=None, lineno=66)
         374	STORE_SUBSCR(arg=None, lineno=66)
         376	JUMP_ABSOLUTE(arg=304, lineno=66)
>        380	JUMP_ABSOLUTE(arg=80, lineno=66)
>        382	LOAD_CONST(arg=0, lineno=66)
         384	RETURN_VALUE(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-02 21:52:19,097 - DEBUG - stack: []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=9)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=9)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=5, lineno=9)
2025-05-02 21:52:19,097 - DEBUG - stack ['$2load_global.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=4, lineno=9)
2025-05-02 21:52:19,097 - DEBUG - stack ['$2load_global.0', '$scale4.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=9)
2025-05-02 21:52:19,097 - DEBUG - stack ['$2load_global.0', '$scale4.1', '$num_table6.2']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=9)
2025-05-02 21:52:19,097 - DEBUG - stack ['$2load_global.0', '$8binary_multiply.3']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=12, inst=STORE_FAST(arg=7, lineno=9)
2025-05-02 21:52:19,097 - DEBUG - stack ['$10call_function.4']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=10)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=8, lineno=10)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const14.5']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=12)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=20, inst=STORE_FAST(arg=9, lineno=12)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const18.6']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=13)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=24, inst=STORE_FAST(arg=10, lineno=13)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const22.7']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=26, inst=LOAD_CONST(arg=1, lineno=14)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=28, inst=STORE_FAST(arg=11, lineno=14)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const26.8']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=15)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=32, inst=STORE_FAST(arg=12, lineno=15)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const30.9']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=16)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=36, inst=STORE_FAST(arg=13, lineno=16)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const34.10']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=17)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=40, inst=STORE_FAST(arg=14, lineno=17)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const38.11']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=42, inst=LOAD_FAST(arg=2, lineno=19)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=44, inst=LOAD_ATTR(arg=1, lineno=19)
2025-05-02 21:52:19,097 - DEBUG - stack ['$interp_win42.12']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=46, inst=LOAD_CONST(arg=2, lineno=19)
2025-05-02 21:52:19,097 - DEBUG - stack ['$44load_attr.13']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=19)
2025-05-02 21:52:19,097 - DEBUG - stack ['$44load_attr.13', '$const46.14']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=50, inst=STORE_FAST(arg=15, lineno=19)
2025-05-02 21:52:19,097 - DEBUG - stack ['$48binary_subscr.15']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=20)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=54, inst=LOAD_ATTR(arg=1, lineno=20)
2025-05-02 21:52:19,097 - DEBUG - stack ['$x52.16']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=56, inst=LOAD_CONST(arg=2, lineno=20)
2025-05-02 21:52:19,097 - DEBUG - stack ['$54load_attr.17']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=20)
2025-05-02 21:52:19,097 - DEBUG - stack ['$54load_attr.17', '$const56.18']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=60, inst=STORE_FAST(arg=16, lineno=20)
2025-05-02 21:52:19,097 - DEBUG - stack ['$58binary_subscr.19']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=21)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=64, inst=LOAD_ATTR(arg=1, lineno=21)
2025-05-02 21:52:19,097 - DEBUG - stack ['$t_out62.20']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=21)
2025-05-02 21:52:19,097 - DEBUG - stack ['$64load_attr.21']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=21)
2025-05-02 21:52:19,097 - DEBUG - stack ['$64load_attr.21', '$const66.22']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=70, inst=STORE_FAST(arg=17, lineno=21)
2025-05-02 21:52:19,097 - DEBUG - stack ['$68binary_subscr.23']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=72, inst=LOAD_GLOBAL(arg=2, lineno=23)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=17, lineno=23)
2025-05-02 21:52:19,097 - DEBUG - stack ['$72load_global.24']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=23)
2025-05-02 21:52:19,097 - DEBUG - stack ['$72load_global.24', '$n_out74.25']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=23)
2025-05-02 21:52:19,097 - DEBUG - stack ['$76call_function.26']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.27',), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi80.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=298, lineno=23)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi80.0']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=382, stack=(), blockstack=(), npush=0), Edge(pc=84, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=382 nstack_initial=0), State(pc_initial=84 nstack_initial=2)])
2025-05-02 21:52:19,097 - DEBUG - stack: []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=382, inst=LOAD_CONST(arg=0, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack []
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=384, inst=RETURN_VALUE(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$const382.0']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=84 nstack_initial=2)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi84.0', '$phi84.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=84, inst=STORE_FAST(arg=18, lineno=23)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$phi84.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=24)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=88, inst=LOAD_FAST(arg=18, lineno=24)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$t_out86.2']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=24)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$t_out86.2', '$t88.3']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=92, inst=STORE_FAST(arg=8, lineno=24)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$90binary_subscr.4']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=94, inst=LOAD_GLOBAL(arg=0, lineno=27)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=96, inst=LOAD_FAST(arg=8, lineno=27)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$94load_global.5']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=98, inst=CALL_FUNCTION(arg=1, lineno=27)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$94load_global.5', '$time_register96.6']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=100, inst=STORE_FAST(arg=9, lineno=27)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$98call_function.7']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=102, inst=LOAD_FAST(arg=5, lineno=30)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=104, inst=LOAD_FAST(arg=8, lineno=30)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$scale102.8']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=9, lineno=30)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$scale102.8', '$time_register104.9']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=30)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$scale102.8', '$time_register104.9', '$n106.10']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=110, inst=BINARY_MULTIPLY(arg=None, lineno=30)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$scale102.8', '$108binary_subtract.11']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=112, inst=STORE_FAST(arg=10, lineno=30)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$110binary_multiply.12']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=10, lineno=33)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=4, lineno=33)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$frac114.13']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=118, inst=BINARY_MULTIPLY(arg=None, lineno=33)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$frac114.13', '$num_table116.14']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=120, inst=STORE_FAST(arg=11, lineno=33)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$118binary_multiply.15']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=122, inst=LOAD_GLOBAL(arg=0, lineno=34)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=124, inst=LOAD_FAST(arg=11, lineno=34)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$122load_global.16']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=126, inst=CALL_FUNCTION(arg=1, lineno=34)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$122load_global.16', '$index_frac124.17']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=128, inst=STORE_FAST(arg=12, lineno=34)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$126call_function.18']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=130, inst=LOAD_FAST(arg=11, lineno=37)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=12, lineno=37)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$index_frac130.19']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=134, inst=BINARY_SUBTRACT(arg=None, lineno=37)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$index_frac130.19', '$offset132.20']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=136, inst=STORE_FAST(arg=13, lineno=37)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$134binary_subtract.21']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=138, inst=LOAD_GLOBAL(arg=3, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=140, inst=LOAD_FAST(arg=9, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=142, inst=LOAD_CONST(arg=3, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$n140.23']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=144, inst=BINARY_ADD(arg=None, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$n140.23', '$const142.24']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=146, inst=LOAD_FAST(arg=15, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=148, inst=LOAD_FAST(arg=12, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$nwin146.26']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=150, inst=BINARY_SUBTRACT(arg=None, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$nwin146.26', '$offset148.27']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=7, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$150binary_subtract.28']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=154, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$150binary_subtract.28', '$index_step152.29']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=156, inst=CALL_FUNCTION(arg=2, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$154binary_floor_divide.30']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=158, inst=STORE_FAST(arg=19, lineno=40)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$156call_function.31']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=160, inst=LOAD_GLOBAL(arg=4, lineno=41)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=162, inst=LOAD_FAST(arg=19, lineno=41)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$160load_global.32']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=41)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$160load_global.32', '$i_max162.33']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=166, inst=GET_ITER(arg=None, lineno=41)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi84.0', '$164call_function.34']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=168, stack=('$phi84.0', '$166get_iter.35'), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=2)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi168.0', '$phi168.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=168, inst=FOR_ITER(arg=68, lineno=41)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi168.0', '$phi168.1']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=238, stack=('$phi168.0',), blockstack=(), npush=0), Edge(pc=170, stack=('$phi168.0', '$phi168.1', '$168for_iter.3'), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=238 nstack_initial=1), State(pc_initial=170 nstack_initial=3)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi238.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=238, inst=LOAD_FAST(arg=5, lineno=50)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=10, lineno=50)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$scale238.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=242, inst=BINARY_SUBTRACT(arg=None, lineno=50)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$scale238.1', '$frac240.2']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=244, inst=STORE_FAST(arg=10, lineno=50)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$242binary_subtract.3']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=10, lineno=53)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=248, inst=LOAD_FAST(arg=4, lineno=53)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$frac246.4']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=250, inst=BINARY_MULTIPLY(arg=None, lineno=53)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$frac246.4', '$num_table248.5']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=252, inst=STORE_FAST(arg=11, lineno=53)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$250binary_multiply.6']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=254, inst=LOAD_GLOBAL(arg=0, lineno=54)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=11, lineno=54)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$254load_global.7']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=258, inst=CALL_FUNCTION(arg=1, lineno=54)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$254load_global.7', '$index_frac256.8']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=260, inst=STORE_FAST(arg=12, lineno=54)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$258call_function.9']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=262, inst=LOAD_FAST(arg=11, lineno=57)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=264, inst=LOAD_FAST(arg=12, lineno=57)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$index_frac262.10']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=266, inst=BINARY_SUBTRACT(arg=None, lineno=57)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$index_frac262.10', '$offset264.11']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=268, inst=STORE_FAST(arg=13, lineno=57)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$266binary_subtract.12']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=270, inst=LOAD_GLOBAL(arg=3, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=272, inst=LOAD_FAST(arg=16, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=274, inst=LOAD_FAST(arg=9, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$n_orig272.14']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=276, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$n_orig272.14', '$n274.15']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=278, inst=LOAD_CONST(arg=3, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$276binary_subtract.16']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=280, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$276binary_subtract.16', '$const278.17']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=282, inst=LOAD_FAST(arg=15, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=284, inst=LOAD_FAST(arg=12, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$nwin282.19']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=286, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$nwin282.19', '$offset284.20']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=288, inst=LOAD_FAST(arg=7, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$286binary_subtract.21']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=290, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$286binary_subtract.21', '$index_step288.22']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=292, inst=CALL_FUNCTION(arg=2, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$290binary_floor_divide.23']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=294, inst=STORE_FAST(arg=21, lineno=60)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$292call_function.24']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=296, inst=LOAD_GLOBAL(arg=4, lineno=61)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=298, inst=LOAD_FAST(arg=21, lineno=61)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$296load_global.25']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=300, inst=CALL_FUNCTION(arg=1, lineno=61)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$296load_global.25', '$k_max298.26']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=302, inst=GET_ITER(arg=None, lineno=61)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi238.0', '$300call_function.27']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=304, stack=('$phi238.0', '$302get_iter.28'), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=170 nstack_initial=3), State(pc_initial=304 nstack_initial=2)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi170.0', '$phi170.1', '$phi170.2']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=170, inst=STORE_FAST(arg=20, lineno=41)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$phi170.2']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=172, inst=LOAD_FAST(arg=2, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=12, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=176, inst=LOAD_FAST(arg=20, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=178, inst=LOAD_FAST(arg=7, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$i176.5']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$i176.5', '$index_step178.6']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$180binary_multiply.7']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$182binary_add.8']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=186, inst=LOAD_FAST(arg=13, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=188, inst=LOAD_FAST(arg=3, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=12, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=192, inst=LOAD_FAST(arg=20, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$i192.13']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=196, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$i192.13', '$index_step194.14']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=198, inst=BINARY_ADD(arg=None, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$196binary_multiply.15']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=200, inst=BINARY_SUBSCR(arg=None, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$198binary_add.16']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=202, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$200binary_subscr.17']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=204, inst=BINARY_ADD(arg=None, lineno=44)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$202binary_multiply.18']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=206, inst=STORE_FAST(arg=14, lineno=43)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$204binary_add.19']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=208, inst=LOAD_FAST(arg=6, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=210, inst=LOAD_FAST(arg=18, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=212, inst=DUP_TOP_TWO(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=214, inst=BINARY_SUBSCR(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$212dup_top_two.22', '$212dup_top_two.23']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=216, inst=LOAD_FAST(arg=14, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=220, inst=LOAD_FAST(arg=9, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=222, inst=LOAD_FAST(arg=20, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$n220.27']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=224, inst=BINARY_SUBTRACT(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$n220.27', '$i222.28']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=226, inst=BINARY_SUBSCR(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$224binary_subtract.29']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=228, inst=BINARY_MULTIPLY(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$226binary_subscr.30']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=230, inst=INPLACE_ADD(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$228binary_multiply.31']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=232, inst=ROT_THREE(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$230inplace_add.32']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=234, inst=STORE_SUBSCR(arg=None, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1', '$230inplace_add.32', '$y208.20', '$t210.21']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=236, inst=JUMP_ABSOLUTE(arg=168, lineno=47)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=168, stack=('$phi170.0', '$phi170.1'), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=304 nstack_initial=2), State(pc_initial=168 nstack_initial=2)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi304.0', '$phi304.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=304, inst=FOR_ITER(arg=74, lineno=61)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi304.0', '$phi304.1']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=380, stack=('$phi304.0',), blockstack=(), npush=0), Edge(pc=306, stack=('$phi304.0', '$phi304.1', '$304for_iter.3'), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=2), State(pc_initial=380 nstack_initial=1), State(pc_initial=306 nstack_initial=3)])
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=380 nstack_initial=1), State(pc_initial=306 nstack_initial=3)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi380.0']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=380, inst=JUMP_ABSOLUTE(arg=80, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi380.0']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi380.0',), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=306 nstack_initial=3), State(pc_initial=80 nstack_initial=1)])
2025-05-02 21:52:19,097 - DEBUG - stack: ['$phi306.0', '$phi306.1', '$phi306.2']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=306, inst=STORE_FAST(arg=22, lineno=61)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$phi306.2']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=308, inst=LOAD_FAST(arg=2, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=310, inst=LOAD_FAST(arg=12, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=312, inst=LOAD_FAST(arg=22, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=314, inst=LOAD_FAST(arg=7, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$k312.5']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=316, inst=BINARY_MULTIPLY(arg=None, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$k312.5', '$index_step314.6']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=318, inst=BINARY_ADD(arg=None, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$316binary_multiply.7']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=320, inst=BINARY_SUBSCR(arg=None, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$318binary_add.8']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=322, inst=LOAD_FAST(arg=13, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=324, inst=LOAD_FAST(arg=3, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=326, inst=LOAD_FAST(arg=12, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=328, inst=LOAD_FAST(arg=22, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=330, inst=LOAD_FAST(arg=7, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$k328.13']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=332, inst=BINARY_MULTIPLY(arg=None, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$k328.13', '$index_step330.14']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=334, inst=BINARY_ADD(arg=None, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$332binary_multiply.15']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=336, inst=BINARY_SUBSCR(arg=None, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$334binary_add.16']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=338, inst=BINARY_MULTIPLY(arg=None, lineno=64)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$336binary_subscr.17']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=340, inst=BINARY_ADD(arg=None, lineno=63)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$338binary_multiply.18']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=342, inst=STORE_FAST(arg=14, lineno=62)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$340binary_add.19']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=344, inst=LOAD_FAST(arg=6, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=346, inst=LOAD_FAST(arg=18, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=348, inst=DUP_TOP_TWO(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=350, inst=BINARY_SUBSCR(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$348dup_top_two.22', '$348dup_top_two.23']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=352, inst=LOAD_FAST(arg=14, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=354, inst=LOAD_FAST(arg=0, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=356, inst=LOAD_FAST(arg=9, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=358, inst=LOAD_FAST(arg=22, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$n356.27']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=360, inst=BINARY_ADD(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$n356.27', '$k358.28']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=362, inst=LOAD_CONST(arg=3, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$360binary_add.29']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=364, inst=BINARY_ADD(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$360binary_add.29', '$const362.30']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=366, inst=BINARY_SUBSCR(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$364binary_add.31']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=368, inst=BINARY_MULTIPLY(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$366binary_subscr.32']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=370, inst=INPLACE_ADD(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$368binary_multiply.33']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=372, inst=ROT_THREE(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$370inplace_add.34']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=374, inst=STORE_SUBSCR(arg=None, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1', '$370inplace_add.34', '$y344.20', '$t346.21']
2025-05-02 21:52:19,097 - DEBUG - dispatch pc=376, inst=JUMP_ABSOLUTE(arg=304, lineno=66)
2025-05-02 21:52:19,097 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 21:52:19,097 - DEBUG - end state. edges=[Edge(pc=304, stack=('$phi306.0', '$phi306.1'), blockstack=(), npush=0)]
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=304 nstack_initial=2)])
2025-05-02 21:52:19,097 - DEBUG - pending: deque([State(pc_initial=304 nstack_initial=2)])
2025-05-02 21:52:19,097 - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-02 21:52:19,097 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=84 nstack_initial=2): {'$phi84.1'},
             State(pc_initial=168 nstack_initial=2): {'$phi168.1'},
             State(pc_initial=170 nstack_initial=3): {'$phi170.2'},
             State(pc_initial=238 nstack_initial=1): set(),
             State(pc_initial=304 nstack_initial=2): {'$phi304.1'},
             State(pc_initial=306 nstack_initial=3): {'$phi306.2'},
             State(pc_initial=380 nstack_initial=1): set(),
             State(pc_initial=382 nstack_initial=0): set()})
2025-05-02 21:52:19,113 - DEBUG - defmap: {'$phi168.1': State(pc_initial=84 nstack_initial=2),
 '$phi170.2': State(pc_initial=168 nstack_initial=2),
 '$phi304.1': State(pc_initial=238 nstack_initial=1),
 '$phi306.2': State(pc_initial=304 nstack_initial=2),
 '$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi84.1': State(pc_initial=80 nstack_initial=1)}
2025-05-02 21:52:19,113 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi170.0',
                            State(pc_initial=170 nstack_initial=3)),
                           ('$phi84.0', State(pc_initial=84 nstack_initial=2))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2)),
                           ('$phi170.1',
                            State(pc_initial=170 nstack_initial=3))},
             '$phi170.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.1': {('$phi168.1',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi304.0': {('$phi238.0',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi306.0',
                            State(pc_initial=306 nstack_initial=3))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi306.1',
                            State(pc_initial=306 nstack_initial=3))},
             '$phi306.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.1': {('$phi304.1',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi380.0',
                           State(pc_initial=380 nstack_initial=1))},
             '$phi84.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:52:19,113 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2)),
                           ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2)),
                           ('$phi168.1',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi304.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2)),
                           ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi304.1',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:52:19,113 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:52:19,113 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 21:52:19,113 - DEBUG - keep phismap: {'$phi168.1': {('$166get_iter.35', State(pc_initial=84 nstack_initial=2))},
 '$phi170.2': {('$168for_iter.3', State(pc_initial=168 nstack_initial=2))},
 '$phi304.1': {('$302get_iter.28', State(pc_initial=238 nstack_initial=1))},
 '$phi306.2': {('$304for_iter.3', State(pc_initial=304 nstack_initial=2))},
 '$phi80.0': {('$78get_iter.27', State(pc_initial=0 nstack_initial=0))},
 '$phi84.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-05-02 21:52:19,113 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.27'},
             State(pc_initial=80 nstack_initial=1): {'$phi84.1': '$80for_iter.2'},
             State(pc_initial=84 nstack_initial=2): {'$phi168.1': '$166get_iter.35'},
             State(pc_initial=168 nstack_initial=2): {'$phi170.2': '$168for_iter.3'},
             State(pc_initial=238 nstack_initial=1): {'$phi304.1': '$302get_iter.28'},
             State(pc_initial=304 nstack_initial=2): {'$phi306.2': '$304for_iter.3'}})
2025-05-02 21:52:19,113 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-02 21:52:19,113 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$scale4.1'}), (6, {'res': '$num_table6.2'}), (8, {'lhs': '$scale4.1', 'rhs': '$num_table6.2', 'res': '$8binary_multiply.3'}), (10, {'func': '$2load_global.0', 'args': ['$8binary_multiply.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4'}), (14, {'res': '$const14.5'}), (16, {'value': '$const14.5'}), (18, {'res': '$const18.6'}), (20, {'value': '$const18.6'}), (22, {'res': '$const22.7'}), (24, {'value': '$const22.7'}), (26, {'res': '$const26.8'}), (28, {'value': '$const26.8'}), (30, {'res': '$const30.9'}), (32, {'value': '$const30.9'}), (34, {'res': '$const34.10'}), (36, {'value': '$const34.10'}), (38, {'res': '$const38.11'}), (40, {'value': '$const38.11'}), (42, {'res': '$interp_win42.12'}), (44, {'item': '$interp_win42.12', 'res': '$44load_attr.13'}), (46, {'res': '$const46.14'}), (48, {'index': '$const46.14', 'target': '$44load_attr.13', 'res': '$48binary_subscr.15'}), (50, {'value': '$48binary_subscr.15'}), (52, {'res': '$x52.16'}), (54, {'item': '$x52.16', 'res': '$54load_attr.17'}), (56, {'res': '$const56.18'}), (58, {'index': '$const56.18', 'target': '$54load_attr.17', 'res': '$58binary_subscr.19'}), (60, {'value': '$58binary_subscr.19'}), (62, {'res': '$t_out62.20'}), (64, {'item': '$t_out62.20', 'res': '$64load_attr.21'}), (66, {'res': '$const66.22'}), (68, {'index': '$const66.22', 'target': '$64load_attr.21', 'res': '$68binary_subscr.23'}), (70, {'value': '$68binary_subscr.23'}), (72, {'res': '$72load_global.24'}), (74, {'res': '$n_out74.25'}), (76, {'func': '$72load_global.24', 'args': ['$n_out74.25'], 'res': '$76call_function.26'}), (78, {'value': '$76call_function.26', 'res': '$78get_iter.27'})), outgoing_phis={'$phi80.0': '$78get_iter.27'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.27',)})
2025-05-02 21:52:19,113 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi84.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={382: (), 84: ('$phi80.0', '$80for_iter.2')})
2025-05-02 21:52:19,113 - DEBUG - block_infos State(pc_initial=84 nstack_initial=2):
AdaptBlockInfo(insts=((84, {'value': '$phi84.1'}), (86, {'res': '$t_out86.2'}), (88, {'res': '$t88.3'}), (90, {'index': '$t88.3', 'target': '$t_out86.2', 'res': '$90binary_subscr.4'}), (92, {'value': '$90binary_subscr.4'}), (94, {'res': '$94load_global.5'}), (96, {'res': '$time_register96.6'}), (98, {'func': '$94load_global.5', 'args': ['$time_register96.6'], 'res': '$98call_function.7'}), (100, {'value': '$98call_function.7'}), (102, {'res': '$scale102.8'}), (104, {'res': '$time_register104.9'}), (106, {'res': '$n106.10'}), (108, {'lhs': '$time_register104.9', 'rhs': '$n106.10', 'res': '$108binary_subtract.11'}), (110, {'lhs': '$scale102.8', 'rhs': '$108binary_subtract.11', 'res': '$110binary_multiply.12'}), (112, {'value': '$110binary_multiply.12'}), (114, {'res': '$frac114.13'}), (116, {'res': '$num_table116.14'}), (118, {'lhs': '$frac114.13', 'rhs': '$num_table116.14', 'res': '$118binary_multiply.15'}), (120, {'value': '$118binary_multiply.15'}), (122, {'res': '$122load_global.16'}), (124, {'res': '$index_frac124.17'}), (126, {'func': '$122load_global.16', 'args': ['$index_frac124.17'], 'res': '$126call_function.18'}), (128, {'value': '$126call_function.18'}), (130, {'res': '$index_frac130.19'}), (132, {'res': '$offset132.20'}), (134, {'lhs': '$index_frac130.19', 'rhs': '$offset132.20', 'res': '$134binary_subtract.21'}), (136, {'value': '$134binary_subtract.21'}), (138, {'res': '$138load_global.22'}), (140, {'res': '$n140.23'}), (142, {'res': '$const142.24'}), (144, {'lhs': '$n140.23', 'rhs': '$const142.24', 'res': '$144binary_add.25'}), (146, {'res': '$nwin146.26'}), (148, {'res': '$offset148.27'}), (150, {'lhs': '$nwin146.26', 'rhs': '$offset148.27', 'res': '$150binary_subtract.28'}), (152, {'res': '$index_step152.29'}), (154, {'lhs': '$150binary_subtract.28', 'rhs': '$index_step152.29', 'res': '$154binary_floor_divide.30'}), (156, {'func': '$138load_global.22', 'args': ['$144binary_add.25', '$154binary_floor_divide.30'], 'res': '$156call_function.31'}), (158, {'value': '$156call_function.31'}), (160, {'res': '$160load_global.32'}), (162, {'res': '$i_max162.33'}), (164, {'func': '$160load_global.32', 'args': ['$i_max162.33'], 'res': '$164call_function.34'}), (166, {'value': '$164call_function.34', 'res': '$166get_iter.35'})), outgoing_phis={'$phi168.1': '$166get_iter.35'}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi84.0', '$166get_iter.35')})
2025-05-02 21:52:19,115 - DEBUG - block_infos State(pc_initial=168 nstack_initial=2):
AdaptBlockInfo(insts=((168, {'iterator': '$phi168.1', 'pair': '$168for_iter.2', 'indval': '$168for_iter.3', 'pred': '$168for_iter.4'}),), outgoing_phis={'$phi170.2': '$168for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={238: ('$phi168.0',), 170: ('$phi168.0', '$phi168.1', '$168for_iter.3')})
2025-05-02 21:52:19,115 - DEBUG - block_infos State(pc_initial=170 nstack_initial=3):
AdaptBlockInfo(insts=((170, {'value': '$phi170.2'}), (172, {'res': '$interp_win172.3'}), (174, {'res': '$offset174.4'}), (176, {'res': '$i176.5'}), (178, {'res': '$index_step178.6'}), (180, {'lhs': '$i176.5', 'rhs': '$index_step178.6', 'res': '$180binary_multiply.7'}), (182, {'lhs': '$offset174.4', 'rhs': '$180binary_multiply.7', 'res': '$182binary_add.8'}), (184, {'index': '$182binary_add.8', 'target': '$interp_win172.3', 'res': '$184binary_subscr.9'}), (186, {'res': '$eta186.10'}), (188, {'res': '$interp_delta188.11'}), (190, {'res': '$offset190.12'}), (192, {'res': '$i192.13'}), (194, {'res': '$index_step194.14'}), (196, {'lhs': '$i192.13', 'rhs': '$index_step194.14', 'res': '$196binary_multiply.15'}), (198, {'lhs': '$offset190.12', 'rhs': '$196binary_multiply.15', 'res': '$198binary_add.16'}), (200, {'index': '$198binary_add.16', 'target': '$interp_delta188.11', 'res': '$200binary_subscr.17'}), (202, {'lhs': '$eta186.10', 'rhs': '$200binary_subscr.17', 'res': '$202binary_multiply.18'}), (204, {'lhs': '$184binary_subscr.9', 'rhs': '$202binary_multiply.18', 'res': '$204binary_add.19'}), (206, {'value': '$204binary_add.19'}), (208, {'res': '$y208.20'}), (210, {'res': '$t210.21'}), (212, {'orig': ['$y208.20', '$t210.21'], 'duped': ['$212dup_top_two.22', '$212dup_top_two.23']}), (214, {'index': '$212dup_top_two.23', 'target': '$212dup_top_two.22', 'res': '$214binary_subscr.24'}), (216, {'res': '$weight216.25'}), (218, {'res': '$x218.26'}), (220, {'res': '$n220.27'}), (222, {'res': '$i222.28'}), (224, {'lhs': '$n220.27', 'rhs': '$i222.28', 'res': '$224binary_subtract.29'}), (226, {'index': '$224binary_subtract.29', 'target': '$x218.26', 'res': '$226binary_subscr.30'}), (228, {'lhs': '$weight216.25', 'rhs': '$226binary_subscr.30', 'res': '$228binary_multiply.31'}), (230, {'lhs': '$214binary_subscr.24', 'rhs': '$228binary_multiply.31', 'res': '$230inplace_add.32'}), (234, {'target': '$y208.20', 'index': '$t210.21', 'value': '$230inplace_add.32'}), (236, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi170.0', '$phi170.1')})
2025-05-02 21:52:19,115 - DEBUG - block_infos State(pc_initial=238 nstack_initial=1):
AdaptBlockInfo(insts=((238, {'res': '$scale238.1'}), (240, {'res': '$frac240.2'}), (242, {'lhs': '$scale238.1', 'rhs': '$frac240.2', 'res': '$242binary_subtract.3'}), (244, {'value': '$242binary_subtract.3'}), (246, {'res': '$frac246.4'}), (248, {'res': '$num_table248.5'}), (250, {'lhs': '$frac246.4', 'rhs': '$num_table248.5', 'res': '$250binary_multiply.6'}), (252, {'value': '$250binary_multiply.6'}), (254, {'res': '$254load_global.7'}), (256, {'res': '$index_frac256.8'}), (258, {'func': '$254load_global.7', 'args': ['$index_frac256.8'], 'res': '$258call_function.9'}), (260, {'value': '$258call_function.9'}), (262, {'res': '$index_frac262.10'}), (264, {'res': '$offset264.11'}), (266, {'lhs': '$index_frac262.10', 'rhs': '$offset264.11', 'res': '$266binary_subtract.12'}), (268, {'value': '$266binary_subtract.12'}), (270, {'res': '$270load_global.13'}), (272, {'res': '$n_orig272.14'}), (274, {'res': '$n274.15'}), (276, {'lhs': '$n_orig272.14', 'rhs': '$n274.15', 'res': '$276binary_subtract.16'}), (278, {'res': '$const278.17'}), (280, {'lhs': '$276binary_subtract.16', 'rhs': '$const278.17', 'res': '$280binary_subtract.18'}), (282, {'res': '$nwin282.19'}), (284, {'res': '$offset284.20'}), (286, {'lhs': '$nwin282.19', 'rhs': '$offset284.20', 'res': '$286binary_subtract.21'}), (288, {'res': '$index_step288.22'}), (290, {'lhs': '$286binary_subtract.21', 'rhs': '$index_step288.22', 'res': '$290binary_floor_divide.23'}), (292, {'func': '$270load_global.13', 'args': ['$280binary_subtract.18', '$290binary_floor_divide.23'], 'res': '$292call_function.24'}), (294, {'value': '$292call_function.24'}), (296, {'res': '$296load_global.25'}), (298, {'res': '$k_max298.26'}), (300, {'func': '$296load_global.25', 'args': ['$k_max298.26'], 'res': '$300call_function.27'}), (302, {'value': '$300call_function.27', 'res': '$302get_iter.28'})), outgoing_phis={'$phi304.1': '$302get_iter.28'}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: ('$phi238.0', '$302get_iter.28')})
2025-05-02 21:52:19,115 - DEBUG - block_infos State(pc_initial=304 nstack_initial=2):
AdaptBlockInfo(insts=((304, {'iterator': '$phi304.1', 'pair': '$304for_iter.2', 'indval': '$304for_iter.3', 'pred': '$304for_iter.4'}),), outgoing_phis={'$phi306.2': '$304for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={380: ('$phi304.0',), 306: ('$phi304.0', '$phi304.1', '$304for_iter.3')})
2025-05-02 21:52:19,115 - DEBUG - block_infos State(pc_initial=306 nstack_initial=3):
AdaptBlockInfo(insts=((306, {'value': '$phi306.2'}), (308, {'res': '$interp_win308.3'}), (310, {'res': '$offset310.4'}), (312, {'res': '$k312.5'}), (314, {'res': '$index_step314.6'}), (316, {'lhs': '$k312.5', 'rhs': '$index_step314.6', 'res': '$316binary_multiply.7'}), (318, {'lhs': '$offset310.4', 'rhs': '$316binary_multiply.7', 'res': '$318binary_add.8'}), (320, {'index': '$318binary_add.8', 'target': '$interp_win308.3', 'res': '$320binary_subscr.9'}), (322, {'res': '$eta322.10'}), (324, {'res': '$interp_delta324.11'}), (326, {'res': '$offset326.12'}), (328, {'res': '$k328.13'}), (330, {'res': '$index_step330.14'}), (332, {'lhs': '$k328.13', 'rhs': '$index_step330.14', 'res': '$332binary_multiply.15'}), (334, {'lhs': '$offset326.12', 'rhs': '$332binary_multiply.15', 'res': '$334binary_add.16'}), (336, {'index': '$334binary_add.16', 'target': '$interp_delta324.11', 'res': '$336binary_subscr.17'}), (338, {'lhs': '$eta322.10', 'rhs': '$336binary_subscr.17', 'res': '$338binary_multiply.18'}), (340, {'lhs': '$320binary_subscr.9', 'rhs': '$338binary_multiply.18', 'res': '$340binary_add.19'}), (342, {'value': '$340binary_add.19'}), (344, {'res': '$y344.20'}), (346, {'res': '$t346.21'}), (348, {'orig': ['$y344.20', '$t346.21'], 'duped': ['$348dup_top_two.22', '$348dup_top_two.23']}), (350, {'index': '$348dup_top_two.23', 'target': '$348dup_top_two.22', 'res': '$350binary_subscr.24'}), (352, {'res': '$weight352.25'}), (354, {'res': '$x354.26'}), (356, {'res': '$n356.27'}), (358, {'res': '$k358.28'}), (360, {'lhs': '$n356.27', 'rhs': '$k358.28', 'res': '$360binary_add.29'}), (362, {'res': '$const362.30'}), (364, {'lhs': '$360binary_add.29', 'rhs': '$const362.30', 'res': '$364binary_add.31'}), (366, {'index': '$364binary_add.31', 'target': '$x354.26', 'res': '$366binary_subscr.32'}), (368, {'lhs': '$weight352.25', 'rhs': '$366binary_subscr.32', 'res': '$368binary_multiply.33'}), (370, {'lhs': '$350binary_subscr.24', 'rhs': '$368binary_multiply.33', 'res': '$370inplace_add.34'}), (374, {'target': '$y344.20', 'index': '$t346.21', 'value': '$370inplace_add.34'}), (376, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: ('$phi306.0', '$phi306.1')})
2025-05-02 21:52:19,115 - DEBUG - block_infos State(pc_initial=380 nstack_initial=1):
AdaptBlockInfo(insts=((380, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi380.0',)})
2025-05-02 21:52:19,115 - DEBUG - block_infos State(pc_initial=382 nstack_initial=0):
AdaptBlockInfo(insts=((382, {'res': '$const382.0'}), (384, {'retval': '$const382.0', 'castval': '$384return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-02 21:52:19,117 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    t_out = arg(1, name=t_out)               ['t_out']
    interp_win = arg(2, name=interp_win)     ['interp_win']
    interp_delta = arg(3, name=interp_delta) ['interp_delta']
    num_table = arg(4, name=num_table)       ['num_table']
    scale = arg(5, name=scale)               ['scale']
    y = arg(6, name=y)                       ['y']
    $2load_global.0 = global(int: <class 'int'>) ['$2load_global.0']
    $8binary_multiply.3 = scale * num_table  ['$8binary_multiply.3', 'num_table', 'scale']
    index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8binary_multiply.3', 'index_step']
    time_register = const(float, 0.0)        ['time_register']
    n = const(int, 0)                        ['n']
    frac = const(float, 0.0)                 ['frac']
    index_frac = const(float, 0.0)           ['index_frac']
    offset = const(int, 0)                   ['offset']
    eta = const(float, 0.0)                  ['eta']
    weight = const(float, 0.0)               ['weight']
    $44load_attr.13 = getattr(value=interp_win, attr=shape) ['$44load_attr.13', 'interp_win']
    $const46.14 = const(int, 0)              ['$const46.14']
    nwin = getitem(value=$44load_attr.13, index=$const46.14, fn=<built-in function getitem>) ['$44load_attr.13', '$const46.14', 'nwin']
    $54load_attr.17 = getattr(value=x, attr=shape) ['$54load_attr.17', 'x']
    $const56.18 = const(int, 0)              ['$const56.18']
    n_orig = getitem(value=$54load_attr.17, index=$const56.18, fn=<built-in function getitem>) ['$54load_attr.17', '$const56.18', 'n_orig']
    $64load_attr.21 = getattr(value=t_out, attr=shape) ['$64load_attr.21', 't_out']
    $const66.22 = const(int, 0)              ['$const66.22']
    n_out = getitem(value=$64load_attr.21, index=$const66.22, fn=<built-in function getitem>) ['$64load_attr.21', '$const66.22', 'n_out']
    $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>) ['$72load_global.24']
    $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.24', '$76call_function.26', 'n_out']
    $78get_iter.27 = getiter(value=$76call_function.26) ['$76call_function.26', '$78get_iter.27']
    $phi80.0 = $78get_iter.27                ['$78get_iter.27', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi84.1 = $80for_iter.2                 ['$80for_iter.2', '$phi84.1']
    branch $80for_iter.3, 84, 382            ['$80for_iter.3']
label 84:
    t = $phi84.1                             ['$phi84.1', 't']
    time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>) ['t', 't_out', 'time_register']
    $94load_global.5 = global(int: <class 'int'>) ['$94load_global.5']
    n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None) ['$94load_global.5', 'n', 'time_register']
    $108binary_subtract.11 = time_register - n ['$108binary_subtract.11', 'n', 'time_register']
    frac = scale * $108binary_subtract.11    ['$108binary_subtract.11', 'frac', 'scale']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $122load_global.16 = global(int: <class 'int'>) ['$122load_global.16']
    offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.16', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $138load_global.22 = global(min: <built-in function min>) ['$138load_global.22']
    $const142.24 = const(int, 1)             ['$const142.24']
    $144binary_add.25 = n + $const142.24     ['$144binary_add.25', '$const142.24', 'n']
    $150binary_subtract.28 = nwin - offset   ['$150binary_subtract.28', 'nwin', 'offset']
    $154binary_floor_divide.30 = $150binary_subtract.28 // index_step ['$150binary_subtract.28', '$154binary_floor_divide.30', 'index_step']
    i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None) ['$138load_global.22', '$144binary_add.25', '$154binary_floor_divide.30', 'i_max']
    $160load_global.32 = global(range: <class 'range'>) ['$160load_global.32']
    $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None) ['$160load_global.32', '$164call_function.34', 'i_max']
    $166get_iter.35 = getiter(value=$164call_function.34) ['$164call_function.34', '$166get_iter.35']
    $phi168.1 = $166get_iter.35              ['$166get_iter.35', '$phi168.1']
    jump 168                                 []
label 168:
    $168for_iter.2 = iternext(value=$phi168.1) ['$168for_iter.2', '$phi168.1']
    $168for_iter.3 = pair_first(value=$168for_iter.2) ['$168for_iter.2', '$168for_iter.3']
    $168for_iter.4 = pair_second(value=$168for_iter.2) ['$168for_iter.2', '$168for_iter.4']
    $phi170.2 = $168for_iter.3               ['$168for_iter.3', '$phi170.2']
    branch $168for_iter.4, 170, 238          ['$168for_iter.4']
label 170:
    i = $phi170.2                            ['$phi170.2', 'i']
    $180binary_multiply.7 = i * index_step   ['$180binary_multiply.7', 'i', 'index_step']
    $182binary_add.8 = offset + $180binary_multiply.7 ['$180binary_multiply.7', '$182binary_add.8', 'offset']
    $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>) ['$182binary_add.8', '$184binary_subscr.9', 'interp_win']
    $196binary_multiply.15 = i * index_step  ['$196binary_multiply.15', 'i', 'index_step']
    $198binary_add.16 = offset + $196binary_multiply.15 ['$196binary_multiply.15', '$198binary_add.16', 'offset']
    $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>) ['$198binary_add.16', '$200binary_subscr.17', 'interp_delta']
    $202binary_multiply.18 = eta * $200binary_subscr.17 ['$200binary_subscr.17', '$202binary_multiply.18', 'eta']
    weight = $184binary_subscr.9 + $202binary_multiply.18 ['$184binary_subscr.9', '$202binary_multiply.18', 'weight']
    $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>) ['$214binary_subscr.24', 't', 'y']
    $224binary_subtract.29 = n - i           ['$224binary_subtract.29', 'i', 'n']
    $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>) ['$224binary_subtract.29', '$226binary_subscr.30', 'x']
    $228binary_multiply.31 = weight * $226binary_subscr.30 ['$226binary_subscr.30', '$228binary_multiply.31', 'weight']
    $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined) ['$214binary_subscr.24', '$228binary_multiply.31', '$230inplace_add.32']
    y[t] = $230inplace_add.32                ['$230inplace_add.32', 't', 'y']
    jump 168                                 []
label 238:
    $242binary_subtract.3 = scale - frac     ['$242binary_subtract.3', 'frac', 'scale']
    frac = $242binary_subtract.3             ['$242binary_subtract.3', 'frac']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $254load_global.7 = global(int: <class 'int'>) ['$254load_global.7']
    offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None) ['$254load_global.7', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $270load_global.13 = global(min: <built-in function min>) ['$270load_global.13']
    $276binary_subtract.16 = n_orig - n      ['$276binary_subtract.16', 'n', 'n_orig']
    $const278.17 = const(int, 1)             ['$const278.17']
    $280binary_subtract.18 = $276binary_subtract.16 - $const278.17 ['$276binary_subtract.16', '$280binary_subtract.18', '$const278.17']
    $286binary_subtract.21 = nwin - offset   ['$286binary_subtract.21', 'nwin', 'offset']
    $290binary_floor_divide.23 = $286binary_subtract.21 // index_step ['$286binary_subtract.21', '$290binary_floor_divide.23', 'index_step']
    k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None) ['$270load_global.13', '$280binary_subtract.18', '$290binary_floor_divide.23', 'k_max']
    $296load_global.25 = global(range: <class 'range'>) ['$296load_global.25']
    $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None) ['$296load_global.25', '$300call_function.27', 'k_max']
    $302get_iter.28 = getiter(value=$300call_function.27) ['$300call_function.27', '$302get_iter.28']
    $phi304.1 = $302get_iter.28              ['$302get_iter.28', '$phi304.1']
    jump 304                                 []
label 304:
    $304for_iter.2 = iternext(value=$phi304.1) ['$304for_iter.2', '$phi304.1']
    $304for_iter.3 = pair_first(value=$304for_iter.2) ['$304for_iter.2', '$304for_iter.3']
    $304for_iter.4 = pair_second(value=$304for_iter.2) ['$304for_iter.2', '$304for_iter.4']
    $phi306.2 = $304for_iter.3               ['$304for_iter.3', '$phi306.2']
    branch $304for_iter.4, 306, 380          ['$304for_iter.4']
label 306:
    k = $phi306.2                            ['$phi306.2', 'k']
    $316binary_multiply.7 = k * index_step   ['$316binary_multiply.7', 'index_step', 'k']
    $318binary_add.8 = offset + $316binary_multiply.7 ['$316binary_multiply.7', '$318binary_add.8', 'offset']
    $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>) ['$318binary_add.8', '$320binary_subscr.9', 'interp_win']
    $332binary_multiply.15 = k * index_step  ['$332binary_multiply.15', 'index_step', 'k']
    $334binary_add.16 = offset + $332binary_multiply.15 ['$332binary_multiply.15', '$334binary_add.16', 'offset']
    $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>) ['$334binary_add.16', '$336binary_subscr.17', 'interp_delta']
    $338binary_multiply.18 = eta * $336binary_subscr.17 ['$336binary_subscr.17', '$338binary_multiply.18', 'eta']
    weight = $320binary_subscr.9 + $338binary_multiply.18 ['$320binary_subscr.9', '$338binary_multiply.18', 'weight']
    $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>) ['$350binary_subscr.24', 't', 'y']
    $360binary_add.29 = n + k                ['$360binary_add.29', 'k', 'n']
    $const362.30 = const(int, 1)             ['$const362.30']
    $364binary_add.31 = $360binary_add.29 + $const362.30 ['$360binary_add.29', '$364binary_add.31', '$const362.30']
    $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>) ['$364binary_add.31', '$366binary_subscr.32', 'x']
    $368binary_multiply.33 = weight * $366binary_subscr.32 ['$366binary_subscr.32', '$368binary_multiply.33', 'weight']
    $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined) ['$350binary_subscr.24', '$368binary_multiply.33', '$370inplace_add.34']
    y[t] = $370inplace_add.34                ['$370inplace_add.34', 't', 'y']
    jump 304                                 []
label 380:
    jump 80                                  []
label 382:
    $const382.0 = const(NoneType, None)      ['$const382.0']
    $384return_value.1 = cast(value=$const382.0) ['$384return_value.1', '$const382.0']
    return $384return_value.1                ['$384return_value.1']

2025-05-02 21:52:19,126 - DEBUG - ==== SSA block analysis pass on 0
2025-05-02 21:52:19,126 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,126 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,126 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,126 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,126 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,126 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,126 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,126 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,126 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,126 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,126 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,126 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,126 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,126 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,126 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,128 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,128 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,128 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,128 - DEBUG - ==== SSA block analysis pass on 80
2025-05-02 21:52:19,128 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,128 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,128 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,128 - DEBUG - ==== SSA block analysis pass on 84
2025-05-02 21:52:19,128 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,128 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,128 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,128 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,128 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:52:19,128 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,128 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,128 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,128 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:52:19,129 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block analysis pass on 168
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block analysis pass on 170
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,129 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,129 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,129 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:52:19,129 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,129 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block analysis pass on 238
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block analysis pass on 304
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block analysis pass on 306
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,129 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,129 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,129 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,129 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,129 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block analysis pass on 380
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block analysis pass on 382
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000002D34E8224F0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,129 - DEBUG - defs defaultdict(<class 'list'>,
            {'$108binary_subtract.11': [<numba.core.ir.Assign object at 0x000002D34E80D4F0>],
             '$122load_global.16': [<numba.core.ir.Assign object at 0x000002D34E80DD00>],
             '$138load_global.22': [<numba.core.ir.Assign object at 0x000002D34E8106A0>],
             '$144binary_add.25': [<numba.core.ir.Assign object at 0x000002D34E810AF0>],
             '$150binary_subtract.28': [<numba.core.ir.Assign object at 0x000002D34E810EB0>],
             '$154binary_floor_divide.30': [<numba.core.ir.Assign object at 0x000002D34E813190>],
             '$160load_global.32': [<numba.core.ir.Assign object at 0x000002D34E813580>],
             '$164call_function.34': [<numba.core.ir.Assign object at 0x000002D34E813880>],
             '$166get_iter.35': [<numba.core.ir.Assign object at 0x000002D34E8139A0>],
             '$168for_iter.2': [<numba.core.ir.Assign object at 0x000002D34E80D2B0>],
             '$168for_iter.3': [<numba.core.ir.Assign object at 0x000002D34E80D6D0>],
             '$168for_iter.4': [<numba.core.ir.Assign object at 0x000002D34E80DC10>],
             '$180binary_multiply.7': [<numba.core.ir.Assign object at 0x000002D34E813D90>],
             '$182binary_add.8': [<numba.core.ir.Assign object at 0x000002D34E813F10>],
             '$184binary_subscr.9': [<numba.core.ir.Assign object at 0x000002D34E8160D0>],
             '$196binary_multiply.15': [<numba.core.ir.Assign object at 0x000002D34E8167F0>],
             '$198binary_add.16': [<numba.core.ir.Assign object at 0x000002D34E816970>],
             '$200binary_subscr.17': [<numba.core.ir.Assign object at 0x000002D34E816AF0>],
             '$202binary_multiply.18': [<numba.core.ir.Assign object at 0x000002D34E816C70>],
             '$214binary_subscr.24': [<numba.core.ir.Assign object at 0x000002D34E818490>],
             '$224binary_subtract.29': [<numba.core.ir.Assign object at 0x000002D34E818A90>],
             '$226binary_subscr.30': [<numba.core.ir.Assign object at 0x000002D34E818C10>],
             '$228binary_multiply.31': [<numba.core.ir.Assign object at 0x000002D34E818D90>],
             '$230inplace_add.32': [<numba.core.ir.Assign object at 0x000002D34E818F10>],
             '$242binary_subtract.3': [<numba.core.ir.Assign object at 0x000002D34E818070>],
             '$254load_global.7': [<numba.core.ir.Assign object at 0x000002D34E81A4C0>],
             '$270load_global.13': [<numba.core.ir.Assign object at 0x000002D34E81AE20>],
             '$276binary_subtract.16': [<numba.core.ir.Assign object at 0x000002D34E81C250>],
             '$280binary_subtract.18': [<numba.core.ir.Assign object at 0x000002D34E81C550>],
             '$286binary_subtract.21': [<numba.core.ir.Assign object at 0x000002D34E81C910>],
             '$290binary_floor_divide.23': [<numba.core.ir.Assign object at 0x000002D34E81CBB0>],
             '$296load_global.25': [<numba.core.ir.Assign object at 0x000002D34E81CFA0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000002D34E8020A0>],
             '$300call_function.27': [<numba.core.ir.Assign object at 0x000002D34E81E2E0>],
             '$302get_iter.28': [<numba.core.ir.Assign object at 0x000002D34E81E400>],
             '$304for_iter.2': [<numba.core.ir.Assign object at 0x000002D34E81A700>],
             '$304for_iter.3': [<numba.core.ir.Assign object at 0x000002D34E81AD30>],
             '$304for_iter.4': [<numba.core.ir.Assign object at 0x000002D34E81C130>],
             '$316binary_multiply.7': [<numba.core.ir.Assign object at 0x000002D34E81EB50>],
             '$318binary_add.8': [<numba.core.ir.Assign object at 0x000002D34E81ECD0>],
             '$320binary_subscr.9': [<numba.core.ir.Assign object at 0x000002D34E81EE50>],
             '$332binary_multiply.15': [<numba.core.ir.Assign object at 0x000002D34E8205B0>],
             '$334binary_add.16': [<numba.core.ir.Assign object at 0x000002D34E820730>],
             '$336binary_subscr.17': [<numba.core.ir.Assign object at 0x000002D34E8208B0>],
             '$338binary_multiply.18': [<numba.core.ir.Assign object at 0x000002D34E820A30>],
             '$350binary_subscr.24': [<numba.core.ir.Assign object at 0x000002D34E822250>],
             '$360binary_add.29': [<numba.core.ir.Assign object at 0x000002D34E822850>],
             '$364binary_add.31': [<numba.core.ir.Assign object at 0x000002D34E822B50>],
             '$366binary_subscr.32': [<numba.core.ir.Assign object at 0x000002D34E822CD0>],
             '$368binary_multiply.33': [<numba.core.ir.Assign object at 0x000002D34E822E50>],
             '$370inplace_add.34': [<numba.core.ir.Assign object at 0x000002D34E822FD0>],
             '$384return_value.1': [<numba.core.ir.Assign object at 0x000002D34E822040>],
             '$44load_attr.13': [<numba.core.ir.Assign object at 0x000002D34E805C40>],
             '$54load_attr.17': [<numba.core.ir.Assign object at 0x000002D34E808340>],
             '$64load_attr.21': [<numba.core.ir.Assign object at 0x000002D34E808A00>],
             '$72load_global.24': [<numba.core.ir.Assign object at 0x000002D34E808FA0>],
             '$76call_function.26': [<numba.core.ir.Assign object at 0x000002D34E80A2E0>],
             '$78get_iter.27': [<numba.core.ir.Assign object at 0x000002D34E80A400>],
             '$80for_iter.1': [<numba.core.ir.Assign object at 0x000002D34E805A30>],
             '$80for_iter.2': [<numba.core.ir.Assign object at 0x000002D34E808250>],
             '$80for_iter.3': [<numba.core.ir.Assign object at 0x000002D34E808EB0>],
             '$8binary_multiply.3': [<numba.core.ir.Assign object at 0x000002D34E802490>],
             '$94load_global.5': [<numba.core.ir.Assign object at 0x000002D34E80AC40>],
             '$const142.24': [<numba.core.ir.Assign object at 0x000002D34E810940>],
             '$const278.17': [<numba.core.ir.Assign object at 0x000002D34E81C3A0>],
             '$const362.30': [<numba.core.ir.Assign object at 0x000002D34E8229A0>],
             '$const382.0': [<numba.core.ir.Assign object at 0x000002D34E820C70>],
             '$const46.14': [<numba.core.ir.Assign object at 0x000002D34E805DC0>],
             '$const56.18': [<numba.core.ir.Assign object at 0x000002D34E8084C0>],
             '$const66.22': [<numba.core.ir.Assign object at 0x000002D34E808B80>],
             '$phi168.1': [<numba.core.ir.Assign object at 0x000002D34E80A7F0>],
             '$phi170.2': [<numba.core.ir.Assign object at 0x000002D34E80D070>],
             '$phi304.1': [<numba.core.ir.Assign object at 0x000002D34E816370>],
             '$phi306.2': [<numba.core.ir.Assign object at 0x000002D34E81A670>],
             '$phi80.0': [<numba.core.ir.Assign object at 0x000002D34E802250>],
             '$phi84.1': [<numba.core.ir.Assign object at 0x000002D34E8054F0>],
             'eta': [<numba.core.ir.Assign object at 0x000002D34E8055E0>,
                     <numba.core.ir.Assign object at 0x000002D34E810490>,
                     <numba.core.ir.Assign object at 0x000002D34E81AC10>],
             'frac': [<numba.core.ir.Assign object at 0x000002D34E802DC0>,
                      <numba.core.ir.Assign object at 0x000002D34E80D670>,
                      <numba.core.ir.Assign object at 0x000002D34E818310>],
             'i': [<numba.core.ir.Assign object at 0x000002D34E8103D0>],
             'i_max': [<numba.core.ir.Assign object at 0x000002D34E813340>],
             'index_frac': [<numba.core.ir.Assign object at 0x000002D34E8050A0>,
                            <numba.core.ir.Assign object at 0x000002D34E80DAF0>,
                            <numba.core.ir.Assign object at 0x000002D34E81A2B0>],
             'index_step': [<numba.core.ir.Assign object at 0x000002D34E802640>],
             'interp_delta': [<numba.core.ir.Assign object at 0x000002D34E7E41C0>],
             'interp_win': [<numba.core.ir.Assign object at 0x000002D34E7E4280>],
             'k': [<numba.core.ir.Assign object at 0x000002D34E81E520>],
             'k_max': [<numba.core.ir.Assign object at 0x000002D34E81CD60>],
             'n': [<numba.core.ir.Assign object at 0x000002D34E802B20>,
                   <numba.core.ir.Assign object at 0x000002D34E80AF40>],
             'n_orig': [<numba.core.ir.Assign object at 0x000002D34E82CC10>],
             'n_out': [<numba.core.ir.Assign object at 0x000002D34E82CCD0>],
             'num_table': [<numba.core.ir.Assign object at 0x000002D34E7E44C0>],
             'nwin': [<numba.core.ir.Assign object at 0x000002D34E82C070>],
             'offset': [<numba.core.ir.Assign object at 0x000002D34E805340>,
                        <numba.core.ir.Assign object at 0x000002D34E810040>,
                        <numba.core.ir.Assign object at 0x000002D34E81A7C0>],
             'scale': [<numba.core.ir.Assign object at 0x000002D34E7E4DC0>],
             't': [<numba.core.ir.Assign object at 0x000002D34E80A640>],
             't_out': [<numba.core.ir.Assign object at 0x000002D34E7E4700>],
             'time_register': [<numba.core.ir.Assign object at 0x000002D34E802880>,
                               <numba.core.ir.Assign object at 0x000002D34E80AA30>],
             'weight': [<numba.core.ir.Assign object at 0x000002D34E805880>,
                        <numba.core.ir.Assign object at 0x000002D34E816DF0>,
                        <numba.core.ir.Assign object at 0x000002D34E820BB0>],
             'x': [<numba.core.ir.Assign object at 0x000002D34E7E4640>],
             'y': [<numba.core.ir.Assign object at 0x000002D34E7E4EE0>]})
2025-05-02 21:52:19,129 - DEBUG - SSA violators {'time_register', 'n', 'weight', 'offset', 'index_frac', 'frac', 'eta'}
2025-05-02 21:52:19,129 - DEBUG - Fix SSA violator on var time_register
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,129 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,129 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,129 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,129 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,129 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - first assign: time_register
2025-05-02 21:52:19,129 - DEBUG - replaced with: time_register = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,129 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - replaced with: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:52:19,129 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,129 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,129 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,129 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:52:19,129 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,129 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,129 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,129 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,129 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,129 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,129 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,129 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002D34E82C400>],
             84: [<numba.core.ir.Assign object at 0x000002D34E82CEB0>]})
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,129 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,129 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,129 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,129 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,129 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,129 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - find_def var='time_register' stmt=n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - replaced with: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 21:52:19,129 - DEBUG - find_def var='time_register' stmt=$108binary_subtract.11 = time_register - n
2025-05-02 21:52:19,129 - DEBUG - replaced with: $108binary_subtract.11 = time_register.1 - n
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:52:19,129 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,129 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,129 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,129 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:52:19,129 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,129 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,129 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,129 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,129 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,129 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,129 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,129 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,129 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,129 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,129 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,129 - DEBUG - Fix SSA violator on var n
2025-05-02 21:52:19,129 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,129 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,129 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,129 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,129 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,129 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,129 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,129 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,129 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,129 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - first assign: n
2025-05-02 21:52:19,129 - DEBUG - replaced with: n = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,129 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,144 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,144 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,144 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,144 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,144 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,144 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,144 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,144 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,144 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,144 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,144 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,144 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,144 - DEBUG - replaced with: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 21:52:19,144 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,144 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,144 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,144 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,144 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,144 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:52:19,146 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,146 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,146 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,146 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,146 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,146 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,146 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,146 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,146 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,146 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,146 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,146 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,146 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,146 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,146 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,146 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,146 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,146 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:52:19,146 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,146 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,146 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,146 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,146 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,146 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,146 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,146 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,146 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,146 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,146 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,146 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,146 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,146 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:52:19,148 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,148 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,148 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,148 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,148 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,148 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,148 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,148 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,148 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,148 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,148 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,148 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,148 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,148 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,148 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,148 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,148 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,148 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,148 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:52:19,148 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,148 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,148 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,148 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,148 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,148 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,148 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,148 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,148 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,148 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E8226A0>
2025-05-02 21:52:19,148 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,148 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,148 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002D34E82C880>],
             84: [<numba.core.ir.Assign object at 0x000002D34E82C9D0>]})
2025-05-02 21:52:19,148 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,148 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,148 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,148 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,148 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,148 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,148 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,148 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,148 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,148 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,148 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,150 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,150 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 21:52:19,150 - DEBUG - find_def var='n' stmt=$108binary_subtract.11 = time_register.1 - n
2025-05-02 21:52:19,150 - DEBUG - replaced with: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,150 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,150 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,150 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 21:52:19,150 - DEBUG - find_def var='n' stmt=$144binary_add.25 = n + $const142.24
2025-05-02 21:52:19,150 - DEBUG - replaced with: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,150 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,150 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,150 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,150 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,150 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,150 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,150 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 21:52:19,150 - DEBUG - find_def var='n' stmt=$224binary_subtract.29 = n - i
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 170
2025-05-02 21:52:19,150 - DEBUG - idom 168 from label 170
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 168
2025-05-02 21:52:19,150 - DEBUG - idom 84 from label 168
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:52:19,150 - DEBUG - replaced with: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,150 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,150 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,150 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,150 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,150 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,150 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 21:52:19,150 - DEBUG - find_def var='n' stmt=$276binary_subtract.16 = n_orig - n
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 238
2025-05-02 21:52:19,150 - DEBUG - idom 168 from label 238
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 168
2025-05-02 21:52:19,150 - DEBUG - idom 84 from label 168
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:52:19,150 - DEBUG - replaced with: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,150 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,150 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,150 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,150 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,150 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,150 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,150 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 21:52:19,150 - DEBUG - find_def var='n' stmt=$360binary_add.29 = n + k
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 306
2025-05-02 21:52:19,150 - DEBUG - idom 304 from label 306
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 304
2025-05-02 21:52:19,150 - DEBUG - idom 238 from label 304
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 238
2025-05-02 21:52:19,150 - DEBUG - idom 168 from label 238
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:52:19,150 - DEBUG - find_def_from_top label 168
2025-05-02 21:52:19,150 - DEBUG - idom 84 from label 168
2025-05-02 21:52:19,150 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:52:19,150 - DEBUG - replaced with: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,150 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,150 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,150 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82CDF0>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,150 - DEBUG - Fix SSA violator on var weight
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,150 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,150 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,150 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,150 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,150 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,150 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,150 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - first assign: weight
2025-05-02 21:52:19,150 - DEBUG - replaced with: weight = const(float, 0.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,150 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,150 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,150 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,150 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,150 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,150 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,150 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,150 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,150 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,150 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,150 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,150 - DEBUG - replaced with: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,150 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,150 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,150 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,150 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,150 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,150 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,150 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,150 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,150 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,150 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,150 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,150 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,150 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,150 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,150 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,150 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,150 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,150 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,150 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,150 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,150 - DEBUG - replaced with: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,160 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,160 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,160 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,160 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,160 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,160 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,160 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,160 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,160 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,160 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,160 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,160 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,160 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,160 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C160>
2025-05-02 21:52:19,160 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,160 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,160 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,160 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002D34E82C280>],
             170: [<numba.core.ir.Assign object at 0x000002D34E82C580>],
             306: [<numba.core.ir.Assign object at 0x000002D34E82FA00>]})
2025-05-02 21:52:19,161 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,161 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,161 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,161 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,161 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,161 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,161 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,161 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,161 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,161 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,161 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,161 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,161 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,161 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,161 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,161 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,161 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,161 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,161 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,161 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,161 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,161 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,161 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,161 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,161 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,161 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,161 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,161 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,161 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,161 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,163 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,163 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,163 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,163 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,163 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,163 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,163 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,163 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,163 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,163 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,163 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,163 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,163 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,163 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,163 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,163 - DEBUG - find_def var='weight' stmt=$228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 21:52:19,163 - DEBUG - replaced with: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,163 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,163 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,163 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,163 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,163 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,163 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,163 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,163 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,163 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,163 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,163 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,163 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,163 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,163 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,163 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,163 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,163 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,163 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,163 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,163 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,163 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,163 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,163 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,163 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,163 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,163 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,165 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,165 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,165 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,165 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,165 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,165 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,165 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,165 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,165 - DEBUG - find_def var='weight' stmt=$368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 21:52:19,165 - DEBUG - replaced with: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,165 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,165 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,165 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,165 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,165 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,165 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,165 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,165 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C310>
2025-05-02 21:52:19,165 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,165 - DEBUG - Fix SSA violator on var offset
2025-05-02 21:52:19,165 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,165 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,165 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,165 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,165 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,165 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,165 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,165 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,165 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,165 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,165 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,165 - DEBUG - first assign: offset
2025-05-02 21:52:19,165 - DEBUG - replaced with: offset = const(int, 0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,165 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,165 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,167 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,167 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,167 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,167 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,167 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,167 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,167 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,167 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,167 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,167 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,167 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,167 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,167 - DEBUG - replaced with: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,167 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,167 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,167 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,167 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,167 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,167 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,167 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,167 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,167 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,167 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,167 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,167 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,167 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,167 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,167 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,167 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,167 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,167 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,167 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,167 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,167 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,167 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,169 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,169 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,169 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,169 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,169 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,169 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,169 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,169 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,169 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,169 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,169 - DEBUG - replaced with: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,169 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,169 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,169 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,169 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,169 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,169 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,169 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,169 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,169 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,169 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,169 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,169 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,169 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,169 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,169 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,169 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,169 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,169 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,169 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,169 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,169 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,169 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,169 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,169 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,169 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,169 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,169 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,169 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,169 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,169 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,169 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,169 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C7C0>
2025-05-02 21:52:19,169 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,171 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002D34E82C700>],
             84: [<numba.core.ir.Assign object at 0x000002D34E82C5E0>],
             238: [<numba.core.ir.Assign object at 0x000002D34E82F340>]})
2025-05-02 21:52:19,171 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,171 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,171 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,171 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,171 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,171 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,171 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,171 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,171 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,171 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,171 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,171 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,171 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,171 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,171 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,171 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,171 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,171 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,171 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,171 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,171 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,171 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,173 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,173 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,173 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,173 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,173 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,173 - DEBUG - find_def var='offset' stmt=eta = index_frac - offset
2025-05-02 21:52:19,173 - DEBUG - replaced with: eta = index_frac - offset.1
2025-05-02 21:52:19,173 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,173 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,173 - DEBUG - find_def var='offset' stmt=$150binary_subtract.28 = nwin - offset
2025-05-02 21:52:19,173 - DEBUG - replaced with: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:52:19,173 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,173 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,173 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,173 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,173 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,173 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,173 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,173 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,173 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,173 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,173 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,173 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,173 - DEBUG - find_def var='offset' stmt=$182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 21:52:19,173 - DEBUG - find_def_from_top label 170
2025-05-02 21:52:19,173 - DEBUG - idom 168 from label 170
2025-05-02 21:52:19,173 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:52:19,173 - DEBUG - find_def_from_top label 168
2025-05-02 21:52:19,173 - DEBUG - idom 84 from label 168
2025-05-02 21:52:19,173 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:52:19,173 - DEBUG - replaced with: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:52:19,173 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,173 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,173 - DEBUG - find_def var='offset' stmt=$198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 21:52:19,173 - DEBUG - find_def_from_top label 170
2025-05-02 21:52:19,173 - DEBUG - idom 168 from label 170
2025-05-02 21:52:19,173 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:52:19,173 - DEBUG - find_def_from_top label 168
2025-05-02 21:52:19,173 - DEBUG - idom 84 from label 168
2025-05-02 21:52:19,173 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:52:19,173 - DEBUG - replaced with: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:52:19,173 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,173 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,175 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,175 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,175 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,175 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,175 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,175 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,175 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,175 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,175 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,175 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,175 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,175 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,175 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,175 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,175 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,175 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 21:52:19,175 - DEBUG - find_def var='offset' stmt=eta = index_frac - offset
2025-05-02 21:52:19,175 - DEBUG - replaced with: eta = index_frac - offset.2
2025-05-02 21:52:19,175 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,175 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,175 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,175 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,175 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,175 - DEBUG - find_def var='offset' stmt=$286binary_subtract.21 = nwin - offset
2025-05-02 21:52:19,175 - DEBUG - replaced with: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:52:19,175 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,175 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,176 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,176 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,176 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,176 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,176 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,176 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,176 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,176 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,176 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,176 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,176 - DEBUG - find_def var='offset' stmt=$318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 21:52:19,176 - DEBUG - find_def_from_top label 306
2025-05-02 21:52:19,176 - DEBUG - idom 304 from label 306
2025-05-02 21:52:19,176 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:52:19,176 - DEBUG - find_def_from_top label 304
2025-05-02 21:52:19,176 - DEBUG - idom 238 from label 304
2025-05-02 21:52:19,176 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:52:19,176 - DEBUG - replaced with: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:52:19,176 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,176 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,176 - DEBUG - find_def var='offset' stmt=$334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 21:52:19,176 - DEBUG - find_def_from_top label 306
2025-05-02 21:52:19,176 - DEBUG - idom 304 from label 306
2025-05-02 21:52:19,176 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:52:19,176 - DEBUG - find_def_from_top label 304
2025-05-02 21:52:19,176 - DEBUG - idom 238 from label 304
2025-05-02 21:52:19,176 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:52:19,176 - DEBUG - replaced with: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:52:19,176 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,176 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,176 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,176 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,176 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,176 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,176 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,176 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,176 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,176 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,176 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,176 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,176 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82C160>
2025-05-02 21:52:19,176 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,176 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,176 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,178 - DEBUG - Fix SSA violator on var index_frac
2025-05-02 21:52:19,178 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,178 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,178 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,178 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,178 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,178 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,178 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,178 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,178 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,178 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,178 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,178 - DEBUG - first assign: index_frac
2025-05-02 21:52:19,178 - DEBUG - replaced with: index_frac = const(float, 0.0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,178 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,178 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,178 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,178 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,178 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,178 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,178 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,178 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,178 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,178 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,178 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,178 - DEBUG - replaced with: index_frac.1 = frac * num_table
2025-05-02 21:52:19,178 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,178 - DEBUG - on stmt: eta = index_frac - offset.1
2025-05-02 21:52:19,178 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,178 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,178 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:52:19,178 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,178 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,180 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,180 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,180 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,180 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,180 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,180 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,180 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,180 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,180 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,180 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:52:19,180 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,180 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:52:19,180 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,180 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,180 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,180 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,180 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,180 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,180 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,180 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,180 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,180 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,180 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,180 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 21:52:19,180 - DEBUG - replaced with: index_frac.2 = frac * num_table
2025-05-02 21:52:19,180 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,180 - DEBUG - on stmt: eta = index_frac - offset.2
2025-05-02 21:52:19,180 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,180 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,180 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:52:19,180 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,180 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,180 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,180 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,180 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,180 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,180 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,180 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,180 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,180 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,180 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,180 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,182 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:52:19,182 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,182 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:52:19,182 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,182 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,182 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,182 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,182 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,182 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,182 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,182 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,182 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,182 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,182 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,182 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,182 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82F880>
2025-05-02 21:52:19,182 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,182 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002D34E82FAC0>],
             84: [<numba.core.ir.Assign object at 0x000002D34E82F4F0>],
             238: [<numba.core.ir.Assign object at 0x000002D34E82C130>]})
2025-05-02 21:52:19,182 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,182 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,182 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,182 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,182 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,182 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,182 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,182 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,182 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,182 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,182 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,182 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,182 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,182 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,182 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,182 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,182 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,184 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,184 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,184 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,184 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,184 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,184 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,184 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 21:52:19,184 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,184 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,184 - DEBUG - find_def var='index_frac' stmt=offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,184 - DEBUG - replaced with: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,184 - DEBUG - on stmt: eta = index_frac - offset.1
2025-05-02 21:52:19,184 - DEBUG - find_def var='index_frac' stmt=eta = index_frac - offset.1
2025-05-02 21:52:19,184 - DEBUG - replaced with: eta = index_frac.1 - offset.1
2025-05-02 21:52:19,184 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,184 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:52:19,184 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,184 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,184 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,184 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,184 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,184 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,184 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,184 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,184 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,184 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,184 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,184 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:52:19,184 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,184 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:52:19,184 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,184 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,184 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,186 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,186 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,186 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,186 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,186 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,186 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,186 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,186 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,186 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,186 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 21:52:19,186 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,186 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,186 - DEBUG - find_def var='index_frac' stmt=offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,186 - DEBUG - replaced with: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,186 - DEBUG - on stmt: eta = index_frac - offset.2
2025-05-02 21:52:19,186 - DEBUG - find_def var='index_frac' stmt=eta = index_frac - offset.2
2025-05-02 21:52:19,186 - DEBUG - replaced with: eta = index_frac.2 - offset.2
2025-05-02 21:52:19,186 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,186 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,186 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:52:19,186 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,186 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,186 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,186 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,186 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,186 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,186 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,186 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,186 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,186 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,186 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,186 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:52:19,186 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,186 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:52:19,186 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,186 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,186 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,186 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,188 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,188 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,188 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,188 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,188 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,188 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,188 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,188 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,188 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,188 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E7D2760>
2025-05-02 21:52:19,188 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,188 - DEBUG - Fix SSA violator on var frac
2025-05-02 21:52:19,188 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,188 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,188 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,188 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,188 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,188 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,188 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,188 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,188 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,188 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,188 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,188 - DEBUG - first assign: frac
2025-05-02 21:52:19,188 - DEBUG - replaced with: frac = const(float, 0.0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,188 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,188 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,188 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,188 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,188 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,188 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,188 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,190 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,190 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,190 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,190 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 21:52:19,190 - DEBUG - replaced with: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:52:19,190 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 21:52:19,190 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,190 - DEBUG - on stmt: eta = index_frac.1 - offset.1
2025-05-02 21:52:19,190 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,190 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:52:19,190 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,190 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,190 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,190 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,190 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,190 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,190 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,190 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,190 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,190 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,190 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,190 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:52:19,190 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,190 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:52:19,190 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,190 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,190 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,190 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,190 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,190 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,190 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,190 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,190 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,190 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,190 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 21:52:19,190 - DEBUG - replaced with: frac.2 = $242binary_subtract.3
2025-05-02 21:52:19,190 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 21:52:19,190 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,190 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,192 - DEBUG - on stmt: eta = index_frac.2 - offset.2
2025-05-02 21:52:19,192 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,192 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,192 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:52:19,192 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,192 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,192 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,192 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,192 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,192 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,192 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,192 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,192 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,192 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,192 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,192 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:52:19,192 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,192 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:52:19,192 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,192 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,192 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,192 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,192 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,192 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,192 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,192 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,192 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,192 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,192 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,192 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,192 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C190>
2025-05-02 21:52:19,192 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,192 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,192 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,192 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002D34E82C910>],
             84: [<numba.core.ir.Assign object at 0x000002D34E82F8E0>],
             238: [<numba.core.ir.Assign object at 0x000002D34E7D2760>]})
2025-05-02 21:52:19,192 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,192 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,192 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,192 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,192 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,192 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,192 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,194 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,194 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,194 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,194 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,194 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,194 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,194 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,194 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,194 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,194 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,194 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,194 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,194 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,194 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:52:19,194 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 21:52:19,194 - DEBUG - find_def var='frac' stmt=index_frac.1 = frac * num_table
2025-05-02 21:52:19,194 - DEBUG - replaced with: index_frac.1 = frac.1 * num_table
2025-05-02 21:52:19,194 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,194 - DEBUG - on stmt: eta = index_frac.1 - offset.1
2025-05-02 21:52:19,194 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,194 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:52:19,194 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,194 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,194 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,196 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,196 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,196 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,196 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,196 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,196 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,196 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,196 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,196 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,196 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:52:19,196 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,196 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:52:19,196 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,196 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,196 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,196 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,196 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,196 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,196 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,196 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,196 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,196 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,196 - DEBUG - find_def var='frac' stmt=$242binary_subtract.3 = scale - frac
2025-05-02 21:52:19,196 - DEBUG - find_def_from_top label 238
2025-05-02 21:52:19,196 - DEBUG - idom 168 from label 238
2025-05-02 21:52:19,196 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:52:19,196 - DEBUG - find_def_from_top label 168
2025-05-02 21:52:19,196 - DEBUG - idom 84 from label 168
2025-05-02 21:52:19,196 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:52:19,196 - DEBUG - replaced with: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:52:19,196 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:52:19,196 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 21:52:19,196 - DEBUG - find_def var='frac' stmt=index_frac.2 = frac * num_table
2025-05-02 21:52:19,196 - DEBUG - replaced with: index_frac.2 = frac.2 * num_table
2025-05-02 21:52:19,196 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,196 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,196 - DEBUG - on stmt: eta = index_frac.2 - offset.2
2025-05-02 21:52:19,196 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,196 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,196 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:52:19,196 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,196 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,196 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,198 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,198 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,198 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,198 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,198 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,198 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,198 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,198 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,198 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,198 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:52:19,198 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,198 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:52:19,198 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,198 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,198 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,198 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,198 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,198 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,198 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,198 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,198 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,198 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,198 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,198 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,198 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F490>
2025-05-02 21:52:19,198 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,198 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,198 - DEBUG - Fix SSA violator on var eta
2025-05-02 21:52:19,198 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,198 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,198 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,198 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,198 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,198 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,198 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,198 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,198 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,198 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,198 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,198 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,198 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,198 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,198 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,198 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,198 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,198 - DEBUG - first assign: eta
2025-05-02 21:52:19,200 - DEBUG - replaced with: eta = const(float, 0.0)
2025-05-02 21:52:19,200 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,200 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,200 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,200 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,200 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,200 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,200 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,200 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,200 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,200 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,200 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,200 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,200 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,200 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:52:19,200 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 21:52:19,200 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,200 - DEBUG - on stmt: eta = index_frac.1 - offset.1
2025-05-02 21:52:19,200 - DEBUG - replaced with: eta.1 = index_frac.1 - offset.1
2025-05-02 21:52:19,200 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,200 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:52:19,200 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,200 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,200 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,200 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,200 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,200 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,200 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,200 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,200 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,202 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,202 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,202 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,202 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:52:19,202 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,202 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:52:19,202 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,202 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,202 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,202 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,202 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,202 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,202 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,202 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,202 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,202 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:52:19,202 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:52:19,202 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 21:52:19,202 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,202 - DEBUG - on stmt: eta = index_frac.2 - offset.2
2025-05-02 21:52:19,202 - DEBUG - replaced with: eta.2 = index_frac.2 - offset.2
2025-05-02 21:52:19,202 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,202 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,202 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:52:19,202 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,202 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,202 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,202 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,202 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,202 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,202 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,202 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,202 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,202 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,202 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,202 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:52:19,202 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,202 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:52:19,202 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,202 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,202 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,202 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,204 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,204 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,204 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,204 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,204 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,204 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,204 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,204 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,204 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,204 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000002D34E82C130>
2025-05-02 21:52:19,204 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:19,204 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000002D34E82C2E0>],
             84: [<numba.core.ir.Assign object at 0x000002D34E82FE50>],
             238: [<numba.core.ir.Assign object at 0x000002D34E824DC0>]})
2025-05-02 21:52:19,204 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 21:52:19,204 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,204 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 21:52:19,204 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 21:52:19,204 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 21:52:19,204 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 21:52:19,204 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 21:52:19,204 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 21:52:19,204 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 21:52:19,204 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,204 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 21:52:19,204 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,204 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 21:52:19,204 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,204 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 21:52:19,204 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 21:52:19,206 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 21:52:19,206 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 21:52:19,206 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,206 - DEBUG - on stmt: t = $phi84.1
2025-05-02 21:52:19,206 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 21:52:19,206 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 21:52:19,206 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 21:52:19,206 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 21:52:19,206 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 21:52:19,206 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,206 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 21:52:19,206 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $144binary_add.25 = n.1 + $const142.24
2025-05-02 21:52:19,206 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 21:52:19,206 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 21:52:19,206 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 21:52:19,206 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,206 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 21:52:19,206 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,206 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 21:52:19,206 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 21:52:19,206 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 21:52:19,206 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,206 - DEBUG - on stmt: i = $phi170.2
2025-05-02 21:52:19,206 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 21:52:19,206 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 21:52:19,206 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 21:52:19,206 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 21:52:19,206 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,206 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,206 - DEBUG - find_def var='eta' stmt=$202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 21:52:19,207 - DEBUG - find_def_from_top label 170
2025-05-02 21:52:19,207 - DEBUG - idom 168 from label 170
2025-05-02 21:52:19,207 - DEBUG - find_def_from_bottom label 168
2025-05-02 21:52:19,207 - DEBUG - find_def_from_top label 168
2025-05-02 21:52:19,207 - DEBUG - idom 84 from label 168
2025-05-02 21:52:19,207 - DEBUG - find_def_from_bottom label 84
2025-05-02 21:52:19,207 - DEBUG - replaced with: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 21:52:19,207 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 21:52:19,207 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,207 - DEBUG - on stmt: $224binary_subtract.29 = n.1 - i
2025-05-02 21:52:19,207 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 21:52:19,207 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 21:52:19,207 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,207 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 21:52:19,207 - DEBUG - on stmt: jump 168
2025-05-02 21:52:19,207 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 21:52:19,207 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,207 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 21:52:19,207 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 21:52:19,207 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 21:52:19,207 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 21:52:19,207 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,207 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 21:52:19,207 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 21:52:19,207 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n.1
2025-05-02 21:52:19,207 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 21:52:19,207 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 21:52:19,207 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 21:52:19,209 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 21:52:19,209 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 21:52:19,209 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,209 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 21:52:19,209 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,209 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 21:52:19,209 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 21:52:19,209 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 21:52:19,209 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,209 - DEBUG - on stmt: k = $phi306.2
2025-05-02 21:52:19,209 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 21:52:19,209 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 21:52:19,209 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 21:52:19,209 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 21:52:19,209 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 21:52:19,209 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,209 - DEBUG - find_def var='eta' stmt=$338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 21:52:19,209 - DEBUG - find_def_from_top label 306
2025-05-02 21:52:19,209 - DEBUG - idom 304 from label 306
2025-05-02 21:52:19,210 - DEBUG - find_def_from_bottom label 304
2025-05-02 21:52:19,210 - DEBUG - find_def_from_top label 304
2025-05-02 21:52:19,210 - DEBUG - idom 238 from label 304
2025-05-02 21:52:19,210 - DEBUG - find_def_from_bottom label 238
2025-05-02 21:52:19,210 - DEBUG - replaced with: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 21:52:19,210 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 21:52:19,210 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 21:52:19,210 - DEBUG - on stmt: $360binary_add.29 = n.1 + k
2025-05-02 21:52:19,210 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 21:52:19,210 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 21:52:19,210 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 21:52:19,210 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 21:52:19,210 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 21:52:19,210 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 21:52:19,210 - DEBUG - on stmt: jump 304
2025-05-02 21:52:19,210 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 21:52:19,210 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,210 - DEBUG - on stmt: jump 80
2025-05-02 21:52:19,210 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 21:52:19,210 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000002D34E82F3A0>
2025-05-02 21:52:19,210 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 21:52:19,210 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 21:52:19,210 - DEBUG - on stmt: return $384return_value.1
2025-05-02 21:52:37,397 - DEBUG - Audio loaded: shape=(2, 7694568), sample_rate=44100
2025-05-02 21:52:37,397 - DEBUG - Demixing audio: samples=7694568, margin=76800, chunk_size=11025000
2025-05-02 21:52:37,413 - DEBUG - Created 1 chunks for demixing
  0%|          | 0/1 [00:00<?, ?it/s]Processing:   0%|          | 0/1 [00:00<?, ?it/s]2025-05-02 21:52:37,494 - DEBUG - Processing chunk: 31 waves
Processing: 100%|##########| 1/1 [08:19<00:00, 499.17s/it]Processing: 100%|##########| 1/1 [08:19<00:00, 499.38s/it]
2025-05-02 22:00:56,857 - DEBUG - Demixing complete
2025-05-02 22:00:58,374 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song2_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song2_no_vocals.wav
\song2_no_vocals.wav
2025-05-02 22:01:02 - INFO - Saved successful values to models.ini for model: UVR_MDXNET_Inst_Main
2025-05-02 23:00:44 - INFO - Starting separation for model: kuielab_a_other, Quality: Balanced, Input: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song3.flac, Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems, SegmentSize: 100, Overlap: 76800, Denoise: , NFFT: 8192, DimF: 2048, DimT: 8
2025-05-02 23:00:44 - DEBUG - Original command: cmd /c "cd @EnvPath@ && activate.bat && cd @ScriptDir@ && python @PythonScript@ "@SongPath@" -m "@Path@" -o "@OutputDir@" --chunks @SegmentSize@ --margin @Overlap@ --n_fft @NFFT@ --dim_f @DimF@ --dim_t @DimT@ && deactivate"
2025-05-02 23:00:44 - INFO - Resolved command: cmd /c "cd C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\UVR\uvr_env\Scripts && activate.bat && cd C:\Git\3DAudioStudio\scripts\autoit\1.3 && python separate.py "C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song3.flac" -m "C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_a_other.onnx" -o "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems" --chunks 100 --margin 76800 --n_fft 8192 --dim_f 2048 --dim_t 8 && deactivate"
2025-05-02 23:01:18 - INFO - Separation output: 2025-05-02 23:00:48,433 - DEBUG - Logging initialized
2025-05-02 23:00:48,434 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song3.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_a_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 76800, 'chunks': 100, 'n_fft': 8192, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 23:00:48,434 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 23:00:48,434 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song3.flac
2025-05-02 23:00:48,445 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=8192, hop=1024
2025-05-02 23:00:48,445 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song3.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_a_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 76800, 'chunks': 100, 'n_fft': 8192, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 23:00:48,445 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_a_other.onnx
2025-05-02 23:00:48,551 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song3.flac
2025-05-02 23:00:49,827 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=86)
           2	LOAD_GLOBAL(arg=0, lineno=86)
           4	LOAD_FAST(arg=0, lineno=86)
           6	LOAD_FAST(arg=1, lineno=86)
           8	LOAD_FAST(arg=2, lineno=86)
          10	LOAD_FAST(arg=3, lineno=86)
          12	LOAD_FAST(arg=4, lineno=86)
          14	LOAD_FAST(arg=5, lineno=86)
          16	LOAD_FAST(arg=6, lineno=86)
          18	CALL_FUNCTION(arg=7, lineno=86)
          20	POP_TOP(arg=None, lineno=86)
          22	LOAD_CONST(arg=0, lineno=86)
          24	RETURN_VALUE(arg=None, lineno=86)
2025-05-02 23:00:49,827 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-02 23:00:49,827 - DEBUG - stack: []
2025-05-02 23:00:49,827 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=86)
2025-05-02 23:00:49,827 - DEBUG - stack []
2025-05-02 23:00:49,827 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=86)
2025-05-02 23:00:49,827 - DEBUG - stack []
2025-05-02 23:00:49,827 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=86)
2025-05-02 23:00:49,827 - DEBUG - stack ['$2load_global.0']
2025-05-02 23:00:49,827 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=86)
2025-05-02 23:00:49,827 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-05-02 23:00:49,827 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=86)
2025-05-02 23:00:49,827 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2']
2025-05-02 23:00:49,827 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=86)
2025-05-02 23:00:49,827 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3']
2025-05-02 23:00:49,827 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=4, lineno=86)
2025-05-02 23:00:49,828 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4']
2025-05-02 23:00:49,828 - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=5, lineno=86)
2025-05-02 23:00:49,828 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5']
2025-05-02 23:00:49,828 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=6, lineno=86)
2025-05-02 23:00:49,828 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6']
2025-05-02 23:00:49,828 - DEBUG - dispatch pc=18, inst=CALL_FUNCTION(arg=7, lineno=86)
2025-05-02 23:00:49,828 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6', '$y16.7']
2025-05-02 23:00:49,828 - DEBUG - dispatch pc=20, inst=POP_TOP(arg=None, lineno=86)
2025-05-02 23:00:49,828 - DEBUG - stack ['$18call_function.8']
2025-05-02 23:00:49,828 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=0, lineno=86)
2025-05-02 23:00:49,828 - DEBUG - stack []
2025-05-02 23:00:49,828 - DEBUG - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=86)
2025-05-02 23:00:49,828 - DEBUG - stack ['$const22.9']
2025-05-02 23:00:49,828 - DEBUG - end state. edges=[]
2025-05-02 23:00:49,828 - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-02 23:00:49,828 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-02 23:00:49,828 - DEBUG - defmap: {}
2025-05-02 23:00:49,828 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-02 23:00:49,828 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-02 23:00:49,828 - DEBUG - keep phismap: {}
2025-05-02 23:00:49,828 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-02 23:00:49,828 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-02 23:00:49,828 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'res': '$t_out6.2'}), (8, {'res': '$interp_win8.3'}), (10, {'res': '$interp_delta10.4'}), (12, {'res': '$num_table12.5'}), (14, {'res': '$scale14.6'}), (16, {'res': '$y16.7'}), (18, {'func': '$2load_global.0', 'args': ['$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6', '$y16.7'], 'res': '$18call_function.8'}), (22, {'res': '$const22.9'}), (24, {'retval': '$const22.9', 'castval': '$24return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-02 23:00:49,886 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    t_out = arg(1, name=t_out)               ['t_out']
    interp_win = arg(2, name=interp_win)     ['interp_win']
    interp_delta = arg(3, name=interp_delta) ['interp_delta']
    num_table = arg(4, name=num_table)       ['num_table']
    scale = arg(5, name=scale)               ['scale']
    y = arg(6, name=y)                       ['y']
    $2load_global.0 = global(_resample_loop_s: CPUDispatcher(<function _resample_loop at 0x000001A3B8FD8F70>)) ['$2load_global.0']
    $18call_function.8 = call $2load_global.0(x, t_out, interp_win, interp_delta, num_table, scale, y, func=$2load_global.0, args=[Var(x, interpn.py:86), Var(t_out, interpn.py:86), Var(interp_win, interpn.py:86), Var(interp_delta, interpn.py:86), Var(num_table, interpn.py:86), Var(scale, interpn.py:86), Var(y, interpn.py:86)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call_function.8', '$2load_global.0', 'interp_delta', 'interp_win', 'num_table', 'scale', 't_out', 'x', 'y']
    $const22.9 = const(NoneType, None)       ['$const22.9']
    $24return_value.10 = cast(value=$const22.9) ['$24return_value.10', '$const22.9']
    return $24return_value.10                ['$24return_value.10']

2025-05-02 23:00:49,891 - DEBUG - ==== SSA block analysis pass on 0
2025-05-02 23:00:49,891 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2D37A00>
2025-05-02 23:00:49,892 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,892 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,892 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,892 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,892 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,892 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,892 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,892 - DEBUG - on stmt: $2load_global.0 = global(_resample_loop_s: CPUDispatcher(<function _resample_loop at 0x000001A3B8FD8F70>))
2025-05-02 23:00:49,892 - DEBUG - on stmt: $18call_function.8 = call $2load_global.0(x, t_out, interp_win, interp_delta, num_table, scale, y, func=$2load_global.0, args=[Var(x, interpn.py:86), Var(t_out, interpn.py:86), Var(interp_win, interpn.py:86), Var(interp_delta, interpn.py:86), Var(num_table, interpn.py:86), Var(scale, interpn.py:86), Var(y, interpn.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,892 - DEBUG - on stmt: $const22.9 = const(NoneType, None)
2025-05-02 23:00:49,892 - DEBUG - on stmt: $24return_value.10 = cast(value=$const22.9)
2025-05-02 23:00:49,892 - DEBUG - on stmt: return $24return_value.10
2025-05-02 23:00:49,892 - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call_function.8': [<numba.core.ir.Assign object at 0x000001A3D2D4FD90>],
             '$24return_value.10': [<numba.core.ir.Assign object at 0x000001A3D2D378B0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A3D2D4F3D0>],
             '$const22.9': [<numba.core.ir.Assign object at 0x000001A3D2D37130>],
             'interp_delta': [<numba.core.ir.Assign object at 0x000001A3D2D37EB0>],
             'interp_win': [<numba.core.ir.Assign object at 0x000001A3D2D37D90>],
             'num_table': [<numba.core.ir.Assign object at 0x000001A3D2D37FD0>],
             'scale': [<numba.core.ir.Assign object at 0x000001A3D2D4F130>],
             't_out': [<numba.core.ir.Assign object at 0x000001A3D2D37C70>],
             'x': [<numba.core.ir.Assign object at 0x000001A3D2D371F0>],
             'y': [<numba.core.ir.Assign object at 0x000001A3D2D4F250>]})
2025-05-02 23:00:49,892 - DEBUG - SSA violators set()
2025-05-02 23:00:49,894 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=9)
           2	LOAD_GLOBAL(arg=0, lineno=9)
           4	LOAD_FAST(arg=5, lineno=9)
           6	LOAD_FAST(arg=4, lineno=9)
           8	BINARY_MULTIPLY(arg=None, lineno=9)
          10	CALL_FUNCTION(arg=1, lineno=9)
          12	STORE_FAST(arg=7, lineno=9)
          14	LOAD_CONST(arg=1, lineno=10)
          16	STORE_FAST(arg=8, lineno=10)
          18	LOAD_CONST(arg=2, lineno=12)
          20	STORE_FAST(arg=9, lineno=12)
          22	LOAD_CONST(arg=1, lineno=13)
          24	STORE_FAST(arg=10, lineno=13)
          26	LOAD_CONST(arg=1, lineno=14)
          28	STORE_FAST(arg=11, lineno=14)
          30	LOAD_CONST(arg=2, lineno=15)
          32	STORE_FAST(arg=12, lineno=15)
          34	LOAD_CONST(arg=1, lineno=16)
          36	STORE_FAST(arg=13, lineno=16)
          38	LOAD_CONST(arg=1, lineno=17)
          40	STORE_FAST(arg=14, lineno=17)
          42	LOAD_FAST(arg=2, lineno=19)
          44	LOAD_ATTR(arg=1, lineno=19)
          46	LOAD_CONST(arg=2, lineno=19)
          48	BINARY_SUBSCR(arg=None, lineno=19)
          50	STORE_FAST(arg=15, lineno=19)
          52	LOAD_FAST(arg=0, lineno=20)
          54	LOAD_ATTR(arg=1, lineno=20)
          56	LOAD_CONST(arg=2, lineno=20)
          58	BINARY_SUBSCR(arg=None, lineno=20)
          60	STORE_FAST(arg=16, lineno=20)
          62	LOAD_FAST(arg=1, lineno=21)
          64	LOAD_ATTR(arg=1, lineno=21)
          66	LOAD_CONST(arg=2, lineno=21)
          68	BINARY_SUBSCR(arg=None, lineno=21)
          70	STORE_FAST(arg=17, lineno=21)
          72	LOAD_GLOBAL(arg=2, lineno=23)
          74	LOAD_FAST(arg=17, lineno=23)
          76	CALL_FUNCTION(arg=1, lineno=23)
          78	GET_ITER(arg=None, lineno=23)
>         80	FOR_ITER(arg=298, lineno=23)
          84	STORE_FAST(arg=18, lineno=23)
          86	LOAD_FAST(arg=1, lineno=24)
          88	LOAD_FAST(arg=18, lineno=24)
          90	BINARY_SUBSCR(arg=None, lineno=24)
          92	STORE_FAST(arg=8, lineno=24)
          94	LOAD_GLOBAL(arg=0, lineno=27)
          96	LOAD_FAST(arg=8, lineno=27)
          98	CALL_FUNCTION(arg=1, lineno=27)
         100	STORE_FAST(arg=9, lineno=27)
         102	LOAD_FAST(arg=5, lineno=30)
         104	LOAD_FAST(arg=8, lineno=30)
         106	LOAD_FAST(arg=9, lineno=30)
         108	BINARY_SUBTRACT(arg=None, lineno=30)
         110	BINARY_MULTIPLY(arg=None, lineno=30)
         112	STORE_FAST(arg=10, lineno=30)
         114	LOAD_FAST(arg=10, lineno=33)
         116	LOAD_FAST(arg=4, lineno=33)
         118	BINARY_MULTIPLY(arg=None, lineno=33)
         120	STORE_FAST(arg=11, lineno=33)
         122	LOAD_GLOBAL(arg=0, lineno=34)
         124	LOAD_FAST(arg=11, lineno=34)
         126	CALL_FUNCTION(arg=1, lineno=34)
         128	STORE_FAST(arg=12, lineno=34)
         130	LOAD_FAST(arg=11, lineno=37)
         132	LOAD_FAST(arg=12, lineno=37)
         134	BINARY_SUBTRACT(arg=None, lineno=37)
         136	STORE_FAST(arg=13, lineno=37)
         138	LOAD_GLOBAL(arg=3, lineno=40)
         140	LOAD_FAST(arg=9, lineno=40)
         142	LOAD_CONST(arg=3, lineno=40)
         144	BINARY_ADD(arg=None, lineno=40)
         146	LOAD_FAST(arg=15, lineno=40)
         148	LOAD_FAST(arg=12, lineno=40)
         150	BINARY_SUBTRACT(arg=None, lineno=40)
         152	LOAD_FAST(arg=7, lineno=40)
         154	BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
         156	CALL_FUNCTION(arg=2, lineno=40)
         158	STORE_FAST(arg=19, lineno=40)
         160	LOAD_GLOBAL(arg=4, lineno=41)
         162	LOAD_FAST(arg=19, lineno=41)
         164	CALL_FUNCTION(arg=1, lineno=41)
         166	GET_ITER(arg=None, lineno=41)
>        168	FOR_ITER(arg=68, lineno=41)
         170	STORE_FAST(arg=20, lineno=41)
         172	LOAD_FAST(arg=2, lineno=44)
         174	LOAD_FAST(arg=12, lineno=44)
         176	LOAD_FAST(arg=20, lineno=44)
         178	LOAD_FAST(arg=7, lineno=44)
         180	BINARY_MULTIPLY(arg=None, lineno=44)
         182	BINARY_ADD(arg=None, lineno=44)
         184	BINARY_SUBSCR(arg=None, lineno=44)
         186	LOAD_FAST(arg=13, lineno=45)
         188	LOAD_FAST(arg=3, lineno=45)
         190	LOAD_FAST(arg=12, lineno=45)
         192	LOAD_FAST(arg=20, lineno=45)
         194	LOAD_FAST(arg=7, lineno=45)
         196	BINARY_MULTIPLY(arg=None, lineno=45)
         198	BINARY_ADD(arg=None, lineno=45)
         200	BINARY_SUBSCR(arg=None, lineno=45)
         202	BINARY_MULTIPLY(arg=None, lineno=45)
         204	BINARY_ADD(arg=None, lineno=44)
         206	STORE_FAST(arg=14, lineno=43)
         208	LOAD_FAST(arg=6, lineno=47)
         210	LOAD_FAST(arg=18, lineno=47)
         212	DUP_TOP_TWO(arg=None, lineno=47)
         214	BINARY_SUBSCR(arg=None, lineno=47)
         216	LOAD_FAST(arg=14, lineno=47)
         218	LOAD_FAST(arg=0, lineno=47)
         220	LOAD_FAST(arg=9, lineno=47)
         222	LOAD_FAST(arg=20, lineno=47)
         224	BINARY_SUBTRACT(arg=None, lineno=47)
         226	BINARY_SUBSCR(arg=None, lineno=47)
         228	BINARY_MULTIPLY(arg=None, lineno=47)
         230	INPLACE_ADD(arg=None, lineno=47)
         232	ROT_THREE(arg=None, lineno=47)
         234	STORE_SUBSCR(arg=None, lineno=47)
         236	JUMP_ABSOLUTE(arg=168, lineno=47)
>        238	LOAD_FAST(arg=5, lineno=50)
         240	LOAD_FAST(arg=10, lineno=50)
         242	BINARY_SUBTRACT(arg=None, lineno=50)
         244	STORE_FAST(arg=10, lineno=50)
         246	LOAD_FAST(arg=10, lineno=53)
         248	LOAD_FAST(arg=4, lineno=53)
         250	BINARY_MULTIPLY(arg=None, lineno=53)
         252	STORE_FAST(arg=11, lineno=53)
         254	LOAD_GLOBAL(arg=0, lineno=54)
         256	LOAD_FAST(arg=11, lineno=54)
         258	CALL_FUNCTION(arg=1, lineno=54)
         260	STORE_FAST(arg=12, lineno=54)
         262	LOAD_FAST(arg=11, lineno=57)
         264	LOAD_FAST(arg=12, lineno=57)
         266	BINARY_SUBTRACT(arg=None, lineno=57)
         268	STORE_FAST(arg=13, lineno=57)
         270	LOAD_GLOBAL(arg=3, lineno=60)
         272	LOAD_FAST(arg=16, lineno=60)
         274	LOAD_FAST(arg=9, lineno=60)
         276	BINARY_SUBTRACT(arg=None, lineno=60)
         278	LOAD_CONST(arg=3, lineno=60)
         280	BINARY_SUBTRACT(arg=None, lineno=60)
         282	LOAD_FAST(arg=15, lineno=60)
         284	LOAD_FAST(arg=12, lineno=60)
         286	BINARY_SUBTRACT(arg=None, lineno=60)
         288	LOAD_FAST(arg=7, lineno=60)
         290	BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
         292	CALL_FUNCTION(arg=2, lineno=60)
         294	STORE_FAST(arg=21, lineno=60)
         296	LOAD_GLOBAL(arg=4, lineno=61)
         298	LOAD_FAST(arg=21, lineno=61)
         300	CALL_FUNCTION(arg=1, lineno=61)
         302	GET_ITER(arg=None, lineno=61)
>        304	FOR_ITER(arg=74, lineno=61)
         306	STORE_FAST(arg=22, lineno=61)
         308	LOAD_FAST(arg=2, lineno=63)
         310	LOAD_FAST(arg=12, lineno=63)
         312	LOAD_FAST(arg=22, lineno=63)
         314	LOAD_FAST(arg=7, lineno=63)
         316	BINARY_MULTIPLY(arg=None, lineno=63)
         318	BINARY_ADD(arg=None, lineno=63)
         320	BINARY_SUBSCR(arg=None, lineno=63)
         322	LOAD_FAST(arg=13, lineno=64)
         324	LOAD_FAST(arg=3, lineno=64)
         326	LOAD_FAST(arg=12, lineno=64)
         328	LOAD_FAST(arg=22, lineno=64)
         330	LOAD_FAST(arg=7, lineno=64)
         332	BINARY_MULTIPLY(arg=None, lineno=64)
         334	BINARY_ADD(arg=None, lineno=64)
         336	BINARY_SUBSCR(arg=None, lineno=64)
         338	BINARY_MULTIPLY(arg=None, lineno=64)
         340	BINARY_ADD(arg=None, lineno=63)
         342	STORE_FAST(arg=14, lineno=62)
         344	LOAD_FAST(arg=6, lineno=66)
         346	LOAD_FAST(arg=18, lineno=66)
         348	DUP_TOP_TWO(arg=None, lineno=66)
         350	BINARY_SUBSCR(arg=None, lineno=66)
         352	LOAD_FAST(arg=14, lineno=66)
         354	LOAD_FAST(arg=0, lineno=66)
         356	LOAD_FAST(arg=9, lineno=66)
         358	LOAD_FAST(arg=22, lineno=66)
         360	BINARY_ADD(arg=None, lineno=66)
         362	LOAD_CONST(arg=3, lineno=66)
         364	BINARY_ADD(arg=None, lineno=66)
         366	BINARY_SUBSCR(arg=None, lineno=66)
         368	BINARY_MULTIPLY(arg=None, lineno=66)
         370	INPLACE_ADD(arg=None, lineno=66)
         372	ROT_THREE(arg=None, lineno=66)
         374	STORE_SUBSCR(arg=None, lineno=66)
         376	JUMP_ABSOLUTE(arg=304, lineno=66)
>        380	JUMP_ABSOLUTE(arg=80, lineno=66)
>        382	LOAD_CONST(arg=0, lineno=66)
         384	RETURN_VALUE(arg=None, lineno=66)
2025-05-02 23:00:49,895 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-02 23:00:49,895 - DEBUG - stack: []
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=9)
2025-05-02 23:00:49,895 - DEBUG - stack []
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=9)
2025-05-02 23:00:49,895 - DEBUG - stack []
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=5, lineno=9)
2025-05-02 23:00:49,895 - DEBUG - stack ['$2load_global.0']
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=4, lineno=9)
2025-05-02 23:00:49,895 - DEBUG - stack ['$2load_global.0', '$scale4.1']
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=9)
2025-05-02 23:00:49,895 - DEBUG - stack ['$2load_global.0', '$scale4.1', '$num_table6.2']
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=9)
2025-05-02 23:00:49,895 - DEBUG - stack ['$2load_global.0', '$8binary_multiply.3']
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=12, inst=STORE_FAST(arg=7, lineno=9)
2025-05-02 23:00:49,895 - DEBUG - stack ['$10call_function.4']
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=10)
2025-05-02 23:00:49,895 - DEBUG - stack []
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=8, lineno=10)
2025-05-02 23:00:49,895 - DEBUG - stack ['$const14.5']
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=12)
2025-05-02 23:00:49,895 - DEBUG - stack []
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=20, inst=STORE_FAST(arg=9, lineno=12)
2025-05-02 23:00:49,895 - DEBUG - stack ['$const18.6']
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=13)
2025-05-02 23:00:49,895 - DEBUG - stack []
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=24, inst=STORE_FAST(arg=10, lineno=13)
2025-05-02 23:00:49,896 - DEBUG - stack ['$const22.7']
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=26, inst=LOAD_CONST(arg=1, lineno=14)
2025-05-02 23:00:49,896 - DEBUG - stack []
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=28, inst=STORE_FAST(arg=11, lineno=14)
2025-05-02 23:00:49,896 - DEBUG - stack ['$const26.8']
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=15)
2025-05-02 23:00:49,896 - DEBUG - stack []
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=32, inst=STORE_FAST(arg=12, lineno=15)
2025-05-02 23:00:49,896 - DEBUG - stack ['$const30.9']
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=16)
2025-05-02 23:00:49,896 - DEBUG - stack []
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=36, inst=STORE_FAST(arg=13, lineno=16)
2025-05-02 23:00:49,896 - DEBUG - stack ['$const34.10']
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=17)
2025-05-02 23:00:49,896 - DEBUG - stack []
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=40, inst=STORE_FAST(arg=14, lineno=17)
2025-05-02 23:00:49,896 - DEBUG - stack ['$const38.11']
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=42, inst=LOAD_FAST(arg=2, lineno=19)
2025-05-02 23:00:49,896 - DEBUG - stack []
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=44, inst=LOAD_ATTR(arg=1, lineno=19)
2025-05-02 23:00:49,896 - DEBUG - stack ['$interp_win42.12']
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=46, inst=LOAD_CONST(arg=2, lineno=19)
2025-05-02 23:00:49,896 - DEBUG - stack ['$44load_attr.13']
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=19)
2025-05-02 23:00:49,896 - DEBUG - stack ['$44load_attr.13', '$const46.14']
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=50, inst=STORE_FAST(arg=15, lineno=19)
2025-05-02 23:00:49,896 - DEBUG - stack ['$48binary_subscr.15']
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=20)
2025-05-02 23:00:49,896 - DEBUG - stack []
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=54, inst=LOAD_ATTR(arg=1, lineno=20)
2025-05-02 23:00:49,896 - DEBUG - stack ['$x52.16']
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=56, inst=LOAD_CONST(arg=2, lineno=20)
2025-05-02 23:00:49,897 - DEBUG - stack ['$54load_attr.17']
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=20)
2025-05-02 23:00:49,897 - DEBUG - stack ['$54load_attr.17', '$const56.18']
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=60, inst=STORE_FAST(arg=16, lineno=20)
2025-05-02 23:00:49,897 - DEBUG - stack ['$58binary_subscr.19']
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=21)
2025-05-02 23:00:49,897 - DEBUG - stack []
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=64, inst=LOAD_ATTR(arg=1, lineno=21)
2025-05-02 23:00:49,897 - DEBUG - stack ['$t_out62.20']
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=21)
2025-05-02 23:00:49,897 - DEBUG - stack ['$64load_attr.21']
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=21)
2025-05-02 23:00:49,897 - DEBUG - stack ['$64load_attr.21', '$const66.22']
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=70, inst=STORE_FAST(arg=17, lineno=21)
2025-05-02 23:00:49,897 - DEBUG - stack ['$68binary_subscr.23']
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=72, inst=LOAD_GLOBAL(arg=2, lineno=23)
2025-05-02 23:00:49,897 - DEBUG - stack []
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=17, lineno=23)
2025-05-02 23:00:49,897 - DEBUG - stack ['$72load_global.24']
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=23)
2025-05-02 23:00:49,897 - DEBUG - stack ['$72load_global.24', '$n_out74.25']
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=23)
2025-05-02 23:00:49,897 - DEBUG - stack ['$76call_function.26']
2025-05-02 23:00:49,897 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.27',), blockstack=(), npush=0)]
2025-05-02 23:00:49,897 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-05-02 23:00:49,897 - DEBUG - stack: ['$phi80.0']
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=298, lineno=23)
2025-05-02 23:00:49,897 - DEBUG - stack ['$phi80.0']
2025-05-02 23:00:49,897 - DEBUG - end state. edges=[Edge(pc=382, stack=(), blockstack=(), npush=0), Edge(pc=84, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-05-02 23:00:49,897 - DEBUG - pending: deque([State(pc_initial=382 nstack_initial=0), State(pc_initial=84 nstack_initial=2)])
2025-05-02 23:00:49,898 - DEBUG - stack: []
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=382, inst=LOAD_CONST(arg=0, lineno=66)
2025-05-02 23:00:49,898 - DEBUG - stack []
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=384, inst=RETURN_VALUE(arg=None, lineno=66)
2025-05-02 23:00:49,898 - DEBUG - stack ['$const382.0']
2025-05-02 23:00:49,898 - DEBUG - end state. edges=[]
2025-05-02 23:00:49,898 - DEBUG - pending: deque([State(pc_initial=84 nstack_initial=2)])
2025-05-02 23:00:49,898 - DEBUG - stack: ['$phi84.0', '$phi84.1']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=84, inst=STORE_FAST(arg=18, lineno=23)
2025-05-02 23:00:49,898 - DEBUG - stack ['$phi84.0', '$phi84.1']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=24)
2025-05-02 23:00:49,898 - DEBUG - stack ['$phi84.0']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=88, inst=LOAD_FAST(arg=18, lineno=24)
2025-05-02 23:00:49,898 - DEBUG - stack ['$phi84.0', '$t_out86.2']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=24)
2025-05-02 23:00:49,898 - DEBUG - stack ['$phi84.0', '$t_out86.2', '$t88.3']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=92, inst=STORE_FAST(arg=8, lineno=24)
2025-05-02 23:00:49,898 - DEBUG - stack ['$phi84.0', '$90binary_subscr.4']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=94, inst=LOAD_GLOBAL(arg=0, lineno=27)
2025-05-02 23:00:49,898 - DEBUG - stack ['$phi84.0']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=96, inst=LOAD_FAST(arg=8, lineno=27)
2025-05-02 23:00:49,898 - DEBUG - stack ['$phi84.0', '$94load_global.5']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=98, inst=CALL_FUNCTION(arg=1, lineno=27)
2025-05-02 23:00:49,898 - DEBUG - stack ['$phi84.0', '$94load_global.5', '$time_register96.6']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=100, inst=STORE_FAST(arg=9, lineno=27)
2025-05-02 23:00:49,898 - DEBUG - stack ['$phi84.0', '$98call_function.7']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=102, inst=LOAD_FAST(arg=5, lineno=30)
2025-05-02 23:00:49,898 - DEBUG - stack ['$phi84.0']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=104, inst=LOAD_FAST(arg=8, lineno=30)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$scale102.8']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=9, lineno=30)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$scale102.8', '$time_register104.9']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=30)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$scale102.8', '$time_register104.9', '$n106.10']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=110, inst=BINARY_MULTIPLY(arg=None, lineno=30)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$scale102.8', '$108binary_subtract.11']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=112, inst=STORE_FAST(arg=10, lineno=30)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$110binary_multiply.12']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=10, lineno=33)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=4, lineno=33)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$frac114.13']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=118, inst=BINARY_MULTIPLY(arg=None, lineno=33)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$frac114.13', '$num_table116.14']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=120, inst=STORE_FAST(arg=11, lineno=33)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$118binary_multiply.15']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=122, inst=LOAD_GLOBAL(arg=0, lineno=34)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=124, inst=LOAD_FAST(arg=11, lineno=34)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$122load_global.16']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=126, inst=CALL_FUNCTION(arg=1, lineno=34)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$122load_global.16', '$index_frac124.17']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=128, inst=STORE_FAST(arg=12, lineno=34)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$126call_function.18']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=130, inst=LOAD_FAST(arg=11, lineno=37)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=12, lineno=37)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$index_frac130.19']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=134, inst=BINARY_SUBTRACT(arg=None, lineno=37)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$index_frac130.19', '$offset132.20']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=136, inst=STORE_FAST(arg=13, lineno=37)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$134binary_subtract.21']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=138, inst=LOAD_GLOBAL(arg=3, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=140, inst=LOAD_FAST(arg=9, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$138load_global.22']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=142, inst=LOAD_CONST(arg=3, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$n140.23']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=144, inst=BINARY_ADD(arg=None, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$n140.23', '$const142.24']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=146, inst=LOAD_FAST(arg=15, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=148, inst=LOAD_FAST(arg=12, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$nwin146.26']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=150, inst=BINARY_SUBTRACT(arg=None, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$nwin146.26', '$offset148.27']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=7, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$150binary_subtract.28']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=154, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$150binary_subtract.28', '$index_step152.29']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=156, inst=CALL_FUNCTION(arg=2, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$154binary_floor_divide.30']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=158, inst=STORE_FAST(arg=19, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$156call_function.31']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=160, inst=LOAD_GLOBAL(arg=4, lineno=41)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=162, inst=LOAD_FAST(arg=19, lineno=41)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$160load_global.32']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=41)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$160load_global.32', '$i_max162.33']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=166, inst=GET_ITER(arg=None, lineno=41)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi84.0', '$164call_function.34']
2025-05-02 23:00:49,901 - DEBUG - end state. edges=[Edge(pc=168, stack=('$phi84.0', '$166get_iter.35'), blockstack=(), npush=0)]
2025-05-02 23:00:49,901 - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=2)])
2025-05-02 23:00:49,901 - DEBUG - stack: ['$phi168.0', '$phi168.1']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=168, inst=FOR_ITER(arg=68, lineno=41)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi168.0', '$phi168.1']
2025-05-02 23:00:49,901 - DEBUG - end state. edges=[Edge(pc=238, stack=('$phi168.0',), blockstack=(), npush=0), Edge(pc=170, stack=('$phi168.0', '$phi168.1', '$168for_iter.3'), blockstack=(), npush=0)]
2025-05-02 23:00:49,901 - DEBUG - pending: deque([State(pc_initial=238 nstack_initial=1), State(pc_initial=170 nstack_initial=3)])
2025-05-02 23:00:49,901 - DEBUG - stack: ['$phi238.0']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=238, inst=LOAD_FAST(arg=5, lineno=50)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi238.0']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=10, lineno=50)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi238.0', '$scale238.1']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=242, inst=BINARY_SUBTRACT(arg=None, lineno=50)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi238.0', '$scale238.1', '$frac240.2']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=244, inst=STORE_FAST(arg=10, lineno=50)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi238.0', '$242binary_subtract.3']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=10, lineno=53)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi238.0']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=248, inst=LOAD_FAST(arg=4, lineno=53)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi238.0', '$frac246.4']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=250, inst=BINARY_MULTIPLY(arg=None, lineno=53)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi238.0', '$frac246.4', '$num_table248.5']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=252, inst=STORE_FAST(arg=11, lineno=53)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi238.0', '$250binary_multiply.6']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=254, inst=LOAD_GLOBAL(arg=0, lineno=54)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi238.0']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=11, lineno=54)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$254load_global.7']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=258, inst=CALL_FUNCTION(arg=1, lineno=54)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$254load_global.7', '$index_frac256.8']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=260, inst=STORE_FAST(arg=12, lineno=54)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$258call_function.9']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=262, inst=LOAD_FAST(arg=11, lineno=57)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=264, inst=LOAD_FAST(arg=12, lineno=57)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$index_frac262.10']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=266, inst=BINARY_SUBTRACT(arg=None, lineno=57)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$index_frac262.10', '$offset264.11']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=268, inst=STORE_FAST(arg=13, lineno=57)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$266binary_subtract.12']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=270, inst=LOAD_GLOBAL(arg=3, lineno=60)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=272, inst=LOAD_FAST(arg=16, lineno=60)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$270load_global.13']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=274, inst=LOAD_FAST(arg=9, lineno=60)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$n_orig272.14']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=276, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$n_orig272.14', '$n274.15']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=278, inst=LOAD_CONST(arg=3, lineno=60)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$276binary_subtract.16']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=280, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$276binary_subtract.16', '$const278.17']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=282, inst=LOAD_FAST(arg=15, lineno=60)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=284, inst=LOAD_FAST(arg=12, lineno=60)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$nwin282.19']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=286, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$nwin282.19', '$offset284.20']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=288, inst=LOAD_FAST(arg=7, lineno=60)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$286binary_subtract.21']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=290, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$286binary_subtract.21', '$index_step288.22']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=292, inst=CALL_FUNCTION(arg=2, lineno=60)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$290binary_floor_divide.23']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=294, inst=STORE_FAST(arg=21, lineno=60)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi238.0', '$292call_function.24']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=296, inst=LOAD_GLOBAL(arg=4, lineno=61)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi238.0']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=298, inst=LOAD_FAST(arg=21, lineno=61)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi238.0', '$296load_global.25']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=300, inst=CALL_FUNCTION(arg=1, lineno=61)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi238.0', '$296load_global.25', '$k_max298.26']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=302, inst=GET_ITER(arg=None, lineno=61)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi238.0', '$300call_function.27']
2025-05-02 23:00:49,903 - DEBUG - end state. edges=[Edge(pc=304, stack=('$phi238.0', '$302get_iter.28'), blockstack=(), npush=0)]
2025-05-02 23:00:49,903 - DEBUG - pending: deque([State(pc_initial=170 nstack_initial=3), State(pc_initial=304 nstack_initial=2)])
2025-05-02 23:00:49,903 - DEBUG - stack: ['$phi170.0', '$phi170.1', '$phi170.2']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=170, inst=STORE_FAST(arg=20, lineno=41)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi170.0', '$phi170.1', '$phi170.2']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=172, inst=LOAD_FAST(arg=2, lineno=44)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=12, lineno=44)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=176, inst=LOAD_FAST(arg=20, lineno=44)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=178, inst=LOAD_FAST(arg=7, lineno=44)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$i176.5']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=44)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$i176.5', '$index_step178.6']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=44)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$180binary_multiply.7']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=44)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$182binary_add.8']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=186, inst=LOAD_FAST(arg=13, lineno=45)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=188, inst=LOAD_FAST(arg=3, lineno=45)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=12, lineno=45)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=192, inst=LOAD_FAST(arg=20, lineno=45)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=45)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$i192.13']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=196, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$i192.13', '$index_step194.14']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=198, inst=BINARY_ADD(arg=None, lineno=45)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$196binary_multiply.15']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=200, inst=BINARY_SUBSCR(arg=None, lineno=45)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$198binary_add.16']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=202, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$200binary_subscr.17']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=204, inst=BINARY_ADD(arg=None, lineno=44)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$202binary_multiply.18']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=206, inst=STORE_FAST(arg=14, lineno=43)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$204binary_add.19']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=208, inst=LOAD_FAST(arg=6, lineno=47)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=210, inst=LOAD_FAST(arg=18, lineno=47)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=212, inst=DUP_TOP_TWO(arg=None, lineno=47)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=214, inst=BINARY_SUBSCR(arg=None, lineno=47)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$212dup_top_two.22', '$212dup_top_two.23']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=216, inst=LOAD_FAST(arg=14, lineno=47)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=47)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=220, inst=LOAD_FAST(arg=9, lineno=47)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=222, inst=LOAD_FAST(arg=20, lineno=47)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$n220.27']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=224, inst=BINARY_SUBTRACT(arg=None, lineno=47)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$n220.27', '$i222.28']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=226, inst=BINARY_SUBSCR(arg=None, lineno=47)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$224binary_subtract.29']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=228, inst=BINARY_MULTIPLY(arg=None, lineno=47)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$226binary_subscr.30']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=230, inst=INPLACE_ADD(arg=None, lineno=47)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$228binary_multiply.31']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=232, inst=ROT_THREE(arg=None, lineno=47)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$230inplace_add.32']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=234, inst=STORE_SUBSCR(arg=None, lineno=47)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi170.0', '$phi170.1', '$230inplace_add.32', '$y208.20', '$t210.21']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=236, inst=JUMP_ABSOLUTE(arg=168, lineno=47)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 23:00:49,905 - DEBUG - end state. edges=[Edge(pc=168, stack=('$phi170.0', '$phi170.1'), blockstack=(), npush=0)]
2025-05-02 23:00:49,905 - DEBUG - pending: deque([State(pc_initial=304 nstack_initial=2), State(pc_initial=168 nstack_initial=2)])
2025-05-02 23:00:49,905 - DEBUG - stack: ['$phi304.0', '$phi304.1']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=304, inst=FOR_ITER(arg=74, lineno=61)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi304.0', '$phi304.1']
2025-05-02 23:00:49,905 - DEBUG - end state. edges=[Edge(pc=380, stack=('$phi304.0',), blockstack=(), npush=0), Edge(pc=306, stack=('$phi304.0', '$phi304.1', '$304for_iter.3'), blockstack=(), npush=0)]
2025-05-02 23:00:49,905 - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=2), State(pc_initial=380 nstack_initial=1), State(pc_initial=306 nstack_initial=3)])
2025-05-02 23:00:49,905 - DEBUG - pending: deque([State(pc_initial=380 nstack_initial=1), State(pc_initial=306 nstack_initial=3)])
2025-05-02 23:00:49,905 - DEBUG - stack: ['$phi380.0']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=380, inst=JUMP_ABSOLUTE(arg=80, lineno=66)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi380.0']
2025-05-02 23:00:49,906 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi380.0',), blockstack=(), npush=0)]
2025-05-02 23:00:49,906 - DEBUG - pending: deque([State(pc_initial=306 nstack_initial=3), State(pc_initial=80 nstack_initial=1)])
2025-05-02 23:00:49,906 - DEBUG - stack: ['$phi306.0', '$phi306.1', '$phi306.2']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=306, inst=STORE_FAST(arg=22, lineno=61)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$phi306.2']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=308, inst=LOAD_FAST(arg=2, lineno=63)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=310, inst=LOAD_FAST(arg=12, lineno=63)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=312, inst=LOAD_FAST(arg=22, lineno=63)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=314, inst=LOAD_FAST(arg=7, lineno=63)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$k312.5']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=316, inst=BINARY_MULTIPLY(arg=None, lineno=63)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$k312.5', '$index_step314.6']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=318, inst=BINARY_ADD(arg=None, lineno=63)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$316binary_multiply.7']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=320, inst=BINARY_SUBSCR(arg=None, lineno=63)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$318binary_add.8']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=322, inst=LOAD_FAST(arg=13, lineno=64)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=324, inst=LOAD_FAST(arg=3, lineno=64)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=326, inst=LOAD_FAST(arg=12, lineno=64)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=328, inst=LOAD_FAST(arg=22, lineno=64)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=330, inst=LOAD_FAST(arg=7, lineno=64)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$k328.13']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=332, inst=BINARY_MULTIPLY(arg=None, lineno=64)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$k328.13', '$index_step330.14']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=334, inst=BINARY_ADD(arg=None, lineno=64)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$332binary_multiply.15']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=336, inst=BINARY_SUBSCR(arg=None, lineno=64)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$334binary_add.16']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=338, inst=BINARY_MULTIPLY(arg=None, lineno=64)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$336binary_subscr.17']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=340, inst=BINARY_ADD(arg=None, lineno=63)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$338binary_multiply.18']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=342, inst=STORE_FAST(arg=14, lineno=62)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$340binary_add.19']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=344, inst=LOAD_FAST(arg=6, lineno=66)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=346, inst=LOAD_FAST(arg=18, lineno=66)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=348, inst=DUP_TOP_TWO(arg=None, lineno=66)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=350, inst=BINARY_SUBSCR(arg=None, lineno=66)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$348dup_top_two.22', '$348dup_top_two.23']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=352, inst=LOAD_FAST(arg=14, lineno=66)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=354, inst=LOAD_FAST(arg=0, lineno=66)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=356, inst=LOAD_FAST(arg=9, lineno=66)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=358, inst=LOAD_FAST(arg=22, lineno=66)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$n356.27']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=360, inst=BINARY_ADD(arg=None, lineno=66)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$n356.27', '$k358.28']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=362, inst=LOAD_CONST(arg=3, lineno=66)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$360binary_add.29']
2025-05-02 23:00:49,908 - DEBUG - dispatch pc=364, inst=BINARY_ADD(arg=None, lineno=66)
2025-05-02 23:00:49,908 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$360binary_add.29', '$const362.30']
2025-05-02 23:00:49,908 - DEBUG - dispatch pc=366, inst=BINARY_SUBSCR(arg=None, lineno=66)
2025-05-02 23:00:49,908 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$364binary_add.31']
2025-05-02 23:00:49,908 - DEBUG - dispatch pc=368, inst=BINARY_MULTIPLY(arg=None, lineno=66)
2025-05-02 23:00:49,908 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$366binary_subscr.32']
2025-05-02 23:00:49,908 - DEBUG - dispatch pc=370, inst=INPLACE_ADD(arg=None, lineno=66)
2025-05-02 23:00:49,908 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$368binary_multiply.33']
2025-05-02 23:00:49,908 - DEBUG - dispatch pc=372, inst=ROT_THREE(arg=None, lineno=66)
2025-05-02 23:00:49,908 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$370inplace_add.34']
2025-05-02 23:00:49,908 - DEBUG - dispatch pc=374, inst=STORE_SUBSCR(arg=None, lineno=66)
2025-05-02 23:00:49,908 - DEBUG - stack ['$phi306.0', '$phi306.1', '$370inplace_add.34', '$y344.20', '$t346.21']
2025-05-02 23:00:49,908 - DEBUG - dispatch pc=376, inst=JUMP_ABSOLUTE(arg=304, lineno=66)
2025-05-02 23:00:49,908 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 23:00:49,908 - DEBUG - end state. edges=[Edge(pc=304, stack=('$phi306.0', '$phi306.1'), blockstack=(), npush=0)]
2025-05-02 23:00:49,908 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=304 nstack_initial=2)])
2025-05-02 23:00:49,908 - DEBUG - pending: deque([State(pc_initial=304 nstack_initial=2)])
2025-05-02 23:00:49,908 - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-02 23:00:49,908 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=84 nstack_initial=2): {'$phi84.1'},
             State(pc_initial=168 nstack_initial=2): {'$phi168.1'},
             State(pc_initial=170 nstack_initial=3): {'$phi170.2'},
             State(pc_initial=238 nstack_initial=1): set(),
             State(pc_initial=304 nstack_initial=2): {'$phi304.1'},
             State(pc_initial=306 nstack_initial=3): {'$phi306.2'},
             State(pc_initial=380 nstack_initial=1): set(),
             State(pc_initial=382 nstack_initial=0): set()})
2025-05-02 23:00:49,908 - DEBUG - defmap: {'$phi168.1': State(pc_initial=84 nstack_initial=2),
 '$phi170.2': State(pc_initial=168 nstack_initial=2),
 '$phi304.1': State(pc_initial=238 nstack_initial=1),
 '$phi306.2': State(pc_initial=304 nstack_initial=2),
 '$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi84.1': State(pc_initial=80 nstack_initial=1)}
2025-05-02 23:00:49,908 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi170.0',
                            State(pc_initial=170 nstack_initial=3)),
                           ('$phi84.0', State(pc_initial=84 nstack_initial=2))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2)),
                           ('$phi170.1',
                            State(pc_initial=170 nstack_initial=3))},
             '$phi170.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.1': {('$phi168.1',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi304.0': {('$phi238.0',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi306.0',
                            State(pc_initial=306 nstack_initial=3))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi306.1',
                            State(pc_initial=306 nstack_initial=3))},
             '$phi306.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.1': {('$phi304.1',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi380.0',
                           State(pc_initial=380 nstack_initial=1))},
             '$phi84.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 23:00:49,909 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2)),
                           ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2)),
                           ('$phi168.1',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi304.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2)),
                           ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi304.1',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 23:00:49,909 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 23:00:49,910 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 23:00:49,910 - DEBUG - keep phismap: {'$phi168.1': {('$166get_iter.35', State(pc_initial=84 nstack_initial=2))},
 '$phi170.2': {('$168for_iter.3', State(pc_initial=168 nstack_initial=2))},
 '$phi304.1': {('$302get_iter.28', State(pc_initial=238 nstack_initial=1))},
 '$phi306.2': {('$304for_iter.3', State(pc_initial=304 nstack_initial=2))},
 '$phi80.0': {('$78get_iter.27', State(pc_initial=0 nstack_initial=0))},
 '$phi84.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-05-02 23:00:49,910 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.27'},
             State(pc_initial=80 nstack_initial=1): {'$phi84.1': '$80for_iter.2'},
             State(pc_initial=84 nstack_initial=2): {'$phi168.1': '$166get_iter.35'},
             State(pc_initial=168 nstack_initial=2): {'$phi170.2': '$168for_iter.3'},
             State(pc_initial=238 nstack_initial=1): {'$phi304.1': '$302get_iter.28'},
             State(pc_initial=304 nstack_initial=2): {'$phi306.2': '$304for_iter.3'}})
2025-05-02 23:00:49,910 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-02 23:00:49,910 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$scale4.1'}), (6, {'res': '$num_table6.2'}), (8, {'lhs': '$scale4.1', 'rhs': '$num_table6.2', 'res': '$8binary_multiply.3'}), (10, {'func': '$2load_global.0', 'args': ['$8binary_multiply.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4'}), (14, {'res': '$const14.5'}), (16, {'value': '$const14.5'}), (18, {'res': '$const18.6'}), (20, {'value': '$const18.6'}), (22, {'res': '$const22.7'}), (24, {'value': '$const22.7'}), (26, {'res': '$const26.8'}), (28, {'value': '$const26.8'}), (30, {'res': '$const30.9'}), (32, {'value': '$const30.9'}), (34, {'res': '$const34.10'}), (36, {'value': '$const34.10'}), (38, {'res': '$const38.11'}), (40, {'value': '$const38.11'}), (42, {'res': '$interp_win42.12'}), (44, {'item': '$interp_win42.12', 'res': '$44load_attr.13'}), (46, {'res': '$const46.14'}), (48, {'index': '$const46.14', 'target': '$44load_attr.13', 'res': '$48binary_subscr.15'}), (50, {'value': '$48binary_subscr.15'}), (52, {'res': '$x52.16'}), (54, {'item': '$x52.16', 'res': '$54load_attr.17'}), (56, {'res': '$const56.18'}), (58, {'index': '$const56.18', 'target': '$54load_attr.17', 'res': '$58binary_subscr.19'}), (60, {'value': '$58binary_subscr.19'}), (62, {'res': '$t_out62.20'}), (64, {'item': '$t_out62.20', 'res': '$64load_attr.21'}), (66, {'res': '$const66.22'}), (68, {'index': '$const66.22', 'target': '$64load_attr.21', 'res': '$68binary_subscr.23'}), (70, {'value': '$68binary_subscr.23'}), (72, {'res': '$72load_global.24'}), (74, {'res': '$n_out74.25'}), (76, {'func': '$72load_global.24', 'args': ['$n_out74.25'], 'res': '$76call_function.26'}), (78, {'value': '$76call_function.26', 'res': '$78get_iter.27'})), outgoing_phis={'$phi80.0': '$78get_iter.27'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.27',)})
2025-05-02 23:00:49,911 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi84.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={382: (), 84: ('$phi80.0', '$80for_iter.2')})
2025-05-02 23:00:49,911 - DEBUG - block_infos State(pc_initial=84 nstack_initial=2):
AdaptBlockInfo(insts=((84, {'value': '$phi84.1'}), (86, {'res': '$t_out86.2'}), (88, {'res': '$t88.3'}), (90, {'index': '$t88.3', 'target': '$t_out86.2', 'res': '$90binary_subscr.4'}), (92, {'value': '$90binary_subscr.4'}), (94, {'res': '$94load_global.5'}), (96, {'res': '$time_register96.6'}), (98, {'func': '$94load_global.5', 'args': ['$time_register96.6'], 'res': '$98call_function.7'}), (100, {'value': '$98call_function.7'}), (102, {'res': '$scale102.8'}), (104, {'res': '$time_register104.9'}), (106, {'res': '$n106.10'}), (108, {'lhs': '$time_register104.9', 'rhs': '$n106.10', 'res': '$108binary_subtract.11'}), (110, {'lhs': '$scale102.8', 'rhs': '$108binary_subtract.11', 'res': '$110binary_multiply.12'}), (112, {'value': '$110binary_multiply.12'}), (114, {'res': '$frac114.13'}), (116, {'res': '$num_table116.14'}), (118, {'lhs': '$frac114.13', 'rhs': '$num_table116.14', 'res': '$118binary_multiply.15'}), (120, {'value': '$118binary_multiply.15'}), (122, {'res': '$122load_global.16'}), (124, {'res': '$index_frac124.17'}), (126, {'func': '$122load_global.16', 'args': ['$index_frac124.17'], 'res': '$126call_function.18'}), (128, {'value': '$126call_function.18'}), (130, {'res': '$index_frac130.19'}), (132, {'res': '$offset132.20'}), (134, {'lhs': '$index_frac130.19', 'rhs': '$offset132.20', 'res': '$134binary_subtract.21'}), (136, {'value': '$134binary_subtract.21'}), (138, {'res': '$138load_global.22'}), (140, {'res': '$n140.23'}), (142, {'res': '$const142.24'}), (144, {'lhs': '$n140.23', 'rhs': '$const142.24', 'res': '$144binary_add.25'}), (146, {'res': '$nwin146.26'}), (148, {'res': '$offset148.27'}), (150, {'lhs': '$nwin146.26', 'rhs': '$offset148.27', 'res': '$150binary_subtract.28'}), (152, {'res': '$index_step152.29'}), (154, {'lhs': '$150binary_subtract.28', 'rhs': '$index_step152.29', 'res': '$154binary_floor_divide.30'}), (156, {'func': '$138load_global.22', 'args': ['$144binary_add.25', '$154binary_floor_divide.30'], 'res': '$156call_function.31'}), (158, {'value': '$156call_function.31'}), (160, {'res': '$160load_global.32'}), (162, {'res': '$i_max162.33'}), (164, {'func': '$160load_global.32', 'args': ['$i_max162.33'], 'res': '$164call_function.34'}), (166, {'value': '$164call_function.34', 'res': '$166get_iter.35'})), outgoing_phis={'$phi168.1': '$166get_iter.35'}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi84.0', '$166get_iter.35')})
2025-05-02 23:00:49,911 - DEBUG - block_infos State(pc_initial=168 nstack_initial=2):
AdaptBlockInfo(insts=((168, {'iterator': '$phi168.1', 'pair': '$168for_iter.2', 'indval': '$168for_iter.3', 'pred': '$168for_iter.4'}),), outgoing_phis={'$phi170.2': '$168for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={238: ('$phi168.0',), 170: ('$phi168.0', '$phi168.1', '$168for_iter.3')})
2025-05-02 23:00:49,911 - DEBUG - block_infos State(pc_initial=170 nstack_initial=3):
AdaptBlockInfo(insts=((170, {'value': '$phi170.2'}), (172, {'res': '$interp_win172.3'}), (174, {'res': '$offset174.4'}), (176, {'res': '$i176.5'}), (178, {'res': '$index_step178.6'}), (180, {'lhs': '$i176.5', 'rhs': '$index_step178.6', 'res': '$180binary_multiply.7'}), (182, {'lhs': '$offset174.4', 'rhs': '$180binary_multiply.7', 'res': '$182binary_add.8'}), (184, {'index': '$182binary_add.8', 'target': '$interp_win172.3', 'res': '$184binary_subscr.9'}), (186, {'res': '$eta186.10'}), (188, {'res': '$interp_delta188.11'}), (190, {'res': '$offset190.12'}), (192, {'res': '$i192.13'}), (194, {'res': '$index_step194.14'}), (196, {'lhs': '$i192.13', 'rhs': '$index_step194.14', 'res': '$196binary_multiply.15'}), (198, {'lhs': '$offset190.12', 'rhs': '$196binary_multiply.15', 'res': '$198binary_add.16'}), (200, {'index': '$198binary_add.16', 'target': '$interp_delta188.11', 'res': '$200binary_subscr.17'}), (202, {'lhs': '$eta186.10', 'rhs': '$200binary_subscr.17', 'res': '$202binary_multiply.18'}), (204, {'lhs': '$184binary_subscr.9', 'rhs': '$202binary_multiply.18', 'res': '$204binary_add.19'}), (206, {'value': '$204binary_add.19'}), (208, {'res': '$y208.20'}), (210, {'res': '$t210.21'}), (212, {'orig': ['$y208.20', '$t210.21'], 'duped': ['$212dup_top_two.22', '$212dup_top_two.23']}), (214, {'index': '$212dup_top_two.23', 'target': '$212dup_top_two.22', 'res': '$214binary_subscr.24'}), (216, {'res': '$weight216.25'}), (218, {'res': '$x218.26'}), (220, {'res': '$n220.27'}), (222, {'res': '$i222.28'}), (224, {'lhs': '$n220.27', 'rhs': '$i222.28', 'res': '$224binary_subtract.29'}), (226, {'index': '$224binary_subtract.29', 'target': '$x218.26', 'res': '$226binary_subscr.30'}), (228, {'lhs': '$weight216.25', 'rhs': '$226binary_subscr.30', 'res': '$228binary_multiply.31'}), (230, {'lhs': '$214binary_subscr.24', 'rhs': '$228binary_multiply.31', 'res': '$230inplace_add.32'}), (234, {'target': '$y208.20', 'index': '$t210.21', 'value': '$230inplace_add.32'}), (236, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi170.0', '$phi170.1')})
2025-05-02 23:00:49,911 - DEBUG - block_infos State(pc_initial=238 nstack_initial=1):
AdaptBlockInfo(insts=((238, {'res': '$scale238.1'}), (240, {'res': '$frac240.2'}), (242, {'lhs': '$scale238.1', 'rhs': '$frac240.2', 'res': '$242binary_subtract.3'}), (244, {'value': '$242binary_subtract.3'}), (246, {'res': '$frac246.4'}), (248, {'res': '$num_table248.5'}), (250, {'lhs': '$frac246.4', 'rhs': '$num_table248.5', 'res': '$250binary_multiply.6'}), (252, {'value': '$250binary_multiply.6'}), (254, {'res': '$254load_global.7'}), (256, {'res': '$index_frac256.8'}), (258, {'func': '$254load_global.7', 'args': ['$index_frac256.8'], 'res': '$258call_function.9'}), (260, {'value': '$258call_function.9'}), (262, {'res': '$index_frac262.10'}), (264, {'res': '$offset264.11'}), (266, {'lhs': '$index_frac262.10', 'rhs': '$offset264.11', 'res': '$266binary_subtract.12'}), (268, {'value': '$266binary_subtract.12'}), (270, {'res': '$270load_global.13'}), (272, {'res': '$n_orig272.14'}), (274, {'res': '$n274.15'}), (276, {'lhs': '$n_orig272.14', 'rhs': '$n274.15', 'res': '$276binary_subtract.16'}), (278, {'res': '$const278.17'}), (280, {'lhs': '$276binary_subtract.16', 'rhs': '$const278.17', 'res': '$280binary_subtract.18'}), (282, {'res': '$nwin282.19'}), (284, {'res': '$offset284.20'}), (286, {'lhs': '$nwin282.19', 'rhs': '$offset284.20', 'res': '$286binary_subtract.21'}), (288, {'res': '$index_step288.22'}), (290, {'lhs': '$286binary_subtract.21', 'rhs': '$index_step288.22', 'res': '$290binary_floor_divide.23'}), (292, {'func': '$270load_global.13', 'args': ['$280binary_subtract.18', '$290binary_floor_divide.23'], 'res': '$292call_function.24'}), (294, {'value': '$292call_function.24'}), (296, {'res': '$296load_global.25'}), (298, {'res': '$k_max298.26'}), (300, {'func': '$296load_global.25', 'args': ['$k_max298.26'], 'res': '$300call_function.27'}), (302, {'value': '$300call_function.27', 'res': '$302get_iter.28'})), outgoing_phis={'$phi304.1': '$302get_iter.28'}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: ('$phi238.0', '$302get_iter.28')})
2025-05-02 23:00:49,911 - DEBUG - block_infos State(pc_initial=304 nstack_initial=2):
AdaptBlockInfo(insts=((304, {'iterator': '$phi304.1', 'pair': '$304for_iter.2', 'indval': '$304for_iter.3', 'pred': '$304for_iter.4'}),), outgoing_phis={'$phi306.2': '$304for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={380: ('$phi304.0',), 306: ('$phi304.0', '$phi304.1', '$304for_iter.3')})
2025-05-02 23:00:49,911 - DEBUG - block_infos State(pc_initial=306 nstack_initial=3):
AdaptBlockInfo(insts=((306, {'value': '$phi306.2'}), (308, {'res': '$interp_win308.3'}), (310, {'res': '$offset310.4'}), (312, {'res': '$k312.5'}), (314, {'res': '$index_step314.6'}), (316, {'lhs': '$k312.5', 'rhs': '$index_step314.6', 'res': '$316binary_multiply.7'}), (318, {'lhs': '$offset310.4', 'rhs': '$316binary_multiply.7', 'res': '$318binary_add.8'}), (320, {'index': '$318binary_add.8', 'target': '$interp_win308.3', 'res': '$320binary_subscr.9'}), (322, {'res': '$eta322.10'}), (324, {'res': '$interp_delta324.11'}), (326, {'res': '$offset326.12'}), (328, {'res': '$k328.13'}), (330, {'res': '$index_step330.14'}), (332, {'lhs': '$k328.13', 'rhs': '$index_step330.14', 'res': '$332binary_multiply.15'}), (334, {'lhs': '$offset326.12', 'rhs': '$332binary_multiply.15', 'res': '$334binary_add.16'}), (336, {'index': '$334binary_add.16', 'target': '$interp_delta324.11', 'res': '$336binary_subscr.17'}), (338, {'lhs': '$eta322.10', 'rhs': '$336binary_subscr.17', 'res': '$338binary_multiply.18'}), (340, {'lhs': '$320binary_subscr.9', 'rhs': '$338binary_multiply.18', 'res': '$340binary_add.19'}), (342, {'value': '$340binary_add.19'}), (344, {'res': '$y344.20'}), (346, {'res': '$t346.21'}), (348, {'orig': ['$y344.20', '$t346.21'], 'duped': ['$348dup_top_two.22', '$348dup_top_two.23']}), (350, {'index': '$348dup_top_two.23', 'target': '$348dup_top_two.22', 'res': '$350binary_subscr.24'}), (352, {'res': '$weight352.25'}), (354, {'res': '$x354.26'}), (356, {'res': '$n356.27'}), (358, {'res': '$k358.28'}), (360, {'lhs': '$n356.27', 'rhs': '$k358.28', 'res': '$360binary_add.29'}), (362, {'res': '$const362.30'}), (364, {'lhs': '$360binary_add.29', 'rhs': '$const362.30', 'res': '$364binary_add.31'}), (366, {'index': '$364binary_add.31', 'target': '$x354.26', 'res': '$366binary_subscr.32'}), (368, {'lhs': '$weight352.25', 'rhs': '$366binary_subscr.32', 'res': '$368binary_multiply.33'}), (370, {'lhs': '$350binary_subscr.24', 'rhs': '$368binary_multiply.33', 'res': '$370inplace_add.34'}), (374, {'target': '$y344.20', 'index': '$t346.21', 'value': '$370inplace_add.34'}), (376, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: ('$phi306.0', '$phi306.1')})
2025-05-02 23:00:49,911 - DEBUG - block_infos State(pc_initial=380 nstack_initial=1):
AdaptBlockInfo(insts=((380, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi380.0',)})
2025-05-02 23:00:49,911 - DEBUG - block_infos State(pc_initial=382 nstack_initial=0):
AdaptBlockInfo(insts=((382, {'res': '$const382.0'}), (384, {'retval': '$const382.0', 'castval': '$384return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-02 23:00:49,914 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    t_out = arg(1, name=t_out)               ['t_out']
    interp_win = arg(2, name=interp_win)     ['interp_win']
    interp_delta = arg(3, name=interp_delta) ['interp_delta']
    num_table = arg(4, name=num_table)       ['num_table']
    scale = arg(5, name=scale)               ['scale']
    y = arg(6, name=y)                       ['y']
    $2load_global.0 = global(int: <class 'int'>) ['$2load_global.0']
    $8binary_multiply.3 = scale * num_table  ['$8binary_multiply.3', 'num_table', 'scale']
    index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8binary_multiply.3', 'index_step']
    time_register = const(float, 0.0)        ['time_register']
    n = const(int, 0)                        ['n']
    frac = const(float, 0.0)                 ['frac']
    index_frac = const(float, 0.0)           ['index_frac']
    offset = const(int, 0)                   ['offset']
    eta = const(float, 0.0)                  ['eta']
    weight = const(float, 0.0)               ['weight']
    $44load_attr.13 = getattr(value=interp_win, attr=shape) ['$44load_attr.13', 'interp_win']
    $const46.14 = const(int, 0)              ['$const46.14']
    nwin = getitem(value=$44load_attr.13, index=$const46.14, fn=<built-in function getitem>) ['$44load_attr.13', '$const46.14', 'nwin']
    $54load_attr.17 = getattr(value=x, attr=shape) ['$54load_attr.17', 'x']
    $const56.18 = const(int, 0)              ['$const56.18']
    n_orig = getitem(value=$54load_attr.17, index=$const56.18, fn=<built-in function getitem>) ['$54load_attr.17', '$const56.18', 'n_orig']
    $64load_attr.21 = getattr(value=t_out, attr=shape) ['$64load_attr.21', 't_out']
    $const66.22 = const(int, 0)              ['$const66.22']
    n_out = getitem(value=$64load_attr.21, index=$const66.22, fn=<built-in function getitem>) ['$64load_attr.21', '$const66.22', 'n_out']
    $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>) ['$72load_global.24']
    $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.24', '$76call_function.26', 'n_out']
    $78get_iter.27 = getiter(value=$76call_function.26) ['$76call_function.26', '$78get_iter.27']
    $phi80.0 = $78get_iter.27                ['$78get_iter.27', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi84.1 = $80for_iter.2                 ['$80for_iter.2', '$phi84.1']
    branch $80for_iter.3, 84, 382            ['$80for_iter.3']
label 84:
    t = $phi84.1                             ['$phi84.1', 't']
    time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>) ['t', 't_out', 'time_register']
    $94load_global.5 = global(int: <class 'int'>) ['$94load_global.5']
    n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None) ['$94load_global.5', 'n', 'time_register']
    $108binary_subtract.11 = time_register - n ['$108binary_subtract.11', 'n', 'time_register']
    frac = scale * $108binary_subtract.11    ['$108binary_subtract.11', 'frac', 'scale']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $122load_global.16 = global(int: <class 'int'>) ['$122load_global.16']
    offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.16', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $138load_global.22 = global(min: <built-in function min>) ['$138load_global.22']
    $const142.24 = const(int, 1)             ['$const142.24']
    $144binary_add.25 = n + $const142.24     ['$144binary_add.25', '$const142.24', 'n']
    $150binary_subtract.28 = nwin - offset   ['$150binary_subtract.28', 'nwin', 'offset']
    $154binary_floor_divide.30 = $150binary_subtract.28 // index_step ['$150binary_subtract.28', '$154binary_floor_divide.30', 'index_step']
    i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None) ['$138load_global.22', '$144binary_add.25', '$154binary_floor_divide.30', 'i_max']
    $160load_global.32 = global(range: <class 'range'>) ['$160load_global.32']
    $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None) ['$160load_global.32', '$164call_function.34', 'i_max']
    $166get_iter.35 = getiter(value=$164call_function.34) ['$164call_function.34', '$166get_iter.35']
    $phi168.1 = $166get_iter.35              ['$166get_iter.35', '$phi168.1']
    jump 168                                 []
label 168:
    $168for_iter.2 = iternext(value=$phi168.1) ['$168for_iter.2', '$phi168.1']
    $168for_iter.3 = pair_first(value=$168for_iter.2) ['$168for_iter.2', '$168for_iter.3']
    $168for_iter.4 = pair_second(value=$168for_iter.2) ['$168for_iter.2', '$168for_iter.4']
    $phi170.2 = $168for_iter.3               ['$168for_iter.3', '$phi170.2']
    branch $168for_iter.4, 170, 238          ['$168for_iter.4']
label 170:
    i = $phi170.2                            ['$phi170.2', 'i']
    $180binary_multiply.7 = i * index_step   ['$180binary_multiply.7', 'i', 'index_step']
    $182binary_add.8 = offset + $180binary_multiply.7 ['$180binary_multiply.7', '$182binary_add.8', 'offset']
    $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>) ['$182binary_add.8', '$184binary_subscr.9', 'interp_win']
    $196binary_multiply.15 = i * index_step  ['$196binary_multiply.15', 'i', 'index_step']
    $198binary_add.16 = offset + $196binary_multiply.15 ['$196binary_multiply.15', '$198binary_add.16', 'offset']
    $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>) ['$198binary_add.16', '$200binary_subscr.17', 'interp_delta']
    $202binary_multiply.18 = eta * $200binary_subscr.17 ['$200binary_subscr.17', '$202binary_multiply.18', 'eta']
    weight = $184binary_subscr.9 + $202binary_multiply.18 ['$184binary_subscr.9', '$202binary_multiply.18', 'weight']
    $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>) ['$214binary_subscr.24', 't', 'y']
    $224binary_subtract.29 = n - i           ['$224binary_subtract.29', 'i', 'n']
    $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>) ['$224binary_subtract.29', '$226binary_subscr.30', 'x']
    $228binary_multiply.31 = weight * $226binary_subscr.30 ['$226binary_subscr.30', '$228binary_multiply.31', 'weight']
    $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined) ['$214binary_subscr.24', '$228binary_multiply.31', '$230inplace_add.32']
    y[t] = $230inplace_add.32                ['$230inplace_add.32', 't', 'y']
    jump 168                                 []
label 238:
    $242binary_subtract.3 = scale - frac     ['$242binary_subtract.3', 'frac', 'scale']
    frac = $242binary_subtract.3             ['$242binary_subtract.3', 'frac']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $254load_global.7 = global(int: <class 'int'>) ['$254load_global.7']
    offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None) ['$254load_global.7', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $270load_global.13 = global(min: <built-in function min>) ['$270load_global.13']
    $276binary_subtract.16 = n_orig - n      ['$276binary_subtract.16', 'n', 'n_orig']
    $const278.17 = const(int, 1)             ['$const278.17']
    $280binary_subtract.18 = $276binary_subtract.16 - $const278.17 ['$276binary_subtract.16', '$280binary_subtract.18', '$const278.17']
    $286binary_subtract.21 = nwin - offset   ['$286binary_subtract.21', 'nwin', 'offset']
    $290binary_floor_divide.23 = $286binary_subtract.21 // index_step ['$286binary_subtract.21', '$290binary_floor_divide.23', 'index_step']
    k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None) ['$270load_global.13', '$280binary_subtract.18', '$290binary_floor_divide.23', 'k_max']
    $296load_global.25 = global(range: <class 'range'>) ['$296load_global.25']
    $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None) ['$296load_global.25', '$300call_function.27', 'k_max']
    $302get_iter.28 = getiter(value=$300call_function.27) ['$300call_function.27', '$302get_iter.28']
    $phi304.1 = $302get_iter.28              ['$302get_iter.28', '$phi304.1']
    jump 304                                 []
label 304:
    $304for_iter.2 = iternext(value=$phi304.1) ['$304for_iter.2', '$phi304.1']
    $304for_iter.3 = pair_first(value=$304for_iter.2) ['$304for_iter.2', '$304for_iter.3']
    $304for_iter.4 = pair_second(value=$304for_iter.2) ['$304for_iter.2', '$304for_iter.4']
    $phi306.2 = $304for_iter.3               ['$304for_iter.3', '$phi306.2']
    branch $304for_iter.4, 306, 380          ['$304for_iter.4']
label 306:
    k = $phi306.2                            ['$phi306.2', 'k']
    $316binary_multiply.7 = k * index_step   ['$316binary_multiply.7', 'index_step', 'k']
    $318binary_add.8 = offset + $316binary_multiply.7 ['$316binary_multiply.7', '$318binary_add.8', 'offset']
    $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>) ['$318binary_add.8', '$320binary_subscr.9', 'interp_win']
    $332binary_multiply.15 = k * index_step  ['$332binary_multiply.15', 'index_step', 'k']
    $334binary_add.16 = offset + $332binary_multiply.15 ['$332binary_multiply.15', '$334binary_add.16', 'offset']
    $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>) ['$334binary_add.16', '$336binary_subscr.17', 'interp_delta']
    $338binary_multiply.18 = eta * $336binary_subscr.17 ['$336binary_subscr.17', '$338binary_multiply.18', 'eta']
    weight = $320binary_subscr.9 + $338binary_multiply.18 ['$320binary_subscr.9', '$338binary_multiply.18', 'weight']
    $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>) ['$350binary_subscr.24', 't', 'y']
    $360binary_add.29 = n + k                ['$360binary_add.29', 'k', 'n']
    $const362.30 = const(int, 1)             ['$const362.30']
    $364binary_add.31 = $360binary_add.29 + $const362.30 ['$360binary_add.29', '$364binary_add.31', '$const362.30']
    $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>) ['$364binary_add.31', '$366binary_subscr.32', 'x']
    $368binary_multiply.33 = weight * $366binary_subscr.32 ['$366binary_subscr.32', '$368binary_multiply.33', 'weight']
    $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined) ['$350binary_subscr.24', '$368binary_multiply.33', '$370inplace_add.34']
    y[t] = $370inplace_add.34                ['$370inplace_add.34', 't', 'y']
    jump 304                                 []
label 380:
    jump 80                                  []
label 382:
    $const382.0 = const(NoneType, None)      ['$const382.0']
    $384return_value.1 = cast(value=$const382.0) ['$384return_value.1', '$const382.0']
    return $384return_value.1                ['$384return_value.1']

2025-05-02 23:00:49,924 - DEBUG - ==== SSA block analysis pass on 0
2025-05-02 23:00:49,924 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2DE14F0>
2025-05-02 23:00:49,924 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,924 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,924 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,925 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,925 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,925 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,925 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,925 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,925 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,925 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,925 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,925 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,925 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,925 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,925 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,925 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,925 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,925 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,925 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,926 - DEBUG - ==== SSA block analysis pass on 80
2025-05-02 23:00:49,926 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2DE14F0>
2025-05-02 23:00:49,926 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,926 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,926 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,926 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,926 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,926 - DEBUG - ==== SSA block analysis pass on 84
2025-05-02 23:00:49,926 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2DE14F0>
2025-05-02 23:00:49,926 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,926 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,926 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,926 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,926 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 23:00:49,926 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,926 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,926 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,926 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,926 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 23:00:49,926 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,926 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,926 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,926 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 23:00:49,926 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,926 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,926 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,926 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,926 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,927 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,927 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,927 - DEBUG - ==== SSA block analysis pass on 168
2025-05-02 23:00:49,927 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2DE14F0>
2025-05-02 23:00:49,927 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,927 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,927 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,927 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,927 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,927 - DEBUG - ==== SSA block analysis pass on 170
2025-05-02 23:00:49,927 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2DE14F0>
2025-05-02 23:00:49,927 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,927 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,927 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 23:00:49,927 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,927 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,927 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 23:00:49,927 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,927 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 23:00:49,927 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,927 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,927 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,927 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,927 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 23:00:49,927 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,927 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,927 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,927 - DEBUG - ==== SSA block analysis pass on 238
2025-05-02 23:00:49,927 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2DE14F0>
2025-05-02 23:00:49,927 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,927 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,927 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,927 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,928 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,928 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 23:00:49,928 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,928 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,928 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,928 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,928 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 23:00:49,928 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,928 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,928 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,928 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,928 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,928 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,928 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,928 - DEBUG - ==== SSA block analysis pass on 304
2025-05-02 23:00:49,928 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2DE14F0>
2025-05-02 23:00:49,928 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,928 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,928 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,928 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,928 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,928 - DEBUG - ==== SSA block analysis pass on 306
2025-05-02 23:00:49,928 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2DE14F0>
2025-05-02 23:00:49,928 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,928 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,929 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 23:00:49,929 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,929 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,929 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 23:00:49,929 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,929 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 23:00:49,929 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,929 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,929 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,929 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,929 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,929 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,929 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 23:00:49,929 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,929 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,929 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,929 - DEBUG - ==== SSA block analysis pass on 380
2025-05-02 23:00:49,929 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2DE14F0>
2025-05-02 23:00:49,929 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,929 - DEBUG - ==== SSA block analysis pass on 382
2025-05-02 23:00:49,929 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2DE14F0>
2025-05-02 23:00:49,929 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,929 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,929 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,930 - DEBUG - defs defaultdict(<class 'list'>,
            {'$108binary_subtract.11': [<numba.core.ir.Assign object at 0x000001A3D2DCC4F0>],
             '$122load_global.16': [<numba.core.ir.Assign object at 0x000001A3D2DCCD00>],
             '$138load_global.22': [<numba.core.ir.Assign object at 0x000001A3D2DCF6A0>],
             '$144binary_add.25': [<numba.core.ir.Assign object at 0x000001A3D2DCFAF0>],
             '$150binary_subtract.28': [<numba.core.ir.Assign object at 0x000001A3D2DCFEB0>],
             '$154binary_floor_divide.30': [<numba.core.ir.Assign object at 0x000001A3D2DD2190>],
             '$160load_global.32': [<numba.core.ir.Assign object at 0x000001A3D2DD2580>],
             '$164call_function.34': [<numba.core.ir.Assign object at 0x000001A3D2DD2880>],
             '$166get_iter.35': [<numba.core.ir.Assign object at 0x000001A3D2DD29A0>],
             '$168for_iter.2': [<numba.core.ir.Assign object at 0x000001A3D2DCC2B0>],
             '$168for_iter.3': [<numba.core.ir.Assign object at 0x000001A3D2DCC6D0>],
             '$168for_iter.4': [<numba.core.ir.Assign object at 0x000001A3D2DCCC10>],
             '$180binary_multiply.7': [<numba.core.ir.Assign object at 0x000001A3D2DD2D90>],
             '$182binary_add.8': [<numba.core.ir.Assign object at 0x000001A3D2DD2F10>],
             '$184binary_subscr.9': [<numba.core.ir.Assign object at 0x000001A3D2DD50D0>],
             '$196binary_multiply.15': [<numba.core.ir.Assign object at 0x000001A3D2DD57F0>],
             '$198binary_add.16': [<numba.core.ir.Assign object at 0x000001A3D2DD5970>],
             '$200binary_subscr.17': [<numba.core.ir.Assign object at 0x000001A3D2DD5AF0>],
             '$202binary_multiply.18': [<numba.core.ir.Assign object at 0x000001A3D2DD5C70>],
             '$214binary_subscr.24': [<numba.core.ir.Assign object at 0x000001A3D2DD7490>],
             '$224binary_subtract.29': [<numba.core.ir.Assign object at 0x000001A3D2DD7A90>],
             '$226binary_subscr.30': [<numba.core.ir.Assign object at 0x000001A3D2DD7C10>],
             '$228binary_multiply.31': [<numba.core.ir.Assign object at 0x000001A3D2DD7D90>],
             '$230inplace_add.32': [<numba.core.ir.Assign object at 0x000001A3D2DD7F10>],
             '$242binary_subtract.3': [<numba.core.ir.Assign object at 0x000001A3D2DD7070>],
             '$254load_global.7': [<numba.core.ir.Assign object at 0x000001A3D2DD94C0>],
             '$270load_global.13': [<numba.core.ir.Assign object at 0x000001A3D2DD9E20>],
             '$276binary_subtract.16': [<numba.core.ir.Assign object at 0x000001A3D2DDB250>],
             '$280binary_subtract.18': [<numba.core.ir.Assign object at 0x000001A3D2DDB550>],
             '$286binary_subtract.21': [<numba.core.ir.Assign object at 0x000001A3D2DDB910>],
             '$290binary_floor_divide.23': [<numba.core.ir.Assign object at 0x000001A3D2DDBBB0>],
             '$296load_global.25': [<numba.core.ir.Assign object at 0x000001A3D2DDBFA0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A3D2DC10A0>],
             '$300call_function.27': [<numba.core.ir.Assign object at 0x000001A3D2DDD2E0>],
             '$302get_iter.28': [<numba.core.ir.Assign object at 0x000001A3D2DDD400>],
             '$304for_iter.2': [<numba.core.ir.Assign object at 0x000001A3D2DD9700>],
             '$304for_iter.3': [<numba.core.ir.Assign object at 0x000001A3D2DD9D30>],
             '$304for_iter.4': [<numba.core.ir.Assign object at 0x000001A3D2DDB130>],
             '$316binary_multiply.7': [<numba.core.ir.Assign object at 0x000001A3D2DDDB50>],
             '$318binary_add.8': [<numba.core.ir.Assign object at 0x000001A3D2DDDCD0>],
             '$320binary_subscr.9': [<numba.core.ir.Assign object at 0x000001A3D2DDDE50>],
             '$332binary_multiply.15': [<numba.core.ir.Assign object at 0x000001A3D2DDF5B0>],
             '$334binary_add.16': [<numba.core.ir.Assign object at 0x000001A3D2DDF730>],
             '$336binary_subscr.17': [<numba.core.ir.Assign object at 0x000001A3D2DDF8B0>],
             '$338binary_multiply.18': [<numba.core.ir.Assign object at 0x000001A3D2DDFA30>],
             '$350binary_subscr.24': [<numba.core.ir.Assign object at 0x000001A3D2DE1250>],
             '$360binary_add.29': [<numba.core.ir.Assign object at 0x000001A3D2DE1850>],
             '$364binary_add.31': [<numba.core.ir.Assign object at 0x000001A3D2DE1B50>],
             '$366binary_subscr.32': [<numba.core.ir.Assign object at 0x000001A3D2DE1CD0>],
             '$368binary_multiply.33': [<numba.core.ir.Assign object at 0x000001A3D2DE1E50>],
             '$370inplace_add.34': [<numba.core.ir.Assign object at 0x000001A3D2DE1FD0>],
             '$384return_value.1': [<numba.core.ir.Assign object at 0x000001A3D2DE1040>],
             '$44load_attr.13': [<numba.core.ir.Assign object at 0x000001A3D2DC4C40>],
             '$54load_attr.17': [<numba.core.ir.Assign object at 0x000001A3D2DC7340>],
             '$64load_attr.21': [<numba.core.ir.Assign object at 0x000001A3D2DC7A00>],
             '$72load_global.24': [<numba.core.ir.Assign object at 0x000001A3D2DC7FA0>],
             '$76call_function.26': [<numba.core.ir.Assign object at 0x000001A3D2DC92E0>],
             '$78get_iter.27': [<numba.core.ir.Assign object at 0x000001A3D2DC9400>],
             '$80for_iter.1': [<numba.core.ir.Assign object at 0x000001A3D2DC4A30>],
             '$80for_iter.2': [<numba.core.ir.Assign object at 0x000001A3D2DC7250>],
             '$80for_iter.3': [<numba.core.ir.Assign object at 0x000001A3D2DC7EB0>],
             '$8binary_multiply.3': [<numba.core.ir.Assign object at 0x000001A3D2DC1490>],
             '$94load_global.5': [<numba.core.ir.Assign object at 0x000001A3D2DC9C40>],
             '$const142.24': [<numba.core.ir.Assign object at 0x000001A3D2DCF940>],
             '$const278.17': [<numba.core.ir.Assign object at 0x000001A3D2DDB3A0>],
             '$const362.30': [<numba.core.ir.Assign object at 0x000001A3D2DE19A0>],
             '$const382.0': [<numba.core.ir.Assign object at 0x000001A3D2DDFC70>],
             '$const46.14': [<numba.core.ir.Assign object at 0x000001A3D2DC4DC0>],
             '$const56.18': [<numba.core.ir.Assign object at 0x000001A3D2DC74C0>],
             '$const66.22': [<numba.core.ir.Assign object at 0x000001A3D2DC7B80>],
             '$phi168.1': [<numba.core.ir.Assign object at 0x000001A3D2DC97F0>],
             '$phi170.2': [<numba.core.ir.Assign object at 0x000001A3D2DCC070>],
             '$phi304.1': [<numba.core.ir.Assign object at 0x000001A3D2DD5370>],
             '$phi306.2': [<numba.core.ir.Assign object at 0x000001A3D2DD9670>],
             '$phi80.0': [<numba.core.ir.Assign object at 0x000001A3D2DC1250>],
             '$phi84.1': [<numba.core.ir.Assign object at 0x000001A3D2DC44F0>],
             'eta': [<numba.core.ir.Assign object at 0x000001A3D2DC45E0>,
                     <numba.core.ir.Assign object at 0x000001A3D2DCF490>,
                     <numba.core.ir.Assign object at 0x000001A3D2DD9C10>],
             'frac': [<numba.core.ir.Assign object at 0x000001A3D2DC1DC0>,
                      <numba.core.ir.Assign object at 0x000001A3D2DCC670>,
                      <numba.core.ir.Assign object at 0x000001A3D2DD7310>],
             'i': [<numba.core.ir.Assign object at 0x000001A3D2DCF3D0>],
             'i_max': [<numba.core.ir.Assign object at 0x000001A3D2DD2340>],
             'index_frac': [<numba.core.ir.Assign object at 0x000001A3D2DC40A0>,
                            <numba.core.ir.Assign object at 0x000001A3D2DCCAF0>,
                            <numba.core.ir.Assign object at 0x000001A3D2DD92B0>],
             'index_step': [<numba.core.ir.Assign object at 0x000001A3D2DC1640>],
             'interp_delta': [<numba.core.ir.Assign object at 0x000001A3D2DA31C0>],
             'interp_win': [<numba.core.ir.Assign object at 0x000001A3D2DA3280>],
             'k': [<numba.core.ir.Assign object at 0x000001A3D2DDD520>],
             'k_max': [<numba.core.ir.Assign object at 0x000001A3D2DDBD60>],
             'n': [<numba.core.ir.Assign object at 0x000001A3D2DC1B20>,
                   <numba.core.ir.Assign object at 0x000001A3D2DC9F40>],
             'n_orig': [<numba.core.ir.Assign object at 0x000001A3D2DEDC10>],
             'n_out': [<numba.core.ir.Assign object at 0x000001A3D2DEDCD0>],
             'num_table': [<numba.core.ir.Assign object at 0x000001A3D2DA34C0>],
             'nwin': [<numba.core.ir.Assign object at 0x000001A3D2DED070>],
             'offset': [<numba.core.ir.Assign object at 0x000001A3D2DC4340>,
                        <numba.core.ir.Assign object at 0x000001A3D2DCF040>,
                        <numba.core.ir.Assign object at 0x000001A3D2DD97C0>],
             'scale': [<numba.core.ir.Assign object at 0x000001A3D2DA3DC0>],
             't': [<numba.core.ir.Assign object at 0x000001A3D2DC9640>],
             't_out': [<numba.core.ir.Assign object at 0x000001A3D2DA3700>],
             'time_register': [<numba.core.ir.Assign object at 0x000001A3D2DC1880>,
                               <numba.core.ir.Assign object at 0x000001A3D2DC9A30>],
             'weight': [<numba.core.ir.Assign object at 0x000001A3D2DC4880>,
                        <numba.core.ir.Assign object at 0x000001A3D2DD5DF0>,
                        <numba.core.ir.Assign object at 0x000001A3D2DDFBB0>],
             'x': [<numba.core.ir.Assign object at 0x000001A3D2DA3640>],
             'y': [<numba.core.ir.Assign object at 0x000001A3D2DA3EE0>]})
2025-05-02 23:00:49,930 - DEBUG - SSA violators {'eta', 'weight', 'offset', 'time_register', 'index_frac', 'frac', 'n'}
2025-05-02 23:00:49,930 - DEBUG - Fix SSA violator on var eta
2025-05-02 23:00:49,930 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,930 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,930 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,930 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,930 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,930 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,930 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,930 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,930 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,931 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,931 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,931 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,931 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,931 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,931 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,931 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,931 - DEBUG - first assign: eta
2025-05-02 23:00:49,931 - DEBUG - replaced with: eta = const(float, 0.0)
2025-05-02 23:00:49,931 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,931 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,931 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,931 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,931 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,931 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,931 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,932 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,932 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,932 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,932 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,932 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,932 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,932 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,932 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,932 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,932 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,932 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,932 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 23:00:49,932 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,932 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,932 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,932 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,932 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 23:00:49,932 - DEBUG - replaced with: eta.1 = index_frac - offset
2025-05-02 23:00:49,932 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,932 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,932 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,932 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 23:00:49,932 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,932 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,932 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,932 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,933 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,933 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,933 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,933 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,933 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,933 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,933 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,933 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,933 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,933 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,933 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,933 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,933 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,933 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,933 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 23:00:49,933 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,933 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,933 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 23:00:49,933 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,933 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 23:00:49,933 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,933 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,933 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,933 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,933 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 23:00:49,933 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,933 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,933 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,933 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,933 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,933 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,933 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,933 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,933 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,933 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,933 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 23:00:49,933 - DEBUG - replaced with: eta.2 = index_frac - offset
2025-05-02 23:00:49,934 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,934 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,934 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,934 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,934 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 23:00:49,934 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,934 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,934 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,934 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,934 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,934 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,934 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,934 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,934 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,934 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,934 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,934 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,934 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,934 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,934 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,934 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,934 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,934 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,934 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 23:00:49,934 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,934 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,934 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 23:00:49,935 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,935 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 23:00:49,935 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,935 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,935 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,935 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,935 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,935 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,935 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 23:00:49,935 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,935 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,935 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,935 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,935 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,935 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,935 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,935 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,935 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,935 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,935 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,935 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A3D2DED400>],
             84: [<numba.core.ir.Assign object at 0x000001A3D2DEDEB0>],
             238: [<numba.core.ir.Assign object at 0x000001A3D2DED7C0>]})
2025-05-02 23:00:49,935 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,935 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,935 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,935 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,935 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,936 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,936 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,936 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,936 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,936 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,936 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,936 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,936 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,936 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,936 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,936 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,936 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,936 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,936 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,936 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,937 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,937 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,937 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,937 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,937 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,937 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,937 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,937 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,937 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,937 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,937 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,937 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,937 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,937 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,937 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,937 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 23:00:49,937 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,937 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,937 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,937 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,937 - DEBUG - on stmt: eta.1 = index_frac - offset
2025-05-02 23:00:49,937 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,937 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,937 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,937 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 23:00:49,938 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,938 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,938 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,938 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,938 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,938 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,938 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,938 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,938 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,938 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,938 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,938 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,938 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,938 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,938 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,938 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,938 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,938 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,938 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 23:00:49,938 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,938 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,938 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 23:00:49,938 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,938 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 23:00:49,938 - DEBUG - find_def var='eta' stmt=$202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 23:00:49,939 - DEBUG - find_def_from_top label 170
2025-05-02 23:00:49,939 - DEBUG - idom 168 from label 170
2025-05-02 23:00:49,939 - DEBUG - find_def_from_bottom label 168
2025-05-02 23:00:49,939 - DEBUG - find_def_from_top label 168
2025-05-02 23:00:49,939 - DEBUG - idom 84 from label 168
2025-05-02 23:00:49,939 - DEBUG - find_def_from_bottom label 84
2025-05-02 23:00:49,939 - DEBUG - replaced with: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,939 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,939 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,939 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,939 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,939 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 23:00:49,939 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,939 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,939 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,939 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,939 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,939 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,939 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,939 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,939 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,939 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,939 - DEBUG - on stmt: eta.2 = index_frac - offset
2025-05-02 23:00:49,939 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,940 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,940 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,940 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,940 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 23:00:49,940 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,940 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,940 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,940 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,940 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,940 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,940 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,940 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,940 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,940 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,940 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,940 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,940 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,940 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,940 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,940 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,940 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,940 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,940 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 23:00:49,940 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,940 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,940 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 23:00:49,941 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,941 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 23:00:49,941 - DEBUG - find_def var='eta' stmt=$338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 23:00:49,941 - DEBUG - find_def_from_top label 306
2025-05-02 23:00:49,941 - DEBUG - idom 304 from label 306
2025-05-02 23:00:49,941 - DEBUG - find_def_from_bottom label 304
2025-05-02 23:00:49,941 - DEBUG - find_def_from_top label 304
2025-05-02 23:00:49,941 - DEBUG - idom 238 from label 304
2025-05-02 23:00:49,941 - DEBUG - find_def_from_bottom label 238
2025-05-02 23:00:49,941 - DEBUG - replaced with: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,941 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,941 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,941 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,941 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,941 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,941 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,941 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 23:00:49,941 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,941 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,941 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,941 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,941 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,941 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,941 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,941 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,941 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,942 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,942 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,942 - DEBUG - Fix SSA violator on var weight
2025-05-02 23:00:49,942 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,942 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,942 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,942 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,942 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,942 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,942 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,942 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,942 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,942 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,942 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,942 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,942 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,942 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,942 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,942 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,942 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,942 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,942 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,942 - DEBUG - first assign: weight
2025-05-02 23:00:49,942 - DEBUG - replaced with: weight = const(float, 0.0)
2025-05-02 23:00:49,942 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,942 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,942 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,942 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,942 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,942 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,942 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,942 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,943 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,943 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,943 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,943 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,943 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,943 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,943 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,943 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,943 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,943 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,943 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 23:00:49,943 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,943 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,943 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,943 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,943 - DEBUG - on stmt: eta.1 = index_frac - offset
2025-05-02 23:00:49,943 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,944 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 23:00:49,944 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,944 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,944 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,944 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,944 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,944 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,944 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,944 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,944 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,944 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,944 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,944 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,944 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,944 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,944 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,944 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,944 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,944 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,944 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 23:00:49,944 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,944 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,944 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 23:00:49,944 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,944 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,944 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,945 - DEBUG - replaced with: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,945 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,945 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,945 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,945 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 23:00:49,945 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,945 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,945 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,945 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,945 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,945 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,945 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,945 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,945 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,945 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,945 - DEBUG - on stmt: eta.2 = index_frac - offset
2025-05-02 23:00:49,945 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,945 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,945 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,945 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,945 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 23:00:49,945 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,945 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,945 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,945 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,946 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,946 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,946 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,946 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,946 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,946 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,946 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,946 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,946 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,946 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,946 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,946 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,946 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,946 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,946 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 23:00:49,946 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,946 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,946 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 23:00:49,946 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,946 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,946 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,946 - DEBUG - replaced with: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,946 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,946 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,946 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,946 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,946 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,947 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 23:00:49,947 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,947 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,947 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,947 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,947 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,947 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,947 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,947 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,947 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,947 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,947 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,947 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A3D2DED1F0>],
             170: [<numba.core.ir.Assign object at 0x000001A3D2DED2B0>],
             306: [<numba.core.ir.Assign object at 0x000001A3D2DEE640>]})
2025-05-02 23:00:49,947 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,947 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DEDDF0>
2025-05-02 23:00:49,947 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,947 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,947 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,947 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,947 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,947 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,947 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,947 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,947 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,947 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,947 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,948 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,948 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,948 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DEDDF0>
2025-05-02 23:00:49,948 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,948 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,948 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,949 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DEDDF0>
2025-05-02 23:00:49,949 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,949 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,949 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,949 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,949 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 23:00:49,949 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,949 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,949 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,949 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,949 - DEBUG - on stmt: eta.1 = index_frac - offset
2025-05-02 23:00:49,949 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,949 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,949 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,949 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 23:00:49,949 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,949 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,949 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,949 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,949 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,949 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,949 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,949 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,949 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DEDDF0>
2025-05-02 23:00:49,949 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,949 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,950 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,950 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,950 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,950 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,950 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DEDDF0>
2025-05-02 23:00:49,950 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,950 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,950 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 23:00:49,950 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,950 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,950 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 23:00:49,950 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,950 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,950 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,950 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,950 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,950 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,950 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 23:00:49,950 - DEBUG - find_def var='weight' stmt=$228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 23:00:49,950 - DEBUG - replaced with: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:49,950 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,950 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,950 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,950 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,950 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DEDDF0>
2025-05-02 23:00:49,950 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,950 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,951 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,951 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,951 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,951 - DEBUG - on stmt: eta.2 = index_frac - offset
2025-05-02 23:00:49,951 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,951 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,951 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,951 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,951 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 23:00:49,951 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,951 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,951 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,951 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,951 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,951 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,951 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,951 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,951 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DEDDF0>
2025-05-02 23:00:49,951 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,951 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,951 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,951 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,952 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,952 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,952 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DEDDF0>
2025-05-02 23:00:49,952 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,952 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,952 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 23:00:49,952 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,952 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,952 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 23:00:49,952 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,952 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,952 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,952 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,952 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,952 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,952 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,952 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,952 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 23:00:49,952 - DEBUG - find_def var='weight' stmt=$368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 23:00:49,952 - DEBUG - replaced with: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:49,952 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,952 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,952 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,952 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,952 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DEDDF0>
2025-05-02 23:00:49,952 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,953 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,953 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DEDDF0>
2025-05-02 23:00:49,953 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,953 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,953 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,953 - DEBUG - Fix SSA violator on var offset
2025-05-02 23:00:49,953 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,953 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DED160>
2025-05-02 23:00:49,953 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,953 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,953 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,953 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,953 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,953 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,953 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,953 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,953 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,953 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,953 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,953 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,953 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,953 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,953 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,953 - DEBUG - first assign: offset
2025-05-02 23:00:49,953 - DEBUG - replaced with: offset = const(int, 0)
2025-05-02 23:00:49,953 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,953 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,953 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,953 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,954 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,954 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,954 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,954 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,954 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,954 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DED160>
2025-05-02 23:00:49,954 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,954 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,954 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,954 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DED160>
2025-05-02 23:00:49,954 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,954 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,954 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 23:00:49,954 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,954 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,955 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,955 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,955 - DEBUG - replaced with: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,955 - DEBUG - on stmt: eta.1 = index_frac - offset
2025-05-02 23:00:49,955 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,955 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,955 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,955 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 23:00:49,955 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,955 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,955 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,955 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,955 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,955 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,955 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,955 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,955 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DED160>
2025-05-02 23:00:49,955 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,955 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,955 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,955 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,955 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,955 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,955 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DED160>
2025-05-02 23:00:49,955 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,955 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,955 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 23:00:49,956 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,956 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,956 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 23:00:49,956 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,956 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,956 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,956 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,956 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,956 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,956 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:49,956 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,956 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,956 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,956 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,956 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DED160>
2025-05-02 23:00:49,956 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,956 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,956 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,956 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,956 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,956 - DEBUG - replaced with: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,956 - DEBUG - on stmt: eta.2 = index_frac - offset
2025-05-02 23:00:49,956 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,956 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,956 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,956 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,956 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 23:00:49,957 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,957 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,957 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,957 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,957 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,957 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,957 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,957 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,957 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DED160>
2025-05-02 23:00:49,957 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,957 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,957 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,957 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,957 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,957 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,957 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DED160>
2025-05-02 23:00:49,957 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,957 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,957 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 23:00:49,957 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,957 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,957 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 23:00:49,957 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,957 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,957 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,957 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,957 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,958 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,958 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,958 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,958 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:49,958 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,958 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,958 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,958 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,958 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DED160>
2025-05-02 23:00:49,958 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,958 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,958 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DED160>
2025-05-02 23:00:49,958 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,958 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,958 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,958 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A3D2DED9D0>],
             84: [<numba.core.ir.Assign object at 0x000001A3D2DED670>],
             238: [<numba.core.ir.Assign object at 0x000001A3D2DEEDF0>]})
2025-05-02 23:00:49,958 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,958 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED5B0>
2025-05-02 23:00:49,958 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,958 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,958 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,958 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,958 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,958 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,958 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,958 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,958 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,958 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,959 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,959 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,959 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,959 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED5B0>
2025-05-02 23:00:49,959 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,960 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,960 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,960 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED5B0>
2025-05-02 23:00:49,960 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,960 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,960 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,960 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,960 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 23:00:49,960 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,960 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,960 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,960 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,960 - DEBUG - on stmt: eta.1 = index_frac - offset
2025-05-02 23:00:49,960 - DEBUG - find_def var='offset' stmt=eta.1 = index_frac - offset
2025-05-02 23:00:49,960 - DEBUG - replaced with: eta.1 = index_frac - offset.1
2025-05-02 23:00:49,960 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,960 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,960 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,960 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 23:00:49,960 - DEBUG - find_def var='offset' stmt=$150binary_subtract.28 = nwin - offset
2025-05-02 23:00:49,960 - DEBUG - replaced with: $150binary_subtract.28 = nwin - offset.1
2025-05-02 23:00:49,960 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,960 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,960 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,960 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,961 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,961 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,961 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,961 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,961 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED5B0>
2025-05-02 23:00:49,961 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,961 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,961 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,961 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,961 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,961 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,961 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED5B0>
2025-05-02 23:00:49,961 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,961 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,961 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 23:00:49,961 - DEBUG - find_def var='offset' stmt=$182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 23:00:49,961 - DEBUG - find_def_from_top label 170
2025-05-02 23:00:49,961 - DEBUG - idom 168 from label 170
2025-05-02 23:00:49,961 - DEBUG - find_def_from_bottom label 168
2025-05-02 23:00:49,961 - DEBUG - find_def_from_top label 168
2025-05-02 23:00:49,961 - DEBUG - idom 84 from label 168
2025-05-02 23:00:49,961 - DEBUG - find_def_from_bottom label 84
2025-05-02 23:00:49,961 - DEBUG - replaced with: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 23:00:49,961 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,961 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,961 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 23:00:49,961 - DEBUG - find_def var='offset' stmt=$198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 23:00:49,961 - DEBUG - find_def_from_top label 170
2025-05-02 23:00:49,961 - DEBUG - idom 168 from label 170
2025-05-02 23:00:49,961 - DEBUG - find_def_from_bottom label 168
2025-05-02 23:00:49,962 - DEBUG - find_def_from_top label 168
2025-05-02 23:00:49,962 - DEBUG - idom 84 from label 168
2025-05-02 23:00:49,962 - DEBUG - find_def_from_bottom label 84
2025-05-02 23:00:49,962 - DEBUG - replaced with: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 23:00:49,962 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,962 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,962 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,962 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,962 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,962 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,962 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:49,962 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,962 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,962 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,962 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,962 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED5B0>
2025-05-02 23:00:49,962 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,962 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,962 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,962 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,962 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,962 - DEBUG - on stmt: eta.2 = index_frac - offset
2025-05-02 23:00:49,962 - DEBUG - find_def var='offset' stmt=eta.2 = index_frac - offset
2025-05-02 23:00:49,962 - DEBUG - replaced with: eta.2 = index_frac - offset.2
2025-05-02 23:00:49,962 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,962 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,963 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,963 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,963 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 23:00:49,963 - DEBUG - find_def var='offset' stmt=$286binary_subtract.21 = nwin - offset
2025-05-02 23:00:49,963 - DEBUG - replaced with: $286binary_subtract.21 = nwin - offset.2
2025-05-02 23:00:49,963 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,963 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,963 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,963 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,963 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,963 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,963 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,963 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,963 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED5B0>
2025-05-02 23:00:49,963 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,963 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,963 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,963 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,963 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,963 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,963 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED5B0>
2025-05-02 23:00:49,963 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,963 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,963 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 23:00:49,963 - DEBUG - find_def var='offset' stmt=$318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 23:00:49,963 - DEBUG - find_def_from_top label 306
2025-05-02 23:00:49,963 - DEBUG - idom 304 from label 306
2025-05-02 23:00:49,963 - DEBUG - find_def_from_bottom label 304
2025-05-02 23:00:49,964 - DEBUG - find_def_from_top label 304
2025-05-02 23:00:49,964 - DEBUG - idom 238 from label 304
2025-05-02 23:00:49,964 - DEBUG - find_def_from_bottom label 238
2025-05-02 23:00:49,964 - DEBUG - replaced with: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 23:00:49,964 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,964 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,964 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 23:00:49,964 - DEBUG - find_def var='offset' stmt=$334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 23:00:49,964 - DEBUG - find_def_from_top label 306
2025-05-02 23:00:49,964 - DEBUG - idom 304 from label 306
2025-05-02 23:00:49,964 - DEBUG - find_def_from_bottom label 304
2025-05-02 23:00:49,964 - DEBUG - find_def_from_top label 304
2025-05-02 23:00:49,964 - DEBUG - idom 238 from label 304
2025-05-02 23:00:49,964 - DEBUG - find_def_from_bottom label 238
2025-05-02 23:00:49,964 - DEBUG - replaced with: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 23:00:49,964 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,964 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,964 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,964 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,964 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,964 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,964 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,964 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,964 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:49,964 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,964 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,964 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,964 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,965 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED5B0>
2025-05-02 23:00:49,965 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,965 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,965 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED5B0>
2025-05-02 23:00:49,965 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,965 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,965 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,965 - DEBUG - Fix SSA violator on var time_register
2025-05-02 23:00:49,965 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,965 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEEBE0>
2025-05-02 23:00:49,965 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,965 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,965 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,965 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,965 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,965 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,965 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,965 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,965 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,965 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,965 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,965 - DEBUG - first assign: time_register
2025-05-02 23:00:49,965 - DEBUG - replaced with: time_register = const(float, 0.0)
2025-05-02 23:00:49,965 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,965 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,965 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,965 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,965 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,965 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,965 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,966 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,966 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,966 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,966 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,966 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,966 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEEBE0>
2025-05-02 23:00:49,966 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,966 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,966 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,966 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEEBE0>
2025-05-02 23:00:49,966 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,966 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,966 - DEBUG - replaced with: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,966 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 23:00:49,966 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,966 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,967 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,967 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,967 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 23:00:49,967 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,967 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,967 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,967 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 23:00:49,967 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,967 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,967 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,967 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,967 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,967 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,967 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,967 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,967 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEEBE0>
2025-05-02 23:00:49,967 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,967 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,967 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,967 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,967 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,967 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,967 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEEBE0>
2025-05-02 23:00:49,967 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,967 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,967 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 23:00:49,967 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,967 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,968 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 23:00:49,968 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,968 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,968 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,968 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,968 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,968 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,968 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:49,968 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,968 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,968 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,968 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,968 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEEBE0>
2025-05-02 23:00:49,968 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,968 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,968 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,968 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,968 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,968 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 23:00:49,968 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,968 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,968 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,968 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,968 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 23:00:49,968 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,968 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,968 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,969 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,969 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,969 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEEBE0>
2025-05-02 23:00:49,969 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,969 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,969 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,969 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEEBE0>
2025-05-02 23:00:49,969 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,969 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,969 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 23:00:49,969 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,969 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 23:00:49,969 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,969 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,969 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,969 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,969 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:49,969 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,969 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,970 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,970 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,970 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEEBE0>
2025-05-02 23:00:49,970 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,970 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,970 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEEBE0>
2025-05-02 23:00:49,970 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,970 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,970 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,970 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A3D2DEE6A0>],
             84: [<numba.core.ir.Assign object at 0x000001A3D2DED7C0>]})
2025-05-02 23:00:49,970 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,970 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED1C0>
2025-05-02 23:00:49,970 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,970 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,970 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,970 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,970 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,970 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,970 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,970 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,970 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,970 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,970 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,970 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,970 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,970 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,970 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,970 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,970 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,970 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,971 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,971 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,971 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,971 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,971 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,971 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED1C0>
2025-05-02 23:00:49,971 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,971 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,971 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,971 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED1C0>
2025-05-02 23:00:49,971 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,971 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,971 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,971 - DEBUG - find_def var='time_register' stmt=n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,971 - DEBUG - replaced with: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,972 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 23:00:49,972 - DEBUG - find_def var='time_register' stmt=$108binary_subtract.11 = time_register - n
2025-05-02 23:00:49,972 - DEBUG - replaced with: $108binary_subtract.11 = time_register.1 - n
2025-05-02 23:00:49,972 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,972 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,972 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,972 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,972 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 23:00:49,972 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,972 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,972 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,972 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 23:00:49,972 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,972 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,972 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,972 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,972 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,972 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,972 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,972 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,972 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED1C0>
2025-05-02 23:00:49,972 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,972 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,972 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,972 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,972 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,972 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,972 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED1C0>
2025-05-02 23:00:49,972 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,973 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,973 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 23:00:49,973 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,973 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,973 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 23:00:49,973 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,973 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,973 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,973 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,973 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,973 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,973 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:49,973 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,973 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,973 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,973 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,973 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED1C0>
2025-05-02 23:00:49,973 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,973 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,973 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,973 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,973 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,973 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 23:00:49,973 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,973 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,974 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,974 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,974 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 23:00:49,974 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,974 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,974 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,974 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,974 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,974 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,974 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,974 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,974 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED1C0>
2025-05-02 23:00:49,974 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,974 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,974 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,974 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,974 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,974 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,974 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED1C0>
2025-05-02 23:00:49,974 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,974 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,974 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 23:00:49,975 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,975 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,975 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 23:00:49,975 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,975 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,975 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,975 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,975 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,975 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,975 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,975 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,975 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:49,975 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,975 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,975 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,975 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,975 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED1C0>
2025-05-02 23:00:49,975 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,975 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,975 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED1C0>
2025-05-02 23:00:49,975 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,975 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,975 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,975 - DEBUG - Fix SSA violator on var index_frac
2025-05-02 23:00:49,975 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,976 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE580>
2025-05-02 23:00:49,976 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,976 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,976 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,976 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,976 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,976 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,976 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,976 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,976 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,976 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,976 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,976 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,976 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,976 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,976 - DEBUG - first assign: index_frac
2025-05-02 23:00:49,976 - DEBUG - replaced with: index_frac = const(float, 0.0)
2025-05-02 23:00:49,976 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,976 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,976 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,976 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,976 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,976 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,977 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,977 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,977 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,977 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,977 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE580>
2025-05-02 23:00:49,977 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,977 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,977 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,977 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE580>
2025-05-02 23:00:49,977 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,977 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,977 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,978 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 23:00:49,978 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,978 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,978 - DEBUG - replaced with: index_frac.1 = frac * num_table
2025-05-02 23:00:49,978 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,978 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,978 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 23:00:49,978 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,978 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,978 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,978 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 23:00:49,978 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,978 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,978 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,978 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,979 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,979 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,979 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,979 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,979 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE580>
2025-05-02 23:00:49,979 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,979 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,979 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,979 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,979 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,979 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,979 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE580>
2025-05-02 23:00:49,979 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,979 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,979 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 23:00:49,979 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,979 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,979 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 23:00:49,979 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,979 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,979 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,979 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,979 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,979 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,979 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:49,979 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,980 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,980 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,980 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,980 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE580>
2025-05-02 23:00:49,980 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,980 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,980 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,980 - DEBUG - replaced with: index_frac.2 = frac * num_table
2025-05-02 23:00:49,980 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,980 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,980 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 23:00:49,980 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,980 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,980 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,980 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,980 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 23:00:49,980 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,980 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,980 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,980 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,980 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,980 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,980 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,980 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,981 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE580>
2025-05-02 23:00:49,981 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,981 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,981 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,981 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,981 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,981 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,981 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE580>
2025-05-02 23:00:49,981 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,981 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,981 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 23:00:49,981 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,981 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,981 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 23:00:49,981 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,981 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,981 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,981 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,981 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,981 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,981 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,981 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,981 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:49,981 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,981 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,981 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,981 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,981 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE580>
2025-05-02 23:00:49,982 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,982 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,982 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE580>
2025-05-02 23:00:49,982 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,982 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,982 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,982 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A3D2DEE6D0>],
             84: [<numba.core.ir.Assign object at 0x000001A3D2DED6D0>],
             238: [<numba.core.ir.Assign object at 0x000001A3D2D91D30>]})
2025-05-02 23:00:49,982 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,982 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED430>
2025-05-02 23:00:49,982 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,982 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,982 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,982 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,982 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,982 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,982 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,982 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,982 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,982 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,982 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,982 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,982 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,982 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,982 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,982 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,982 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,982 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,982 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,982 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,982 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,984 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,984 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,984 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,984 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,984 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED430>
2025-05-02 23:00:49,984 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,984 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,984 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,984 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED430>
2025-05-02 23:00:49,984 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,984 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,984 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 23:00:49,984 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,984 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 23:00:49,985 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,985 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,985 - DEBUG - find_def var='index_frac' stmt=offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,985 - DEBUG - replaced with: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,985 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 23:00:49,985 - DEBUG - find_def var='index_frac' stmt=eta.1 = index_frac - offset.1
2025-05-02 23:00:49,985 - DEBUG - replaced with: eta.1 = index_frac.1 - offset.1
2025-05-02 23:00:49,985 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,985 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,985 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,985 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 23:00:49,985 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,985 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,985 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,985 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,985 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,985 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,985 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,985 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,985 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED430>
2025-05-02 23:00:49,985 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,986 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,986 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,986 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,986 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,986 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,986 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED430>
2025-05-02 23:00:49,986 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,986 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,986 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 23:00:49,986 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,986 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,986 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 23:00:49,986 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,986 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,986 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,986 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,986 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,986 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,986 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:49,986 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,986 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,986 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,986 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,986 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED430>
2025-05-02 23:00:49,986 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,986 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,986 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 23:00:49,986 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,987 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,987 - DEBUG - find_def var='index_frac' stmt=offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,987 - DEBUG - replaced with: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,987 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 23:00:49,987 - DEBUG - find_def var='index_frac' stmt=eta.2 = index_frac - offset.2
2025-05-02 23:00:49,987 - DEBUG - replaced with: eta.2 = index_frac.2 - offset.2
2025-05-02 23:00:49,987 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,987 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,987 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,987 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,987 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 23:00:49,987 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,987 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,987 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,987 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,987 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,987 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,987 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,987 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,987 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED430>
2025-05-02 23:00:49,987 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,987 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,987 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,988 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,988 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,988 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,988 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED430>
2025-05-02 23:00:49,988 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,988 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,988 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 23:00:49,988 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,988 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,988 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 23:00:49,988 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,988 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,988 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,988 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,988 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,988 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,988 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,988 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,988 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:49,988 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,988 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,988 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,988 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,988 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED430>
2025-05-02 23:00:49,988 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,988 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,988 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED430>
2025-05-02 23:00:49,988 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,988 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,989 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,989 - DEBUG - Fix SSA violator on var frac
2025-05-02 23:00:49,989 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,989 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2D91FD0>
2025-05-02 23:00:49,989 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,989 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,989 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,989 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,989 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,989 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,989 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,989 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,989 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,989 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,989 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,989 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,989 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,989 - DEBUG - first assign: frac
2025-05-02 23:00:49,989 - DEBUG - replaced with: frac = const(float, 0.0)
2025-05-02 23:00:49,989 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,989 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,989 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,989 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,989 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,989 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,989 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,989 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,989 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,989 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,989 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,990 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,990 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,990 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,990 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2D91FD0>
2025-05-02 23:00:49,990 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,990 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,990 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,990 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2D91FD0>
2025-05-02 23:00:49,990 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,990 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,990 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 23:00:49,990 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,990 - DEBUG - replaced with: frac.1 = scale * $108binary_subtract.11
2025-05-02 23:00:49,990 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 23:00:49,990 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,990 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,990 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 23:00:49,990 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,991 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 23:00:49,991 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,991 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,991 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,991 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,991 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2D91FD0>
2025-05-02 23:00:49,991 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,991 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,991 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,991 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2D91FD0>
2025-05-02 23:00:49,991 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,991 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,991 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 23:00:49,991 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,991 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 23:00:49,991 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,991 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,991 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,992 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,992 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:49,992 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,992 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,992 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,992 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,992 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2D91FD0>
2025-05-02 23:00:49,992 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,992 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,992 - DEBUG - replaced with: frac.2 = $242binary_subtract.3
2025-05-02 23:00:49,992 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 23:00:49,992 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,992 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,992 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 23:00:49,992 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,992 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,992 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,992 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,992 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 23:00:49,992 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,992 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,992 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,992 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,992 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,992 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,992 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,992 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,992 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2D91FD0>
2025-05-02 23:00:49,992 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,992 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,992 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,992 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,992 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,993 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,993 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2D91FD0>
2025-05-02 23:00:49,993 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,993 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,993 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 23:00:49,993 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,993 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,993 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 23:00:49,993 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,993 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,993 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,993 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,993 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,993 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,993 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,993 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,993 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:49,993 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,993 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,993 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,993 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,993 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2D91FD0>
2025-05-02 23:00:49,993 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,993 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,993 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2D91FD0>
2025-05-02 23:00:49,993 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,993 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,993 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,993 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A3D2D91C40>],
             84: [<numba.core.ir.Assign object at 0x000001A3D2DEE5E0>],
             238: [<numba.core.ir.Assign object at 0x000001A3D2DED5B0>]})
2025-05-02 23:00:49,994 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,994 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED310>
2025-05-02 23:00:49,994 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,994 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,994 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,994 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,994 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,994 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,994 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,994 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,994 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,994 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,994 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,994 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,994 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,994 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,994 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,994 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,994 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,994 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,994 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,994 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,994 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,994 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,994 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,994 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,994 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,994 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,994 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,994 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,995 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,995 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,995 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,995 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,995 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED310>
2025-05-02 23:00:49,995 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,995 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,995 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,995 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,995 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,995 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,995 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED310>
2025-05-02 23:00:49,995 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,995 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,995 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,995 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,995 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 23:00:49,995 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 23:00:49,995 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 23:00:49,995 - DEBUG - find_def var='frac' stmt=index_frac.1 = frac * num_table
2025-05-02 23:00:49,995 - DEBUG - replaced with: index_frac.1 = frac.1 * num_table
2025-05-02 23:00:49,995 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,995 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,995 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 23:00:49,995 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,995 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,995 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,996 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 23:00:49,996 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,996 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,996 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,996 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,996 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED310>
2025-05-02 23:00:49,996 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,996 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,996 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,996 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED310>
2025-05-02 23:00:49,996 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,996 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,996 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 23:00:49,996 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,996 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 23:00:49,996 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,996 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,996 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,996 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:49,997 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,997 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,997 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,997 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,997 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED310>
2025-05-02 23:00:49,997 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,997 - DEBUG - find_def var='frac' stmt=$242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,997 - DEBUG - find_def_from_top label 238
2025-05-02 23:00:49,997 - DEBUG - idom 168 from label 238
2025-05-02 23:00:49,997 - DEBUG - find_def_from_bottom label 168
2025-05-02 23:00:49,997 - DEBUG - find_def_from_top label 168
2025-05-02 23:00:49,997 - DEBUG - idom 84 from label 168
2025-05-02 23:00:49,997 - DEBUG - find_def_from_bottom label 84
2025-05-02 23:00:49,997 - DEBUG - replaced with: $242binary_subtract.3 = scale - frac.1
2025-05-02 23:00:49,997 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 23:00:49,997 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 23:00:49,997 - DEBUG - find_def var='frac' stmt=index_frac.2 = frac * num_table
2025-05-02 23:00:49,997 - DEBUG - replaced with: index_frac.2 = frac.2 * num_table
2025-05-02 23:00:49,997 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,997 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,997 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 23:00:49,997 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,997 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,997 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,997 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,997 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 23:00:49,997 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,997 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,998 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,998 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,998 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED310>
2025-05-02 23:00:49,998 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,998 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,998 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,998 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED310>
2025-05-02 23:00:49,998 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,998 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,998 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 23:00:49,998 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,998 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 23:00:49,998 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,998 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,998 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,998 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,998 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:49,998 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,999 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,999 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,999 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,999 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED310>
2025-05-02 23:00:49,999 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,999 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,999 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED310>
2025-05-02 23:00:49,999 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,999 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,999 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,999 - DEBUG - Fix SSA violator on var n
2025-05-02 23:00:49,999 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,999 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE550>
2025-05-02 23:00:49,999 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,999 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,999 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,999 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,999 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,999 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,999 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,999 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,999 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,999 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,999 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,999 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,999 - DEBUG - first assign: n
2025-05-02 23:00:49,999 - DEBUG - replaced with: n = const(int, 0)
2025-05-02 23:00:49,999 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,999 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,999 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,999 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,999 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:50,000 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:50,000 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:50,000 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:50,000 - DEBUG - on stmt: jump 80
2025-05-02 23:00:50,000 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:50,000 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE550>
2025-05-02 23:00:50,000 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:50,000 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:50,000 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:50,000 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE550>
2025-05-02 23:00:50,000 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:50,000 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:50,000 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,000 - DEBUG - replaced with: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 23:00:50,000 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 23:00:50,001 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 23:00:50,001 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:50,001 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,001 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 23:00:50,001 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:50,001 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:50,001 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:50,001 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 23:00:50,001 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:50,001 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,001 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:50,001 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,001 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:50,001 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:50,001 - DEBUG - on stmt: jump 168
2025-05-02 23:00:50,001 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:50,001 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE550>
2025-05-02 23:00:50,001 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:50,001 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:50,001 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:50,001 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:50,001 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:50,001 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:50,001 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE550>
2025-05-02 23:00:50,001 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:50,001 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:50,001 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 23:00:50,001 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:50,001 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:50,002 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 23:00:50,002 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:50,002 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:50,002 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:50,002 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:50,002 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:50,002 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:50,002 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:50,002 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:50,002 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:50,002 - DEBUG - on stmt: jump 168
2025-05-02 23:00:50,002 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:50,002 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE550>
2025-05-02 23:00:50,002 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 23:00:50,002 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 23:00:50,002 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 23:00:50,002 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:50,002 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,002 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 23:00:50,002 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:50,002 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:50,002 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:50,002 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:50,002 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 23:00:50,002 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:50,002 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,002 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:50,002 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,003 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:50,003 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:50,003 - DEBUG - on stmt: jump 304
2025-05-02 23:00:50,003 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:50,003 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE550>
2025-05-02 23:00:50,003 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:50,003 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:50,003 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:50,003 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:50,003 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:50,003 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:50,003 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE550>
2025-05-02 23:00:50,003 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:50,003 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:50,003 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 23:00:50,003 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:50,003 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:50,003 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 23:00:50,003 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:50,003 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:50,003 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:50,003 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:50,003 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:50,003 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:50,003 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:50,003 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:50,003 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:50,003 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:50,003 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:50,003 - DEBUG - on stmt: jump 304
2025-05-02 23:00:50,004 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:50,004 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE550>
2025-05-02 23:00:50,004 - DEBUG - on stmt: jump 80
2025-05-02 23:00:50,004 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:50,004 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE550>
2025-05-02 23:00:50,004 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:50,004 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:50,004 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:50,004 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A3D2DEE5B0>],
             84: [<numba.core.ir.Assign object at 0x000001A3D2DED3D0>]})
2025-05-02 23:00:50,004 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:50,004 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2D91D90>
2025-05-02 23:00:50,004 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:50,004 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:50,004 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:50,004 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:50,004 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:50,004 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:50,004 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:50,004 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:50,004 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:50,004 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,004 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:50,004 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:50,004 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:50,004 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:50,004 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:50,004 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:50,005 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:50,005 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:50,005 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:50,005 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:50,005 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:50,005 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:50,005 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:50,005 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:50,005 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:50,005 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:50,005 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:50,005 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,006 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:50,006 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:50,006 - DEBUG - on stmt: jump 80
2025-05-02 23:00:50,006 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:50,006 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2D91D90>
2025-05-02 23:00:50,006 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:50,006 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:50,006 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:50,006 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:50,006 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:50,006 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:50,006 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2D91D90>
2025-05-02 23:00:50,006 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:50,006 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:50,006 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:50,006 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,006 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 23:00:50,006 - DEBUG - find_def var='n' stmt=$108binary_subtract.11 = time_register.1 - n
2025-05-02 23:00:50,006 - DEBUG - replaced with: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 23:00:50,006 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 23:00:50,006 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 23:00:50,006 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:50,006 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,006 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 23:00:50,006 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:50,006 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:50,007 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:50,007 - DEBUG - find_def var='n' stmt=$144binary_add.25 = n + $const142.24
2025-05-02 23:00:50,007 - DEBUG - replaced with: $144binary_add.25 = n.1 + $const142.24
2025-05-02 23:00:50,007 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 23:00:50,007 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:50,007 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,007 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:50,007 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,007 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:50,007 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:50,007 - DEBUG - on stmt: jump 168
2025-05-02 23:00:50,007 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:50,007 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2D91D90>
2025-05-02 23:00:50,007 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:50,007 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:50,007 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:50,007 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:50,007 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:50,007 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:50,007 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2D91D90>
2025-05-02 23:00:50,007 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:50,007 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:50,007 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 23:00:50,007 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:50,007 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:50,007 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 23:00:50,007 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:50,007 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:50,008 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:50,008 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:50,008 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:50,008 - DEBUG - find_def var='n' stmt=$224binary_subtract.29 = n - i
2025-05-02 23:00:50,008 - DEBUG - find_def_from_top label 170
2025-05-02 23:00:50,008 - DEBUG - idom 168 from label 170
2025-05-02 23:00:50,008 - DEBUG - find_def_from_bottom label 168
2025-05-02 23:00:50,008 - DEBUG - find_def_from_top label 168
2025-05-02 23:00:50,008 - DEBUG - idom 84 from label 168
2025-05-02 23:00:50,008 - DEBUG - find_def_from_bottom label 84
2025-05-02 23:00:50,008 - DEBUG - replaced with: $224binary_subtract.29 = n.1 - i
2025-05-02 23:00:50,008 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:50,008 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:50,008 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:50,008 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:50,008 - DEBUG - on stmt: jump 168
2025-05-02 23:00:50,008 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:50,008 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2D91D90>
2025-05-02 23:00:50,008 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 23:00:50,008 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 23:00:50,008 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 23:00:50,008 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:50,008 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,008 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 23:00:50,008 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:50,009 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:50,009 - DEBUG - find_def var='n' stmt=$276binary_subtract.16 = n_orig - n
2025-05-02 23:00:50,009 - DEBUG - find_def_from_top label 238
2025-05-02 23:00:50,009 - DEBUG - idom 168 from label 238
2025-05-02 23:00:50,009 - DEBUG - find_def_from_bottom label 168
2025-05-02 23:00:50,009 - DEBUG - find_def_from_top label 168
2025-05-02 23:00:50,009 - DEBUG - idom 84 from label 168
2025-05-02 23:00:50,009 - DEBUG - find_def_from_bottom label 84
2025-05-02 23:00:50,009 - DEBUG - replaced with: $276binary_subtract.16 = n_orig - n.1
2025-05-02 23:00:50,009 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:50,009 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:50,009 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 23:00:50,009 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:50,009 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,009 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:50,009 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,009 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:50,009 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:50,009 - DEBUG - on stmt: jump 304
2025-05-02 23:00:50,009 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:50,009 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2D91D90>
2025-05-02 23:00:50,009 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:50,009 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:50,009 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:50,009 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:50,010 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:50,010 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:50,010 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2D91D90>
2025-05-02 23:00:50,010 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:50,010 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:50,010 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 23:00:50,010 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:50,010 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:50,010 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 23:00:50,010 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:50,010 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:50,010 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:50,010 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:50,010 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:50,010 - DEBUG - find_def var='n' stmt=$360binary_add.29 = n + k
2025-05-02 23:00:50,010 - DEBUG - find_def_from_top label 306
2025-05-02 23:00:50,010 - DEBUG - idom 304 from label 306
2025-05-02 23:00:50,010 - DEBUG - find_def_from_bottom label 304
2025-05-02 23:00:50,010 - DEBUG - find_def_from_top label 304
2025-05-02 23:00:50,010 - DEBUG - idom 238 from label 304
2025-05-02 23:00:50,010 - DEBUG - find_def_from_bottom label 238
2025-05-02 23:00:50,010 - DEBUG - find_def_from_top label 238
2025-05-02 23:00:50,010 - DEBUG - idom 168 from label 238
2025-05-02 23:00:50,010 - DEBUG - find_def_from_bottom label 168
2025-05-02 23:00:50,010 - DEBUG - find_def_from_top label 168
2025-05-02 23:00:50,011 - DEBUG - idom 84 from label 168
2025-05-02 23:00:50,011 - DEBUG - find_def_from_bottom label 84
2025-05-02 23:00:50,011 - DEBUG - replaced with: $360binary_add.29 = n.1 + k
2025-05-02 23:00:50,011 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:50,011 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:50,011 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:50,011 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:50,011 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:50,011 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:50,011 - DEBUG - on stmt: jump 304
2025-05-02 23:00:50,011 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:50,011 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2D91D90>
2025-05-02 23:00:50,011 - DEBUG - on stmt: jump 80
2025-05-02 23:00:50,011 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:50,011 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2D91D90>
2025-05-02 23:00:50,011 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:50,011 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:50,011 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:01:18,236 - DEBUG - Audio loaded: shape=(2, 13083588), sample_rate=44100
2025-05-02 23:01:18,236 - DEBUG - Demixing audio: samples=13083588, margin=76800, chunk_size=4410000
2025-05-02 23:01:18,264 - DEBUG - Created 3 chunks for demixing
  0%|          | 0/3 [00:00<?, ?it/s]Processing:   0%|          | 0/3 [00:00<?, ?it/s]2025-05-02 23:01:18,333 - DEBUG - Processing chunk: 18 waves
2025-05-02 23:01:18,485 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song3.flac: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 256 Expected: 512
 Please fix either the inputs/outputs or the model.
Traceback (most recent call last):
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 258, in <module>
    main()
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 242, in main
    vocals, no_vocals, sampling_rate = predictor.predict(file_path)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 210, in predict
    sources = self.demix(mix.T)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 131, in demix
    sources = self.demix_base(segmented_mix, margin_size=margin)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 165, in demix_base
    -_ort.run(None, {"input": -spek.cpu().numpy()})[0] * 0.5
  File "C:\temp\s2S\installs\UVR\uvr_env\lib\site-packages\onnxruntime\capi\onnxruntime_inference_collection.py", line 220, in run
    return self._sess.run(output_names, input_feed, run_options)
onnxruntime.capi.onnxruntime_pybind11_state.InvalidArgument: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 256 Expected: 512
 Please fix either the inputs/outputs or the model.
Processing:   0%|          | 0/3 [00:00<?, ?it/s]

2025-05-02 23:01:19 - ERROR - Python error occurred: 2025-05-02 23:00:48,433 - DEBUG - Logging initialized
2025-05-02 23:00:48,434 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song3.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_a_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 76800, 'chunks': 100, 'n_fft': 8192, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 23:00:48,434 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 23:00:48,434 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song3.flac
2025-05-02 23:00:48,445 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=8192, hop=1024
2025-05-02 23:00:48,445 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song3.flac')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_a_other.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 76800, 'chunks': 100, 'n_fft': 8192, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 23:00:48,445 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_a_other.onnx
2025-05-02 23:00:48,551 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song3.flac
2025-05-02 23:00:49,827 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=86)
           2	LOAD_GLOBAL(arg=0, lineno=86)
           4	LOAD_FAST(arg=0, lineno=86)
           6	LOAD_FAST(arg=1, lineno=86)
           8	LOAD_FAST(arg=2, lineno=86)
          10	LOAD_FAST(arg=3, lineno=86)
          12	LOAD_FAST(arg=4, lineno=86)
          14	LOAD_FAST(arg=5, lineno=86)
          16	LOAD_FAST(arg=6, lineno=86)
          18	CALL_FUNCTION(arg=7, lineno=86)
          20	POP_TOP(arg=None, lineno=86)
          22	LOAD_CONST(arg=0, lineno=86)
          24	RETURN_VALUE(arg=None, lineno=86)
2025-05-02 23:00:49,827 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-02 23:00:49,827 - DEBUG - stack: []
2025-05-02 23:00:49,827 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=86)
2025-05-02 23:00:49,827 - DEBUG - stack []
2025-05-02 23:00:49,827 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=86)
2025-05-02 23:00:49,827 - DEBUG - stack []
2025-05-02 23:00:49,827 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=86)
2025-05-02 23:00:49,827 - DEBUG - stack ['$2load_global.0']
2025-05-02 23:00:49,827 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=86)
2025-05-02 23:00:49,827 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-05-02 23:00:49,827 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=86)
2025-05-02 23:00:49,827 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2']
2025-05-02 23:00:49,827 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=86)
2025-05-02 23:00:49,827 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3']
2025-05-02 23:00:49,827 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=4, lineno=86)
2025-05-02 23:00:49,828 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4']
2025-05-02 23:00:49,828 - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=5, lineno=86)
2025-05-02 23:00:49,828 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5']
2025-05-02 23:00:49,828 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=6, lineno=86)
2025-05-02 23:00:49,828 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6']
2025-05-02 23:00:49,828 - DEBUG - dispatch pc=18, inst=CALL_FUNCTION(arg=7, lineno=86)
2025-05-02 23:00:49,828 - DEBUG - stack ['$2load_global.0', '$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6', '$y16.7']
2025-05-02 23:00:49,828 - DEBUG - dispatch pc=20, inst=POP_TOP(arg=None, lineno=86)
2025-05-02 23:00:49,828 - DEBUG - stack ['$18call_function.8']
2025-05-02 23:00:49,828 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=0, lineno=86)
2025-05-02 23:00:49,828 - DEBUG - stack []
2025-05-02 23:00:49,828 - DEBUG - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=86)
2025-05-02 23:00:49,828 - DEBUG - stack ['$const22.9']
2025-05-02 23:00:49,828 - DEBUG - end state. edges=[]
2025-05-02 23:00:49,828 - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-02 23:00:49,828 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-02 23:00:49,828 - DEBUG - defmap: {}
2025-05-02 23:00:49,828 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-02 23:00:49,828 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-02 23:00:49,828 - DEBUG - keep phismap: {}
2025-05-02 23:00:49,828 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-02 23:00:49,828 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-02 23:00:49,828 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'res': '$t_out6.2'}), (8, {'res': '$interp_win8.3'}), (10, {'res': '$interp_delta10.4'}), (12, {'res': '$num_table12.5'}), (14, {'res': '$scale14.6'}), (16, {'res': '$y16.7'}), (18, {'func': '$2load_global.0', 'args': ['$x4.1', '$t_out6.2', '$interp_win8.3', '$interp_delta10.4', '$num_table12.5', '$scale14.6', '$y16.7'], 'res': '$18call_function.8'}), (22, {'res': '$const22.9'}), (24, {'retval': '$const22.9', 'castval': '$24return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-02 23:00:49,886 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    t_out = arg(1, name=t_out)               ['t_out']
    interp_win = arg(2, name=interp_win)     ['interp_win']
    interp_delta = arg(3, name=interp_delta) ['interp_delta']
    num_table = arg(4, name=num_table)       ['num_table']
    scale = arg(5, name=scale)               ['scale']
    y = arg(6, name=y)                       ['y']
    $2load_global.0 = global(_resample_loop_s: CPUDispatcher(<function _resample_loop at 0x000001A3B8FD8F70>)) ['$2load_global.0']
    $18call_function.8 = call $2load_global.0(x, t_out, interp_win, interp_delta, num_table, scale, y, func=$2load_global.0, args=[Var(x, interpn.py:86), Var(t_out, interpn.py:86), Var(interp_win, interpn.py:86), Var(interp_delta, interpn.py:86), Var(num_table, interpn.py:86), Var(scale, interpn.py:86), Var(y, interpn.py:86)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call_function.8', '$2load_global.0', 'interp_delta', 'interp_win', 'num_table', 'scale', 't_out', 'x', 'y']
    $const22.9 = const(NoneType, None)       ['$const22.9']
    $24return_value.10 = cast(value=$const22.9) ['$24return_value.10', '$const22.9']
    return $24return_value.10                ['$24return_value.10']

2025-05-02 23:00:49,891 - DEBUG - ==== SSA block analysis pass on 0
2025-05-02 23:00:49,891 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2D37A00>
2025-05-02 23:00:49,892 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,892 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,892 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,892 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,892 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,892 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,892 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,892 - DEBUG - on stmt: $2load_global.0 = global(_resample_loop_s: CPUDispatcher(<function _resample_loop at 0x000001A3B8FD8F70>))
2025-05-02 23:00:49,892 - DEBUG - on stmt: $18call_function.8 = call $2load_global.0(x, t_out, interp_win, interp_delta, num_table, scale, y, func=$2load_global.0, args=[Var(x, interpn.py:86), Var(t_out, interpn.py:86), Var(interp_win, interpn.py:86), Var(interp_delta, interpn.py:86), Var(num_table, interpn.py:86), Var(scale, interpn.py:86), Var(y, interpn.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,892 - DEBUG - on stmt: $const22.9 = const(NoneType, None)
2025-05-02 23:00:49,892 - DEBUG - on stmt: $24return_value.10 = cast(value=$const22.9)
2025-05-02 23:00:49,892 - DEBUG - on stmt: return $24return_value.10
2025-05-02 23:00:49,892 - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call_function.8': [<numba.core.ir.Assign object at 0x000001A3D2D4FD90>],
             '$24return_value.10': [<numba.core.ir.Assign object at 0x000001A3D2D378B0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A3D2D4F3D0>],
             '$const22.9': [<numba.core.ir.Assign object at 0x000001A3D2D37130>],
             'interp_delta': [<numba.core.ir.Assign object at 0x000001A3D2D37EB0>],
             'interp_win': [<numba.core.ir.Assign object at 0x000001A3D2D37D90>],
             'num_table': [<numba.core.ir.Assign object at 0x000001A3D2D37FD0>],
             'scale': [<numba.core.ir.Assign object at 0x000001A3D2D4F130>],
             't_out': [<numba.core.ir.Assign object at 0x000001A3D2D37C70>],
             'x': [<numba.core.ir.Assign object at 0x000001A3D2D371F0>],
             'y': [<numba.core.ir.Assign object at 0x000001A3D2D4F250>]})
2025-05-02 23:00:49,892 - DEBUG - SSA violators set()
2025-05-02 23:00:49,894 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=9)
           2	LOAD_GLOBAL(arg=0, lineno=9)
           4	LOAD_FAST(arg=5, lineno=9)
           6	LOAD_FAST(arg=4, lineno=9)
           8	BINARY_MULTIPLY(arg=None, lineno=9)
          10	CALL_FUNCTION(arg=1, lineno=9)
          12	STORE_FAST(arg=7, lineno=9)
          14	LOAD_CONST(arg=1, lineno=10)
          16	STORE_FAST(arg=8, lineno=10)
          18	LOAD_CONST(arg=2, lineno=12)
          20	STORE_FAST(arg=9, lineno=12)
          22	LOAD_CONST(arg=1, lineno=13)
          24	STORE_FAST(arg=10, lineno=13)
          26	LOAD_CONST(arg=1, lineno=14)
          28	STORE_FAST(arg=11, lineno=14)
          30	LOAD_CONST(arg=2, lineno=15)
          32	STORE_FAST(arg=12, lineno=15)
          34	LOAD_CONST(arg=1, lineno=16)
          36	STORE_FAST(arg=13, lineno=16)
          38	LOAD_CONST(arg=1, lineno=17)
          40	STORE_FAST(arg=14, lineno=17)
          42	LOAD_FAST(arg=2, lineno=19)
          44	LOAD_ATTR(arg=1, lineno=19)
          46	LOAD_CONST(arg=2, lineno=19)
          48	BINARY_SUBSCR(arg=None, lineno=19)
          50	STORE_FAST(arg=15, lineno=19)
          52	LOAD_FAST(arg=0, lineno=20)
          54	LOAD_ATTR(arg=1, lineno=20)
          56	LOAD_CONST(arg=2, lineno=20)
          58	BINARY_SUBSCR(arg=None, lineno=20)
          60	STORE_FAST(arg=16, lineno=20)
          62	LOAD_FAST(arg=1, lineno=21)
          64	LOAD_ATTR(arg=1, lineno=21)
          66	LOAD_CONST(arg=2, lineno=21)
          68	BINARY_SUBSCR(arg=None, lineno=21)
          70	STORE_FAST(arg=17, lineno=21)
          72	LOAD_GLOBAL(arg=2, lineno=23)
          74	LOAD_FAST(arg=17, lineno=23)
          76	CALL_FUNCTION(arg=1, lineno=23)
          78	GET_ITER(arg=None, lineno=23)
>         80	FOR_ITER(arg=298, lineno=23)
          84	STORE_FAST(arg=18, lineno=23)
          86	LOAD_FAST(arg=1, lineno=24)
          88	LOAD_FAST(arg=18, lineno=24)
          90	BINARY_SUBSCR(arg=None, lineno=24)
          92	STORE_FAST(arg=8, lineno=24)
          94	LOAD_GLOBAL(arg=0, lineno=27)
          96	LOAD_FAST(arg=8, lineno=27)
          98	CALL_FUNCTION(arg=1, lineno=27)
         100	STORE_FAST(arg=9, lineno=27)
         102	LOAD_FAST(arg=5, lineno=30)
         104	LOAD_FAST(arg=8, lineno=30)
         106	LOAD_FAST(arg=9, lineno=30)
         108	BINARY_SUBTRACT(arg=None, lineno=30)
         110	BINARY_MULTIPLY(arg=None, lineno=30)
         112	STORE_FAST(arg=10, lineno=30)
         114	LOAD_FAST(arg=10, lineno=33)
         116	LOAD_FAST(arg=4, lineno=33)
         118	BINARY_MULTIPLY(arg=None, lineno=33)
         120	STORE_FAST(arg=11, lineno=33)
         122	LOAD_GLOBAL(arg=0, lineno=34)
         124	LOAD_FAST(arg=11, lineno=34)
         126	CALL_FUNCTION(arg=1, lineno=34)
         128	STORE_FAST(arg=12, lineno=34)
         130	LOAD_FAST(arg=11, lineno=37)
         132	LOAD_FAST(arg=12, lineno=37)
         134	BINARY_SUBTRACT(arg=None, lineno=37)
         136	STORE_FAST(arg=13, lineno=37)
         138	LOAD_GLOBAL(arg=3, lineno=40)
         140	LOAD_FAST(arg=9, lineno=40)
         142	LOAD_CONST(arg=3, lineno=40)
         144	BINARY_ADD(arg=None, lineno=40)
         146	LOAD_FAST(arg=15, lineno=40)
         148	LOAD_FAST(arg=12, lineno=40)
         150	BINARY_SUBTRACT(arg=None, lineno=40)
         152	LOAD_FAST(arg=7, lineno=40)
         154	BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
         156	CALL_FUNCTION(arg=2, lineno=40)
         158	STORE_FAST(arg=19, lineno=40)
         160	LOAD_GLOBAL(arg=4, lineno=41)
         162	LOAD_FAST(arg=19, lineno=41)
         164	CALL_FUNCTION(arg=1, lineno=41)
         166	GET_ITER(arg=None, lineno=41)
>        168	FOR_ITER(arg=68, lineno=41)
         170	STORE_FAST(arg=20, lineno=41)
         172	LOAD_FAST(arg=2, lineno=44)
         174	LOAD_FAST(arg=12, lineno=44)
         176	LOAD_FAST(arg=20, lineno=44)
         178	LOAD_FAST(arg=7, lineno=44)
         180	BINARY_MULTIPLY(arg=None, lineno=44)
         182	BINARY_ADD(arg=None, lineno=44)
         184	BINARY_SUBSCR(arg=None, lineno=44)
         186	LOAD_FAST(arg=13, lineno=45)
         188	LOAD_FAST(arg=3, lineno=45)
         190	LOAD_FAST(arg=12, lineno=45)
         192	LOAD_FAST(arg=20, lineno=45)
         194	LOAD_FAST(arg=7, lineno=45)
         196	BINARY_MULTIPLY(arg=None, lineno=45)
         198	BINARY_ADD(arg=None, lineno=45)
         200	BINARY_SUBSCR(arg=None, lineno=45)
         202	BINARY_MULTIPLY(arg=None, lineno=45)
         204	BINARY_ADD(arg=None, lineno=44)
         206	STORE_FAST(arg=14, lineno=43)
         208	LOAD_FAST(arg=6, lineno=47)
         210	LOAD_FAST(arg=18, lineno=47)
         212	DUP_TOP_TWO(arg=None, lineno=47)
         214	BINARY_SUBSCR(arg=None, lineno=47)
         216	LOAD_FAST(arg=14, lineno=47)
         218	LOAD_FAST(arg=0, lineno=47)
         220	LOAD_FAST(arg=9, lineno=47)
         222	LOAD_FAST(arg=20, lineno=47)
         224	BINARY_SUBTRACT(arg=None, lineno=47)
         226	BINARY_SUBSCR(arg=None, lineno=47)
         228	BINARY_MULTIPLY(arg=None, lineno=47)
         230	INPLACE_ADD(arg=None, lineno=47)
         232	ROT_THREE(arg=None, lineno=47)
         234	STORE_SUBSCR(arg=None, lineno=47)
         236	JUMP_ABSOLUTE(arg=168, lineno=47)
>        238	LOAD_FAST(arg=5, lineno=50)
         240	LOAD_FAST(arg=10, lineno=50)
         242	BINARY_SUBTRACT(arg=None, lineno=50)
         244	STORE_FAST(arg=10, lineno=50)
         246	LOAD_FAST(arg=10, lineno=53)
         248	LOAD_FAST(arg=4, lineno=53)
         250	BINARY_MULTIPLY(arg=None, lineno=53)
         252	STORE_FAST(arg=11, lineno=53)
         254	LOAD_GLOBAL(arg=0, lineno=54)
         256	LOAD_FAST(arg=11, lineno=54)
         258	CALL_FUNCTION(arg=1, lineno=54)
         260	STORE_FAST(arg=12, lineno=54)
         262	LOAD_FAST(arg=11, lineno=57)
         264	LOAD_FAST(arg=12, lineno=57)
         266	BINARY_SUBTRACT(arg=None, lineno=57)
         268	STORE_FAST(arg=13, lineno=57)
         270	LOAD_GLOBAL(arg=3, lineno=60)
         272	LOAD_FAST(arg=16, lineno=60)
         274	LOAD_FAST(arg=9, lineno=60)
         276	BINARY_SUBTRACT(arg=None, lineno=60)
         278	LOAD_CONST(arg=3, lineno=60)
         280	BINARY_SUBTRACT(arg=None, lineno=60)
         282	LOAD_FAST(arg=15, lineno=60)
         284	LOAD_FAST(arg=12, lineno=60)
         286	BINARY_SUBTRACT(arg=None, lineno=60)
         288	LOAD_FAST(arg=7, lineno=60)
         290	BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
         292	CALL_FUNCTION(arg=2, lineno=60)
         294	STORE_FAST(arg=21, lineno=60)
         296	LOAD_GLOBAL(arg=4, lineno=61)
         298	LOAD_FAST(arg=21, lineno=61)
         300	CALL_FUNCTION(arg=1, lineno=61)
         302	GET_ITER(arg=None, lineno=61)
>        304	FOR_ITER(arg=74, lineno=61)
         306	STORE_FAST(arg=22, lineno=61)
         308	LOAD_FAST(arg=2, lineno=63)
         310	LOAD_FAST(arg=12, lineno=63)
         312	LOAD_FAST(arg=22, lineno=63)
         314	LOAD_FAST(arg=7, lineno=63)
         316	BINARY_MULTIPLY(arg=None, lineno=63)
         318	BINARY_ADD(arg=None, lineno=63)
         320	BINARY_SUBSCR(arg=None, lineno=63)
         322	LOAD_FAST(arg=13, lineno=64)
         324	LOAD_FAST(arg=3, lineno=64)
         326	LOAD_FAST(arg=12, lineno=64)
         328	LOAD_FAST(arg=22, lineno=64)
         330	LOAD_FAST(arg=7, lineno=64)
         332	BINARY_MULTIPLY(arg=None, lineno=64)
         334	BINARY_ADD(arg=None, lineno=64)
         336	BINARY_SUBSCR(arg=None, lineno=64)
         338	BINARY_MULTIPLY(arg=None, lineno=64)
         340	BINARY_ADD(arg=None, lineno=63)
         342	STORE_FAST(arg=14, lineno=62)
         344	LOAD_FAST(arg=6, lineno=66)
         346	LOAD_FAST(arg=18, lineno=66)
         348	DUP_TOP_TWO(arg=None, lineno=66)
         350	BINARY_SUBSCR(arg=None, lineno=66)
         352	LOAD_FAST(arg=14, lineno=66)
         354	LOAD_FAST(arg=0, lineno=66)
         356	LOAD_FAST(arg=9, lineno=66)
         358	LOAD_FAST(arg=22, lineno=66)
         360	BINARY_ADD(arg=None, lineno=66)
         362	LOAD_CONST(arg=3, lineno=66)
         364	BINARY_ADD(arg=None, lineno=66)
         366	BINARY_SUBSCR(arg=None, lineno=66)
         368	BINARY_MULTIPLY(arg=None, lineno=66)
         370	INPLACE_ADD(arg=None, lineno=66)
         372	ROT_THREE(arg=None, lineno=66)
         374	STORE_SUBSCR(arg=None, lineno=66)
         376	JUMP_ABSOLUTE(arg=304, lineno=66)
>        380	JUMP_ABSOLUTE(arg=80, lineno=66)
>        382	LOAD_CONST(arg=0, lineno=66)
         384	RETURN_VALUE(arg=None, lineno=66)
2025-05-02 23:00:49,895 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-02 23:00:49,895 - DEBUG - stack: []
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=9)
2025-05-02 23:00:49,895 - DEBUG - stack []
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=9)
2025-05-02 23:00:49,895 - DEBUG - stack []
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=5, lineno=9)
2025-05-02 23:00:49,895 - DEBUG - stack ['$2load_global.0']
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=4, lineno=9)
2025-05-02 23:00:49,895 - DEBUG - stack ['$2load_global.0', '$scale4.1']
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=8, inst=BINARY_MULTIPLY(arg=None, lineno=9)
2025-05-02 23:00:49,895 - DEBUG - stack ['$2load_global.0', '$scale4.1', '$num_table6.2']
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=9)
2025-05-02 23:00:49,895 - DEBUG - stack ['$2load_global.0', '$8binary_multiply.3']
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=12, inst=STORE_FAST(arg=7, lineno=9)
2025-05-02 23:00:49,895 - DEBUG - stack ['$10call_function.4']
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=10)
2025-05-02 23:00:49,895 - DEBUG - stack []
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=8, lineno=10)
2025-05-02 23:00:49,895 - DEBUG - stack ['$const14.5']
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=12)
2025-05-02 23:00:49,895 - DEBUG - stack []
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=20, inst=STORE_FAST(arg=9, lineno=12)
2025-05-02 23:00:49,895 - DEBUG - stack ['$const18.6']
2025-05-02 23:00:49,895 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=13)
2025-05-02 23:00:49,895 - DEBUG - stack []
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=24, inst=STORE_FAST(arg=10, lineno=13)
2025-05-02 23:00:49,896 - DEBUG - stack ['$const22.7']
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=26, inst=LOAD_CONST(arg=1, lineno=14)
2025-05-02 23:00:49,896 - DEBUG - stack []
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=28, inst=STORE_FAST(arg=11, lineno=14)
2025-05-02 23:00:49,896 - DEBUG - stack ['$const26.8']
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=15)
2025-05-02 23:00:49,896 - DEBUG - stack []
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=32, inst=STORE_FAST(arg=12, lineno=15)
2025-05-02 23:00:49,896 - DEBUG - stack ['$const30.9']
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=16)
2025-05-02 23:00:49,896 - DEBUG - stack []
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=36, inst=STORE_FAST(arg=13, lineno=16)
2025-05-02 23:00:49,896 - DEBUG - stack ['$const34.10']
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=17)
2025-05-02 23:00:49,896 - DEBUG - stack []
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=40, inst=STORE_FAST(arg=14, lineno=17)
2025-05-02 23:00:49,896 - DEBUG - stack ['$const38.11']
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=42, inst=LOAD_FAST(arg=2, lineno=19)
2025-05-02 23:00:49,896 - DEBUG - stack []
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=44, inst=LOAD_ATTR(arg=1, lineno=19)
2025-05-02 23:00:49,896 - DEBUG - stack ['$interp_win42.12']
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=46, inst=LOAD_CONST(arg=2, lineno=19)
2025-05-02 23:00:49,896 - DEBUG - stack ['$44load_attr.13']
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=19)
2025-05-02 23:00:49,896 - DEBUG - stack ['$44load_attr.13', '$const46.14']
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=50, inst=STORE_FAST(arg=15, lineno=19)
2025-05-02 23:00:49,896 - DEBUG - stack ['$48binary_subscr.15']
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=20)
2025-05-02 23:00:49,896 - DEBUG - stack []
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=54, inst=LOAD_ATTR(arg=1, lineno=20)
2025-05-02 23:00:49,896 - DEBUG - stack ['$x52.16']
2025-05-02 23:00:49,896 - DEBUG - dispatch pc=56, inst=LOAD_CONST(arg=2, lineno=20)
2025-05-02 23:00:49,897 - DEBUG - stack ['$54load_attr.17']
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=20)
2025-05-02 23:00:49,897 - DEBUG - stack ['$54load_attr.17', '$const56.18']
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=60, inst=STORE_FAST(arg=16, lineno=20)
2025-05-02 23:00:49,897 - DEBUG - stack ['$58binary_subscr.19']
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=21)
2025-05-02 23:00:49,897 - DEBUG - stack []
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=64, inst=LOAD_ATTR(arg=1, lineno=21)
2025-05-02 23:00:49,897 - DEBUG - stack ['$t_out62.20']
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=21)
2025-05-02 23:00:49,897 - DEBUG - stack ['$64load_attr.21']
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=21)
2025-05-02 23:00:49,897 - DEBUG - stack ['$64load_attr.21', '$const66.22']
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=70, inst=STORE_FAST(arg=17, lineno=21)
2025-05-02 23:00:49,897 - DEBUG - stack ['$68binary_subscr.23']
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=72, inst=LOAD_GLOBAL(arg=2, lineno=23)
2025-05-02 23:00:49,897 - DEBUG - stack []
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=17, lineno=23)
2025-05-02 23:00:49,897 - DEBUG - stack ['$72load_global.24']
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=23)
2025-05-02 23:00:49,897 - DEBUG - stack ['$72load_global.24', '$n_out74.25']
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=23)
2025-05-02 23:00:49,897 - DEBUG - stack ['$76call_function.26']
2025-05-02 23:00:49,897 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.27',), blockstack=(), npush=0)]
2025-05-02 23:00:49,897 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-05-02 23:00:49,897 - DEBUG - stack: ['$phi80.0']
2025-05-02 23:00:49,897 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=298, lineno=23)
2025-05-02 23:00:49,897 - DEBUG - stack ['$phi80.0']
2025-05-02 23:00:49,897 - DEBUG - end state. edges=[Edge(pc=382, stack=(), blockstack=(), npush=0), Edge(pc=84, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-05-02 23:00:49,897 - DEBUG - pending: deque([State(pc_initial=382 nstack_initial=0), State(pc_initial=84 nstack_initial=2)])
2025-05-02 23:00:49,898 - DEBUG - stack: []
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=382, inst=LOAD_CONST(arg=0, lineno=66)
2025-05-02 23:00:49,898 - DEBUG - stack []
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=384, inst=RETURN_VALUE(arg=None, lineno=66)
2025-05-02 23:00:49,898 - DEBUG - stack ['$const382.0']
2025-05-02 23:00:49,898 - DEBUG - end state. edges=[]
2025-05-02 23:00:49,898 - DEBUG - pending: deque([State(pc_initial=84 nstack_initial=2)])
2025-05-02 23:00:49,898 - DEBUG - stack: ['$phi84.0', '$phi84.1']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=84, inst=STORE_FAST(arg=18, lineno=23)
2025-05-02 23:00:49,898 - DEBUG - stack ['$phi84.0', '$phi84.1']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=24)
2025-05-02 23:00:49,898 - DEBUG - stack ['$phi84.0']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=88, inst=LOAD_FAST(arg=18, lineno=24)
2025-05-02 23:00:49,898 - DEBUG - stack ['$phi84.0', '$t_out86.2']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=24)
2025-05-02 23:00:49,898 - DEBUG - stack ['$phi84.0', '$t_out86.2', '$t88.3']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=92, inst=STORE_FAST(arg=8, lineno=24)
2025-05-02 23:00:49,898 - DEBUG - stack ['$phi84.0', '$90binary_subscr.4']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=94, inst=LOAD_GLOBAL(arg=0, lineno=27)
2025-05-02 23:00:49,898 - DEBUG - stack ['$phi84.0']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=96, inst=LOAD_FAST(arg=8, lineno=27)
2025-05-02 23:00:49,898 - DEBUG - stack ['$phi84.0', '$94load_global.5']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=98, inst=CALL_FUNCTION(arg=1, lineno=27)
2025-05-02 23:00:49,898 - DEBUG - stack ['$phi84.0', '$94load_global.5', '$time_register96.6']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=100, inst=STORE_FAST(arg=9, lineno=27)
2025-05-02 23:00:49,898 - DEBUG - stack ['$phi84.0', '$98call_function.7']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=102, inst=LOAD_FAST(arg=5, lineno=30)
2025-05-02 23:00:49,898 - DEBUG - stack ['$phi84.0']
2025-05-02 23:00:49,898 - DEBUG - dispatch pc=104, inst=LOAD_FAST(arg=8, lineno=30)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$scale102.8']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=9, lineno=30)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$scale102.8', '$time_register104.9']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=108, inst=BINARY_SUBTRACT(arg=None, lineno=30)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$scale102.8', '$time_register104.9', '$n106.10']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=110, inst=BINARY_MULTIPLY(arg=None, lineno=30)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$scale102.8', '$108binary_subtract.11']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=112, inst=STORE_FAST(arg=10, lineno=30)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$110binary_multiply.12']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=10, lineno=33)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=4, lineno=33)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$frac114.13']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=118, inst=BINARY_MULTIPLY(arg=None, lineno=33)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$frac114.13', '$num_table116.14']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=120, inst=STORE_FAST(arg=11, lineno=33)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$118binary_multiply.15']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=122, inst=LOAD_GLOBAL(arg=0, lineno=34)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=124, inst=LOAD_FAST(arg=11, lineno=34)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$122load_global.16']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=126, inst=CALL_FUNCTION(arg=1, lineno=34)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$122load_global.16', '$index_frac124.17']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=128, inst=STORE_FAST(arg=12, lineno=34)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$126call_function.18']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=130, inst=LOAD_FAST(arg=11, lineno=37)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=132, inst=LOAD_FAST(arg=12, lineno=37)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$index_frac130.19']
2025-05-02 23:00:49,899 - DEBUG - dispatch pc=134, inst=BINARY_SUBTRACT(arg=None, lineno=37)
2025-05-02 23:00:49,899 - DEBUG - stack ['$phi84.0', '$index_frac130.19', '$offset132.20']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=136, inst=STORE_FAST(arg=13, lineno=37)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$134binary_subtract.21']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=138, inst=LOAD_GLOBAL(arg=3, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=140, inst=LOAD_FAST(arg=9, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$138load_global.22']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=142, inst=LOAD_CONST(arg=3, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$n140.23']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=144, inst=BINARY_ADD(arg=None, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$n140.23', '$const142.24']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=146, inst=LOAD_FAST(arg=15, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=148, inst=LOAD_FAST(arg=12, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$nwin146.26']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=150, inst=BINARY_SUBTRACT(arg=None, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$nwin146.26', '$offset148.27']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=7, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$150binary_subtract.28']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=154, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$150binary_subtract.28', '$index_step152.29']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=156, inst=CALL_FUNCTION(arg=2, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$138load_global.22', '$144binary_add.25', '$154binary_floor_divide.30']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=158, inst=STORE_FAST(arg=19, lineno=40)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$156call_function.31']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=160, inst=LOAD_GLOBAL(arg=4, lineno=41)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=162, inst=LOAD_FAST(arg=19, lineno=41)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$160load_global.32']
2025-05-02 23:00:49,900 - DEBUG - dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=41)
2025-05-02 23:00:49,900 - DEBUG - stack ['$phi84.0', '$160load_global.32', '$i_max162.33']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=166, inst=GET_ITER(arg=None, lineno=41)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi84.0', '$164call_function.34']
2025-05-02 23:00:49,901 - DEBUG - end state. edges=[Edge(pc=168, stack=('$phi84.0', '$166get_iter.35'), blockstack=(), npush=0)]
2025-05-02 23:00:49,901 - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=2)])
2025-05-02 23:00:49,901 - DEBUG - stack: ['$phi168.0', '$phi168.1']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=168, inst=FOR_ITER(arg=68, lineno=41)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi168.0', '$phi168.1']
2025-05-02 23:00:49,901 - DEBUG - end state. edges=[Edge(pc=238, stack=('$phi168.0',), blockstack=(), npush=0), Edge(pc=170, stack=('$phi168.0', '$phi168.1', '$168for_iter.3'), blockstack=(), npush=0)]
2025-05-02 23:00:49,901 - DEBUG - pending: deque([State(pc_initial=238 nstack_initial=1), State(pc_initial=170 nstack_initial=3)])
2025-05-02 23:00:49,901 - DEBUG - stack: ['$phi238.0']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=238, inst=LOAD_FAST(arg=5, lineno=50)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi238.0']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=10, lineno=50)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi238.0', '$scale238.1']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=242, inst=BINARY_SUBTRACT(arg=None, lineno=50)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi238.0', '$scale238.1', '$frac240.2']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=244, inst=STORE_FAST(arg=10, lineno=50)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi238.0', '$242binary_subtract.3']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=10, lineno=53)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi238.0']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=248, inst=LOAD_FAST(arg=4, lineno=53)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi238.0', '$frac246.4']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=250, inst=BINARY_MULTIPLY(arg=None, lineno=53)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi238.0', '$frac246.4', '$num_table248.5']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=252, inst=STORE_FAST(arg=11, lineno=53)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi238.0', '$250binary_multiply.6']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=254, inst=LOAD_GLOBAL(arg=0, lineno=54)
2025-05-02 23:00:49,901 - DEBUG - stack ['$phi238.0']
2025-05-02 23:00:49,901 - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=11, lineno=54)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$254load_global.7']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=258, inst=CALL_FUNCTION(arg=1, lineno=54)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$254load_global.7', '$index_frac256.8']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=260, inst=STORE_FAST(arg=12, lineno=54)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$258call_function.9']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=262, inst=LOAD_FAST(arg=11, lineno=57)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=264, inst=LOAD_FAST(arg=12, lineno=57)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$index_frac262.10']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=266, inst=BINARY_SUBTRACT(arg=None, lineno=57)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$index_frac262.10', '$offset264.11']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=268, inst=STORE_FAST(arg=13, lineno=57)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$266binary_subtract.12']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=270, inst=LOAD_GLOBAL(arg=3, lineno=60)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=272, inst=LOAD_FAST(arg=16, lineno=60)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$270load_global.13']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=274, inst=LOAD_FAST(arg=9, lineno=60)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$n_orig272.14']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=276, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$n_orig272.14', '$n274.15']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=278, inst=LOAD_CONST(arg=3, lineno=60)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$276binary_subtract.16']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=280, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$276binary_subtract.16', '$const278.17']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=282, inst=LOAD_FAST(arg=15, lineno=60)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=284, inst=LOAD_FAST(arg=12, lineno=60)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$nwin282.19']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=286, inst=BINARY_SUBTRACT(arg=None, lineno=60)
2025-05-02 23:00:49,902 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$nwin282.19', '$offset284.20']
2025-05-02 23:00:49,902 - DEBUG - dispatch pc=288, inst=LOAD_FAST(arg=7, lineno=60)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$286binary_subtract.21']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=290, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=60)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$286binary_subtract.21', '$index_step288.22']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=292, inst=CALL_FUNCTION(arg=2, lineno=60)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi238.0', '$270load_global.13', '$280binary_subtract.18', '$290binary_floor_divide.23']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=294, inst=STORE_FAST(arg=21, lineno=60)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi238.0', '$292call_function.24']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=296, inst=LOAD_GLOBAL(arg=4, lineno=61)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi238.0']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=298, inst=LOAD_FAST(arg=21, lineno=61)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi238.0', '$296load_global.25']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=300, inst=CALL_FUNCTION(arg=1, lineno=61)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi238.0', '$296load_global.25', '$k_max298.26']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=302, inst=GET_ITER(arg=None, lineno=61)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi238.0', '$300call_function.27']
2025-05-02 23:00:49,903 - DEBUG - end state. edges=[Edge(pc=304, stack=('$phi238.0', '$302get_iter.28'), blockstack=(), npush=0)]
2025-05-02 23:00:49,903 - DEBUG - pending: deque([State(pc_initial=170 nstack_initial=3), State(pc_initial=304 nstack_initial=2)])
2025-05-02 23:00:49,903 - DEBUG - stack: ['$phi170.0', '$phi170.1', '$phi170.2']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=170, inst=STORE_FAST(arg=20, lineno=41)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi170.0', '$phi170.1', '$phi170.2']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=172, inst=LOAD_FAST(arg=2, lineno=44)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=12, lineno=44)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=176, inst=LOAD_FAST(arg=20, lineno=44)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=178, inst=LOAD_FAST(arg=7, lineno=44)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$i176.5']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=180, inst=BINARY_MULTIPLY(arg=None, lineno=44)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$i176.5', '$index_step178.6']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=182, inst=BINARY_ADD(arg=None, lineno=44)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$offset174.4', '$180binary_multiply.7']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=184, inst=BINARY_SUBSCR(arg=None, lineno=44)
2025-05-02 23:00:49,903 - DEBUG - stack ['$phi170.0', '$phi170.1', '$interp_win172.3', '$182binary_add.8']
2025-05-02 23:00:49,903 - DEBUG - dispatch pc=186, inst=LOAD_FAST(arg=13, lineno=45)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=188, inst=LOAD_FAST(arg=3, lineno=45)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=12, lineno=45)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=192, inst=LOAD_FAST(arg=20, lineno=45)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=45)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$i192.13']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=196, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$i192.13', '$index_step194.14']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=198, inst=BINARY_ADD(arg=None, lineno=45)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$offset190.12', '$196binary_multiply.15']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=200, inst=BINARY_SUBSCR(arg=None, lineno=45)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$interp_delta188.11', '$198binary_add.16']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=202, inst=BINARY_MULTIPLY(arg=None, lineno=45)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$eta186.10', '$200binary_subscr.17']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=204, inst=BINARY_ADD(arg=None, lineno=44)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$184binary_subscr.9', '$202binary_multiply.18']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=206, inst=STORE_FAST(arg=14, lineno=43)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$204binary_add.19']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=208, inst=LOAD_FAST(arg=6, lineno=47)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=210, inst=LOAD_FAST(arg=18, lineno=47)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=212, inst=DUP_TOP_TWO(arg=None, lineno=47)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=214, inst=BINARY_SUBSCR(arg=None, lineno=47)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$212dup_top_two.22', '$212dup_top_two.23']
2025-05-02 23:00:49,904 - DEBUG - dispatch pc=216, inst=LOAD_FAST(arg=14, lineno=47)
2025-05-02 23:00:49,904 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=218, inst=LOAD_FAST(arg=0, lineno=47)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=220, inst=LOAD_FAST(arg=9, lineno=47)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=222, inst=LOAD_FAST(arg=20, lineno=47)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$n220.27']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=224, inst=BINARY_SUBTRACT(arg=None, lineno=47)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$n220.27', '$i222.28']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=226, inst=BINARY_SUBSCR(arg=None, lineno=47)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$x218.26', '$224binary_subtract.29']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=228, inst=BINARY_MULTIPLY(arg=None, lineno=47)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$weight216.25', '$226binary_subscr.30']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=230, inst=INPLACE_ADD(arg=None, lineno=47)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$214binary_subscr.24', '$228binary_multiply.31']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=232, inst=ROT_THREE(arg=None, lineno=47)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi170.0', '$phi170.1', '$y208.20', '$t210.21', '$230inplace_add.32']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=234, inst=STORE_SUBSCR(arg=None, lineno=47)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi170.0', '$phi170.1', '$230inplace_add.32', '$y208.20', '$t210.21']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=236, inst=JUMP_ABSOLUTE(arg=168, lineno=47)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi170.0', '$phi170.1']
2025-05-02 23:00:49,905 - DEBUG - end state. edges=[Edge(pc=168, stack=('$phi170.0', '$phi170.1'), blockstack=(), npush=0)]
2025-05-02 23:00:49,905 - DEBUG - pending: deque([State(pc_initial=304 nstack_initial=2), State(pc_initial=168 nstack_initial=2)])
2025-05-02 23:00:49,905 - DEBUG - stack: ['$phi304.0', '$phi304.1']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=304, inst=FOR_ITER(arg=74, lineno=61)
2025-05-02 23:00:49,905 - DEBUG - stack ['$phi304.0', '$phi304.1']
2025-05-02 23:00:49,905 - DEBUG - end state. edges=[Edge(pc=380, stack=('$phi304.0',), blockstack=(), npush=0), Edge(pc=306, stack=('$phi304.0', '$phi304.1', '$304for_iter.3'), blockstack=(), npush=0)]
2025-05-02 23:00:49,905 - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=2), State(pc_initial=380 nstack_initial=1), State(pc_initial=306 nstack_initial=3)])
2025-05-02 23:00:49,905 - DEBUG - pending: deque([State(pc_initial=380 nstack_initial=1), State(pc_initial=306 nstack_initial=3)])
2025-05-02 23:00:49,905 - DEBUG - stack: ['$phi380.0']
2025-05-02 23:00:49,905 - DEBUG - dispatch pc=380, inst=JUMP_ABSOLUTE(arg=80, lineno=66)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi380.0']
2025-05-02 23:00:49,906 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi380.0',), blockstack=(), npush=0)]
2025-05-02 23:00:49,906 - DEBUG - pending: deque([State(pc_initial=306 nstack_initial=3), State(pc_initial=80 nstack_initial=1)])
2025-05-02 23:00:49,906 - DEBUG - stack: ['$phi306.0', '$phi306.1', '$phi306.2']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=306, inst=STORE_FAST(arg=22, lineno=61)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$phi306.2']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=308, inst=LOAD_FAST(arg=2, lineno=63)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=310, inst=LOAD_FAST(arg=12, lineno=63)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=312, inst=LOAD_FAST(arg=22, lineno=63)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=314, inst=LOAD_FAST(arg=7, lineno=63)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$k312.5']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=316, inst=BINARY_MULTIPLY(arg=None, lineno=63)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$k312.5', '$index_step314.6']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=318, inst=BINARY_ADD(arg=None, lineno=63)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$offset310.4', '$316binary_multiply.7']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=320, inst=BINARY_SUBSCR(arg=None, lineno=63)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$interp_win308.3', '$318binary_add.8']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=322, inst=LOAD_FAST(arg=13, lineno=64)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=324, inst=LOAD_FAST(arg=3, lineno=64)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=326, inst=LOAD_FAST(arg=12, lineno=64)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=328, inst=LOAD_FAST(arg=22, lineno=64)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=330, inst=LOAD_FAST(arg=7, lineno=64)
2025-05-02 23:00:49,906 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$k328.13']
2025-05-02 23:00:49,906 - DEBUG - dispatch pc=332, inst=BINARY_MULTIPLY(arg=None, lineno=64)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$k328.13', '$index_step330.14']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=334, inst=BINARY_ADD(arg=None, lineno=64)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$offset326.12', '$332binary_multiply.15']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=336, inst=BINARY_SUBSCR(arg=None, lineno=64)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$interp_delta324.11', '$334binary_add.16']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=338, inst=BINARY_MULTIPLY(arg=None, lineno=64)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$eta322.10', '$336binary_subscr.17']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=340, inst=BINARY_ADD(arg=None, lineno=63)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$320binary_subscr.9', '$338binary_multiply.18']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=342, inst=STORE_FAST(arg=14, lineno=62)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$340binary_add.19']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=344, inst=LOAD_FAST(arg=6, lineno=66)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=346, inst=LOAD_FAST(arg=18, lineno=66)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=348, inst=DUP_TOP_TWO(arg=None, lineno=66)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=350, inst=BINARY_SUBSCR(arg=None, lineno=66)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$348dup_top_two.22', '$348dup_top_two.23']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=352, inst=LOAD_FAST(arg=14, lineno=66)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=354, inst=LOAD_FAST(arg=0, lineno=66)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=356, inst=LOAD_FAST(arg=9, lineno=66)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=358, inst=LOAD_FAST(arg=22, lineno=66)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$n356.27']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=360, inst=BINARY_ADD(arg=None, lineno=66)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$n356.27', '$k358.28']
2025-05-02 23:00:49,907 - DEBUG - dispatch pc=362, inst=LOAD_CONST(arg=3, lineno=66)
2025-05-02 23:00:49,907 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$360binary_add.29']
2025-05-02 23:00:49,908 - DEBUG - dispatch pc=364, inst=BINARY_ADD(arg=None, lineno=66)
2025-05-02 23:00:49,908 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$360binary_add.29', '$const362.30']
2025-05-02 23:00:49,908 - DEBUG - dispatch pc=366, inst=BINARY_SUBSCR(arg=None, lineno=66)
2025-05-02 23:00:49,908 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$x354.26', '$364binary_add.31']
2025-05-02 23:00:49,908 - DEBUG - dispatch pc=368, inst=BINARY_MULTIPLY(arg=None, lineno=66)
2025-05-02 23:00:49,908 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$weight352.25', '$366binary_subscr.32']
2025-05-02 23:00:49,908 - DEBUG - dispatch pc=370, inst=INPLACE_ADD(arg=None, lineno=66)
2025-05-02 23:00:49,908 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$350binary_subscr.24', '$368binary_multiply.33']
2025-05-02 23:00:49,908 - DEBUG - dispatch pc=372, inst=ROT_THREE(arg=None, lineno=66)
2025-05-02 23:00:49,908 - DEBUG - stack ['$phi306.0', '$phi306.1', '$y344.20', '$t346.21', '$370inplace_add.34']
2025-05-02 23:00:49,908 - DEBUG - dispatch pc=374, inst=STORE_SUBSCR(arg=None, lineno=66)
2025-05-02 23:00:49,908 - DEBUG - stack ['$phi306.0', '$phi306.1', '$370inplace_add.34', '$y344.20', '$t346.21']
2025-05-02 23:00:49,908 - DEBUG - dispatch pc=376, inst=JUMP_ABSOLUTE(arg=304, lineno=66)
2025-05-02 23:00:49,908 - DEBUG - stack ['$phi306.0', '$phi306.1']
2025-05-02 23:00:49,908 - DEBUG - end state. edges=[Edge(pc=304, stack=('$phi306.0', '$phi306.1'), blockstack=(), npush=0)]
2025-05-02 23:00:49,908 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=304 nstack_initial=2)])
2025-05-02 23:00:49,908 - DEBUG - pending: deque([State(pc_initial=304 nstack_initial=2)])
2025-05-02 23:00:49,908 - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-02 23:00:49,908 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=84 nstack_initial=2): {'$phi84.1'},
             State(pc_initial=168 nstack_initial=2): {'$phi168.1'},
             State(pc_initial=170 nstack_initial=3): {'$phi170.2'},
             State(pc_initial=238 nstack_initial=1): set(),
             State(pc_initial=304 nstack_initial=2): {'$phi304.1'},
             State(pc_initial=306 nstack_initial=3): {'$phi306.2'},
             State(pc_initial=380 nstack_initial=1): set(),
             State(pc_initial=382 nstack_initial=0): set()})
2025-05-02 23:00:49,908 - DEBUG - defmap: {'$phi168.1': State(pc_initial=84 nstack_initial=2),
 '$phi170.2': State(pc_initial=168 nstack_initial=2),
 '$phi304.1': State(pc_initial=238 nstack_initial=1),
 '$phi306.2': State(pc_initial=304 nstack_initial=2),
 '$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi84.1': State(pc_initial=80 nstack_initial=1)}
2025-05-02 23:00:49,908 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi170.0',
                            State(pc_initial=170 nstack_initial=3)),
                           ('$phi84.0', State(pc_initial=84 nstack_initial=2))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2)),
                           ('$phi170.1',
                            State(pc_initial=170 nstack_initial=3))},
             '$phi170.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.1': {('$phi168.1',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi304.0': {('$phi238.0',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi306.0',
                            State(pc_initial=306 nstack_initial=3))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi306.1',
                            State(pc_initial=306 nstack_initial=3))},
             '$phi306.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.1': {('$phi304.1',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi380.0',
                           State(pc_initial=380 nstack_initial=1))},
             '$phi84.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 23:00:49,909 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi168.0',
                            State(pc_initial=168 nstack_initial=2)),
                           ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2)),
                           ('$phi168.1',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi170.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi304.0': {('$phi304.0',
                            State(pc_initial=304 nstack_initial=2)),
                           ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1)),
                           ('$phi304.1',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi306.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 23:00:49,909 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 23:00:49,910 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi170.1': {('$166get_iter.35',
                            State(pc_initial=84 nstack_initial=2))},
             '$phi170.2': {('$168for_iter.3',
                            State(pc_initial=168 nstack_initial=2))},
             '$phi238.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi304.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi306.1': {('$302get_iter.28',
                            State(pc_initial=238 nstack_initial=1))},
             '$phi306.2': {('$304for_iter.3',
                            State(pc_initial=304 nstack_initial=2))},
             '$phi380.0': {('$78get_iter.27',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.0': {('$78get_iter.27',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi84.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-05-02 23:00:49,910 - DEBUG - keep phismap: {'$phi168.1': {('$166get_iter.35', State(pc_initial=84 nstack_initial=2))},
 '$phi170.2': {('$168for_iter.3', State(pc_initial=168 nstack_initial=2))},
 '$phi304.1': {('$302get_iter.28', State(pc_initial=238 nstack_initial=1))},
 '$phi306.2': {('$304for_iter.3', State(pc_initial=304 nstack_initial=2))},
 '$phi80.0': {('$78get_iter.27', State(pc_initial=0 nstack_initial=0))},
 '$phi84.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-05-02 23:00:49,910 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.27'},
             State(pc_initial=80 nstack_initial=1): {'$phi84.1': '$80for_iter.2'},
             State(pc_initial=84 nstack_initial=2): {'$phi168.1': '$166get_iter.35'},
             State(pc_initial=168 nstack_initial=2): {'$phi170.2': '$168for_iter.3'},
             State(pc_initial=238 nstack_initial=1): {'$phi304.1': '$302get_iter.28'},
             State(pc_initial=304 nstack_initial=2): {'$phi306.2': '$304for_iter.3'}})
2025-05-02 23:00:49,910 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-02 23:00:49,910 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$scale4.1'}), (6, {'res': '$num_table6.2'}), (8, {'lhs': '$scale4.1', 'rhs': '$num_table6.2', 'res': '$8binary_multiply.3'}), (10, {'func': '$2load_global.0', 'args': ['$8binary_multiply.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4'}), (14, {'res': '$const14.5'}), (16, {'value': '$const14.5'}), (18, {'res': '$const18.6'}), (20, {'value': '$const18.6'}), (22, {'res': '$const22.7'}), (24, {'value': '$const22.7'}), (26, {'res': '$const26.8'}), (28, {'value': '$const26.8'}), (30, {'res': '$const30.9'}), (32, {'value': '$const30.9'}), (34, {'res': '$const34.10'}), (36, {'value': '$const34.10'}), (38, {'res': '$const38.11'}), (40, {'value': '$const38.11'}), (42, {'res': '$interp_win42.12'}), (44, {'item': '$interp_win42.12', 'res': '$44load_attr.13'}), (46, {'res': '$const46.14'}), (48, {'index': '$const46.14', 'target': '$44load_attr.13', 'res': '$48binary_subscr.15'}), (50, {'value': '$48binary_subscr.15'}), (52, {'res': '$x52.16'}), (54, {'item': '$x52.16', 'res': '$54load_attr.17'}), (56, {'res': '$const56.18'}), (58, {'index': '$const56.18', 'target': '$54load_attr.17', 'res': '$58binary_subscr.19'}), (60, {'value': '$58binary_subscr.19'}), (62, {'res': '$t_out62.20'}), (64, {'item': '$t_out62.20', 'res': '$64load_attr.21'}), (66, {'res': '$const66.22'}), (68, {'index': '$const66.22', 'target': '$64load_attr.21', 'res': '$68binary_subscr.23'}), (70, {'value': '$68binary_subscr.23'}), (72, {'res': '$72load_global.24'}), (74, {'res': '$n_out74.25'}), (76, {'func': '$72load_global.24', 'args': ['$n_out74.25'], 'res': '$76call_function.26'}), (78, {'value': '$76call_function.26', 'res': '$78get_iter.27'})), outgoing_phis={'$phi80.0': '$78get_iter.27'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.27',)})
2025-05-02 23:00:49,911 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi84.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={382: (), 84: ('$phi80.0', '$80for_iter.2')})
2025-05-02 23:00:49,911 - DEBUG - block_infos State(pc_initial=84 nstack_initial=2):
AdaptBlockInfo(insts=((84, {'value': '$phi84.1'}), (86, {'res': '$t_out86.2'}), (88, {'res': '$t88.3'}), (90, {'index': '$t88.3', 'target': '$t_out86.2', 'res': '$90binary_subscr.4'}), (92, {'value': '$90binary_subscr.4'}), (94, {'res': '$94load_global.5'}), (96, {'res': '$time_register96.6'}), (98, {'func': '$94load_global.5', 'args': ['$time_register96.6'], 'res': '$98call_function.7'}), (100, {'value': '$98call_function.7'}), (102, {'res': '$scale102.8'}), (104, {'res': '$time_register104.9'}), (106, {'res': '$n106.10'}), (108, {'lhs': '$time_register104.9', 'rhs': '$n106.10', 'res': '$108binary_subtract.11'}), (110, {'lhs': '$scale102.8', 'rhs': '$108binary_subtract.11', 'res': '$110binary_multiply.12'}), (112, {'value': '$110binary_multiply.12'}), (114, {'res': '$frac114.13'}), (116, {'res': '$num_table116.14'}), (118, {'lhs': '$frac114.13', 'rhs': '$num_table116.14', 'res': '$118binary_multiply.15'}), (120, {'value': '$118binary_multiply.15'}), (122, {'res': '$122load_global.16'}), (124, {'res': '$index_frac124.17'}), (126, {'func': '$122load_global.16', 'args': ['$index_frac124.17'], 'res': '$126call_function.18'}), (128, {'value': '$126call_function.18'}), (130, {'res': '$index_frac130.19'}), (132, {'res': '$offset132.20'}), (134, {'lhs': '$index_frac130.19', 'rhs': '$offset132.20', 'res': '$134binary_subtract.21'}), (136, {'value': '$134binary_subtract.21'}), (138, {'res': '$138load_global.22'}), (140, {'res': '$n140.23'}), (142, {'res': '$const142.24'}), (144, {'lhs': '$n140.23', 'rhs': '$const142.24', 'res': '$144binary_add.25'}), (146, {'res': '$nwin146.26'}), (148, {'res': '$offset148.27'}), (150, {'lhs': '$nwin146.26', 'rhs': '$offset148.27', 'res': '$150binary_subtract.28'}), (152, {'res': '$index_step152.29'}), (154, {'lhs': '$150binary_subtract.28', 'rhs': '$index_step152.29', 'res': '$154binary_floor_divide.30'}), (156, {'func': '$138load_global.22', 'args': ['$144binary_add.25', '$154binary_floor_divide.30'], 'res': '$156call_function.31'}), (158, {'value': '$156call_function.31'}), (160, {'res': '$160load_global.32'}), (162, {'res': '$i_max162.33'}), (164, {'func': '$160load_global.32', 'args': ['$i_max162.33'], 'res': '$164call_function.34'}), (166, {'value': '$164call_function.34', 'res': '$166get_iter.35'})), outgoing_phis={'$phi168.1': '$166get_iter.35'}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi84.0', '$166get_iter.35')})
2025-05-02 23:00:49,911 - DEBUG - block_infos State(pc_initial=168 nstack_initial=2):
AdaptBlockInfo(insts=((168, {'iterator': '$phi168.1', 'pair': '$168for_iter.2', 'indval': '$168for_iter.3', 'pred': '$168for_iter.4'}),), outgoing_phis={'$phi170.2': '$168for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={238: ('$phi168.0',), 170: ('$phi168.0', '$phi168.1', '$168for_iter.3')})
2025-05-02 23:00:49,911 - DEBUG - block_infos State(pc_initial=170 nstack_initial=3):
AdaptBlockInfo(insts=((170, {'value': '$phi170.2'}), (172, {'res': '$interp_win172.3'}), (174, {'res': '$offset174.4'}), (176, {'res': '$i176.5'}), (178, {'res': '$index_step178.6'}), (180, {'lhs': '$i176.5', 'rhs': '$index_step178.6', 'res': '$180binary_multiply.7'}), (182, {'lhs': '$offset174.4', 'rhs': '$180binary_multiply.7', 'res': '$182binary_add.8'}), (184, {'index': '$182binary_add.8', 'target': '$interp_win172.3', 'res': '$184binary_subscr.9'}), (186, {'res': '$eta186.10'}), (188, {'res': '$interp_delta188.11'}), (190, {'res': '$offset190.12'}), (192, {'res': '$i192.13'}), (194, {'res': '$index_step194.14'}), (196, {'lhs': '$i192.13', 'rhs': '$index_step194.14', 'res': '$196binary_multiply.15'}), (198, {'lhs': '$offset190.12', 'rhs': '$196binary_multiply.15', 'res': '$198binary_add.16'}), (200, {'index': '$198binary_add.16', 'target': '$interp_delta188.11', 'res': '$200binary_subscr.17'}), (202, {'lhs': '$eta186.10', 'rhs': '$200binary_subscr.17', 'res': '$202binary_multiply.18'}), (204, {'lhs': '$184binary_subscr.9', 'rhs': '$202binary_multiply.18', 'res': '$204binary_add.19'}), (206, {'value': '$204binary_add.19'}), (208, {'res': '$y208.20'}), (210, {'res': '$t210.21'}), (212, {'orig': ['$y208.20', '$t210.21'], 'duped': ['$212dup_top_two.22', '$212dup_top_two.23']}), (214, {'index': '$212dup_top_two.23', 'target': '$212dup_top_two.22', 'res': '$214binary_subscr.24'}), (216, {'res': '$weight216.25'}), (218, {'res': '$x218.26'}), (220, {'res': '$n220.27'}), (222, {'res': '$i222.28'}), (224, {'lhs': '$n220.27', 'rhs': '$i222.28', 'res': '$224binary_subtract.29'}), (226, {'index': '$224binary_subtract.29', 'target': '$x218.26', 'res': '$226binary_subscr.30'}), (228, {'lhs': '$weight216.25', 'rhs': '$226binary_subscr.30', 'res': '$228binary_multiply.31'}), (230, {'lhs': '$214binary_subscr.24', 'rhs': '$228binary_multiply.31', 'res': '$230inplace_add.32'}), (234, {'target': '$y208.20', 'index': '$t210.21', 'value': '$230inplace_add.32'}), (236, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi170.0', '$phi170.1')})
2025-05-02 23:00:49,911 - DEBUG - block_infos State(pc_initial=238 nstack_initial=1):
AdaptBlockInfo(insts=((238, {'res': '$scale238.1'}), (240, {'res': '$frac240.2'}), (242, {'lhs': '$scale238.1', 'rhs': '$frac240.2', 'res': '$242binary_subtract.3'}), (244, {'value': '$242binary_subtract.3'}), (246, {'res': '$frac246.4'}), (248, {'res': '$num_table248.5'}), (250, {'lhs': '$frac246.4', 'rhs': '$num_table248.5', 'res': '$250binary_multiply.6'}), (252, {'value': '$250binary_multiply.6'}), (254, {'res': '$254load_global.7'}), (256, {'res': '$index_frac256.8'}), (258, {'func': '$254load_global.7', 'args': ['$index_frac256.8'], 'res': '$258call_function.9'}), (260, {'value': '$258call_function.9'}), (262, {'res': '$index_frac262.10'}), (264, {'res': '$offset264.11'}), (266, {'lhs': '$index_frac262.10', 'rhs': '$offset264.11', 'res': '$266binary_subtract.12'}), (268, {'value': '$266binary_subtract.12'}), (270, {'res': '$270load_global.13'}), (272, {'res': '$n_orig272.14'}), (274, {'res': '$n274.15'}), (276, {'lhs': '$n_orig272.14', 'rhs': '$n274.15', 'res': '$276binary_subtract.16'}), (278, {'res': '$const278.17'}), (280, {'lhs': '$276binary_subtract.16', 'rhs': '$const278.17', 'res': '$280binary_subtract.18'}), (282, {'res': '$nwin282.19'}), (284, {'res': '$offset284.20'}), (286, {'lhs': '$nwin282.19', 'rhs': '$offset284.20', 'res': '$286binary_subtract.21'}), (288, {'res': '$index_step288.22'}), (290, {'lhs': '$286binary_subtract.21', 'rhs': '$index_step288.22', 'res': '$290binary_floor_divide.23'}), (292, {'func': '$270load_global.13', 'args': ['$280binary_subtract.18', '$290binary_floor_divide.23'], 'res': '$292call_function.24'}), (294, {'value': '$292call_function.24'}), (296, {'res': '$296load_global.25'}), (298, {'res': '$k_max298.26'}), (300, {'func': '$296load_global.25', 'args': ['$k_max298.26'], 'res': '$300call_function.27'}), (302, {'value': '$300call_function.27', 'res': '$302get_iter.28'})), outgoing_phis={'$phi304.1': '$302get_iter.28'}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: ('$phi238.0', '$302get_iter.28')})
2025-05-02 23:00:49,911 - DEBUG - block_infos State(pc_initial=304 nstack_initial=2):
AdaptBlockInfo(insts=((304, {'iterator': '$phi304.1', 'pair': '$304for_iter.2', 'indval': '$304for_iter.3', 'pred': '$304for_iter.4'}),), outgoing_phis={'$phi306.2': '$304for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={380: ('$phi304.0',), 306: ('$phi304.0', '$phi304.1', '$304for_iter.3')})
2025-05-02 23:00:49,911 - DEBUG - block_infos State(pc_initial=306 nstack_initial=3):
AdaptBlockInfo(insts=((306, {'value': '$phi306.2'}), (308, {'res': '$interp_win308.3'}), (310, {'res': '$offset310.4'}), (312, {'res': '$k312.5'}), (314, {'res': '$index_step314.6'}), (316, {'lhs': '$k312.5', 'rhs': '$index_step314.6', 'res': '$316binary_multiply.7'}), (318, {'lhs': '$offset310.4', 'rhs': '$316binary_multiply.7', 'res': '$318binary_add.8'}), (320, {'index': '$318binary_add.8', 'target': '$interp_win308.3', 'res': '$320binary_subscr.9'}), (322, {'res': '$eta322.10'}), (324, {'res': '$interp_delta324.11'}), (326, {'res': '$offset326.12'}), (328, {'res': '$k328.13'}), (330, {'res': '$index_step330.14'}), (332, {'lhs': '$k328.13', 'rhs': '$index_step330.14', 'res': '$332binary_multiply.15'}), (334, {'lhs': '$offset326.12', 'rhs': '$332binary_multiply.15', 'res': '$334binary_add.16'}), (336, {'index': '$334binary_add.16', 'target': '$interp_delta324.11', 'res': '$336binary_subscr.17'}), (338, {'lhs': '$eta322.10', 'rhs': '$336binary_subscr.17', 'res': '$338binary_multiply.18'}), (340, {'lhs': '$320binary_subscr.9', 'rhs': '$338binary_multiply.18', 'res': '$340binary_add.19'}), (342, {'value': '$340binary_add.19'}), (344, {'res': '$y344.20'}), (346, {'res': '$t346.21'}), (348, {'orig': ['$y344.20', '$t346.21'], 'duped': ['$348dup_top_two.22', '$348dup_top_two.23']}), (350, {'index': '$348dup_top_two.23', 'target': '$348dup_top_two.22', 'res': '$350binary_subscr.24'}), (352, {'res': '$weight352.25'}), (354, {'res': '$x354.26'}), (356, {'res': '$n356.27'}), (358, {'res': '$k358.28'}), (360, {'lhs': '$n356.27', 'rhs': '$k358.28', 'res': '$360binary_add.29'}), (362, {'res': '$const362.30'}), (364, {'lhs': '$360binary_add.29', 'rhs': '$const362.30', 'res': '$364binary_add.31'}), (366, {'index': '$364binary_add.31', 'target': '$x354.26', 'res': '$366binary_subscr.32'}), (368, {'lhs': '$weight352.25', 'rhs': '$366binary_subscr.32', 'res': '$368binary_multiply.33'}), (370, {'lhs': '$350binary_subscr.24', 'rhs': '$368binary_multiply.33', 'res': '$370inplace_add.34'}), (374, {'target': '$y344.20', 'index': '$t346.21', 'value': '$370inplace_add.34'}), (376, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={304: ('$phi306.0', '$phi306.1')})
2025-05-02 23:00:49,911 - DEBUG - block_infos State(pc_initial=380 nstack_initial=1):
AdaptBlockInfo(insts=((380, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi380.0',)})
2025-05-02 23:00:49,911 - DEBUG - block_infos State(pc_initial=382 nstack_initial=0):
AdaptBlockInfo(insts=((382, {'res': '$const382.0'}), (384, {'retval': '$const382.0', 'castval': '$384return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-02 23:00:49,914 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    t_out = arg(1, name=t_out)               ['t_out']
    interp_win = arg(2, name=interp_win)     ['interp_win']
    interp_delta = arg(3, name=interp_delta) ['interp_delta']
    num_table = arg(4, name=num_table)       ['num_table']
    scale = arg(5, name=scale)               ['scale']
    y = arg(6, name=y)                       ['y']
    $2load_global.0 = global(int: <class 'int'>) ['$2load_global.0']
    $8binary_multiply.3 = scale * num_table  ['$8binary_multiply.3', 'num_table', 'scale']
    index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8binary_multiply.3', 'index_step']
    time_register = const(float, 0.0)        ['time_register']
    n = const(int, 0)                        ['n']
    frac = const(float, 0.0)                 ['frac']
    index_frac = const(float, 0.0)           ['index_frac']
    offset = const(int, 0)                   ['offset']
    eta = const(float, 0.0)                  ['eta']
    weight = const(float, 0.0)               ['weight']
    $44load_attr.13 = getattr(value=interp_win, attr=shape) ['$44load_attr.13', 'interp_win']
    $const46.14 = const(int, 0)              ['$const46.14']
    nwin = getitem(value=$44load_attr.13, index=$const46.14, fn=<built-in function getitem>) ['$44load_attr.13', '$const46.14', 'nwin']
    $54load_attr.17 = getattr(value=x, attr=shape) ['$54load_attr.17', 'x']
    $const56.18 = const(int, 0)              ['$const56.18']
    n_orig = getitem(value=$54load_attr.17, index=$const56.18, fn=<built-in function getitem>) ['$54load_attr.17', '$const56.18', 'n_orig']
    $64load_attr.21 = getattr(value=t_out, attr=shape) ['$64load_attr.21', 't_out']
    $const66.22 = const(int, 0)              ['$const66.22']
    n_out = getitem(value=$64load_attr.21, index=$const66.22, fn=<built-in function getitem>) ['$64load_attr.21', '$const66.22', 'n_out']
    $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>) ['$72load_global.24']
    $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.24', '$76call_function.26', 'n_out']
    $78get_iter.27 = getiter(value=$76call_function.26) ['$76call_function.26', '$78get_iter.27']
    $phi80.0 = $78get_iter.27                ['$78get_iter.27', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi84.1 = $80for_iter.2                 ['$80for_iter.2', '$phi84.1']
    branch $80for_iter.3, 84, 382            ['$80for_iter.3']
label 84:
    t = $phi84.1                             ['$phi84.1', 't']
    time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>) ['t', 't_out', 'time_register']
    $94load_global.5 = global(int: <class 'int'>) ['$94load_global.5']
    n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None) ['$94load_global.5', 'n', 'time_register']
    $108binary_subtract.11 = time_register - n ['$108binary_subtract.11', 'n', 'time_register']
    frac = scale * $108binary_subtract.11    ['$108binary_subtract.11', 'frac', 'scale']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $122load_global.16 = global(int: <class 'int'>) ['$122load_global.16']
    offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.16', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $138load_global.22 = global(min: <built-in function min>) ['$138load_global.22']
    $const142.24 = const(int, 1)             ['$const142.24']
    $144binary_add.25 = n + $const142.24     ['$144binary_add.25', '$const142.24', 'n']
    $150binary_subtract.28 = nwin - offset   ['$150binary_subtract.28', 'nwin', 'offset']
    $154binary_floor_divide.30 = $150binary_subtract.28 // index_step ['$150binary_subtract.28', '$154binary_floor_divide.30', 'index_step']
    i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None) ['$138load_global.22', '$144binary_add.25', '$154binary_floor_divide.30', 'i_max']
    $160load_global.32 = global(range: <class 'range'>) ['$160load_global.32']
    $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None) ['$160load_global.32', '$164call_function.34', 'i_max']
    $166get_iter.35 = getiter(value=$164call_function.34) ['$164call_function.34', '$166get_iter.35']
    $phi168.1 = $166get_iter.35              ['$166get_iter.35', '$phi168.1']
    jump 168                                 []
label 168:
    $168for_iter.2 = iternext(value=$phi168.1) ['$168for_iter.2', '$phi168.1']
    $168for_iter.3 = pair_first(value=$168for_iter.2) ['$168for_iter.2', '$168for_iter.3']
    $168for_iter.4 = pair_second(value=$168for_iter.2) ['$168for_iter.2', '$168for_iter.4']
    $phi170.2 = $168for_iter.3               ['$168for_iter.3', '$phi170.2']
    branch $168for_iter.4, 170, 238          ['$168for_iter.4']
label 170:
    i = $phi170.2                            ['$phi170.2', 'i']
    $180binary_multiply.7 = i * index_step   ['$180binary_multiply.7', 'i', 'index_step']
    $182binary_add.8 = offset + $180binary_multiply.7 ['$180binary_multiply.7', '$182binary_add.8', 'offset']
    $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>) ['$182binary_add.8', '$184binary_subscr.9', 'interp_win']
    $196binary_multiply.15 = i * index_step  ['$196binary_multiply.15', 'i', 'index_step']
    $198binary_add.16 = offset + $196binary_multiply.15 ['$196binary_multiply.15', '$198binary_add.16', 'offset']
    $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>) ['$198binary_add.16', '$200binary_subscr.17', 'interp_delta']
    $202binary_multiply.18 = eta * $200binary_subscr.17 ['$200binary_subscr.17', '$202binary_multiply.18', 'eta']
    weight = $184binary_subscr.9 + $202binary_multiply.18 ['$184binary_subscr.9', '$202binary_multiply.18', 'weight']
    $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>) ['$214binary_subscr.24', 't', 'y']
    $224binary_subtract.29 = n - i           ['$224binary_subtract.29', 'i', 'n']
    $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>) ['$224binary_subtract.29', '$226binary_subscr.30', 'x']
    $228binary_multiply.31 = weight * $226binary_subscr.30 ['$226binary_subscr.30', '$228binary_multiply.31', 'weight']
    $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined) ['$214binary_subscr.24', '$228binary_multiply.31', '$230inplace_add.32']
    y[t] = $230inplace_add.32                ['$230inplace_add.32', 't', 'y']
    jump 168                                 []
label 238:
    $242binary_subtract.3 = scale - frac     ['$242binary_subtract.3', 'frac', 'scale']
    frac = $242binary_subtract.3             ['$242binary_subtract.3', 'frac']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $254load_global.7 = global(int: <class 'int'>) ['$254load_global.7']
    offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None) ['$254load_global.7', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $270load_global.13 = global(min: <built-in function min>) ['$270load_global.13']
    $276binary_subtract.16 = n_orig - n      ['$276binary_subtract.16', 'n', 'n_orig']
    $const278.17 = const(int, 1)             ['$const278.17']
    $280binary_subtract.18 = $276binary_subtract.16 - $const278.17 ['$276binary_subtract.16', '$280binary_subtract.18', '$const278.17']
    $286binary_subtract.21 = nwin - offset   ['$286binary_subtract.21', 'nwin', 'offset']
    $290binary_floor_divide.23 = $286binary_subtract.21 // index_step ['$286binary_subtract.21', '$290binary_floor_divide.23', 'index_step']
    k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None) ['$270load_global.13', '$280binary_subtract.18', '$290binary_floor_divide.23', 'k_max']
    $296load_global.25 = global(range: <class 'range'>) ['$296load_global.25']
    $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None) ['$296load_global.25', '$300call_function.27', 'k_max']
    $302get_iter.28 = getiter(value=$300call_function.27) ['$300call_function.27', '$302get_iter.28']
    $phi304.1 = $302get_iter.28              ['$302get_iter.28', '$phi304.1']
    jump 304                                 []
label 304:
    $304for_iter.2 = iternext(value=$phi304.1) ['$304for_iter.2', '$phi304.1']
    $304for_iter.3 = pair_first(value=$304for_iter.2) ['$304for_iter.2', '$304for_iter.3']
    $304for_iter.4 = pair_second(value=$304for_iter.2) ['$304for_iter.2', '$304for_iter.4']
    $phi306.2 = $304for_iter.3               ['$304for_iter.3', '$phi306.2']
    branch $304for_iter.4, 306, 380          ['$304for_iter.4']
label 306:
    k = $phi306.2                            ['$phi306.2', 'k']
    $316binary_multiply.7 = k * index_step   ['$316binary_multiply.7', 'index_step', 'k']
    $318binary_add.8 = offset + $316binary_multiply.7 ['$316binary_multiply.7', '$318binary_add.8', 'offset']
    $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>) ['$318binary_add.8', '$320binary_subscr.9', 'interp_win']
    $332binary_multiply.15 = k * index_step  ['$332binary_multiply.15', 'index_step', 'k']
    $334binary_add.16 = offset + $332binary_multiply.15 ['$332binary_multiply.15', '$334binary_add.16', 'offset']
    $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>) ['$334binary_add.16', '$336binary_subscr.17', 'interp_delta']
    $338binary_multiply.18 = eta * $336binary_subscr.17 ['$336binary_subscr.17', '$338binary_multiply.18', 'eta']
    weight = $320binary_subscr.9 + $338binary_multiply.18 ['$320binary_subscr.9', '$338binary_multiply.18', 'weight']
    $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>) ['$350binary_subscr.24', 't', 'y']
    $360binary_add.29 = n + k                ['$360binary_add.29', 'k', 'n']
    $const362.30 = const(int, 1)             ['$const362.30']
    $364binary_add.31 = $360binary_add.29 + $const362.30 ['$360binary_add.29', '$364binary_add.31', '$const362.30']
    $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>) ['$364binary_add.31', '$366binary_subscr.32', 'x']
    $368binary_multiply.33 = weight * $366binary_subscr.32 ['$366binary_subscr.32', '$368binary_multiply.33', 'weight']
    $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined) ['$350binary_subscr.24', '$368binary_multiply.33', '$370inplace_add.34']
    y[t] = $370inplace_add.34                ['$370inplace_add.34', 't', 'y']
    jump 304                                 []
label 380:
    jump 80                                  []
label 382:
    $const382.0 = const(NoneType, None)      ['$const382.0']
    $384return_value.1 = cast(value=$const382.0) ['$384return_value.1', '$const382.0']
    return $384return_value.1                ['$384return_value.1']

2025-05-02 23:00:49,924 - DEBUG - ==== SSA block analysis pass on 0
2025-05-02 23:00:49,924 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2DE14F0>
2025-05-02 23:00:49,924 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,924 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,924 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,925 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,925 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,925 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,925 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,925 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,925 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,925 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,925 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,925 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,925 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,925 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,925 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,925 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,925 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,925 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,925 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,925 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,926 - DEBUG - ==== SSA block analysis pass on 80
2025-05-02 23:00:49,926 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2DE14F0>
2025-05-02 23:00:49,926 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,926 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,926 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,926 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,926 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,926 - DEBUG - ==== SSA block analysis pass on 84
2025-05-02 23:00:49,926 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2DE14F0>
2025-05-02 23:00:49,926 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,926 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,926 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,926 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,926 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 23:00:49,926 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,926 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,926 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,926 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,926 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 23:00:49,926 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,926 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,926 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,926 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 23:00:49,926 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,926 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,926 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,926 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,926 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,927 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,927 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,927 - DEBUG - ==== SSA block analysis pass on 168
2025-05-02 23:00:49,927 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2DE14F0>
2025-05-02 23:00:49,927 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,927 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,927 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,927 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,927 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,927 - DEBUG - ==== SSA block analysis pass on 170
2025-05-02 23:00:49,927 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2DE14F0>
2025-05-02 23:00:49,927 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,927 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,927 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 23:00:49,927 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,927 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,927 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 23:00:49,927 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,927 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 23:00:49,927 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,927 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,927 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,927 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,927 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 23:00:49,927 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,927 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,927 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,927 - DEBUG - ==== SSA block analysis pass on 238
2025-05-02 23:00:49,927 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2DE14F0>
2025-05-02 23:00:49,927 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,927 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,927 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,927 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,928 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,928 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 23:00:49,928 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,928 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,928 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,928 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,928 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 23:00:49,928 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,928 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,928 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,928 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,928 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,928 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,928 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,928 - DEBUG - ==== SSA block analysis pass on 304
2025-05-02 23:00:49,928 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2DE14F0>
2025-05-02 23:00:49,928 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,928 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,928 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,928 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,928 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,928 - DEBUG - ==== SSA block analysis pass on 306
2025-05-02 23:00:49,928 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2DE14F0>
2025-05-02 23:00:49,928 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,928 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,929 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 23:00:49,929 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,929 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,929 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 23:00:49,929 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,929 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 23:00:49,929 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,929 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,929 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,929 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,929 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,929 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,929 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 23:00:49,929 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,929 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,929 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,929 - DEBUG - ==== SSA block analysis pass on 380
2025-05-02 23:00:49,929 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2DE14F0>
2025-05-02 23:00:49,929 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,929 - DEBUG - ==== SSA block analysis pass on 382
2025-05-02 23:00:49,929 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001A3D2DE14F0>
2025-05-02 23:00:49,929 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,929 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,929 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,930 - DEBUG - defs defaultdict(<class 'list'>,
            {'$108binary_subtract.11': [<numba.core.ir.Assign object at 0x000001A3D2DCC4F0>],
             '$122load_global.16': [<numba.core.ir.Assign object at 0x000001A3D2DCCD00>],
             '$138load_global.22': [<numba.core.ir.Assign object at 0x000001A3D2DCF6A0>],
             '$144binary_add.25': [<numba.core.ir.Assign object at 0x000001A3D2DCFAF0>],
             '$150binary_subtract.28': [<numba.core.ir.Assign object at 0x000001A3D2DCFEB0>],
             '$154binary_floor_divide.30': [<numba.core.ir.Assign object at 0x000001A3D2DD2190>],
             '$160load_global.32': [<numba.core.ir.Assign object at 0x000001A3D2DD2580>],
             '$164call_function.34': [<numba.core.ir.Assign object at 0x000001A3D2DD2880>],
             '$166get_iter.35': [<numba.core.ir.Assign object at 0x000001A3D2DD29A0>],
             '$168for_iter.2': [<numba.core.ir.Assign object at 0x000001A3D2DCC2B0>],
             '$168for_iter.3': [<numba.core.ir.Assign object at 0x000001A3D2DCC6D0>],
             '$168for_iter.4': [<numba.core.ir.Assign object at 0x000001A3D2DCCC10>],
             '$180binary_multiply.7': [<numba.core.ir.Assign object at 0x000001A3D2DD2D90>],
             '$182binary_add.8': [<numba.core.ir.Assign object at 0x000001A3D2DD2F10>],
             '$184binary_subscr.9': [<numba.core.ir.Assign object at 0x000001A3D2DD50D0>],
             '$196binary_multiply.15': [<numba.core.ir.Assign object at 0x000001A3D2DD57F0>],
             '$198binary_add.16': [<numba.core.ir.Assign object at 0x000001A3D2DD5970>],
             '$200binary_subscr.17': [<numba.core.ir.Assign object at 0x000001A3D2DD5AF0>],
             '$202binary_multiply.18': [<numba.core.ir.Assign object at 0x000001A3D2DD5C70>],
             '$214binary_subscr.24': [<numba.core.ir.Assign object at 0x000001A3D2DD7490>],
             '$224binary_subtract.29': [<numba.core.ir.Assign object at 0x000001A3D2DD7A90>],
             '$226binary_subscr.30': [<numba.core.ir.Assign object at 0x000001A3D2DD7C10>],
             '$228binary_multiply.31': [<numba.core.ir.Assign object at 0x000001A3D2DD7D90>],
             '$230inplace_add.32': [<numba.core.ir.Assign object at 0x000001A3D2DD7F10>],
             '$242binary_subtract.3': [<numba.core.ir.Assign object at 0x000001A3D2DD7070>],
             '$254load_global.7': [<numba.core.ir.Assign object at 0x000001A3D2DD94C0>],
             '$270load_global.13': [<numba.core.ir.Assign object at 0x000001A3D2DD9E20>],
             '$276binary_subtract.16': [<numba.core.ir.Assign object at 0x000001A3D2DDB250>],
             '$280binary_subtract.18': [<numba.core.ir.Assign object at 0x000001A3D2DDB550>],
             '$286binary_subtract.21': [<numba.core.ir.Assign object at 0x000001A3D2DDB910>],
             '$290binary_floor_divide.23': [<numba.core.ir.Assign object at 0x000001A3D2DDBBB0>],
             '$296load_global.25': [<numba.core.ir.Assign object at 0x000001A3D2DDBFA0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000001A3D2DC10A0>],
             '$300call_function.27': [<numba.core.ir.Assign object at 0x000001A3D2DDD2E0>],
             '$302get_iter.28': [<numba.core.ir.Assign object at 0x000001A3D2DDD400>],
             '$304for_iter.2': [<numba.core.ir.Assign object at 0x000001A3D2DD9700>],
             '$304for_iter.3': [<numba.core.ir.Assign object at 0x000001A3D2DD9D30>],
             '$304for_iter.4': [<numba.core.ir.Assign object at 0x000001A3D2DDB130>],
             '$316binary_multiply.7': [<numba.core.ir.Assign object at 0x000001A3D2DDDB50>],
             '$318binary_add.8': [<numba.core.ir.Assign object at 0x000001A3D2DDDCD0>],
             '$320binary_subscr.9': [<numba.core.ir.Assign object at 0x000001A3D2DDDE50>],
             '$332binary_multiply.15': [<numba.core.ir.Assign object at 0x000001A3D2DDF5B0>],
             '$334binary_add.16': [<numba.core.ir.Assign object at 0x000001A3D2DDF730>],
             '$336binary_subscr.17': [<numba.core.ir.Assign object at 0x000001A3D2DDF8B0>],
             '$338binary_multiply.18': [<numba.core.ir.Assign object at 0x000001A3D2DDFA30>],
             '$350binary_subscr.24': [<numba.core.ir.Assign object at 0x000001A3D2DE1250>],
             '$360binary_add.29': [<numba.core.ir.Assign object at 0x000001A3D2DE1850>],
             '$364binary_add.31': [<numba.core.ir.Assign object at 0x000001A3D2DE1B50>],
             '$366binary_subscr.32': [<numba.core.ir.Assign object at 0x000001A3D2DE1CD0>],
             '$368binary_multiply.33': [<numba.core.ir.Assign object at 0x000001A3D2DE1E50>],
             '$370inplace_add.34': [<numba.core.ir.Assign object at 0x000001A3D2DE1FD0>],
             '$384return_value.1': [<numba.core.ir.Assign object at 0x000001A3D2DE1040>],
             '$44load_attr.13': [<numba.core.ir.Assign object at 0x000001A3D2DC4C40>],
             '$54load_attr.17': [<numba.core.ir.Assign object at 0x000001A3D2DC7340>],
             '$64load_attr.21': [<numba.core.ir.Assign object at 0x000001A3D2DC7A00>],
             '$72load_global.24': [<numba.core.ir.Assign object at 0x000001A3D2DC7FA0>],
             '$76call_function.26': [<numba.core.ir.Assign object at 0x000001A3D2DC92E0>],
             '$78get_iter.27': [<numba.core.ir.Assign object at 0x000001A3D2DC9400>],
             '$80for_iter.1': [<numba.core.ir.Assign object at 0x000001A3D2DC4A30>],
             '$80for_iter.2': [<numba.core.ir.Assign object at 0x000001A3D2DC7250>],
             '$80for_iter.3': [<numba.core.ir.Assign object at 0x000001A3D2DC7EB0>],
             '$8binary_multiply.3': [<numba.core.ir.Assign object at 0x000001A3D2DC1490>],
             '$94load_global.5': [<numba.core.ir.Assign object at 0x000001A3D2DC9C40>],
             '$const142.24': [<numba.core.ir.Assign object at 0x000001A3D2DCF940>],
             '$const278.17': [<numba.core.ir.Assign object at 0x000001A3D2DDB3A0>],
             '$const362.30': [<numba.core.ir.Assign object at 0x000001A3D2DE19A0>],
             '$const382.0': [<numba.core.ir.Assign object at 0x000001A3D2DDFC70>],
             '$const46.14': [<numba.core.ir.Assign object at 0x000001A3D2DC4DC0>],
             '$const56.18': [<numba.core.ir.Assign object at 0x000001A3D2DC74C0>],
             '$const66.22': [<numba.core.ir.Assign object at 0x000001A3D2DC7B80>],
             '$phi168.1': [<numba.core.ir.Assign object at 0x000001A3D2DC97F0>],
             '$phi170.2': [<numba.core.ir.Assign object at 0x000001A3D2DCC070>],
             '$phi304.1': [<numba.core.ir.Assign object at 0x000001A3D2DD5370>],
             '$phi306.2': [<numba.core.ir.Assign object at 0x000001A3D2DD9670>],
             '$phi80.0': [<numba.core.ir.Assign object at 0x000001A3D2DC1250>],
             '$phi84.1': [<numba.core.ir.Assign object at 0x000001A3D2DC44F0>],
             'eta': [<numba.core.ir.Assign object at 0x000001A3D2DC45E0>,
                     <numba.core.ir.Assign object at 0x000001A3D2DCF490>,
                     <numba.core.ir.Assign object at 0x000001A3D2DD9C10>],
             'frac': [<numba.core.ir.Assign object at 0x000001A3D2DC1DC0>,
                      <numba.core.ir.Assign object at 0x000001A3D2DCC670>,
                      <numba.core.ir.Assign object at 0x000001A3D2DD7310>],
             'i': [<numba.core.ir.Assign object at 0x000001A3D2DCF3D0>],
             'i_max': [<numba.core.ir.Assign object at 0x000001A3D2DD2340>],
             'index_frac': [<numba.core.ir.Assign object at 0x000001A3D2DC40A0>,
                            <numba.core.ir.Assign object at 0x000001A3D2DCCAF0>,
                            <numba.core.ir.Assign object at 0x000001A3D2DD92B0>],
             'index_step': [<numba.core.ir.Assign object at 0x000001A3D2DC1640>],
             'interp_delta': [<numba.core.ir.Assign object at 0x000001A3D2DA31C0>],
             'interp_win': [<numba.core.ir.Assign object at 0x000001A3D2DA3280>],
             'k': [<numba.core.ir.Assign object at 0x000001A3D2DDD520>],
             'k_max': [<numba.core.ir.Assign object at 0x000001A3D2DDBD60>],
             'n': [<numba.core.ir.Assign object at 0x000001A3D2DC1B20>,
                   <numba.core.ir.Assign object at 0x000001A3D2DC9F40>],
             'n_orig': [<numba.core.ir.Assign object at 0x000001A3D2DEDC10>],
             'n_out': [<numba.core.ir.Assign object at 0x000001A3D2DEDCD0>],
             'num_table': [<numba.core.ir.Assign object at 0x000001A3D2DA34C0>],
             'nwin': [<numba.core.ir.Assign object at 0x000001A3D2DED070>],
             'offset': [<numba.core.ir.Assign object at 0x000001A3D2DC4340>,
                        <numba.core.ir.Assign object at 0x000001A3D2DCF040>,
                        <numba.core.ir.Assign object at 0x000001A3D2DD97C0>],
             'scale': [<numba.core.ir.Assign object at 0x000001A3D2DA3DC0>],
             't': [<numba.core.ir.Assign object at 0x000001A3D2DC9640>],
             't_out': [<numba.core.ir.Assign object at 0x000001A3D2DA3700>],
             'time_register': [<numba.core.ir.Assign object at 0x000001A3D2DC1880>,
                               <numba.core.ir.Assign object at 0x000001A3D2DC9A30>],
             'weight': [<numba.core.ir.Assign object at 0x000001A3D2DC4880>,
                        <numba.core.ir.Assign object at 0x000001A3D2DD5DF0>,
                        <numba.core.ir.Assign object at 0x000001A3D2DDFBB0>],
             'x': [<numba.core.ir.Assign object at 0x000001A3D2DA3640>],
             'y': [<numba.core.ir.Assign object at 0x000001A3D2DA3EE0>]})
2025-05-02 23:00:49,930 - DEBUG - SSA violators {'eta', 'weight', 'offset', 'time_register', 'index_frac', 'frac', 'n'}
2025-05-02 23:00:49,930 - DEBUG - Fix SSA violator on var eta
2025-05-02 23:00:49,930 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,930 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,930 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,930 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,930 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,930 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,930 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,930 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,930 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,931 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,931 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,931 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,931 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,931 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,931 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,931 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,931 - DEBUG - first assign: eta
2025-05-02 23:00:49,931 - DEBUG - replaced with: eta = const(float, 0.0)
2025-05-02 23:00:49,931 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,931 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,931 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,931 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,931 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,931 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,931 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,931 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,932 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,932 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,932 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,932 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,932 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,932 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,932 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,932 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,932 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,932 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,932 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,932 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 23:00:49,932 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,932 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,932 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,932 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,932 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 23:00:49,932 - DEBUG - replaced with: eta.1 = index_frac - offset
2025-05-02 23:00:49,932 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,932 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,932 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,932 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 23:00:49,932 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,932 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,932 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,932 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,933 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,933 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,933 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,933 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,933 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,933 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,933 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,933 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,933 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,933 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,933 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,933 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,933 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,933 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,933 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 23:00:49,933 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,933 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,933 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 23:00:49,933 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,933 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 23:00:49,933 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,933 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,933 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,933 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,933 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 23:00:49,933 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,933 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,933 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,933 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,933 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,933 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,933 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,933 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,933 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,933 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,933 - DEBUG - on stmt: eta = index_frac - offset
2025-05-02 23:00:49,933 - DEBUG - replaced with: eta.2 = index_frac - offset
2025-05-02 23:00:49,934 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,934 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,934 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,934 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,934 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 23:00:49,934 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,934 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,934 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,934 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,934 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,934 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,934 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,934 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,934 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,934 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,934 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,934 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,934 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,934 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,934 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,934 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,934 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,934 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,934 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 23:00:49,934 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,934 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,934 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 23:00:49,935 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,935 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 23:00:49,935 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,935 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,935 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,935 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,935 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,935 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,935 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 23:00:49,935 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,935 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,935 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,935 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,935 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,935 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,935 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,935 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,935 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,935 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,935 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,935 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A3D2DED400>],
             84: [<numba.core.ir.Assign object at 0x000001A3D2DEDEB0>],
             238: [<numba.core.ir.Assign object at 0x000001A3D2DED7C0>]})
2025-05-02 23:00:49,935 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,935 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,935 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,935 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,935 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,936 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,936 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,936 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,936 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,936 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,936 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,936 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,936 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,936 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,936 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,936 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,936 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,936 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,936 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,936 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,936 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,937 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,937 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,937 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,937 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,937 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,937 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,937 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,937 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,937 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,937 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,937 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,937 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,937 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,937 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,937 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,937 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 23:00:49,937 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,937 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,937 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,937 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,937 - DEBUG - on stmt: eta.1 = index_frac - offset
2025-05-02 23:00:49,937 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,937 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,937 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,937 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 23:00:49,938 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,938 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,938 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,938 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,938 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,938 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,938 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,938 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,938 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,938 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,938 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,938 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,938 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,938 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,938 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,938 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,938 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,938 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,938 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 23:00:49,938 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,938 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,938 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 23:00:49,938 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,938 - DEBUG - on stmt: $202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 23:00:49,938 - DEBUG - find_def var='eta' stmt=$202binary_multiply.18 = eta * $200binary_subscr.17
2025-05-02 23:00:49,939 - DEBUG - find_def_from_top label 170
2025-05-02 23:00:49,939 - DEBUG - idom 168 from label 170
2025-05-02 23:00:49,939 - DEBUG - find_def_from_bottom label 168
2025-05-02 23:00:49,939 - DEBUG - find_def_from_top label 168
2025-05-02 23:00:49,939 - DEBUG - idom 84 from label 168
2025-05-02 23:00:49,939 - DEBUG - find_def_from_bottom label 84
2025-05-02 23:00:49,939 - DEBUG - replaced with: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,939 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,939 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,939 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,939 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,939 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 23:00:49,939 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,939 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,939 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,939 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,939 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,939 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,939 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,939 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,939 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,939 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,939 - DEBUG - on stmt: eta.2 = index_frac - offset
2025-05-02 23:00:49,939 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,940 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,940 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,940 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,940 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 23:00:49,940 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,940 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,940 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,940 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,940 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,940 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,940 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,940 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,940 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,940 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,940 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,940 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,940 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,940 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,940 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,940 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,940 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,940 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,940 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 23:00:49,940 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,940 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,940 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 23:00:49,941 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,941 - DEBUG - on stmt: $338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 23:00:49,941 - DEBUG - find_def var='eta' stmt=$338binary_multiply.18 = eta * $336binary_subscr.17
2025-05-02 23:00:49,941 - DEBUG - find_def_from_top label 306
2025-05-02 23:00:49,941 - DEBUG - idom 304 from label 306
2025-05-02 23:00:49,941 - DEBUG - find_def_from_bottom label 304
2025-05-02 23:00:49,941 - DEBUG - find_def_from_top label 304
2025-05-02 23:00:49,941 - DEBUG - idom 238 from label 304
2025-05-02 23:00:49,941 - DEBUG - find_def_from_bottom label 238
2025-05-02 23:00:49,941 - DEBUG - replaced with: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,941 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,941 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,941 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,941 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,941 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,941 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,941 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 23:00:49,941 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,941 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,941 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,941 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,941 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,941 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,941 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,941 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,941 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,942 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,942 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,942 - DEBUG - Fix SSA violator on var weight
2025-05-02 23:00:49,942 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,942 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,942 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,942 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,942 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,942 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,942 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,942 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,942 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,942 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,942 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,942 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,942 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,942 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,942 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,942 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,942 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,942 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,942 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,942 - DEBUG - first assign: weight
2025-05-02 23:00:49,942 - DEBUG - replaced with: weight = const(float, 0.0)
2025-05-02 23:00:49,942 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,942 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,942 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,942 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,942 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,942 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,942 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,942 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,943 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,943 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,943 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,943 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,943 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,943 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,943 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,943 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,943 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,943 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,943 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 23:00:49,943 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,943 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,943 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,943 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,943 - DEBUG - on stmt: eta.1 = index_frac - offset
2025-05-02 23:00:49,943 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,943 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,944 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 23:00:49,944 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,944 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,944 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,944 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,944 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,944 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,944 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,944 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,944 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,944 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,944 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,944 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,944 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,944 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,944 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,944 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,944 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,944 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,944 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 23:00:49,944 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,944 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,944 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 23:00:49,944 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,944 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,944 - DEBUG - on stmt: weight = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,945 - DEBUG - replaced with: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,945 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,945 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,945 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,945 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 23:00:49,945 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,945 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,945 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,945 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,945 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,945 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,945 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,945 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,945 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,945 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,945 - DEBUG - on stmt: eta.2 = index_frac - offset
2025-05-02 23:00:49,945 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,945 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,945 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,945 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,945 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 23:00:49,945 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,945 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,945 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,945 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,946 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,946 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,946 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,946 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,946 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,946 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,946 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,946 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,946 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,946 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,946 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,946 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,946 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,946 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,946 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 23:00:49,946 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,946 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,946 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 23:00:49,946 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,946 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,946 - DEBUG - on stmt: weight = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,946 - DEBUG - replaced with: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,946 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,946 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,946 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,946 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,946 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,947 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 23:00:49,947 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,947 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,947 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,947 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,947 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,947 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,947 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,947 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DE16A0>
2025-05-02 23:00:49,947 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,947 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,947 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,947 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A3D2DED1F0>],
             170: [<numba.core.ir.Assign object at 0x000001A3D2DED2B0>],
             306: [<numba.core.ir.Assign object at 0x000001A3D2DEE640>]})
2025-05-02 23:00:49,947 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,947 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DEDDF0>
2025-05-02 23:00:49,947 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,947 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,947 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,947 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,947 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,947 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,947 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,947 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,947 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,947 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,947 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,948 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,948 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,948 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DEDDF0>
2025-05-02 23:00:49,948 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,948 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,948 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,948 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,949 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DEDDF0>
2025-05-02 23:00:49,949 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,949 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,949 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,949 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,949 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 23:00:49,949 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,949 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,949 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,949 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,949 - DEBUG - on stmt: eta.1 = index_frac - offset
2025-05-02 23:00:49,949 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,949 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,949 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,949 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 23:00:49,949 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,949 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,949 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,949 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,949 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,949 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,949 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,949 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,949 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DEDDF0>
2025-05-02 23:00:49,949 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,949 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,950 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,950 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,950 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,950 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,950 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DEDDF0>
2025-05-02 23:00:49,950 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,950 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,950 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 23:00:49,950 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,950 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,950 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 23:00:49,950 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,950 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,950 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,950 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,950 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,950 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,950 - DEBUG - on stmt: $228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 23:00:49,950 - DEBUG - find_def var='weight' stmt=$228binary_multiply.31 = weight * $226binary_subscr.30
2025-05-02 23:00:49,950 - DEBUG - replaced with: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:49,950 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,950 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,950 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,950 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,950 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DEDDF0>
2025-05-02 23:00:49,950 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,950 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,951 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,951 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,951 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,951 - DEBUG - on stmt: eta.2 = index_frac - offset
2025-05-02 23:00:49,951 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,951 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,951 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,951 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,951 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 23:00:49,951 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,951 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,951 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,951 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,951 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,951 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,951 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,951 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,951 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DEDDF0>
2025-05-02 23:00:49,951 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,951 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,951 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,951 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,952 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,952 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,952 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DEDDF0>
2025-05-02 23:00:49,952 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,952 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,952 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 23:00:49,952 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,952 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,952 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 23:00:49,952 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,952 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,952 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,952 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,952 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,952 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,952 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,952 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,952 - DEBUG - on stmt: $368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 23:00:49,952 - DEBUG - find_def var='weight' stmt=$368binary_multiply.33 = weight * $366binary_subscr.32
2025-05-02 23:00:49,952 - DEBUG - replaced with: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:49,952 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,952 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,952 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,952 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,952 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DEDDF0>
2025-05-02 23:00:49,952 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,953 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,953 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DEDDF0>
2025-05-02 23:00:49,953 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,953 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,953 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,953 - DEBUG - Fix SSA violator on var offset
2025-05-02 23:00:49,953 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,953 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DED160>
2025-05-02 23:00:49,953 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,953 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,953 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,953 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,953 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,953 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,953 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,953 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,953 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,953 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,953 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,953 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,953 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,953 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,953 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,953 - DEBUG - first assign: offset
2025-05-02 23:00:49,953 - DEBUG - replaced with: offset = const(int, 0)
2025-05-02 23:00:49,953 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,953 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,953 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,953 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,954 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,954 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,954 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,954 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,954 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,954 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DED160>
2025-05-02 23:00:49,954 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,954 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,954 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,954 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DED160>
2025-05-02 23:00:49,954 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,954 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,954 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,954 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 23:00:49,954 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,954 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,955 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,955 - DEBUG - on stmt: offset = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,955 - DEBUG - replaced with: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,955 - DEBUG - on stmt: eta.1 = index_frac - offset
2025-05-02 23:00:49,955 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,955 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,955 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,955 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 23:00:49,955 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,955 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,955 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,955 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,955 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,955 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,955 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,955 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,955 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DED160>
2025-05-02 23:00:49,955 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,955 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,955 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,955 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,955 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,955 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,955 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DED160>
2025-05-02 23:00:49,955 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,955 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,955 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 23:00:49,956 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,956 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,956 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 23:00:49,956 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,956 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,956 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,956 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,956 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,956 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,956 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:49,956 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,956 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,956 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,956 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,956 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DED160>
2025-05-02 23:00:49,956 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,956 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,956 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,956 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,956 - DEBUG - on stmt: offset = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,956 - DEBUG - replaced with: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,956 - DEBUG - on stmt: eta.2 = index_frac - offset
2025-05-02 23:00:49,956 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,956 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,956 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,956 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,956 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 23:00:49,957 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,957 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,957 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,957 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,957 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,957 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,957 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,957 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,957 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DED160>
2025-05-02 23:00:49,957 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,957 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,957 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,957 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,957 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,957 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,957 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DED160>
2025-05-02 23:00:49,957 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,957 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,957 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 23:00:49,957 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,957 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,957 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 23:00:49,957 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,957 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,957 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,957 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,957 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,958 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,958 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,958 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,958 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:49,958 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,958 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,958 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,958 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,958 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DED160>
2025-05-02 23:00:49,958 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,958 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,958 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DED160>
2025-05-02 23:00:49,958 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,958 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,958 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,958 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A3D2DED9D0>],
             84: [<numba.core.ir.Assign object at 0x000001A3D2DED670>],
             238: [<numba.core.ir.Assign object at 0x000001A3D2DEEDF0>]})
2025-05-02 23:00:49,958 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,958 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED5B0>
2025-05-02 23:00:49,958 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,958 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,958 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,958 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,958 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,958 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,958 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,958 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,958 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,958 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,959 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,959 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,959 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,959 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED5B0>
2025-05-02 23:00:49,959 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,959 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,960 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,960 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,960 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED5B0>
2025-05-02 23:00:49,960 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,960 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,960 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,960 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,960 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 23:00:49,960 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,960 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,960 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,960 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,960 - DEBUG - on stmt: eta.1 = index_frac - offset
2025-05-02 23:00:49,960 - DEBUG - find_def var='offset' stmt=eta.1 = index_frac - offset
2025-05-02 23:00:49,960 - DEBUG - replaced with: eta.1 = index_frac - offset.1
2025-05-02 23:00:49,960 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,960 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,960 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,960 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset
2025-05-02 23:00:49,960 - DEBUG - find_def var='offset' stmt=$150binary_subtract.28 = nwin - offset
2025-05-02 23:00:49,960 - DEBUG - replaced with: $150binary_subtract.28 = nwin - offset.1
2025-05-02 23:00:49,960 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,960 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,960 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,960 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,961 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,961 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,961 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,961 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,961 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED5B0>
2025-05-02 23:00:49,961 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,961 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,961 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,961 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,961 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,961 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,961 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED5B0>
2025-05-02 23:00:49,961 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,961 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,961 - DEBUG - on stmt: $182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 23:00:49,961 - DEBUG - find_def var='offset' stmt=$182binary_add.8 = offset + $180binary_multiply.7
2025-05-02 23:00:49,961 - DEBUG - find_def_from_top label 170
2025-05-02 23:00:49,961 - DEBUG - idom 168 from label 170
2025-05-02 23:00:49,961 - DEBUG - find_def_from_bottom label 168
2025-05-02 23:00:49,961 - DEBUG - find_def_from_top label 168
2025-05-02 23:00:49,961 - DEBUG - idom 84 from label 168
2025-05-02 23:00:49,961 - DEBUG - find_def_from_bottom label 84
2025-05-02 23:00:49,961 - DEBUG - replaced with: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 23:00:49,961 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,961 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,961 - DEBUG - on stmt: $198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 23:00:49,961 - DEBUG - find_def var='offset' stmt=$198binary_add.16 = offset + $196binary_multiply.15
2025-05-02 23:00:49,961 - DEBUG - find_def_from_top label 170
2025-05-02 23:00:49,961 - DEBUG - idom 168 from label 170
2025-05-02 23:00:49,961 - DEBUG - find_def_from_bottom label 168
2025-05-02 23:00:49,962 - DEBUG - find_def_from_top label 168
2025-05-02 23:00:49,962 - DEBUG - idom 84 from label 168
2025-05-02 23:00:49,962 - DEBUG - find_def_from_bottom label 84
2025-05-02 23:00:49,962 - DEBUG - replaced with: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 23:00:49,962 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,962 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,962 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,962 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,962 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,962 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,962 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:49,962 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,962 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,962 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,962 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,962 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED5B0>
2025-05-02 23:00:49,962 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,962 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,962 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,962 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,962 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,962 - DEBUG - on stmt: eta.2 = index_frac - offset
2025-05-02 23:00:49,962 - DEBUG - find_def var='offset' stmt=eta.2 = index_frac - offset
2025-05-02 23:00:49,962 - DEBUG - replaced with: eta.2 = index_frac - offset.2
2025-05-02 23:00:49,962 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,962 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,963 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,963 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,963 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset
2025-05-02 23:00:49,963 - DEBUG - find_def var='offset' stmt=$286binary_subtract.21 = nwin - offset
2025-05-02 23:00:49,963 - DEBUG - replaced with: $286binary_subtract.21 = nwin - offset.2
2025-05-02 23:00:49,963 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,963 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,963 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,963 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,963 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,963 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,963 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,963 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,963 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED5B0>
2025-05-02 23:00:49,963 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,963 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,963 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,963 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,963 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,963 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,963 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED5B0>
2025-05-02 23:00:49,963 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,963 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,963 - DEBUG - on stmt: $318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 23:00:49,963 - DEBUG - find_def var='offset' stmt=$318binary_add.8 = offset + $316binary_multiply.7
2025-05-02 23:00:49,963 - DEBUG - find_def_from_top label 306
2025-05-02 23:00:49,963 - DEBUG - idom 304 from label 306
2025-05-02 23:00:49,963 - DEBUG - find_def_from_bottom label 304
2025-05-02 23:00:49,964 - DEBUG - find_def_from_top label 304
2025-05-02 23:00:49,964 - DEBUG - idom 238 from label 304
2025-05-02 23:00:49,964 - DEBUG - find_def_from_bottom label 238
2025-05-02 23:00:49,964 - DEBUG - replaced with: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 23:00:49,964 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,964 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,964 - DEBUG - on stmt: $334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 23:00:49,964 - DEBUG - find_def var='offset' stmt=$334binary_add.16 = offset + $332binary_multiply.15
2025-05-02 23:00:49,964 - DEBUG - find_def_from_top label 306
2025-05-02 23:00:49,964 - DEBUG - idom 304 from label 306
2025-05-02 23:00:49,964 - DEBUG - find_def_from_bottom label 304
2025-05-02 23:00:49,964 - DEBUG - find_def_from_top label 304
2025-05-02 23:00:49,964 - DEBUG - idom 238 from label 304
2025-05-02 23:00:49,964 - DEBUG - find_def_from_bottom label 238
2025-05-02 23:00:49,964 - DEBUG - replaced with: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 23:00:49,964 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,964 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,964 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,964 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,964 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,964 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,964 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,964 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,964 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:49,964 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,964 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,964 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,964 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,965 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED5B0>
2025-05-02 23:00:49,965 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,965 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,965 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED5B0>
2025-05-02 23:00:49,965 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,965 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,965 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,965 - DEBUG - Fix SSA violator on var time_register
2025-05-02 23:00:49,965 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,965 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEEBE0>
2025-05-02 23:00:49,965 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,965 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,965 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,965 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,965 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,965 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,965 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,965 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,965 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,965 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,965 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,965 - DEBUG - first assign: time_register
2025-05-02 23:00:49,965 - DEBUG - replaced with: time_register = const(float, 0.0)
2025-05-02 23:00:49,965 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,965 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,965 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,965 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,965 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,965 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,965 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,966 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,966 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,966 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,966 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,966 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,966 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEEBE0>
2025-05-02 23:00:49,966 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,966 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,966 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,966 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEEBE0>
2025-05-02 23:00:49,966 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,966 - DEBUG - on stmt: time_register = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,966 - DEBUG - replaced with: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,966 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,966 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 23:00:49,966 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,966 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,967 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,967 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,967 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 23:00:49,967 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,967 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,967 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,967 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 23:00:49,967 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,967 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,967 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,967 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,967 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,967 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,967 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,967 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,967 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEEBE0>
2025-05-02 23:00:49,967 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,967 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,967 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,967 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,967 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,967 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,967 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEEBE0>
2025-05-02 23:00:49,967 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,967 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,967 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 23:00:49,967 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,967 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,968 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 23:00:49,968 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,968 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,968 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,968 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,968 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,968 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,968 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:49,968 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,968 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,968 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,968 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,968 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEEBE0>
2025-05-02 23:00:49,968 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,968 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,968 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,968 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,968 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,968 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 23:00:49,968 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,968 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,968 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,968 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,968 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 23:00:49,968 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,968 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,968 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,969 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,969 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,969 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEEBE0>
2025-05-02 23:00:49,969 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,969 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,969 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,969 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEEBE0>
2025-05-02 23:00:49,969 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,969 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,969 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 23:00:49,969 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,969 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 23:00:49,969 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,969 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,969 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,969 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,969 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,969 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:49,969 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,969 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,970 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,970 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,970 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEEBE0>
2025-05-02 23:00:49,970 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,970 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,970 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEEBE0>
2025-05-02 23:00:49,970 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,970 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,970 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,970 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A3D2DEE6A0>],
             84: [<numba.core.ir.Assign object at 0x000001A3D2DED7C0>]})
2025-05-02 23:00:49,970 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,970 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED1C0>
2025-05-02 23:00:49,970 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,970 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,970 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,970 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,970 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,970 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,970 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,970 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,970 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,970 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,970 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,970 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,970 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,970 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,970 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,970 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,970 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,970 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,971 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,971 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,971 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,971 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,971 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,971 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED1C0>
2025-05-02 23:00:49,971 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,971 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,971 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,971 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED1C0>
2025-05-02 23:00:49,971 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,971 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,971 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,971 - DEBUG - on stmt: n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,971 - DEBUG - find_def var='time_register' stmt=n = call $94load_global.5(time_register, func=$94load_global.5, args=[Var(time_register, interpn.py:10)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,971 - DEBUG - replaced with: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,972 - DEBUG - on stmt: $108binary_subtract.11 = time_register - n
2025-05-02 23:00:49,972 - DEBUG - find_def var='time_register' stmt=$108binary_subtract.11 = time_register - n
2025-05-02 23:00:49,972 - DEBUG - replaced with: $108binary_subtract.11 = time_register.1 - n
2025-05-02 23:00:49,972 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,972 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,972 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,972 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,972 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 23:00:49,972 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,972 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,972 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,972 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 23:00:49,972 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,972 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,972 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,972 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,972 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,972 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,972 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,972 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,972 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED1C0>
2025-05-02 23:00:49,972 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,972 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,972 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,972 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,972 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,972 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,972 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED1C0>
2025-05-02 23:00:49,972 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,973 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,973 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 23:00:49,973 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,973 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,973 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 23:00:49,973 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,973 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,973 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,973 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,973 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,973 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,973 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:49,973 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,973 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,973 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,973 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,973 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED1C0>
2025-05-02 23:00:49,973 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,973 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,973 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,973 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,973 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,973 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 23:00:49,973 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,973 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,974 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,974 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,974 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 23:00:49,974 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,974 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,974 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,974 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,974 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,974 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,974 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,974 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,974 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED1C0>
2025-05-02 23:00:49,974 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,974 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,974 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,974 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,974 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,974 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,974 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED1C0>
2025-05-02 23:00:49,974 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,974 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,974 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 23:00:49,975 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,975 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,975 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 23:00:49,975 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,975 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,975 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,975 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,975 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,975 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,975 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,975 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,975 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:49,975 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,975 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,975 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,975 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,975 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED1C0>
2025-05-02 23:00:49,975 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,975 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,975 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED1C0>
2025-05-02 23:00:49,975 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,975 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,975 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,975 - DEBUG - Fix SSA violator on var index_frac
2025-05-02 23:00:49,975 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,976 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE580>
2025-05-02 23:00:49,976 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,976 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,976 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,976 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,976 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,976 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,976 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,976 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,976 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,976 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,976 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,976 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,976 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,976 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,976 - DEBUG - first assign: index_frac
2025-05-02 23:00:49,976 - DEBUG - replaced with: index_frac = const(float, 0.0)
2025-05-02 23:00:49,976 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,976 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,976 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,976 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,976 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,976 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,977 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,977 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,977 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,977 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,977 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE580>
2025-05-02 23:00:49,977 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,977 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,977 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,977 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE580>
2025-05-02 23:00:49,977 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,977 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,977 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,977 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,978 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 23:00:49,978 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,978 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,978 - DEBUG - replaced with: index_frac.1 = frac * num_table
2025-05-02 23:00:49,978 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,978 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,978 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 23:00:49,978 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,978 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,978 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,978 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 23:00:49,978 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,978 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,978 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,978 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,979 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,979 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,979 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,979 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,979 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE580>
2025-05-02 23:00:49,979 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,979 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,979 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,979 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,979 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,979 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,979 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE580>
2025-05-02 23:00:49,979 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,979 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,979 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 23:00:49,979 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,979 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,979 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 23:00:49,979 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,979 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,979 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,979 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,979 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,979 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,979 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:49,979 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,980 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,980 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,980 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,980 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE580>
2025-05-02 23:00:49,980 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,980 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,980 - DEBUG - on stmt: index_frac = frac * num_table
2025-05-02 23:00:49,980 - DEBUG - replaced with: index_frac.2 = frac * num_table
2025-05-02 23:00:49,980 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,980 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,980 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 23:00:49,980 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,980 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,980 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,980 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,980 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 23:00:49,980 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,980 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,980 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,980 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,980 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,980 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,980 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,980 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,981 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE580>
2025-05-02 23:00:49,981 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,981 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,981 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,981 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,981 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,981 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,981 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE580>
2025-05-02 23:00:49,981 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,981 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,981 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 23:00:49,981 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,981 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,981 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 23:00:49,981 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,981 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,981 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,981 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,981 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,981 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,981 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,981 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,981 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:49,981 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,981 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,981 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,981 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,981 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE580>
2025-05-02 23:00:49,982 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,982 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,982 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE580>
2025-05-02 23:00:49,982 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,982 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,982 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,982 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A3D2DEE6D0>],
             84: [<numba.core.ir.Assign object at 0x000001A3D2DED6D0>],
             238: [<numba.core.ir.Assign object at 0x000001A3D2D91D30>]})
2025-05-02 23:00:49,982 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,982 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED430>
2025-05-02 23:00:49,982 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,982 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,982 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,982 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,982 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,982 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,982 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,982 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,982 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,982 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,982 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,982 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,982 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,982 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,982 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,982 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,982 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,982 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,982 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,982 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,982 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,984 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,984 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,984 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,984 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,984 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED430>
2025-05-02 23:00:49,984 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,984 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,984 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,984 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED430>
2025-05-02 23:00:49,984 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,984 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,984 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,984 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 23:00:49,984 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,984 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 23:00:49,985 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,985 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,985 - DEBUG - find_def var='index_frac' stmt=offset.1 = call $122load_global.16(index_frac, func=$122load_global.16, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,985 - DEBUG - replaced with: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,985 - DEBUG - on stmt: eta.1 = index_frac - offset.1
2025-05-02 23:00:49,985 - DEBUG - find_def var='index_frac' stmt=eta.1 = index_frac - offset.1
2025-05-02 23:00:49,985 - DEBUG - replaced with: eta.1 = index_frac.1 - offset.1
2025-05-02 23:00:49,985 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,985 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,985 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,985 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 23:00:49,985 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,985 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,985 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,985 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,985 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,985 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,985 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,985 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,985 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED430>
2025-05-02 23:00:49,985 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,986 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,986 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,986 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,986 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,986 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,986 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED430>
2025-05-02 23:00:49,986 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,986 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,986 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 23:00:49,986 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,986 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,986 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 23:00:49,986 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,986 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,986 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,986 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,986 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,986 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,986 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:49,986 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,986 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,986 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,986 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,986 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED430>
2025-05-02 23:00:49,986 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,986 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,986 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 23:00:49,986 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,987 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,987 - DEBUG - find_def var='index_frac' stmt=offset.2 = call $254load_global.7(index_frac, func=$254load_global.7, args=[Var(index_frac, interpn.py:14)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,987 - DEBUG - replaced with: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,987 - DEBUG - on stmt: eta.2 = index_frac - offset.2
2025-05-02 23:00:49,987 - DEBUG - find_def var='index_frac' stmt=eta.2 = index_frac - offset.2
2025-05-02 23:00:49,987 - DEBUG - replaced with: eta.2 = index_frac.2 - offset.2
2025-05-02 23:00:49,987 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,987 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,987 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,987 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,987 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 23:00:49,987 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,987 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,987 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,987 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,987 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,987 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,987 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,987 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,987 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED430>
2025-05-02 23:00:49,987 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,987 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,987 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,988 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,988 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,988 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,988 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED430>
2025-05-02 23:00:49,988 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,988 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,988 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 23:00:49,988 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,988 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,988 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 23:00:49,988 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,988 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,988 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,988 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,988 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,988 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,988 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,988 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,988 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:49,988 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,988 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,988 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,988 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,988 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED430>
2025-05-02 23:00:49,988 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,988 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,988 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED430>
2025-05-02 23:00:49,988 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,988 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,989 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,989 - DEBUG - Fix SSA violator on var frac
2025-05-02 23:00:49,989 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,989 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2D91FD0>
2025-05-02 23:00:49,989 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,989 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,989 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,989 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,989 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,989 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,989 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,989 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,989 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,989 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,989 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,989 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,989 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,989 - DEBUG - first assign: frac
2025-05-02 23:00:49,989 - DEBUG - replaced with: frac = const(float, 0.0)
2025-05-02 23:00:49,989 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,989 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,989 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,989 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,989 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,989 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,989 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,989 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,989 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,989 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,989 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,990 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,990 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,990 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,990 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2D91FD0>
2025-05-02 23:00:49,990 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,990 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,990 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,990 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2D91FD0>
2025-05-02 23:00:49,990 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,990 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,990 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 23:00:49,990 - DEBUG - on stmt: frac = scale * $108binary_subtract.11
2025-05-02 23:00:49,990 - DEBUG - replaced with: frac.1 = scale * $108binary_subtract.11
2025-05-02 23:00:49,990 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 23:00:49,990 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,990 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,990 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 23:00:49,990 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,990 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,991 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 23:00:49,991 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,991 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,991 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,991 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,991 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2D91FD0>
2025-05-02 23:00:49,991 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,991 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,991 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,991 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2D91FD0>
2025-05-02 23:00:49,991 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,991 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,991 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 23:00:49,991 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,991 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 23:00:49,991 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,991 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,991 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,991 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,992 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,992 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:49,992 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,992 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,992 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,992 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,992 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2D91FD0>
2025-05-02 23:00:49,992 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,992 - DEBUG - on stmt: frac = $242binary_subtract.3
2025-05-02 23:00:49,992 - DEBUG - replaced with: frac.2 = $242binary_subtract.3
2025-05-02 23:00:49,992 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 23:00:49,992 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,992 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,992 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 23:00:49,992 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,992 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,992 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,992 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,992 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 23:00:49,992 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,992 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,992 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,992 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,992 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,992 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,992 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,992 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,992 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2D91FD0>
2025-05-02 23:00:49,992 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,992 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,992 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,992 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,992 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,993 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,993 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2D91FD0>
2025-05-02 23:00:49,993 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,993 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,993 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 23:00:49,993 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,993 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,993 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 23:00:49,993 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,993 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,993 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,993 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,993 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,993 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,993 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,993 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,993 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:49,993 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,993 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,993 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,993 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,993 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2D91FD0>
2025-05-02 23:00:49,993 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,993 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,993 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2D91FD0>
2025-05-02 23:00:49,993 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,993 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,993 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,993 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A3D2D91C40>],
             84: [<numba.core.ir.Assign object at 0x000001A3D2DEE5E0>],
             238: [<numba.core.ir.Assign object at 0x000001A3D2DED5B0>]})
2025-05-02 23:00:49,994 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,994 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED310>
2025-05-02 23:00:49,994 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,994 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,994 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,994 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,994 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,994 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,994 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,994 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,994 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,994 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,994 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,994 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,994 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,994 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,994 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,994 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,994 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:49,994 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:49,994 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:49,994 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:49,994 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:49,994 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:49,994 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:49,994 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:49,994 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:49,994 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:49,994 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:49,994 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,995 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:49,995 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:49,995 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,995 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:49,995 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED310>
2025-05-02 23:00:49,995 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:49,995 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:49,995 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:49,995 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:49,995 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:49,995 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:49,995 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED310>
2025-05-02 23:00:49,995 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:49,995 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,995 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:49,995 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,995 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 23:00:49,995 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 23:00:49,995 - DEBUG - on stmt: index_frac.1 = frac * num_table
2025-05-02 23:00:49,995 - DEBUG - find_def var='frac' stmt=index_frac.1 = frac * num_table
2025-05-02 23:00:49,995 - DEBUG - replaced with: index_frac.1 = frac.1 * num_table
2025-05-02 23:00:49,995 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:49,995 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,995 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 23:00:49,995 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:49,995 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:49,995 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:49,996 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 23:00:49,996 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:49,996 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:49,996 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,996 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:49,996 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED310>
2025-05-02 23:00:49,996 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:49,996 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:49,996 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:49,996 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED310>
2025-05-02 23:00:49,996 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:49,996 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:49,996 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 23:00:49,996 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:49,996 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 23:00:49,996 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:49,996 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:49,996 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:49,996 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:49,996 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:49,997 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,997 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:49,997 - DEBUG - on stmt: jump 168
2025-05-02 23:00:49,997 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:49,997 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED310>
2025-05-02 23:00:49,997 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,997 - DEBUG - find_def var='frac' stmt=$242binary_subtract.3 = scale - frac
2025-05-02 23:00:49,997 - DEBUG - find_def_from_top label 238
2025-05-02 23:00:49,997 - DEBUG - idom 168 from label 238
2025-05-02 23:00:49,997 - DEBUG - find_def_from_bottom label 168
2025-05-02 23:00:49,997 - DEBUG - find_def_from_top label 168
2025-05-02 23:00:49,997 - DEBUG - idom 84 from label 168
2025-05-02 23:00:49,997 - DEBUG - find_def_from_bottom label 84
2025-05-02 23:00:49,997 - DEBUG - replaced with: $242binary_subtract.3 = scale - frac.1
2025-05-02 23:00:49,997 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 23:00:49,997 - DEBUG - on stmt: index_frac.2 = frac * num_table
2025-05-02 23:00:49,997 - DEBUG - find_def var='frac' stmt=index_frac.2 = frac * num_table
2025-05-02 23:00:49,997 - DEBUG - replaced with: index_frac.2 = frac.2 * num_table
2025-05-02 23:00:49,997 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:49,997 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,997 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 23:00:49,997 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:49,997 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:49,997 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:49,997 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:49,997 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 23:00:49,997 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:49,997 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:49,998 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,998 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:49,998 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED310>
2025-05-02 23:00:49,998 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:49,998 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:49,998 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:49,998 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED310>
2025-05-02 23:00:49,998 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:49,998 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:49,998 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 23:00:49,998 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:49,998 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 23:00:49,998 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:49,998 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:49,998 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:49,998 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:49,998 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:49,998 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:49,998 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:49,999 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:49,999 - DEBUG - on stmt: jump 304
2025-05-02 23:00:49,999 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:49,999 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED310>
2025-05-02 23:00:49,999 - DEBUG - on stmt: jump 80
2025-05-02 23:00:49,999 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:49,999 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2DED310>
2025-05-02 23:00:49,999 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:49,999 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:49,999 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:49,999 - DEBUG - Fix SSA violator on var n
2025-05-02 23:00:49,999 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:49,999 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE550>
2025-05-02 23:00:49,999 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:49,999 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:49,999 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:49,999 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:49,999 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:49,999 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:49,999 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:49,999 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:49,999 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:49,999 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:49,999 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:49,999 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:49,999 - DEBUG - first assign: n
2025-05-02 23:00:49,999 - DEBUG - replaced with: n = const(int, 0)
2025-05-02 23:00:49,999 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:49,999 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:49,999 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:49,999 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:49,999 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:50,000 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:50,000 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:50,000 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:50,000 - DEBUG - on stmt: jump 80
2025-05-02 23:00:50,000 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:50,000 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE550>
2025-05-02 23:00:50,000 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:50,000 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:50,000 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:50,000 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE550>
2025-05-02 23:00:50,000 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:50,000 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:50,000 - DEBUG - on stmt: n = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,000 - DEBUG - replaced with: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,000 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 23:00:50,000 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 23:00:50,001 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 23:00:50,001 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:50,001 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,001 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 23:00:50,001 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:50,001 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:50,001 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:50,001 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 23:00:50,001 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:50,001 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,001 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:50,001 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,001 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:50,001 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:50,001 - DEBUG - on stmt: jump 168
2025-05-02 23:00:50,001 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:50,001 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE550>
2025-05-02 23:00:50,001 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:50,001 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:50,001 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:50,001 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:50,001 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:50,001 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:50,001 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE550>
2025-05-02 23:00:50,001 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:50,001 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:50,001 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 23:00:50,001 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:50,001 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:50,002 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 23:00:50,002 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:50,002 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:50,002 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:50,002 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:50,002 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:50,002 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:50,002 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:50,002 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:50,002 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:50,002 - DEBUG - on stmt: jump 168
2025-05-02 23:00:50,002 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:50,002 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE550>
2025-05-02 23:00:50,002 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 23:00:50,002 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 23:00:50,002 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 23:00:50,002 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:50,002 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,002 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 23:00:50,002 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:50,002 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:50,002 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:50,002 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:50,002 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 23:00:50,002 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:50,002 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,002 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:50,002 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,003 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:50,003 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:50,003 - DEBUG - on stmt: jump 304
2025-05-02 23:00:50,003 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:50,003 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE550>
2025-05-02 23:00:50,003 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:50,003 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:50,003 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:50,003 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:50,003 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:50,003 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:50,003 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE550>
2025-05-02 23:00:50,003 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:50,003 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:50,003 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 23:00:50,003 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:50,003 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:50,003 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 23:00:50,003 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:50,003 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:50,003 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:50,003 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:50,003 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:50,003 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:50,003 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:50,003 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:50,003 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:50,003 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:50,003 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:50,003 - DEBUG - on stmt: jump 304
2025-05-02 23:00:50,004 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:50,004 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE550>
2025-05-02 23:00:50,004 - DEBUG - on stmt: jump 80
2025-05-02 23:00:50,004 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:50,004 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001A3D2DEE550>
2025-05-02 23:00:50,004 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:50,004 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:50,004 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:00:50,004 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001A3D2DEE5B0>],
             84: [<numba.core.ir.Assign object at 0x000001A3D2DED3D0>]})
2025-05-02 23:00:50,004 - DEBUG - ==== SSA block rewrite pass on 0
2025-05-02 23:00:50,004 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2D91D90>
2025-05-02 23:00:50,004 - DEBUG - on stmt: x = arg(0, name=x)
2025-05-02 23:00:50,004 - DEBUG - on stmt: t_out = arg(1, name=t_out)
2025-05-02 23:00:50,004 - DEBUG - on stmt: interp_win = arg(2, name=interp_win)
2025-05-02 23:00:50,004 - DEBUG - on stmt: interp_delta = arg(3, name=interp_delta)
2025-05-02 23:00:50,004 - DEBUG - on stmt: num_table = arg(4, name=num_table)
2025-05-02 23:00:50,004 - DEBUG - on stmt: scale = arg(5, name=scale)
2025-05-02 23:00:50,004 - DEBUG - on stmt: y = arg(6, name=y)
2025-05-02 23:00:50,004 - DEBUG - on stmt: $2load_global.0 = global(int: <class 'int'>)
2025-05-02 23:00:50,004 - DEBUG - on stmt: $8binary_multiply.3 = scale * num_table
2025-05-02 23:00:50,004 - DEBUG - on stmt: index_step = call $2load_global.0($8binary_multiply.3, func=$2load_global.0, args=[Var($8binary_multiply.3, interpn.py:9)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,004 - DEBUG - on stmt: time_register = const(float, 0.0)
2025-05-02 23:00:50,004 - DEBUG - on stmt: n = const(int, 0)
2025-05-02 23:00:50,004 - DEBUG - on stmt: frac = const(float, 0.0)
2025-05-02 23:00:50,004 - DEBUG - on stmt: index_frac = const(float, 0.0)
2025-05-02 23:00:50,004 - DEBUG - on stmt: offset = const(int, 0)
2025-05-02 23:00:50,004 - DEBUG - on stmt: eta = const(float, 0.0)
2025-05-02 23:00:50,005 - DEBUG - on stmt: weight = const(float, 0.0)
2025-05-02 23:00:50,005 - DEBUG - on stmt: $44load_attr.13 = getattr(value=interp_win, attr=shape)
2025-05-02 23:00:50,005 - DEBUG - on stmt: $const46.14 = const(int, 0)
2025-05-02 23:00:50,005 - DEBUG - on stmt: nwin = static_getitem(value=$44load_attr.13, index=0, index_var=$const46.14, fn=<built-in function getitem>)
2025-05-02 23:00:50,005 - DEBUG - on stmt: $54load_attr.17 = getattr(value=x, attr=shape)
2025-05-02 23:00:50,005 - DEBUG - on stmt: $const56.18 = const(int, 0)
2025-05-02 23:00:50,005 - DEBUG - on stmt: n_orig = static_getitem(value=$54load_attr.17, index=0, index_var=$const56.18, fn=<built-in function getitem>)
2025-05-02 23:00:50,005 - DEBUG - on stmt: $64load_attr.21 = getattr(value=t_out, attr=shape)
2025-05-02 23:00:50,005 - DEBUG - on stmt: $const66.22 = const(int, 0)
2025-05-02 23:00:50,005 - DEBUG - on stmt: n_out = static_getitem(value=$64load_attr.21, index=0, index_var=$const66.22, fn=<built-in function getitem>)
2025-05-02 23:00:50,005 - DEBUG - on stmt: $72load_global.24 = global(prange: <class 'numba.misc.special.prange'>)
2025-05-02 23:00:50,005 - DEBUG - on stmt: $76call_function.26 = call $72load_global.24(n_out, func=$72load_global.24, args=[Var(n_out, interpn.py:21)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,006 - DEBUG - on stmt: $78get_iter.27 = getiter(value=$76call_function.26)
2025-05-02 23:00:50,006 - DEBUG - on stmt: $phi80.0 = $78get_iter.27
2025-05-02 23:00:50,006 - DEBUG - on stmt: jump 80
2025-05-02 23:00:50,006 - DEBUG - ==== SSA block rewrite pass on 80
2025-05-02 23:00:50,006 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2D91D90>
2025-05-02 23:00:50,006 - DEBUG - on stmt: $80for_iter.1 = iternext(value=$phi80.0)
2025-05-02 23:00:50,006 - DEBUG - on stmt: $80for_iter.2 = pair_first(value=$80for_iter.1)
2025-05-02 23:00:50,006 - DEBUG - on stmt: $80for_iter.3 = pair_second(value=$80for_iter.1)
2025-05-02 23:00:50,006 - DEBUG - on stmt: $phi84.1 = $80for_iter.2
2025-05-02 23:00:50,006 - DEBUG - on stmt: branch $80for_iter.3, 84, 382
2025-05-02 23:00:50,006 - DEBUG - ==== SSA block rewrite pass on 84
2025-05-02 23:00:50,006 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2D91D90>
2025-05-02 23:00:50,006 - DEBUG - on stmt: t = $phi84.1
2025-05-02 23:00:50,006 - DEBUG - on stmt: time_register.1 = getitem(value=t_out, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:50,006 - DEBUG - on stmt: $94load_global.5 = global(int: <class 'int'>)
2025-05-02 23:00:50,006 - DEBUG - on stmt: n.1 = call $94load_global.5(time_register.1, func=$94load_global.5, args=[Var(time_register.1, interpn.py:24)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,006 - DEBUG - on stmt: $108binary_subtract.11 = time_register.1 - n
2025-05-02 23:00:50,006 - DEBUG - find_def var='n' stmt=$108binary_subtract.11 = time_register.1 - n
2025-05-02 23:00:50,006 - DEBUG - replaced with: $108binary_subtract.11 = time_register.1 - n.1
2025-05-02 23:00:50,006 - DEBUG - on stmt: frac.1 = scale * $108binary_subtract.11
2025-05-02 23:00:50,006 - DEBUG - on stmt: index_frac.1 = frac.1 * num_table
2025-05-02 23:00:50,006 - DEBUG - on stmt: $122load_global.16 = global(int: <class 'int'>)
2025-05-02 23:00:50,006 - DEBUG - on stmt: offset.1 = call $122load_global.16(index_frac.1, func=$122load_global.16, args=[Var(index_frac.1, interpn.py:33)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,006 - DEBUG - on stmt: eta.1 = index_frac.1 - offset.1
2025-05-02 23:00:50,006 - DEBUG - on stmt: $138load_global.22 = global(min: <built-in function min>)
2025-05-02 23:00:50,006 - DEBUG - on stmt: $const142.24 = const(int, 1)
2025-05-02 23:00:50,007 - DEBUG - on stmt: $144binary_add.25 = n + $const142.24
2025-05-02 23:00:50,007 - DEBUG - find_def var='n' stmt=$144binary_add.25 = n + $const142.24
2025-05-02 23:00:50,007 - DEBUG - replaced with: $144binary_add.25 = n.1 + $const142.24
2025-05-02 23:00:50,007 - DEBUG - on stmt: $150binary_subtract.28 = nwin - offset.1
2025-05-02 23:00:50,007 - DEBUG - on stmt: $154binary_floor_divide.30 = $150binary_subtract.28 // index_step
2025-05-02 23:00:50,007 - DEBUG - on stmt: i_max = call $138load_global.22($144binary_add.25, $154binary_floor_divide.30, func=$138load_global.22, args=[Var($144binary_add.25, interpn.py:40), Var($154binary_floor_divide.30, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,007 - DEBUG - on stmt: $160load_global.32 = global(range: <class 'range'>)
2025-05-02 23:00:50,007 - DEBUG - on stmt: $164call_function.34 = call $160load_global.32(i_max, func=$160load_global.32, args=[Var(i_max, interpn.py:40)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,007 - DEBUG - on stmt: $166get_iter.35 = getiter(value=$164call_function.34)
2025-05-02 23:00:50,007 - DEBUG - on stmt: $phi168.1 = $166get_iter.35
2025-05-02 23:00:50,007 - DEBUG - on stmt: jump 168
2025-05-02 23:00:50,007 - DEBUG - ==== SSA block rewrite pass on 168
2025-05-02 23:00:50,007 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2D91D90>
2025-05-02 23:00:50,007 - DEBUG - on stmt: $168for_iter.2 = iternext(value=$phi168.1)
2025-05-02 23:00:50,007 - DEBUG - on stmt: $168for_iter.3 = pair_first(value=$168for_iter.2)
2025-05-02 23:00:50,007 - DEBUG - on stmt: $168for_iter.4 = pair_second(value=$168for_iter.2)
2025-05-02 23:00:50,007 - DEBUG - on stmt: $phi170.2 = $168for_iter.3
2025-05-02 23:00:50,007 - DEBUG - on stmt: branch $168for_iter.4, 170, 238
2025-05-02 23:00:50,007 - DEBUG - ==== SSA block rewrite pass on 170
2025-05-02 23:00:50,007 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2D91D90>
2025-05-02 23:00:50,007 - DEBUG - on stmt: i = $phi170.2
2025-05-02 23:00:50,007 - DEBUG - on stmt: $180binary_multiply.7 = i * index_step
2025-05-02 23:00:50,007 - DEBUG - on stmt: $182binary_add.8 = offset.1 + $180binary_multiply.7
2025-05-02 23:00:50,007 - DEBUG - on stmt: $184binary_subscr.9 = getitem(value=interp_win, index=$182binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:50,007 - DEBUG - on stmt: $196binary_multiply.15 = i * index_step
2025-05-02 23:00:50,007 - DEBUG - on stmt: $198binary_add.16 = offset.1 + $196binary_multiply.15
2025-05-02 23:00:50,007 - DEBUG - on stmt: $200binary_subscr.17 = getitem(value=interp_delta, index=$198binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:50,007 - DEBUG - on stmt: $202binary_multiply.18 = eta.1 * $200binary_subscr.17
2025-05-02 23:00:50,008 - DEBUG - on stmt: weight.1 = $184binary_subscr.9 + $202binary_multiply.18
2025-05-02 23:00:50,008 - DEBUG - on stmt: $214binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:50,008 - DEBUG - on stmt: $224binary_subtract.29 = n - i
2025-05-02 23:00:50,008 - DEBUG - find_def var='n' stmt=$224binary_subtract.29 = n - i
2025-05-02 23:00:50,008 - DEBUG - find_def_from_top label 170
2025-05-02 23:00:50,008 - DEBUG - idom 168 from label 170
2025-05-02 23:00:50,008 - DEBUG - find_def_from_bottom label 168
2025-05-02 23:00:50,008 - DEBUG - find_def_from_top label 168
2025-05-02 23:00:50,008 - DEBUG - idom 84 from label 168
2025-05-02 23:00:50,008 - DEBUG - find_def_from_bottom label 84
2025-05-02 23:00:50,008 - DEBUG - replaced with: $224binary_subtract.29 = n.1 - i
2025-05-02 23:00:50,008 - DEBUG - on stmt: $226binary_subscr.30 = getitem(value=x, index=$224binary_subtract.29, fn=<built-in function getitem>)
2025-05-02 23:00:50,008 - DEBUG - on stmt: $228binary_multiply.31 = weight.1 * $226binary_subscr.30
2025-05-02 23:00:50,008 - DEBUG - on stmt: $230inplace_add.32 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$214binary_subscr.24, rhs=$228binary_multiply.31, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:50,008 - DEBUG - on stmt: y[t] = $230inplace_add.32
2025-05-02 23:00:50,008 - DEBUG - on stmt: jump 168
2025-05-02 23:00:50,008 - DEBUG - ==== SSA block rewrite pass on 238
2025-05-02 23:00:50,008 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2D91D90>
2025-05-02 23:00:50,008 - DEBUG - on stmt: $242binary_subtract.3 = scale - frac.1
2025-05-02 23:00:50,008 - DEBUG - on stmt: frac.2 = $242binary_subtract.3
2025-05-02 23:00:50,008 - DEBUG - on stmt: index_frac.2 = frac.2 * num_table
2025-05-02 23:00:50,008 - DEBUG - on stmt: $254load_global.7 = global(int: <class 'int'>)
2025-05-02 23:00:50,008 - DEBUG - on stmt: offset.2 = call $254load_global.7(index_frac.2, func=$254load_global.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,008 - DEBUG - on stmt: eta.2 = index_frac.2 - offset.2
2025-05-02 23:00:50,008 - DEBUG - on stmt: $270load_global.13 = global(min: <built-in function min>)
2025-05-02 23:00:50,009 - DEBUG - on stmt: $276binary_subtract.16 = n_orig - n
2025-05-02 23:00:50,009 - DEBUG - find_def var='n' stmt=$276binary_subtract.16 = n_orig - n
2025-05-02 23:00:50,009 - DEBUG - find_def_from_top label 238
2025-05-02 23:00:50,009 - DEBUG - idom 168 from label 238
2025-05-02 23:00:50,009 - DEBUG - find_def_from_bottom label 168
2025-05-02 23:00:50,009 - DEBUG - find_def_from_top label 168
2025-05-02 23:00:50,009 - DEBUG - idom 84 from label 168
2025-05-02 23:00:50,009 - DEBUG - find_def_from_bottom label 84
2025-05-02 23:00:50,009 - DEBUG - replaced with: $276binary_subtract.16 = n_orig - n.1
2025-05-02 23:00:50,009 - DEBUG - on stmt: $const278.17 = const(int, 1)
2025-05-02 23:00:50,009 - DEBUG - on stmt: $280binary_subtract.18 = $276binary_subtract.16 - $const278.17
2025-05-02 23:00:50,009 - DEBUG - on stmt: $286binary_subtract.21 = nwin - offset.2
2025-05-02 23:00:50,009 - DEBUG - on stmt: $290binary_floor_divide.23 = $286binary_subtract.21 // index_step
2025-05-02 23:00:50,009 - DEBUG - on stmt: k_max = call $270load_global.13($280binary_subtract.18, $290binary_floor_divide.23, func=$270load_global.13, args=[Var($280binary_subtract.18, interpn.py:60), Var($290binary_floor_divide.23, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,009 - DEBUG - on stmt: $296load_global.25 = global(range: <class 'range'>)
2025-05-02 23:00:50,009 - DEBUG - on stmt: $300call_function.27 = call $296load_global.25(k_max, func=$296load_global.25, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-02 23:00:50,009 - DEBUG - on stmt: $302get_iter.28 = getiter(value=$300call_function.27)
2025-05-02 23:00:50,009 - DEBUG - on stmt: $phi304.1 = $302get_iter.28
2025-05-02 23:00:50,009 - DEBUG - on stmt: jump 304
2025-05-02 23:00:50,009 - DEBUG - ==== SSA block rewrite pass on 304
2025-05-02 23:00:50,009 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2D91D90>
2025-05-02 23:00:50,009 - DEBUG - on stmt: $304for_iter.2 = iternext(value=$phi304.1)
2025-05-02 23:00:50,009 - DEBUG - on stmt: $304for_iter.3 = pair_first(value=$304for_iter.2)
2025-05-02 23:00:50,009 - DEBUG - on stmt: $304for_iter.4 = pair_second(value=$304for_iter.2)
2025-05-02 23:00:50,009 - DEBUG - on stmt: $phi306.2 = $304for_iter.3
2025-05-02 23:00:50,010 - DEBUG - on stmt: branch $304for_iter.4, 306, 380
2025-05-02 23:00:50,010 - DEBUG - ==== SSA block rewrite pass on 306
2025-05-02 23:00:50,010 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2D91D90>
2025-05-02 23:00:50,010 - DEBUG - on stmt: k = $phi306.2
2025-05-02 23:00:50,010 - DEBUG - on stmt: $316binary_multiply.7 = k * index_step
2025-05-02 23:00:50,010 - DEBUG - on stmt: $318binary_add.8 = offset.2 + $316binary_multiply.7
2025-05-02 23:00:50,010 - DEBUG - on stmt: $320binary_subscr.9 = getitem(value=interp_win, index=$318binary_add.8, fn=<built-in function getitem>)
2025-05-02 23:00:50,010 - DEBUG - on stmt: $332binary_multiply.15 = k * index_step
2025-05-02 23:00:50,010 - DEBUG - on stmt: $334binary_add.16 = offset.2 + $332binary_multiply.15
2025-05-02 23:00:50,010 - DEBUG - on stmt: $336binary_subscr.17 = getitem(value=interp_delta, index=$334binary_add.16, fn=<built-in function getitem>)
2025-05-02 23:00:50,010 - DEBUG - on stmt: $338binary_multiply.18 = eta.2 * $336binary_subscr.17
2025-05-02 23:00:50,010 - DEBUG - on stmt: weight.2 = $320binary_subscr.9 + $338binary_multiply.18
2025-05-02 23:00:50,010 - DEBUG - on stmt: $350binary_subscr.24 = getitem(value=y, index=t, fn=<built-in function getitem>)
2025-05-02 23:00:50,010 - DEBUG - on stmt: $360binary_add.29 = n + k
2025-05-02 23:00:50,010 - DEBUG - find_def var='n' stmt=$360binary_add.29 = n + k
2025-05-02 23:00:50,010 - DEBUG - find_def_from_top label 306
2025-05-02 23:00:50,010 - DEBUG - idom 304 from label 306
2025-05-02 23:00:50,010 - DEBUG - find_def_from_bottom label 304
2025-05-02 23:00:50,010 - DEBUG - find_def_from_top label 304
2025-05-02 23:00:50,010 - DEBUG - idom 238 from label 304
2025-05-02 23:00:50,010 - DEBUG - find_def_from_bottom label 238
2025-05-02 23:00:50,010 - DEBUG - find_def_from_top label 238
2025-05-02 23:00:50,010 - DEBUG - idom 168 from label 238
2025-05-02 23:00:50,010 - DEBUG - find_def_from_bottom label 168
2025-05-02 23:00:50,010 - DEBUG - find_def_from_top label 168
2025-05-02 23:00:50,011 - DEBUG - idom 84 from label 168
2025-05-02 23:00:50,011 - DEBUG - find_def_from_bottom label 84
2025-05-02 23:00:50,011 - DEBUG - replaced with: $360binary_add.29 = n.1 + k
2025-05-02 23:00:50,011 - DEBUG - on stmt: $const362.30 = const(int, 1)
2025-05-02 23:00:50,011 - DEBUG - on stmt: $364binary_add.31 = $360binary_add.29 + $const362.30
2025-05-02 23:00:50,011 - DEBUG - on stmt: $366binary_subscr.32 = getitem(value=x, index=$364binary_add.31, fn=<built-in function getitem>)
2025-05-02 23:00:50,011 - DEBUG - on stmt: $368binary_multiply.33 = weight.2 * $366binary_subscr.32
2025-05-02 23:00:50,011 - DEBUG - on stmt: $370inplace_add.34 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$350binary_subscr.24, rhs=$368binary_multiply.33, static_lhs=Undefined, static_rhs=Undefined)
2025-05-02 23:00:50,011 - DEBUG - on stmt: y[t] = $370inplace_add.34
2025-05-02 23:00:50,011 - DEBUG - on stmt: jump 304
2025-05-02 23:00:50,011 - DEBUG - ==== SSA block rewrite pass on 380
2025-05-02 23:00:50,011 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2D91D90>
2025-05-02 23:00:50,011 - DEBUG - on stmt: jump 80
2025-05-02 23:00:50,011 - DEBUG - ==== SSA block rewrite pass on 382
2025-05-02 23:00:50,011 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001A3D2D91D90>
2025-05-02 23:00:50,011 - DEBUG - on stmt: $const382.0 = const(NoneType, None)
2025-05-02 23:00:50,011 - DEBUG - on stmt: $384return_value.1 = cast(value=$const382.0)
2025-05-02 23:00:50,011 - DEBUG - on stmt: return $384return_value.1
2025-05-02 23:01:18,236 - DEBUG - Audio loaded: shape=(2, 13083588), sample_rate=44100
2025-05-02 23:01:18,236 - DEBUG - Demixing audio: samples=13083588, margin=76800, chunk_size=4410000
2025-05-02 23:01:18,264 - DEBUG - Created 3 chunks for demixing
  0%|          | 0/3 [00:00<?, ?it/s]Processing:   0%|          | 0/3 [00:00<?, ?it/s]2025-05-02 23:01:18,333 - DEBUG - Processing chunk: 18 waves
2025-05-02 23:01:18,485 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song3.flac: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 256 Expected: 512
 Please fix either the inputs/outputs or the model.
Traceback (most recent call last):
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 258, in <module>
    main()
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 242, in main
    vocals, no_vocals, sampling_rate = predictor.predict(file_path)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 210, in predict
    sources = self.demix(mix.T)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 131, in demix
    sources = self.demix_base(segmented_mix, margin_size=margin)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 165, in demix_base
    -_ort.run(None, {"input": -spek.cpu().numpy()})[0] * 0.5
  File "C:\temp\s2S\installs\UVR\uvr_env\lib\site-packages\onnxruntime\capi\onnxruntime_inference_collection.py", line 220, in run
    return self._sess.run(output_names, input_feed, run_options)
onnxruntime.capi.onnxruntime_pybind11_state.InvalidArgument: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 256 Expected: 512
 Please fix either the inputs/outputs or the model.
Processing:   0%|          | 0/3 [00:00<?, ?it/s]

2025-05-02 23:02:01 - INFO - Starting separation for model: UVR_MDXNET_Inst_Main, Quality: Balanced, Input: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song3.flac, Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems, SegmentSize: 30, Overlap: 41000, Denoise: , NFFT: 6144, DimF: 2048, DimT: 8
2025-05-02 23:02:01 - DEBUG - Original command: cmd /c "cd @EnvPath@ && activate.bat && cd @ScriptDir@ && python @PythonScript@ "@SongPath@" -m "@Path@" -o "@OutputDir@" --chunks @SegmentSize@ --margin @Overlap@ --n_fft @NFFT@ --dim_f @DimF@ --dim_t @DimT@ && deactivate"
2025-05-02 23:02:01 - INFO - Resolved command: cmd /c "cd C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\UVR\uvr_env\Scripts && activate.bat && cd C:\Git\3DAudioStudio\scripts\autoit\1.3 && python separate.py "C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song3.flac" -m "C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\UVR-MDX-NET-Inst_Main.onnx" -o "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems" --chunks 30 --margin 41000 --n_fft 6144 --dim_f 2048 --dim_t 8 && deactivate"
2025-05-02 23:15:06 - INFO - Starting separation for model: UVR_MDXNET_Inst_Main, Quality: Balanced, Input: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song1.flac, Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems, SegmentSize: 100, Overlap: 76800, Denoise: , NFFT: 6144, DimF: 2048, DimT: 8
2025-05-02 23:15:06 - DEBUG - Original command: cmd /c "cd @EnvPath@ && activate.bat && cd @ScriptDir@ && python @PythonScript@ "@SongPath@" -m "@Path@" -o "@OutputDir@" --chunks @SegmentSize@ --margin @Overlap@ --n_fft @NFFT@ --dim_f @DimF@ --dim_t @DimT@ && deactivate"
2025-05-02 23:15:06 - INFO - Resolved command: cmd /c "cd C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\UVR\uvr_env\Scripts && activate.bat && cd C:\Git\3DAudioStudio\scripts\autoit\1.3 && python separate.py "C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song1.flac" -m "C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\UVR-MDX-NET-Inst_Main.onnx" -o "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems" --chunks 100 --margin 76800 --n_fft 6144 --dim_f 2048 --dim_t 8 && deactivate"
2025-05-02 23:22:27 - INFO - Starting separation for model: UVR_MDXNET_Inst_Main, Quality: Balanced, Input: , Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems, SegmentSize: 30, Overlap: 41000, Denoise: , NFFT: 6144, DimF: 2048, DimT: 8
2025-05-02 23:22:27 - ERROR - Invalid input audio file: 
2025-05-02 23:22:40 - INFO - Starting separation for model: UVR_MDXNET_Inst_Main, Quality: Balanced, Input: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song2.flac, Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems, SegmentSize: 30, Overlap: 41000, Denoise: , NFFT: 6144, DimF: 2048, DimT: 8
2025-05-02 23:22:40 - DEBUG - Original command: cmd /c "cd @EnvPath@ && activate.bat && cd @ScriptDir@ && python @PythonScript@ "@SongPath@" -m "@Path@" -o "@OutputDir@" --chunks @SegmentSize@ --margin @Overlap@ --n_fft @NFFT@ --dim_f @DimF@ --dim_t @DimT@ && deactivate"
2025-05-02 23:22:40 - INFO - Resolved command: cmd /c "cd C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\UVR\uvr_env\Scripts && activate.bat && cd C:\Git\3DAudioStudio\scripts\autoit\1.3 && python separate.py "C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song2.flac" -m "C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\UVR-MDX-NET-Inst_Main.onnx" -o "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems" --chunks 30 --margin 41000 --n_fft 6144 --dim_f 2048 --dim_t 8 && deactivate"
[2025-05-02 23:24:06] INFO GUI: Starting Test Models.ini GUI
[2025-05-02 23:24:06] INFO GUI: Loading models.ini from C:\Git\3DAudioStudio\scripts\autoit\1.3\models.ini
[2025-05-02 23:24:06] INFO GUI: Loaded 10 models from models.ini
[2025-05-02 23:24:06] INFO GUI: Selected model: UVR_MDXNET_Inst_Main
[2025-05-02 23:24:06] INFO GUI: Updated model info for UVR_MDXNET_Inst_Main
[2025-05-02 23:24:09] INFO GUI: Exiting GUI
2025-05-02 23:34:58 - INFO - Starting separation for model: UVR_MDXNET_Inst_Main, Quality: Normal, Input: , Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems, SegmentSize: 10, Overlap: 41000, Denoise: True, NFFT: 6144, DimF: 2048, DimT: 8
2025-05-02 23:34:58 - ERROR - Invalid input audio file: 
2025-05-02 23:35:10 - INFO - Starting separation for model: UVR_MDXNET_Inst_Main, Quality: Normal, Input: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4.mp3, Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems, SegmentSize: 10, Overlap: 41000, Denoise: True, NFFT: 6144, DimF: 2048, DimT: 8
2025-05-02 23:35:10 - DEBUG - Original command: cmd /c "cd @EnvPath@ && activate.bat && cd @ScriptDir@ && python @PythonScript@ "@SongPath@" -m "@Path@" -o "@OutputDir@" --chunks @SegmentSize@ --margin @Overlap@ --n_fft @NFFT@ --dim_f @DimF@ --dim_t @DimT@ && deactivate"
2025-05-02 23:35:10 - INFO - Resolved command: cmd /c "cd C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\UVR\uvr_env\Scripts && activate.bat && cd C:\Git\3DAudioStudio\scripts\autoit\1.3 && python separate.py "C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4.mp3" -m "C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\UVR-MDX-NET-Inst_Main.onnx" -o "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems" --chunks 10 --margin 41000 --n_fft 6144 --dim_f 2048 --dim_t 8 && deactivate"
2025-05-02 23:40:51 - INFO - Separation output: 2025-05-02 23:35:21,950 - DEBUG - Logging initialized
2025-05-02 23:35:21,950 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song4.mp3')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR-MDX-NET-Inst_Main.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 41000, 'chunks': 10, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 23:35:21,950 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 23:35:21,950 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4.mp3
2025-05-02 23:35:21,950 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 23:35:21,950 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song4.mp3')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR-MDX-NET-Inst_Main.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 41000, 'chunks': 10, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 23:35:21,950 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\UVR-MDX-NET-Inst_Main.onnx
2025-05-02 23:35:22,077 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4.mp3
[C:\vcpkg\buildtrees\mpg123\src\-66150af195.clean\src\libmpg123\id3.c:process_comment():587] error: No comment text / valid description?
2025-05-02 23:35:22,344 - DEBUG - Audio loaded: shape=(2, 12808404), sample_rate=44100
2025-05-02 23:35:22,344 - DEBUG - Demixing audio: samples=12808404, margin=41000, chunk_size=441000
2025-05-02 23:35:22,386 - DEBUG - Created 29 chunks for demixing
  0%|          | 0/29 [00:00<?, ?it/s]Processing:   0%|          | 0/29 [00:00<?, ?it/s]2025-05-02 23:35:22,394 - DEBUG - Processing chunk: 2 waves
Processing:   3%|3         | 1/29 [00:07<03:30,  7.53s/it]2025-05-02 23:35:29,930 - DEBUG - Processing chunk: 3 waves
Processing:   7%|6         | 2/29 [00:18<04:14,  9.41s/it]2025-05-02 23:35:40,651 - DEBUG - Processing chunk: 3 waves
Processing:  10%|#         | 3/29 [00:28<04:18,  9.93s/it]2025-05-02 23:35:51,205 - DEBUG - Processing chunk: 3 waves
Processing:  14%|#3        | 4/29 [00:39<04:15, 10.23s/it]2025-05-02 23:36:01,888 - DEBUG - Processing chunk: 3 waves
Processing:  17%|#7        | 5/29 [00:50<04:15, 10.64s/it]2025-05-02 23:36:13,274 - DEBUG - Processing chunk: 3 waves
Processing:  21%|##        | 6/29 [01:02<04:12, 10.96s/it]2025-05-02 23:36:24,858 - DEBUG - Processing chunk: 3 waves
Processing:  24%|##4       | 7/29 [01:14<04:07, 11.24s/it]2025-05-02 23:36:36,659 - DEBUG - Processing chunk: 3 waves
Processing:  28%|##7       | 8/29 [01:26<04:01, 11.50s/it]2025-05-02 23:36:48,736 - DEBUG - Processing chunk: 3 waves
Processing:  31%|###1      | 9/29 [01:38<03:56, 11.82s/it]2025-05-02 23:37:01,253 - DEBUG - Processing chunk: 3 waves
Processing:  34%|###4      | 10/29 [01:52<03:52, 12.24s/it]2025-05-02 23:37:14,433 - DEBUG - Processing chunk: 3 waves
Processing:  38%|###7      | 11/29 [02:02<03:30, 11.72s/it]2025-05-02 23:37:24,955 - DEBUG - Processing chunk: 3 waves
Processing:  41%|####1     | 12/29 [02:12<03:12, 11.32s/it]2025-05-02 23:37:35,357 - DEBUG - Processing chunk: 3 waves
Processing:  45%|####4     | 13/29 [02:25<03:06, 11.64s/it]2025-05-02 23:37:47,758 - DEBUG - Processing chunk: 3 waves
Processing:  48%|####8     | 14/29 [02:40<03:10, 12.72s/it]2025-05-02 23:38:02,953 - DEBUG - Processing chunk: 3 waves
Processing:  52%|#####1    | 15/29 [02:56<03:11, 13.71s/it]2025-05-02 23:38:18,955 - DEBUG - Processing chunk: 3 waves
Processing:  55%|#####5    | 16/29 [03:07<02:47, 12.88s/it]2025-05-02 23:38:29,893 - DEBUG - Processing chunk: 3 waves
Processing:  59%|#####8    | 17/29 [03:17<02:25, 12.12s/it]2025-05-02 23:38:40,262 - DEBUG - Processing chunk: 3 waves
Processing:  62%|######2   | 18/29 [03:28<02:07, 11.61s/it]2025-05-02 23:38:50,661 - DEBUG - Processing chunk: 3 waves
Processing:  66%|######5   | 19/29 [03:38<01:52, 11.26s/it]2025-05-02 23:39:01,107 - DEBUG - Processing chunk: 3 waves
Processing:  69%|######8   | 20/29 [03:51<01:44, 11.59s/it]2025-05-02 23:39:13,474 - DEBUG - Processing chunk: 3 waves
Processing:  72%|#######2  | 21/29 [04:02<01:31, 11.41s/it]2025-05-02 23:39:24,451 - DEBUG - Processing chunk: 3 waves
Processing:  76%|#######5  | 22/29 [04:12<01:18, 11.20s/it]2025-05-02 23:39:35,162 - DEBUG - Processing chunk: 3 waves
Processing:  79%|#######9  | 23/29 [04:23<01:06, 11.09s/it]2025-05-02 23:39:46,015 - DEBUG - Processing chunk: 3 waves
Processing:  83%|########2 | 24/29 [04:34<00:55, 11.07s/it]2025-05-02 23:39:57,044 - DEBUG - Processing chunk: 3 waves
Processing:  86%|########6 | 25/29 [04:45<00:44, 11.15s/it]2025-05-02 23:40:08,377 - DEBUG - Processing chunk: 3 waves
Processing:  90%|########9 | 26/29 [04:57<00:33, 11.20s/it]2025-05-02 23:40:19,696 - DEBUG - Processing chunk: 3 waves
Processing:  93%|#########3| 27/29 [05:08<00:22, 11.27s/it]2025-05-02 23:40:31,104 - DEBUG - Processing chunk: 3 waves
Processing:  97%|#########6| 28/29 [05:20<00:11, 11.32s/it]2025-05-02 23:40:42,533 - DEBUG - Processing chunk: 2 waves
Processing: 100%|##########| 29/29 [05:28<00:00, 10.35s/it]Processing: 100%|##########| 29/29 [05:28<00:00, 11.32s/it]
2025-05-02 23:40:50,696 - DEBUG - Demixing complete
2025-05-02 23:40:51,204 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song4_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song4_no_vocals.wav

2025-05-02 23:40:51 - ERROR - Failed to generate stem: 2025-05-02 23:35:21,950 - DEBUG - Logging initialized
2025-05-02 23:35:21,950 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song4.mp3')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR-MDX-NET-Inst_Main.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 41000, 'chunks': 10, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 23:35:21,950 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 23:35:21,950 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4.mp3
2025-05-02 23:35:21,950 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 23:35:21,950 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song4.mp3')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR-MDX-NET-Inst_Main.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 41000, 'chunks': 10, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 23:35:21,950 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\UVR-MDX-NET-Inst_Main.onnx
2025-05-02 23:35:22,077 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4.mp3
[C:\vcpkg\buildtrees\mpg123\src\-66150af195.clean\src\libmpg123\id3.c:process_comment():587] error: No comment text / valid description?
2025-05-02 23:35:22,344 - DEBUG - Audio loaded: shape=(2, 12808404), sample_rate=44100
2025-05-02 23:35:22,344 - DEBUG - Demixing audio: samples=12808404, margin=41000, chunk_size=441000
2025-05-02 23:35:22,386 - DEBUG - Created 29 chunks for demixing
  0%|          | 0/29 [00:00<?, ?it/s]Processing:   0%|          | 0/29 [00:00<?, ?it/s]2025-05-02 23:35:22,394 - DEBUG - Processing chunk: 2 waves
Processing:   3%|3         | 1/29 [00:07<03:30,  7.53s/it]2025-05-02 23:35:29,930 - DEBUG - Processing chunk: 3 waves
Processing:   7%|6         | 2/29 [00:18<04:14,  9.41s/it]2025-05-02 23:35:40,651 - DEBUG - Processing chunk: 3 waves
Processing:  10%|#         | 3/29 [00:28<04:18,  9.93s/it]2025-05-02 23:35:51,205 - DEBUG - Processing chunk: 3 waves
Processing:  14%|#3        | 4/29 [00:39<04:15, 10.23s/it]2025-05-02 23:36:01,888 - DEBUG - Processing chunk: 3 waves
Processing:  17%|#7        | 5/29 [00:50<04:15, 10.64s/it]2025-05-02 23:36:13,274 - DEBUG - Processing chunk: 3 waves
Processing:  21%|##        | 6/29 [01:02<04:12, 10.96s/it]2025-05-02 23:36:24,858 - DEBUG - Processing chunk: 3 waves
Processing:  24%|##4       | 7/29 [01:14<04:07, 11.24s/it]2025-05-02 23:36:36,659 - DEBUG - Processing chunk: 3 waves
Processing:  28%|##7       | 8/29 [01:26<04:01, 11.50s/it]2025-05-02 23:36:48,736 - DEBUG - Processing chunk: 3 waves
Processing:  31%|###1      | 9/29 [01:38<03:56, 11.82s/it]2025-05-02 23:37:01,253 - DEBUG - Processing chunk: 3 waves
Processing:  34%|###4      | 10/29 [01:52<03:52, 12.24s/it]2025-05-02 23:37:14,433 - DEBUG - Processing chunk: 3 waves
Processing:  38%|###7      | 11/29 [02:02<03:30, 11.72s/it]2025-05-02 23:37:24,955 - DEBUG - Processing chunk: 3 waves
Processing:  41%|####1     | 12/29 [02:12<03:12, 11.32s/it]2025-05-02 23:37:35,357 - DEBUG - Processing chunk: 3 waves
Processing:  45%|####4     | 13/29 [02:25<03:06, 11.64s/it]2025-05-02 23:37:47,758 - DEBUG - Processing chunk: 3 waves
Processing:  48%|####8     | 14/29 [02:40<03:10, 12.72s/it]2025-05-02 23:38:02,953 - DEBUG - Processing chunk: 3 waves
Processing:  52%|#####1    | 15/29 [02:56<03:11, 13.71s/it]2025-05-02 23:38:18,955 - DEBUG - Processing chunk: 3 waves
Processing:  55%|#####5    | 16/29 [03:07<02:47, 12.88s/it]2025-05-02 23:38:29,893 - DEBUG - Processing chunk: 3 waves
Processing:  59%|#####8    | 17/29 [03:17<02:25, 12.12s/it]2025-05-02 23:38:40,262 - DEBUG - Processing chunk: 3 waves
Processing:  62%|######2   | 18/29 [03:28<02:07, 11.61s/it]2025-05-02 23:38:50,661 - DEBUG - Processing chunk: 3 waves
Processing:  66%|######5   | 19/29 [03:38<01:52, 11.26s/it]2025-05-02 23:39:01,107 - DEBUG - Processing chunk: 3 waves
Processing:  69%|######8   | 20/29 [03:51<01:44, 11.59s/it]2025-05-02 23:39:13,474 - DEBUG - Processing chunk: 3 waves
Processing:  72%|#######2  | 21/29 [04:02<01:31, 11.41s/it]2025-05-02 23:39:24,451 - DEBUG - Processing chunk: 3 waves
Processing:  76%|#######5  | 22/29 [04:12<01:18, 11.20s/it]2025-05-02 23:39:35,162 - DEBUG - Processing chunk: 3 waves
Processing:  79%|#######9  | 23/29 [04:23<01:06, 11.09s/it]2025-05-02 23:39:46,015 - DEBUG - Processing chunk: 3 waves
Processing:  83%|########2 | 24/29 [04:34<00:55, 11.07s/it]2025-05-02 23:39:57,044 - DEBUG - Processing chunk: 3 waves
Processing:  86%|########6 | 25/29 [04:45<00:44, 11.15s/it]2025-05-02 23:40:08,377 - DEBUG - Processing chunk: 3 waves
Processing:  90%|########9 | 26/29 [04:57<00:33, 11.20s/it]2025-05-02 23:40:19,696 - DEBUG - Processing chunk: 3 waves
Processing:  93%|#########3| 27/29 [05:08<00:22, 11.27s/it]2025-05-02 23:40:31,104 - DEBUG - Processing chunk: 3 waves
Processing:  97%|#########6| 28/29 [05:20<00:11, 11.32s/it]2025-05-02 23:40:42,533 - DEBUG - Processing chunk: 2 waves
Processing: 100%|##########| 29/29 [05:28<00:00, 10.35s/it]Processing: 100%|##########| 29/29 [05:28<00:00, 11.32s/it]
2025-05-02 23:40:50,696 - DEBUG - Demixing complete
2025-05-02 23:40:51,204 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song4_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song4_no_vocals.wav
\song4_vocals.wav
2025-05-02 23:40:51 - ERROR - Failed to generate stem: 2025-05-02 23:35:21,950 - DEBUG - Logging initialized
2025-05-02 23:35:21,950 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song4.mp3')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR-MDX-NET-Inst_Main.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 41000, 'chunks': 10, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 23:35:21,950 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 23:35:21,950 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4.mp3
2025-05-02 23:35:21,950 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 23:35:21,950 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song4.mp3')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/UVR-MDX-NET-Inst_Main.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 41000, 'chunks': 10, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 23:35:21,950 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\UVR-MDX-NET-Inst_Main.onnx
2025-05-02 23:35:22,077 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4.mp3
[C:\vcpkg\buildtrees\mpg123\src\-66150af195.clean\src\libmpg123\id3.c:process_comment():587] error: No comment text / valid description?
2025-05-02 23:35:22,344 - DEBUG - Audio loaded: shape=(2, 12808404), sample_rate=44100
2025-05-02 23:35:22,344 - DEBUG - Demixing audio: samples=12808404, margin=41000, chunk_size=441000
2025-05-02 23:35:22,386 - DEBUG - Created 29 chunks for demixing
  0%|          | 0/29 [00:00<?, ?it/s]Processing:   0%|          | 0/29 [00:00<?, ?it/s]2025-05-02 23:35:22,394 - DEBUG - Processing chunk: 2 waves
Processing:   3%|3         | 1/29 [00:07<03:30,  7.53s/it]2025-05-02 23:35:29,930 - DEBUG - Processing chunk: 3 waves
Processing:   7%|6         | 2/29 [00:18<04:14,  9.41s/it]2025-05-02 23:35:40,651 - DEBUG - Processing chunk: 3 waves
Processing:  10%|#         | 3/29 [00:28<04:18,  9.93s/it]2025-05-02 23:35:51,205 - DEBUG - Processing chunk: 3 waves
Processing:  14%|#3        | 4/29 [00:39<04:15, 10.23s/it]2025-05-02 23:36:01,888 - DEBUG - Processing chunk: 3 waves
Processing:  17%|#7        | 5/29 [00:50<04:15, 10.64s/it]2025-05-02 23:36:13,274 - DEBUG - Processing chunk: 3 waves
Processing:  21%|##        | 6/29 [01:02<04:12, 10.96s/it]2025-05-02 23:36:24,858 - DEBUG - Processing chunk: 3 waves
Processing:  24%|##4       | 7/29 [01:14<04:07, 11.24s/it]2025-05-02 23:36:36,659 - DEBUG - Processing chunk: 3 waves
Processing:  28%|##7       | 8/29 [01:26<04:01, 11.50s/it]2025-05-02 23:36:48,736 - DEBUG - Processing chunk: 3 waves
Processing:  31%|###1      | 9/29 [01:38<03:56, 11.82s/it]2025-05-02 23:37:01,253 - DEBUG - Processing chunk: 3 waves
Processing:  34%|###4      | 10/29 [01:52<03:52, 12.24s/it]2025-05-02 23:37:14,433 - DEBUG - Processing chunk: 3 waves
Processing:  38%|###7      | 11/29 [02:02<03:30, 11.72s/it]2025-05-02 23:37:24,955 - DEBUG - Processing chunk: 3 waves
Processing:  41%|####1     | 12/29 [02:12<03:12, 11.32s/it]2025-05-02 23:37:35,357 - DEBUG - Processing chunk: 3 waves
Processing:  45%|####4     | 13/29 [02:25<03:06, 11.64s/it]2025-05-02 23:37:47,758 - DEBUG - Processing chunk: 3 waves
Processing:  48%|####8     | 14/29 [02:40<03:10, 12.72s/it]2025-05-02 23:38:02,953 - DEBUG - Processing chunk: 3 waves
Processing:  52%|#####1    | 15/29 [02:56<03:11, 13.71s/it]2025-05-02 23:38:18,955 - DEBUG - Processing chunk: 3 waves
Processing:  55%|#####5    | 16/29 [03:07<02:47, 12.88s/it]2025-05-02 23:38:29,893 - DEBUG - Processing chunk: 3 waves
Processing:  59%|#####8    | 17/29 [03:17<02:25, 12.12s/it]2025-05-02 23:38:40,262 - DEBUG - Processing chunk: 3 waves
Processing:  62%|######2   | 18/29 [03:28<02:07, 11.61s/it]2025-05-02 23:38:50,661 - DEBUG - Processing chunk: 3 waves
Processing:  66%|######5   | 19/29 [03:38<01:52, 11.26s/it]2025-05-02 23:39:01,107 - DEBUG - Processing chunk: 3 waves
Processing:  69%|######8   | 20/29 [03:51<01:44, 11.59s/it]2025-05-02 23:39:13,474 - DEBUG - Processing chunk: 3 waves
Processing:  72%|#######2  | 21/29 [04:02<01:31, 11.41s/it]2025-05-02 23:39:24,451 - DEBUG - Processing chunk: 3 waves
Processing:  76%|#######5  | 22/29 [04:12<01:18, 11.20s/it]2025-05-02 23:39:35,162 - DEBUG - Processing chunk: 3 waves
Processing:  79%|#######9  | 23/29 [04:23<01:06, 11.09s/it]2025-05-02 23:39:46,015 - DEBUG - Processing chunk: 3 waves
Processing:  83%|########2 | 24/29 [04:34<00:55, 11.07s/it]2025-05-02 23:39:57,044 - DEBUG - Processing chunk: 3 waves
Processing:  86%|########6 | 25/29 [04:45<00:44, 11.15s/it]2025-05-02 23:40:08,377 - DEBUG - Processing chunk: 3 waves
Processing:  90%|########9 | 26/29 [04:57<00:33, 11.20s/it]2025-05-02 23:40:19,696 - DEBUG - Processing chunk: 3 waves
Processing:  93%|#########3| 27/29 [05:08<00:22, 11.27s/it]2025-05-02 23:40:31,104 - DEBUG - Processing chunk: 3 waves
Processing:  97%|#########6| 28/29 [05:20<00:11, 11.32s/it]2025-05-02 23:40:42,533 - DEBUG - Processing chunk: 2 waves
Processing: 100%|##########| 29/29 [05:28<00:00, 10.35s/it]Processing: 100%|##########| 29/29 [05:28<00:00, 11.32s/it]
2025-05-02 23:40:50,696 - DEBUG - Demixing complete
2025-05-02 23:40:51,204 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song4_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song4_no_vocals.wav
\song4_no_vocals.wav
2025-05-02 23:40:52 - INFO - Saved successful values to models.ini for model: UVR_MDXNET_Inst_Main (Normal): 10,41000,6144,2048,8
2025-05-02 23:50:10 - INFO - Starting separation for model: kuielab_b_drums, Quality: Normal, Input: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav, Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems, SegmentSize: 30, Overlap: 41000, Denoise: True, NFFT: 6144, DimF: 2048, DimT: 8
2025-05-02 23:50:10 - DEBUG - Original command: cmd /c "cd @EnvPath@ && activate.bat && cd @ScriptDir@ && python @PythonScript@ "@SongPath@" -m "@Path@" -o "@OutputDir@" --chunks @SegmentSize@ --margin @Overlap@ --n_fft @NFFT@ --dim_f @DimF@ --dim_t @DimT@ && deactivate"
2025-05-02 23:50:10 - INFO - Resolved command: cmd /c "cd C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\UVR\uvr_env\Scripts && activate.bat && cd C:\Git\3DAudioStudio\scripts\autoit\1.3 && python separate.py "C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav" -m "C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_drums.onnx" -o "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems" --chunks 30 --margin 41000 --n_fft 6144 --dim_f 2048 --dim_t 8 && deactivate"
2025-05-02 23:50:12 - INFO - Separation output: 2025-05-02 23:50:12,072 - DEBUG - Logging initialized
2025-05-02 23:50:12,072 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song4_no_vocals.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 41000, 'chunks': 30, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 23:50:12,072 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 23:50:12,072 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav
2025-05-02 23:50:12,078 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 23:50:12,078 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song4_no_vocals.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 41000, 'chunks': 30, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 23:50:12,078 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_drums.onnx
2025-05-02 23:50:12,151 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav
2025-05-02 23:50:12,189 - DEBUG - Audio loaded: shape=(2, 12808404), sample_rate=44100
2025-05-02 23:50:12,189 - DEBUG - Demixing audio: samples=12808404, margin=41000, chunk_size=1323000
2025-05-02 23:50:12,221 - DEBUG - Created 10 chunks for demixing
  0%|          | 0/10 [00:00<?, ?it/s]Processing:   0%|          | 0/10 [00:00<?, ?it/s]2025-05-02 23:50:12,246 - DEBUG - Processing chunk: 6 waves
2025-05-02 23:50:12,284 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 256 Expected: 128
 Please fix either the inputs/outputs or the model.
Traceback (most recent call last):
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 258, in <module>
    main()
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 242, in main
    vocals, no_vocals, sampling_rate = predictor.predict(file_path)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 210, in predict
    sources = self.demix(mix.T)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 131, in demix
    sources = self.demix_base(segmented_mix, margin_size=margin)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 165, in demix_base
    -_ort.run(None, {"input": -spek.cpu().numpy()})[0] * 0.5
  File "C:\temp\s2S\installs\UVR\uvr_env\lib\site-packages\onnxruntime\capi\onnxruntime_inference_collection.py", line 220, in run
    return self._sess.run(output_names, input_feed, run_options)
onnxruntime.capi.onnxruntime_pybind11_state.InvalidArgument: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 256 Expected: 128
 Please fix either the inputs/outputs or the model.
Processing:   0%|          | 0/10 [00:00<?, ?it/s]

2025-05-02 23:50:12 - ERROR - Python error occurred: 2025-05-02 23:50:12,072 - DEBUG - Logging initialized
2025-05-02 23:50:12,072 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song4_no_vocals.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 41000, 'chunks': 30, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 23:50:12,072 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 23:50:12,072 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav
2025-05-02 23:50:12,078 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=256, n_fft=6144, hop=1024
2025-05-02 23:50:12,078 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song4_no_vocals.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 41000, 'chunks': 30, 'n_fft': 6144, 'dim_t': 8, 'dim_f': 2048}
2025-05-02 23:50:12,078 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_drums.onnx
2025-05-02 23:50:12,151 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav
2025-05-02 23:50:12,189 - DEBUG - Audio loaded: shape=(2, 12808404), sample_rate=44100
2025-05-02 23:50:12,189 - DEBUG - Demixing audio: samples=12808404, margin=41000, chunk_size=1323000
2025-05-02 23:50:12,221 - DEBUG - Created 10 chunks for demixing
  0%|          | 0/10 [00:00<?, ?it/s]Processing:   0%|          | 0/10 [00:00<?, ?it/s]2025-05-02 23:50:12,246 - DEBUG - Processing chunk: 6 waves
2025-05-02 23:50:12,284 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 256 Expected: 128
 Please fix either the inputs/outputs or the model.
Traceback (most recent call last):
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 258, in <module>
    main()
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 242, in main
    vocals, no_vocals, sampling_rate = predictor.predict(file_path)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 210, in predict
    sources = self.demix(mix.T)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 131, in demix
    sources = self.demix_base(segmented_mix, margin_size=margin)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 165, in demix_base
    -_ort.run(None, {"input": -spek.cpu().numpy()})[0] * 0.5
  File "C:\temp\s2S\installs\UVR\uvr_env\lib\site-packages\onnxruntime\capi\onnxruntime_inference_collection.py", line 220, in run
    return self._sess.run(output_names, input_feed, run_options)
onnxruntime.capi.onnxruntime_pybind11_state.InvalidArgument: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 256 Expected: 128
 Please fix either the inputs/outputs or the model.
Processing:   0%|          | 0/10 [00:00<?, ?it/s]

2025-05-02 23:50:23 - INFO - Starting separation for model: kuielab_b_drums, Quality: Normal, Input: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav, Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems, SegmentSize: 30, Overlap: 41000, Denoise: True, NFFT: 6144, DimF: 2048, DimT: 9
2025-05-02 23:50:23 - DEBUG - Original command: cmd /c "cd @EnvPath@ && activate.bat && cd @ScriptDir@ && python @PythonScript@ "@SongPath@" -m "@Path@" -o "@OutputDir@" --chunks @SegmentSize@ --margin @Overlap@ --n_fft @NFFT@ --dim_f @DimF@ --dim_t @DimT@ && deactivate"
2025-05-02 23:50:23 - INFO - Resolved command: cmd /c "cd C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\UVR\uvr_env\Scripts && activate.bat && cd C:\Git\3DAudioStudio\scripts\autoit\1.3 && python separate.py "C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav" -m "C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_drums.onnx" -o "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems" --chunks 30 --margin 41000 --n_fft 6144 --dim_f 2048 --dim_t 9 && deactivate"
2025-05-02 23:50:26 - INFO - Separation output: 2025-05-02 23:50:25,498 - DEBUG - Logging initialized
2025-05-02 23:50:25,498 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song4_no_vocals.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 41000, 'chunks': 30, 'n_fft': 6144, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 23:50:25,498 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 23:50:25,498 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav
2025-05-02 23:50:25,514 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=512, n_fft=6144, hop=1024
2025-05-02 23:50:25,514 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song4_no_vocals.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 41000, 'chunks': 30, 'n_fft': 6144, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 23:50:25,514 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_drums.onnx
2025-05-02 23:50:25,550 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav
2025-05-02 23:50:25,594 - DEBUG - Audio loaded: shape=(2, 12808404), sample_rate=44100
2025-05-02 23:50:25,594 - DEBUG - Demixing audio: samples=12808404, margin=41000, chunk_size=1323000
2025-05-02 23:50:25,625 - DEBUG - Created 10 chunks for demixing
  0%|          | 0/10 [00:00<?, ?it/s]Processing:   0%|          | 0/10 [00:00<?, ?it/s]2025-05-02 23:50:25,641 - DEBUG - Processing chunk: 3 waves
2025-05-02 23:50:25,673 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 512 Expected: 128
 Please fix either the inputs/outputs or the model.
Traceback (most recent call last):
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 258, in <module>
    main()
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 242, in main
    vocals, no_vocals, sampling_rate = predictor.predict(file_path)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 210, in predict
    sources = self.demix(mix.T)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 131, in demix
    sources = self.demix_base(segmented_mix, margin_size=margin)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 165, in demix_base
    -_ort.run(None, {"input": -spek.cpu().numpy()})[0] * 0.5
  File "C:\temp\s2S\installs\UVR\uvr_env\lib\site-packages\onnxruntime\capi\onnxruntime_inference_collection.py", line 220, in run
    return self._sess.run(output_names, input_feed, run_options)
onnxruntime.capi.onnxruntime_pybind11_state.InvalidArgument: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 512 Expected: 128
 Please fix either the inputs/outputs or the model.
Processing:   0%|          | 0/10 [00:00<?, ?it/s]

2025-05-02 23:50:26 - ERROR - Python error occurred: 2025-05-02 23:50:25,498 - DEBUG - Logging initialized
2025-05-02 23:50:25,498 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song4_no_vocals.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 41000, 'chunks': 30, 'n_fft': 6144, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 23:50:25,498 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 23:50:25,498 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav
2025-05-02 23:50:25,514 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=512, n_fft=6144, hop=1024
2025-05-02 23:50:25,514 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song4_no_vocals.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 41000, 'chunks': 30, 'n_fft': 6144, 'dim_t': 9, 'dim_f': 2048}
2025-05-02 23:50:25,514 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_drums.onnx
2025-05-02 23:50:25,550 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav
2025-05-02 23:50:25,594 - DEBUG - Audio loaded: shape=(2, 12808404), sample_rate=44100
2025-05-02 23:50:25,594 - DEBUG - Demixing audio: samples=12808404, margin=41000, chunk_size=1323000
2025-05-02 23:50:25,625 - DEBUG - Created 10 chunks for demixing
  0%|          | 0/10 [00:00<?, ?it/s]Processing:   0%|          | 0/10 [00:00<?, ?it/s]2025-05-02 23:50:25,641 - DEBUG - Processing chunk: 3 waves
2025-05-02 23:50:25,673 - ERROR - Failed to process C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 512 Expected: 128
 Please fix either the inputs/outputs or the model.
Traceback (most recent call last):
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 258, in <module>
    main()
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 242, in main
    vocals, no_vocals, sampling_rate = predictor.predict(file_path)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 210, in predict
    sources = self.demix(mix.T)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 131, in demix
    sources = self.demix_base(segmented_mix, margin_size=margin)
  File "C:\Git\3DAudioStudio\scripts\autoit\1.3\separate.py", line 165, in demix_base
    -_ort.run(None, {"input": -spek.cpu().numpy()})[0] * 0.5
  File "C:\temp\s2S\installs\UVR\uvr_env\lib\site-packages\onnxruntime\capi\onnxruntime_inference_collection.py", line 220, in run
    return self._sess.run(output_names, input_feed, run_options)
onnxruntime.capi.onnxruntime_pybind11_state.InvalidArgument: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Got invalid dimensions for input: input for the following indices
 index: 3 Got: 512 Expected: 128
 Please fix either the inputs/outputs or the model.
Processing:   0%|          | 0/10 [00:00<?, ?it/s]

2025-05-02 23:50:31 - INFO - Starting separation for model: kuielab_b_drums, Quality: Normal, Input: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav, Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems, SegmentSize: 30, Overlap: 41000, Denoise: True, NFFT: 6144, DimF: 2048, DimT: 7
2025-05-02 23:50:31 - DEBUG - Original command: cmd /c "cd @EnvPath@ && activate.bat && cd @ScriptDir@ && python @PythonScript@ "@SongPath@" -m "@Path@" -o "@OutputDir@" --chunks @SegmentSize@ --margin @Overlap@ --n_fft @NFFT@ --dim_f @DimF@ --dim_t @DimT@ && deactivate"
2025-05-02 23:50:31 - INFO - Resolved command: cmd /c "cd C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\UVR\uvr_env\Scripts && activate.bat && cd C:\Git\3DAudioStudio\scripts\autoit\1.3 && python separate.py "C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav" -m "C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_drums.onnx" -o "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems" --chunks 30 --margin 41000 --n_fft 6144 --dim_f 2048 --dim_t 7 && deactivate"
2025-05-02 23:52:26 - INFO - Separation output: 2025-05-02 23:50:33,383 - DEBUG - Logging initialized
2025-05-02 23:50:33,383 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song4_no_vocals.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 41000, 'chunks': 30, 'n_fft': 6144, 'dim_t': 7, 'dim_f': 2048}
2025-05-02 23:50:33,383 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 23:50:33,383 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav
2025-05-02 23:50:33,383 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=128, n_fft=6144, hop=1024
2025-05-02 23:50:33,383 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song4_no_vocals.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 41000, 'chunks': 30, 'n_fft': 6144, 'dim_t': 7, 'dim_f': 2048}
2025-05-02 23:50:33,383 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_drums.onnx
2025-05-02 23:50:33,445 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav
2025-05-02 23:50:33,483 - DEBUG - Audio loaded: shape=(2, 12808404), sample_rate=44100
2025-05-02 23:50:33,483 - DEBUG - Demixing audio: samples=12808404, margin=41000, chunk_size=1323000
2025-05-02 23:50:33,509 - DEBUG - Created 10 chunks for demixing
  0%|          | 0/10 [00:00<?, ?it/s]Processing:   0%|          | 0/10 [00:00<?, ?it/s]2025-05-02 23:50:33,525 - DEBUG - Processing chunk: 12 waves
Processing:  10%|#         | 1/10 [00:11<01:44, 11.58s/it]2025-05-02 23:50:45,109 - DEBUG - Processing chunk: 12 waves
Processing:  20%|##        | 2/10 [00:22<01:31, 11.44s/it]2025-05-02 23:50:56,491 - DEBUG - Processing chunk: 12 waves
Processing:  30%|###       | 3/10 [00:34<01:20, 11.50s/it]2025-05-02 23:51:08,059 - DEBUG - Processing chunk: 12 waves
Processing:  40%|####      | 4/10 [00:46<01:09, 11.52s/it]2025-05-02 23:51:19,595 - DEBUG - Processing chunk: 12 waves
Processing:  50%|#####     | 5/10 [00:57<00:57, 11.54s/it]2025-05-02 23:51:31,184 - DEBUG - Processing chunk: 12 waves
Processing:  60%|######    | 6/10 [01:08<00:45, 11.46s/it]2025-05-02 23:51:42,492 - DEBUG - Processing chunk: 12 waves
Processing:  70%|#######   | 7/10 [01:20<00:34, 11.40s/it]2025-05-02 23:51:53,742 - DEBUG - Processing chunk: 12 waves
Processing:  80%|########  | 8/10 [01:31<00:22, 11.44s/it]2025-05-02 23:52:05,282 - DEBUG - Processing chunk: 12 waves
Processing:  90%|######### | 9/10 [01:42<00:11, 11.36s/it]2025-05-02 23:52:16,441 - DEBUG - Processing chunk: 8 waves
Processing: 100%|##########| 10/10 [01:50<00:00, 10.21s/it]Processing: 100%|##########| 10/10 [01:50<00:00, 11.06s/it]
2025-05-02 23:52:24,156 - DEBUG - Demixing complete
2025-05-02 23:52:25,091 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song4_no_vocals_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song4_no_vocals_no_vocals.wav

2025-05-02 23:52:26 - ERROR - Failed to generate stem: 2025-05-02 23:50:33,383 - DEBUG - Logging initialized
2025-05-02 23:50:33,383 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song4_no_vocals.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 41000, 'chunks': 30, 'n_fft': 6144, 'dim_t': 7, 'dim_f': 2048}
2025-05-02 23:50:33,383 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 23:50:33,383 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav
2025-05-02 23:50:33,383 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=128, n_fft=6144, hop=1024
2025-05-02 23:50:33,383 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song4_no_vocals.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 41000, 'chunks': 30, 'n_fft': 6144, 'dim_t': 7, 'dim_f': 2048}
2025-05-02 23:50:33,383 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_drums.onnx
2025-05-02 23:50:33,445 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav
2025-05-02 23:50:33,483 - DEBUG - Audio loaded: shape=(2, 12808404), sample_rate=44100
2025-05-02 23:50:33,483 - DEBUG - Demixing audio: samples=12808404, margin=41000, chunk_size=1323000
2025-05-02 23:50:33,509 - DEBUG - Created 10 chunks for demixing
  0%|          | 0/10 [00:00<?, ?it/s]Processing:   0%|          | 0/10 [00:00<?, ?it/s]2025-05-02 23:50:33,525 - DEBUG - Processing chunk: 12 waves
Processing:  10%|#         | 1/10 [00:11<01:44, 11.58s/it]2025-05-02 23:50:45,109 - DEBUG - Processing chunk: 12 waves
Processing:  20%|##        | 2/10 [00:22<01:31, 11.44s/it]2025-05-02 23:50:56,491 - DEBUG - Processing chunk: 12 waves
Processing:  30%|###       | 3/10 [00:34<01:20, 11.50s/it]2025-05-02 23:51:08,059 - DEBUG - Processing chunk: 12 waves
Processing:  40%|####      | 4/10 [00:46<01:09, 11.52s/it]2025-05-02 23:51:19,595 - DEBUG - Processing chunk: 12 waves
Processing:  50%|#####     | 5/10 [00:57<00:57, 11.54s/it]2025-05-02 23:51:31,184 - DEBUG - Processing chunk: 12 waves
Processing:  60%|######    | 6/10 [01:08<00:45, 11.46s/it]2025-05-02 23:51:42,492 - DEBUG - Processing chunk: 12 waves
Processing:  70%|#######   | 7/10 [01:20<00:34, 11.40s/it]2025-05-02 23:51:53,742 - DEBUG - Processing chunk: 12 waves
Processing:  80%|########  | 8/10 [01:31<00:22, 11.44s/it]2025-05-02 23:52:05,282 - DEBUG - Processing chunk: 12 waves
Processing:  90%|######### | 9/10 [01:42<00:11, 11.36s/it]2025-05-02 23:52:16,441 - DEBUG - Processing chunk: 8 waves
Processing: 100%|##########| 10/10 [01:50<00:00, 10.21s/it]Processing: 100%|##########| 10/10 [01:50<00:00, 11.06s/it]
2025-05-02 23:52:24,156 - DEBUG - Demixing complete
2025-05-02 23:52:25,091 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song4_no_vocals_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song4_no_vocals_no_vocals.wav
\song4_no_vocals_drums.wav
2025-05-02 23:52:26 - ERROR - Failed to generate stem: 2025-05-02 23:50:33,383 - DEBUG - Logging initialized
2025-05-02 23:50:33,383 - INFO - Parsed arguments: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song4_no_vocals.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 41000, 'chunks': 30, 'n_fft': 6144, 'dim_t': 7, 'dim_f': 2048}
2025-05-02 23:50:33,383 - DEBUG - Output directory created: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems
2025-05-02 23:50:33,383 - INFO - Processing file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav
2025-05-02 23:50:33,383 - DEBUG - ConvTDFNet initialized: dim_f=2048, dim_t=128, n_fft=6144, hop=1024
2025-05-02 23:50:33,383 - DEBUG - Predictor initializing with args: {'files': [WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/songs/song4_no_vocals.wav')], 'output': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/stems'), 'model_path': WindowsPath('C:/Git/3DAudioStudio/scripts/autoit/1.3/models/MDXNet/kuielab_b_drums.onnx'), 'stems': 'vocals,no_vocals', 'denoise': True, 'margin': 41000, 'chunks': 30, 'n_fft': 6144, 'dim_t': 7, 'dim_f': 2048}
2025-05-02 23:50:33,383 - INFO - CUDA not available, using CPUExecutionProvider for model: C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_drums.onnx
2025-05-02 23:50:33,445 - INFO - Loading audio file: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song4_no_vocals.wav
2025-05-02 23:50:33,483 - DEBUG - Audio loaded: shape=(2, 12808404), sample_rate=44100
2025-05-02 23:50:33,483 - DEBUG - Demixing audio: samples=12808404, margin=41000, chunk_size=1323000
2025-05-02 23:50:33,509 - DEBUG - Created 10 chunks for demixing
  0%|          | 0/10 [00:00<?, ?it/s]Processing:   0%|          | 0/10 [00:00<?, ?it/s]2025-05-02 23:50:33,525 - DEBUG - Processing chunk: 12 waves
Processing:  10%|#         | 1/10 [00:11<01:44, 11.58s/it]2025-05-02 23:50:45,109 - DEBUG - Processing chunk: 12 waves
Processing:  20%|##        | 2/10 [00:22<01:31, 11.44s/it]2025-05-02 23:50:56,491 - DEBUG - Processing chunk: 12 waves
Processing:  30%|###       | 3/10 [00:34<01:20, 11.50s/it]2025-05-02 23:51:08,059 - DEBUG - Processing chunk: 12 waves
Processing:  40%|####      | 4/10 [00:46<01:09, 11.52s/it]2025-05-02 23:51:19,595 - DEBUG - Processing chunk: 12 waves
Processing:  50%|#####     | 5/10 [00:57<00:57, 11.54s/it]2025-05-02 23:51:31,184 - DEBUG - Processing chunk: 12 waves
Processing:  60%|######    | 6/10 [01:08<00:45, 11.46s/it]2025-05-02 23:51:42,492 - DEBUG - Processing chunk: 12 waves
Processing:  70%|#######   | 7/10 [01:20<00:34, 11.40s/it]2025-05-02 23:51:53,742 - DEBUG - Processing chunk: 12 waves
Processing:  80%|########  | 8/10 [01:31<00:22, 11.44s/it]2025-05-02 23:52:05,282 - DEBUG - Processing chunk: 12 waves
Processing:  90%|######### | 9/10 [01:42<00:11, 11.36s/it]2025-05-02 23:52:16,441 - DEBUG - Processing chunk: 8 waves
Processing: 100%|##########| 10/10 [01:50<00:00, 10.21s/it]Processing: 100%|##########| 10/10 [01:50<00:00, 11.06s/it]
2025-05-02 23:52:24,156 - DEBUG - Demixing complete
2025-05-02 23:52:25,091 - INFO - Generated outputs: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song4_no_vocals_vocals.wav, C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song4_no_vocals_no_vocals.wav
\song4_no_vocals_other.wav
2025-05-02 23:52:26 - INFO - Saved successful values to models.ini for model: kuielab_b_drums (Normal): 30,41000,6144,2048,7
2025-05-03 00:30:31 - INFO - Starting separation for model: kuielab_b_bass, Quality: Normal, Input: C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac, Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems, SegmentSize: 500, Overlap: 8, Denoise: True, NFFT: 6144, DimF: 2048, DimT: 8
2025-05-03 00:30:31 - DEBUG - Original command: cmd /c "cd @EnvPath@ && activate.bat && cd @ScriptDir@ && python @PythonScript@ "@SongPath@" -m "@Path@" -o "@OutputDir@" --chunks @SegmentSize@ --margin @Overlap@ --n_fft @NFFT@ --dim_f @DimF@ --dim_t @DimT@ && deactivate"
2025-05-03 00:30:31 - INFO - Resolved command: cmd /c "cd C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\UVR\uvr_env\Scripts && activate.bat && cd C:\Git\3DAudioStudio\scripts\autoit\1.3 && python separate.py "C:\Git\3DAudioStudio\scripts\autoit\1.3\songs\song0.flac" -m "C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_b_bass.onnx" -o "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems" --chunks 500 --margin 8 --n_fft 6144 --dim_f 2048 --dim_t 8 && deactivate"
2025-05-03 08:48:59 - INFO - Starting separation for model: kuielab_a_bass, Quality: Normal, Input: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song4_no_vocals_vocals.wav, Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems, SegmentSize: 50, Overlap: 88200, Denoise: True, NFFT: 6144, DimF: 2048, DimT: 8
2025-05-03 08:48:59 - DEBUG - Original command: cmd /c "cd @EnvPath@ &&i activate.bat && cd @ScriptDir@ && python @PythonScript@ "@SongPath@" -m "@Path@" -o "@OutputDir@" --chunks @SegmentSize@ --margin @Overlap@ --n_fft @NFFT@ --dim_f @DimF@ --dim_t @DimT@ && deactivate"
2025-05-03 08:48:59 - INFO - Resolved command: cmd /c "cd C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\UVR\uvr_env\Scripts &&i activate.bat && cd C:\Git\3DAudioStudio\scripts\autoit\1.3 && python separate.py "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song4_no_vocals_vocals.wav" -m "C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_a_bass.onnx" -o "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems" --chunks 50 --margin 88200 --n_fft 6144 --dim_f 2048 --dim_t 8 && deactivate"
2025-05-03 08:48:59 - INFO - Separation output: 'i' is not recognized as an internal or external command,
operable program or batch file.

2025-05-03 08:48:59 - ERROR - Failed to generate stem: 'i' is not recognized as an internal or external command,
operable program or batch file.
\song4_no_vocals_vocals_bass.wav
2025-05-03 08:48:59 - ERROR - Failed to generate stem: 'i' is not recognized as an internal or external command,
operable program or batch file.
\song4_no_vocals_vocals_other.wav
2025-05-03 08:48:59 - INFO - Saved successful values to models.ini for model: kuielab_a_bass (Normal): 50,88200,6144,2048,8
2025-05-03 08:49:10 - INFO - Starting separation for model: kuielab_a_bass, Quality: Normal, Input: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song4_no_vocals_vocals.wav, Output: C:\Git\3DAudioStudio\scripts\autoit\1.3\stems, SegmentSize: 50, Overlap: 88200, Denoise: True, NFFT: 6144, DimF: 2048, DimT: 9
2025-05-03 08:49:10 - DEBUG - Original command: cmd /c "cd @EnvPath@ &&i activate.bat && cd @ScriptDir@ && python @PythonScript@ "@SongPath@" -m "@Path@" -o "@OutputDir@" --chunks @SegmentSize@ --margin @Overlap@ --n_fft @NFFT@ --dim_f @DimF@ --dim_t @DimT@ && deactivate"
2025-05-03 08:49:10 - INFO - Resolved command: cmd /c "cd C:\Git\3DAudioStudio\scripts\autoit\1.3\installs\UVR\uvr_env\Scripts &&i activate.bat && cd C:\Git\3DAudioStudio\scripts\autoit\1.3 && python separate.py "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems\song4_no_vocals_vocals.wav" -m "C:\Git\3DAudioStudio\scripts\autoit\1.3\models\MDXNet\kuielab_a_bass.onnx" -o "C:\Git\3DAudioStudio\scripts\autoit\1.3\stems" --chunks 50 --margin 88200 --n_fft 6144 --dim_f 2048 --dim_t 9 && deactivate"
2025-05-03 08:49:10 - INFO - Separation output: 'i' is not recognized as an internal or external command,
operable program or batch file.

2025-05-03 08:49:10 - ERROR - Failed to generate stem: 'i' is not recognized as an internal or external command,
operable program or batch file.
\song4_no_vocals_vocals_bass.wav
2025-05-03 08:49:10 - ERROR - Failed to generate stem: 'i' is not recognized as an internal or external command,
operable program or batch file.
\song4_no_vocals_vocals_other.wav
2025-05-03 08:49:10 - INFO - Saved successful values to models.ini for model: kuielab_a_bass (Normal): 50,88200,6144,2048,9
